---

title: Secure file transfer
abstract: The present disclosure describes techniques for storing encrypted files in a secure file repository and transferring those encrypted files to one or more recipients. A user selects a file to upload to a secure file repository. A secure collaboration app on the user's device generates a first encryption key that is used to encrypt the file. The encrypted file is then uploaded to the secure file repository, which provides the secure collaboration app with a random file name and a location of the encrypted file. The secure collaboration app updates locally stored metadata of the first encrypted file. To securely transfer the file, the user generates a second encryption key, encrypts the metadata with the second encryption key, and transmits the encrypted metadata to one or more receivers. The one or more receivers decrypt the encrypted metadata and use the decrypted metadata to retrieve the file and decrypt it.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602477&OS=09602477&RS=09602477
owner: Wickr Inc.
number: 09602477
owner_city: San Francisco
owner_country: US
publication_date: 20160622
---
This application claims priority to U.S. Provisional Application No. 62 322 664 entitled Secure File Transfer filed Apr. 14 2016 the entirety of which is herein incorporated by reference.

As mobile devices become more powerful file sharing e.g. between various users of various devices continues to increase. As a result files wind up with unintended receivers. This could be due to a legitimate receiver forwarding the file or the sender inadvertently sharing the file. File sharing issues are especially problematic for companies as employees become increasingly mobile and use their own devices to transfer and receive work related files.

The present disclosure describes a system and method for transmitting a file securely. In particular the systems and methods disclosed herein describe techniques for encrypting a file storing the file with a secure file repository sharing the file with one or more receivers and transmitting the key to the one or more receivers via a separate communication.

The present disclosure can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a non transitory computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. These implementations or any other form that the present disclosure may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the present disclosure. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the present disclosure is provided below along with accompanying figures that illustrate the principles of the present disclosure. The present disclosure is described in connection with such embodiments but the present disclosure is not limited to any embodiment. The scope of the present disclosure is limited only by the claims and the present disclosure encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the present disclosure. These details are provided for the purpose of example and the present disclosure may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the present disclosure has not been described in detail so that the present disclosure is not unnecessarily obscured.

According to the embodiments described herein secure communications are exchanged using secure communication containers which encapsulate a sender s communication. The secure communication container also allows information such as encryption information hardware binding information message security controls and decryption information for multiple receivers as applicable to securely travel with the message. The secure communication container also provides cross platform support so that users may communicate regardless of their operating systems e.g. Linux iOS and Windows smart phone platforms e.g. iPhone Android Windows Blackberry etc. and device types e.g. mobile smart phones tablets laptops desktops etc. . Using the techniques described herein only intended accounts on intended devices are able to decrypt the communications. Thus for example the security platform is unable to decrypt communications. As will further be described in more detail below using the techniques described herein communicants can maintain a forward secret secure messaging channel whether communicating synchronously e.g. where all communicants are online or otherwise able to communicate with platform or asynchronously e.g. where at least one communicant is offline or otherwise not in communication with platform .

As shown in security platform may be implemented on server . Server may include a processor memory user directory and the security platform . In this regard server may be a stand alone server a corporate server or a server located in a server farm or cloud computing environment. In some embodiments the server may be a cloud service provider running a virtual machine configured to provide security platform to an enterprise in the context of Software as a Service SaaS .

Processor may be any processor capable of interacting with memory user directory and security platform . In this regard processor may include a processor multiprocessors a multicore processor or any combination thereof. Alternatively processor may be a dedicated controller such as an Application Specific Integrated Circuit ASIC or Field Programmable Gate Array FPGA . As will be described in more detail below processor may perform a plurality of tasks on behalf of security platform . Furthermore whenever platform is described as performing a task either a single component or a subset of components or all components of platform or enterprise server may cooperate to perform the task. For example platform may generate and assign a random file name to files uploaded to the secure file repository.

Memory stores information accessible by processor including instructions and data that may be executed or otherwise used by the processor . Memory may be any type of media capable of storing information accessible by the processor including a non transitory computer readable medium or any other suitable medium that stores data that may be read with the aid of an electronic device such as a hard drive solid state drive memory card flash drive ROM RAM DVD or other optical disks as well as other write capable and read only memories. Memory may include short term or temporary storage as well as long term or persistent storage. According to some embodiments memory may include a storage area network SAN accessible by the security platform .

User directory may be any database or table capable of providing directory services. For example user directory may include a corporate directory that includes employees first and last names usernames email addresses phone numbers department information etc. Alternatively user directory may be a database or table to maintain user information for users of security platform . In this regard user directory may be encrypted. In some embodiments user directory may serve as a secure directory that includes a table of hashed usernames a table of appIDs and a table of deviceIDs for a secure messaging app. Accordingly user directory may be used to share information about users systems networks services and applications. According to some embodiments the user directory may include a Lightweight Directory Access Protocol LDAP .

Although illustrates processor memory user directory and security platform as being located on server processor and memory may comprise multiple processors and memories that may or may not be stored within the same physical housing. For example memory may be a hard drive or other storage media located in a storage array of a data center. Accordingly references to a processor a computer or a memory will be understood to include references to a collection of processors or computers or memories that may or may not operate in parallel. Further the user directory may be located in a separate physical housing from processor and memory . Moreover security platform may be distributed across multiple servers.

Security platform may be configured to facilitate the exchange of communications for users of a secure collaboration app. As used herein communications and messages may take a variety of forms including text messages chat room messages file sharing file collaboration control messages commands e mails documents audiovisual files Short Message Service messages SMSes voice calls i.e. VOIP video calls and video conferences. Additionally the content of the messages and or communications may pertain to electronic transactions such as credit card security password protection directories storage drive protection video on demand security online gaming gambling electronic distribution of music videos documents online learning systems databases cloud storage and cloud environments bank transactions voting processes military communications security of medical records communication between medically implanted devices and doctors etc. The exchange of messages and or communications is explained in further detail below.

Security platform may provide encrypted communications that easily integrate into and secure existing systems while also providing compliant and secure communications. In this regard security platform may integrate with existing identity systems such as user directory . Further security platform may include built in support for enterprise data retention and support systems.

Security platform may also include database . Database may be a relational database that stores information in a variety of tables. In this regard database may include a record for each user of platform to allow users to find other users and communicate with other users. Accordingly database may include a table of hashed usernames a table of public keys and reference values a table of appIDs and a table of deviceIDs . Each user record may include a hashed username in table a pool of ECDH public components and associated reference values in table app ID s in table and deviceID s in table . Additionally each user record may store privacy mode and privacy list entries to control with whom the user may communicate. Additionally database may include a table of communications . That is the security platform may store communications for users for a predetermined time in table . For example when a message is received the security platform may store the message in the table of communications and provide an alert such as a push notification to the receiver. Accordingly a receiver may access the security platform to obtain his or her communications stored in table . In various embodiments table may store communications for 30 days however this may be adjusted as needed based on industry standards and or to comply with regulatory schemes.

While a database is shown in other techniques can be used to store the information used by platform to facilitate exchange of communications. For example the table of communications may be stored in a separate storage such as memory instead of being stored within database . Alternatively the information contained in the database may be divided between database and user directory . In this regard database and user directory may interface to exchange information. Further additional information can be securely stored on platform whether in database or another appropriate location such as user verification information and user verification settings.

Security platform may include one or more interface s for communicating with client devices and . As one example platform may provide an application programming interface API configured to communicate with apps installed on client devices. Further platform may also include APIs for interacting with the secure file repository . Additionally platform may provide other types of interfaces such as a web interface or stand alone software programs for desktops and laptops running on various Operating Systems OSes . The web interface may allow users of client devices to exchange communications securely whether with one another or other users without the need for a separately installed collaboration application. The standalone software program may allow users to exchange secure communications via software that is downloaded by each user. According to some embodiments platform may make available a master clock time available via the one or more interface s . The master clock time may be used by client apps to enforce secure time to live TTL values of communications. The TTL values can be used to enforce e.g. on behalf of a sender time constraints on communication access e.g. by a receiver .

Users of client devices such as client devices may communicate securely with one another using the techniques described herein. For example client devices may make use of the security platform and the techniques described herein via a secure collaboration app not shown . As shown in client devices may be mobile devices such as a laptop smart phone or tablet or computing devices such as desktop computers or servers. As noted above the secure collaboration app described herein allows cross platform communications thereby allowing users of various devices to communicate seamlessly. Further each user may have different instances of the collaboration app across multiple devices. That is the user of device may be able to receive communications on both device as well as on any other devices that the user may have that include a copy of the secure collaboration app such as a laptop. In some embodiments client devices may be the users personal devices i.e. a bring your own device BYOD scenario . Alternatively client devices may include other types of devices such as game consoles camera video recorders video players e.g. incorporating DVD Blu ray Red Laser Optical and or streaming technologies smart TVs and other network connected appliances as applicable.

Communications between users of client devices may be exchanged via network . Network may include various configurations and use various protocols including the Internet World Wide Web intranets virtual private networks local Ethernet networks private networks using communication protocols proprietary to one or more companies cellular and wireless networks e.g. WiFi instant messaging HTTP and SMTP and various combinations of the foregoing.

Additionally client devices may also access the secure file repository via network . In various embodiments the secure file repository includes a file management system that is hosted and maintained by the security platform . In alternative embodiments the secure file repository may be a third party file management system such as Dropbox Box Google Drive etc. According to the alternative embodiments the secure collaboration apps located on client devices may include interfaces such as APIs to access the secure file repository .

The secure file repository includes a processor and a memory which are similar to the processor and memory previously discussed. Additionally memory may support a file management system not shown . In this regard users may upload content such as files documents spreadsheets images animated gifs videos etc. to the secure file repository using the secure collaboration apps located on their client devices. In this regard the secure collaboration app allows clients to encrypt the files before uploading them to the secure file repository. In this regard clients may use the secure file repository to store information in a secure manner e.g. encrypted for later retrieval. Alternatively clients may use the secure file repository to transfer information to other users of the secure collaboration app.

Processor may be any processor capable of interacting with the components of client device . For example processor may include a processor multiprocessors multicore processor a dedicated controller such as an ARM processor an ASIC or an FPGA or any combination thereof Memory may store information accessible by processor including instructions and data that may be executed or otherwise used by the processor and or crypto accelerator . For example memory may store instructions such as app . In various embodiments app may be a secure collaboration app that provides users with the ability to participate in voice and video calls share encrypted content and exchange encrypted communications. Encrypted communications may include direct communications e.g. one to one communications between a sender and receiver group chats or secure chat room communications. Data stored by memory may include database . Database may be encrypted via an encryption algorithm such as Advanced Encryption Standard AES and a 256 bit key referred to hereinafter as a local storage key. In some embodiments database may be used to store information related to secure collaboration app . For example database may index information related to the secure collaboration app such as key information user information friend information and communications. In this regard communications transmitted and received by the secure collaboration app including a message identifier a hash of the sender s username a hash of the sender s appID a hash of the receiver s username a hash of the receiver s appID the message encryption key and a timestamp of each communication may be stored in database . Accordingly memory may be any type of media capable of storing the information above including a non transitory computer readable medium or any other suitable medium that stores data that may be read with the aid of an electronic device such as a hard drive solid state drive memory card flash drive ROM RAM DVD or other optical disks as well as other write capable and read only memories. Further memory may include short term or temporary storage as well as long term or persistent storage.

Display may be any electronic device capable of visually presenting information. In mobile devices such as smart phones and tablets display may be a touchscreen display. In this regard display may be integrated with I O unit to detect user inputs as well as output data. In computing devices display may be an output such as a VGA DVI or HDMI output configured to connect to a monitor. I O unit may be capable of receiving input from a user. As noted above the I O unit may work with touchscreen displays to receive input from a user. Alternatively the I O unit may be an interface capable of interacting with input and output devices such as keyboards mice monitors printers etc. Additionally the I O unit may include at least one accelerometer a Global Positioning Satellite GPS system a magnetometer a proximity sensor an ambient light sensor a moisture sensor a gyroscope etc. to determine the orientation of the device as well as environmental factors.

Crypto accelerator may be dedicated hardware software or any combination thereof that is capable of performing cryptographic operations such as key generation random number generation encryption decryption signature generation signature verification etc. In various embodiments crypto accelerator is a dedicated processor configured to perform cryptographic operations on behalf of processor . In this regard app may make use of crypto accelerator to provide the secure communication functions described in greater detail below.

Network interface may be dedicated hardware software or any combination thereof that is capable of connecting client device to network . In this regard network interface may include various configurations and use various communication protocols including Ethernet TCP IP ATM cellular and wireless communication protocols e.g. 802.11 LTE instant messaging HTTP and SMTP and various combinations of the foregoing.

Turning to an example of a secure file shared with a communicant is shown. Specifically image appears in conversation field . Image may be subject to the same constraints as other communications. For example if there were a TTL set for communications the image would be removed from the conversation field upon expiration of the TTL. Furthermore additional constraints may be put on shared content. For instance recipients may not be able to screen shot forward download or otherwise share the received file.

As noted above the secure collaboration app allows clients to securely transfer files with other clients. illustrates a process for securely transferring files. Process begins in block where the secure collaboration app obtains a first file to share with one or more receivers. The first file may be obtained locally from the client s device and include documents spreadsheets presentations images animated gifs videos etc. Alternatively obtaining a first file may include activating the client device s camera and capturing a new image or video. In other embodiments obtaining a first file may include activating a microphone and recording a voice recording for transmission to the one or more receivers. In still further embodiments obtaining the first file may include accessing a secure file repository using an API provided via the secure collaboration app to select a stored file.

After the first file is obtained the secure collaboration app generates a first encryption key in block . In various embodiments the first encryption key is a 256 bit key generated by the secure collaboration app by applying multiple rounds of a hash function e.g. SHA256 SHA384 SHA521 to a first set of pseudorandom bytes derived from a sending client s device. The first set of pseudorandom bytes may be derived from ephemeral environmental noise obtained from device drivers and other kernel operations. For example data from the various sensors e.g. the at least one accelerometer Global Positioning Satellite GPS system magnetometer proximity sensor ambient light sensor moisture sensor and gyroscope may be used as the first set of pseudorandom bytes.

In block the secure collaboration app generates a random file name for the first file. In various embodiments the random file name is a 128 bit universally unique identifier that is generated in accordance with RFC 4122 A Universally Unique Identifier UUID URN Namespace the entirety of which is herein incorporated by reference. Next in block the secure collaboration app encrypts the first file using the first encryption key. Preferably the secure collaboration app on the sending client s device relies on the crypto processor to encrypt the first file using a symmetric encryption algorithm such as Advanced Encryption Standard AES Data Encryption Standard DES or Triple DES 3DES . Once the first file is encrypted the secure collaboration app assigns the random file name to the first encrypted file in block .

In block the secure collaboration app uploads the first encrypted file to the secure file repository. In various embodiments the secure file repository is part of the security platform . In alternative embodiments the secure file repository may be operated by a third party such as Dropbox Box or Google Drive. In block the sending client s secure collaboration app receives a location of the first encrypted file from the secure file repository.

In block the sending client s secure collaboration app updates metadata associated with the first encrypted file. Specifically the secure collaboration app will update the name of the file as well as the location of the first encrypted file in the secure file repository. Further the secure collaboration app will add the first encryption key to the metadata for example as a property of the file. In this regard the sending client s secure collaboration app maintains a record of the first encrypted file. This record may be stored in database in the sending client device s memory . In embodiments where the client device is merely storing the first encrypted file with a secure file repository the process ends here. However if the client device is sharing the first encrypted file with one or more receivers process proceeds to block where the sending client s secure collaboration app generates a second encryption key. Similar to the first encryption key the second encryption key is a 256 bit key derived by applying multiple rounds of a hash function to a second set of pseudorandom bytes derived from the sending client s device.

In block the sender s secure collaboration app encrypts the first encrypted file s metadata including the first encryption key using the second encryption key. In some embodiments the first encrypted file s metadata is encrypted using a symmetric encryption algorithm. The encrypted metadata is then transmitted to one or more receivers in block .

Turning to a detailed process for transmitting encrypted communications including the encrypted metadata to one or more receivers is illustrated. The method begins in block with the sending client s secure collaboration app obtaining the one or more receivers public information from the security platform. In this regard each receiver s public information may include at least one of the receiver s app ID user level signing public key a signed app level signing public key a signed ephemeral ECDH public component an identifier of the ephemeral ECDH public component and the receiver s device key. In various embodiments the security platform randomly selects one of the signed ephemeral ECDH public components from a pool of public components that the receiver has previously uploaded. In order to prevent the selected public component from being used for a subsequent communication the security platform will delete the selected ephemeral ECDH public component after providing it to the sending client s device. If a receiver has multiple instantiations of the secure collaboration app installed on different devices the sender s secure collaboration app will receive a unique signed app level signing public key signed ephemeral ECDH public component identifier of the ephemeral ECDH public component and device key for each instance of app in block . The multiple instance information may be provided in an arrayed response by the security platform.

In block the sender s secure collaboration app authenticates the public information received from the security platform. In particular the user level signing public key received from the security platform is used to verify a signature attached to the app level signing public key. If the receiver has multiple instances of the app the sender s secure collaboration app will authenticate the app level public key for each of the receiver s instantiations of the secure collaboration apps. When the signature attached to the app level public key is successfully validated the sender s secure collaboration app uses the received app level signing public key to validate the signatures appended to the received ephemeral ECDH public component.

After authenticating the one or more receivers public information the sender composes his or her communication to the one or more receivers in block . As noted above the communication may be a text message chat room message file sharing file collaboration control message command e mail document audiovisual file Short Message Service message SMSes voice call i.e. VOIP video call and video conference. Continuing the example described above with respect to the message providing the metadata to the one or more receivers is a control message that notifies the one or more receivers secure collaboration apps that the sender is sharing a file with the one or more receivers. The payload of the control message will include the metadata of the first encrypted file.

While the sender s secure collaboration app is composing the communication to the one or more receivers the sender s secure collaboration app generates the second encryption key in block . As noted above the sending client s secure collaboration app may use the crypto accelerator to generate the second encryption key by applying multiple rounds of a hash function e.g. SHA256 SHA384 SHA521 to a second set of pseudorandom bytes. Once the communication is composed and the second encryption key is generated the sender s secure collaboration app will encrypt the communication in block . The secure collaboration app encrypts the communication using a symmetric encryption algorithm. Continuing the example above the sender s secure collaboration app encrypts the metadata via AES using the second encryption key.

In block the sending client s secure collaboration app generates a pair of ephemeral ECDH components. The pair of ephemeral ECDH components is generated using ECC with a P 521 curve. In block the sending client s secure collaboration app derives a key encrypting key using the receiver s ephemeral ECDH public component and the ephemeral ECDH private component generated by the sending client s secure collaboration app. In various embodiments the key encrypting key is a 256 bit key derived using ECDH.

In block the second encryption key is encrypted using the key encrypting key. In various embodiments the second encryption key is encrypted by the crypto accelerator using AES and the key encrypting key. In block the sending client s secure collaboration app encrypts the second encryption key again using the receiver s device key obtained from the security platform with the receiver s public information. Encrypting the second encryption key with an ephemeral component generated by the receiver s app and the device key provides a twice encrypted second encryption key that effectively binds the message to the receiver s secure collaboration app and device.

In block the sending client s secure collaboration app determines whether the receiver has multiple instantiations of the secure collaboration app installed on a plurality of devices. If so the sender s app repeats blocks and for each instance of the receiver s app. In this regard each instance will receive a twice encrypted second encryption key that is unique to that instantiation of the secure collaboration app. Accordingly each instance will only be able to decrypt the twice encrypted second encryption key that has been encrypted with the unique device key and ephemeral public component associated with that device.

When twice encrypted second encryption keys have been generated for each of the receiver s instantiations of the secure collaboration app the sending client s secure collaboration app composes a secure communication container in block . The secure communication container includes a payload and a header. The payload comprises the encrypted communication the header of the secure communication container includes destination entries for each of one or more receivers instantiations of the secure collaboration app. Each destination entry includes at least one of a twice encrypted second encryption key an identifier for the ephemeral ECDH component used to generate the key encrypting key and the sender s public ECDH component for the key encrypting key. Following the example above the payload of the secure communication container will contain the first encrypted file s encrypted metadata.

Once the secure communication container is assembled the sending client s secure collaboration app will transmit the secure communication container to the one or more receivers in block . In various embodiments the sending client s secure collaboration app transmits the secure communication container to the security platform. Accordingly the security platform will notify each of the one or more receivers that they have a new communication waiting for them. Alternatively the sender and receiver may communicate in a peer to peer manner. According to these embodiments the sending client s secure collaboration app transmits the secure communication container directly to each of the one or more receivers in block .

Turning to a process illustrating how the secure file repository handles encrypted files is shown. The process begins in block with the secure file repository receiving the first encrypted file from the sending client s device. According to various embodiments the first encrypted file is received over a secure channel such as a channel secured by either the Secure Socket Layer SSL or Transport Layer Security TLS protocols. In block the secure file repository provides the uploading client with a location of the first encrypted file in the secure file repository. The location information allows the uploading client to recover the first encrypted file. Additionally the location information can be shared with other client devices so that they too can access the first encrypted file. In block the secure file repository receives one or more requests for the first encrypted file from one or more receiving client devices. Typically the requests received from the one or more receiving clients will include at least the random file name and the location of the first encrypted file. In response to receiving the request from one or more receiving clients the secure file repository transmits the first encrypted file to the one or more receiving client devices in block . In various embodiments the secure file repository transmits the first encrypted file via a secure channel to the one or more receiving client devices.

Prior to retrieving the first encrypted file from the secure file repository the one or more receiving client devices must receive notification that a sending client is sharing a file with them. illustrates an exemplary process for receiving notification that a sender is securely transferring a file. In block the one or more receiving client devices receive a secure communication container. The secure communication container may contain a communication or a control message. In examples where the secure communication container includes a communication the receiving client device may receive an alert such as a push notification which prompts the receiving client device s secure collaboration app to connect to the security platform and retrieve the sender s secure communication container. In examples where the secure communication container includes a control message the secure communication container may be pushed directly to the receiving client s device which prompts the receiving client device s secure collaboration app to decrypt the received control message using the steps described below and execute the command or instruction contained in the payload of the secure communication container.

As noted above the header of the secure communication container includes a destination entry that includes at least a twice encrypted second encryption key. Accordingly in block the receiving client device s secure collaboration app decrypts the twice encrypted second encryption key using the device key associated with the receiving client device. Next in block the receiving client s secure collaboration app uses the ECDH component identifier received in the secure communication container to retrieve the ephemeral ECDH private component that corresponds to the public component the sending client device used to generate the key encrypting key. In block the receiving client s secure collaboration app derives the key encrypting key using the retrieved ephemeral private component and the sender s ephemeral public component that was transmitted in the secure communication container. After deriving the key encrypting key the receiving client device s secure collaboration app decrypts the encrypted second encryption key in block to obtain the second encryption key. In block the second encryption key is used to decrypt the payload of the secure communication container. In various embodiments the payload is decrypted via a symmetric encryption decryption scheme such as AES DES or 3DES. In examples where the payload contains a communication such as a message the decrypted communication may be provided to the receiver in block . In examples where the payload contains a control message the receiving client s secure collaboration app may execute the command or instruction contained in the control message. In this regard the secure collaboration app may display an indication regarding the command executed. For example if the control message contains information about retrieving a file an icon may be displayed to the user prompting them to download the file. Alternatively the file may be retrieved by the secure collaboration app automatically and provide a notification to the user that a file is being shared by the sender.

After decrypting the payload of the first encrypted communication and retrieving the first encrypted file s metadata the receiving client s secure collaboration app retrieves the first encrypted file from the secure file repository in block . Specifically the receiving client device s secure collaboration app uses the random file name and the location information contained in the metadata to obtain the first encrypted file from the secure file repository. In various embodiments the first encrypted file is transferred from the secure file repository to the receiving client device via a secure channel. After receiving the first encrypted file from the secure file repository the receiving client s secure collaboration app decrypts the first encrypted file using the first encryption key contained in the decrypted metadata. In block the decrypted first file is provided to the user for review.

While the above described embodiments describe sharing one file with one or more receivers the above described techniques may apply to the sharing of multiple files. In this regard a unique encryption key would be generated for each file. Accordingly the metadata for each file may be encrypted using the techniques described above. The metadata for each file may then be transmitted in one secure communication container or several secure communication containers.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the present disclosure is not limited to the details provided. There are many alternative ways of implementing the present disclosure. The disclosed embodiments are illustrative and not restrictive.

