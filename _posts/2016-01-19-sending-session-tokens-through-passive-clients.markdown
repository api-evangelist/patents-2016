---

title: Sending session tokens through passive clients
abstract: A session token can be requested to be sent to a first computing service from a second computing service, and a first computing service can receive the requested session token from the second computing service. The first computing service can send a message that includes the session token through a passive client to the second computing service. The second computing service can receive the message that includes the session token from the passive client, and the second computing service can verify that the message is valid. This verification of the validity of the message can include verifying that the session token received back from the passive client matches the session token the second computing service sent to the first computing service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09525679&OS=09525679&RS=09525679
owner: Microsoft Technology Licensing, LLC
number: 09525679
owner_city: Redmond
owner_country: US
publication_date: 20160119
---
The present application is a divisional of U.S. patent application Ser. No. 14 016 237 filed Sep. 3 2013 which claims priority to U.S. Provisional Application No. 61 835 538 filed Jun. 15 2013 both of which are incorporated herein by reference. If any disclosures are incorporated herein by reference and such incorporated disclosures conflict in part or whole with the present disclosure then to the extent of conflict and or broader disclosure and or broader definition of terms the present disclosure controls.

Online computing services often communicate with clients such as remote clients over computer networks. As used herein a computing service is a computing component such as a computer application that runs on a host that includes one or more computing machines and that performs actions for one or more local and or remote clients. In some instances a first computing service sends a redirect message to a client instructing the client to redirect to another computing service. Such a redirect message may include information that the client is to send on to the second computing service.

Sometimes such a redirect message is used to instruct the passive client to communicate with a second computing service that requires authentication. In such a situation user input has been required to sign into the second computing service even if user input was already provided to sign into a first computing service that sent the redirect message.

The tools and techniques discussed herein relate to sending a session token from a first computing service to a second computing service from which the first computing service obtained the session token. A session token is a token that includes sufficient information for a sender such as the second computing service of the session token to verify that the token matches and has not been tampered with when the token is returned to that sender. The session token can be sent through a passive client such as a passive client with which the first computing service is communicating prior to the session token being sent and with which the second computing service is communicating after the session token is sent. As used herein a passive client is a general computer client that lacks an ability to make its own reasoned decisions about which specific computing entity or entities the client is to send the session token to. Instead a passive client blindly forwards the session token where the passive client is specifically instructed to do so such as where the passive client is instructed by the first computing service to forward the session token to the second computing service e.g. where the second computing service is identified in a redirect message from the first computing service . For example the passive client may be a passive client running on a mobile device e.g. a smartphone a tablet device or a desktop device e.g. a laptop computer or a desktop computer such as a mobile application a mobile browser client a tablet browser client a tablet application a desktop application and or a desktop browser client.

In one embodiment the tools and techniques can include requesting a session token to be sent to a first computing service from a second computing service and a first computing service receiving the requested session token from the second computing service. The first computing service can send a message that includes the session token through a passive client to the second computing service.

In another embodiment of the tools and techniques a first session token can be sent from a second computing service to a first computing service. The second computing service can receive a message comprising a second session token that is purported to match the first session token from a passive client. The second computing service can verify that the message is valid which can include verifying that the second session token matches the first session token. As used herein a session tokens matching refers to the session tokens corresponding to each other so that the second token has not been modified in an unexpected manner. For example in some techniques two session tokens match if they are the same as each other.

This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Similarly the invention is not limited to implementations that address the particular techniques tools environments disadvantages or advantages discussed in the Background the Detailed Description or the attached drawings.

Embodiments described herein are directed to techniques and tools for communications between computing services. Such improvements may result from the use of various techniques and tools separately or in combination.

Such techniques and tools may include a first service returning a session token to a second service from which the token was received by the first service. The session token can be a secret that the second service keeps from the first service and from a passive client through which the token is returned to the second service. For example the session token may be encrypted so that the session token is opaque to the first service and to the passive client but can be decrypted and processed by the second service. The session token can be returned through a passive client. Such tools and techniques may be used to allow the first computing service to securely send information to the second computing service even if the passive client is not trusted. For example the information to be sent can be included in the session token. As an example the session token may be a proof token which may be sent to the first computing service along with a proof key. As used herein a proof token is a token that is provided along with a proof key which can be used to sign additional information. The proof token the proof key and the information signed with the proof key provide an indication that the signed information came from the first computing service to whom the second computing service provided the proof token and proof key. Accordingly the first computing service can sign additional information with the proof key. The first computing service can send the signed additional information with the proof key to the second computing service through the passive client. This can allow the second computing service to receive the additional information from the passive client in a manner where the passive client initiates the communication with the second computing service. The browser and the second computing service may thereafter continue communicating in a client server configuration such as a Web browser and Web service configuration over a computer network such as a global computer network.

In one example of an implementation of the tools and techniques discussed herein two trusted services can securely delegate identities such as user and or application identities through passive clients e.g. Web browsers without add ins or other code specifically directed to handling the identity delegation scenario over a computer network such as the Internet.

Accordingly one or more substantial benefits can be realized from the tools and techniques described herein. For example the tools and techniques herein can allow two services to securely communicate through a passive client even if that client and a network through which such communications are passed is insecure or not trusted. As an example such a communication may include information to delegate identity from one service to the other. This can provide efficiencies such as avoiding the need for user input to authenticate at the second computing service when authenticating user input has already been provided on the first computing service by a matching identity such as in association with a first profile for the first computing service that matches a second profile for the second computing service . Additionally with the proof token example discussed above the proof token and proof key may be sent once from the second service to the first service and the proof token and key may be used multiple times to send multiple secure messages from the first computing service to the second computing service through one or more passive clients. This can provide additional efficiencies by avoiding sending a new token from the second computing service to the first computing service for each new message to be sent through the passive client from the first computing service to the second computing service.

The subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all some or none of the benefits described herein. Although operations for the various techniques are described herein in a particular sequential order for the sake of presentation it should be understood that this manner of description encompasses rearrangements in the order of operations unless a particular ordering is required. For example operations described sequentially may in some cases be rearranged or performed concurrently. Moreover for the sake of simplicity flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.

Techniques described herein may be used with one or more of the systems described herein and or with one or more other systems. For example the various procedures described herein may be implemented with hardware or software or a combination of both. For example the processor memory storage output device s input device s and or communication connections discussed below with reference to can each be at least a portion of one or more hardware components. Dedicated hardware logic components can be constructed to implement at least a portion of one or more of the techniques described herein. For example and without limitation such hardware logic components may include Field programmable Gate Arrays FPGAs Program specific Integrated Circuits ASICs Program specific Standard Products ASSPs System on a chip systems SOCs Complex Programmable Logic Devices CPLDs etc. Applications that may include the apparatus and systems of various embodiments can broadly include a variety of electronic and computer systems. Techniques may be implemented using two or more specific interconnected hardware modules or devices with related control and data signals that can be communicated between and through the modules or as portions of an application specific integrated circuit. Additionally the techniques described herein may be implemented by software programs executable by a computer system. As an example implementations can include distributed processing component object distributed processing and parallel processing. Moreover virtual computer system processing can be constructed to implement one or more of the techniques or functionality as described herein. For example the computing services identity provider and client discussed herein may be implemented as hardware logic and or as software running on hardware components such as the types of components discussed below.

The computing environment is not intended to suggest any limitation as to scope of use or functionality of the invention as the present invention may be implemented in diverse general purpose or special purpose computing environments.

With reference to various illustrated hardware based computer components will be discussed. As will be discussed these hardware components may store and or execute software. The computing environment includes at least one processing unit or processor and memory . In this most basic configuration is included within a dashed line. The processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory or some combination of the two. The memory stores software implementing sending session tokens through passive clients. An implementation of sending session tokens through passive clients may involve all or part of the activities of the processor and memory being embodied in hardware logic as an alternative to or in addition to the software .

Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines of and the other figures discussed below would more accurately be grey and blurred. For example one may consider a presentation component such as a display device to be an I O component e.g. if the display device includes a touch screen . Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop handheld device etc. as all are contemplated within the scope of and reference to computer computing environment or computing device. 

A computing environment may have additional features. In the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and may include computer readable storage media such as flash drives magnetic disks magnetic tapes or cassettes CD ROMs CD RWs DVDs or any other medium which can be used to store information and which can be accessed within the computing environment . The storage stores instructions for the software .

The input device s may be one or more of various different input devices. For example the input device s may include a user device such as a mouse keyboard trackball etc. The input device s may implement one or more natural user interface techniques such as speech recognition touch and stylus recognition recognition of gestures in contact with the input device s and adjacent to the input device s recognition of air gestures head and eye tracking voice and speech recognition sensing user brain activity e.g. using EEG and related methods and machine intelligence e.g. using machine intelligence to understand user intentions and goals . As other examples the input device s may include a scanning device a network adapter a CD DVD reader or another device that provides input to the computing environment . The output device s may be a display printer speaker CD DVD writer network adapter or another device that provides output from the computing environment . The input device s and output device s may be incorporated in a single system or device such as a touch screen or a virtual reality system.

The communication connection s enable communication over a communication medium to another computing entity. Additionally functionality of the components of the computing environment may be implemented in a single computing machine or in multiple computing machines that are able to communicate over communication connections. Thus the computing environment may operate in a networked environment using logical connections to one or more remote computing devices such as a handheld computing device a personal computer a server a router a network PC a peer device or another common network node. The communication medium conveys information such as data or computer executable instructions or requests in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired or wireless techniques implemented with an electrical optical RF infrared acoustic or other carrier.

The tools and techniques can be described in the general context of computer readable media which may be storage media or communication media. Computer readable storage media are any available storage media that can be accessed within a computing environment but the term computer readable storage media does not refer to propagated signals per se. By way of example and not limitation with the computing environment computer readable storage media include memory storage and combinations of the above.

The tools and techniques can be described in the general context of computer executable instructions such as those included in program modules being executed in a computing environment on a target real or virtual processor. Generally program modules include routines programs libraries objects classes components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer executable instructions for program modules may be executed within a local or distributed computing environment. In a distributed computing environment program modules may be located in both local and remote computer storage media.

For the sake of presentation the detailed description uses terms like determine send receive and operate to describe computer operations in a computing environment. These and other similar terms are high level abstractions for operations performed by a computer and should not be confused with acts performed by a human being unless performance of an act by a human being such as a user is explicitly noted. The actual computer operations corresponding to these terms vary depending on the implementation.

The first computing service the second computing service and the identity provider can be connected to communicate with each other and or other computing entities through one or more connections such as a computer network . The computing services and and the identity provider may also be connected to communicate with one or more clients such as a first client and a second client . The profiles can represent an identity that is associated with one or more of the clients and or where the identity can be the identity of one or more users applications hosts or devices. The first client and the second client can be running on different client devices or on the same client device. The client devices can receive user input from one or more users and can pass the user input to the corresponding client or . For example such user input may be initiated by the user s in the form of touch input mouse clicks keyboard input non contact gestures hand motions etc. or some other type of user input.

In an example illustrated in the first client the second client the first computing service the second computing service and the identity provider may all be connected to communicate through a single network such as the Internet. One or more of the clients and computing services and and identity provider may be connected to one or more other networks in addition to or instead of the common network . For example the first computing service the second computing service and the identity provider may all be connected to communicate with each other through a private network e.g. a secure private network that does not utilize the common network through which the computing services and and the identity provider communicate with the clients and . The network can include network hardware such as addition computing machines routers switches wired communication lines wireless communications devices etc.

Accordingly data such as session tokens can be passed between the different computing components and and can be processed by those computing components and in various ways such as the examples discussed below.

Some examples of approaches to and uses of sending session tokens through passive clients will now be discussed. Other alternative approaches and uses could also be performed within the scope of the tools and techniques discussed herein.

The example approach discussed in this section can be used for two services to notify a user identity over a browser client in a secure manner. The approach will be discussed with reference to the example call flow illustrated in which illustrates communications between a client a first computing service a second computing service and an identity provider . As an example joe contoso.com may be the name of a profile that is subscribed to the first computing service and can be authorized to use the first computing service and also the name of a profile that is subscribed to the second computing service and can be authorized to use the second computing service . For example the first computing service may be an email and calendaring Web service and the second computing service may be a file storage and sharing Web service. The identity provider can be an identity provider that manages the identities of profiles that have permissions to be authorized to use the computing services and . Alternatively each separate computing service and could act as its own identity provider and or use different identity providers. The client can be a passive client that can communicate with the computing services and and the identity provider . For example the client may be a standard Web browser running on a client computing device such as a personal computer a laptop computer a tablet computer or a smartphone.

In the example of the communications between the computing components and can be communications sent over a computer network. For example the communications may be formatted as HTTP messages sent over TCP IP through one or more computer networks such as the Internet. In other examples communications could be formatted differently such as application programming interface calls within a computing machine e.g. where the different computing services and reside on the same computing machine or messages formatted according to some other communications protocol.

Referring still to the client can receive user input not shown selecting the first computing service . The client can respond to such user input by sending to the first computing service a selection of that first computing service . The first computing service can respond with a redirect message which can instruct the client to send an identification request to the identity provider .

In response to receiving the identification request from the client the identity provider can respond with an authentication information request . For example the authentication information request can include a sign on page that the client can display to receive user input with the authentication information e.g. a username and password . As instructed by the authentication information request and in response to such user input the client can send the authentication information to the identity provider . The identity provider can verify that the authentication information matches stored authentication information for a profile that has a subscription to use the first service . If so then the identity provider can respond to the client with an authentication token and a redirect message instructing the client to forward the authentication token to the first service .

The client can respond by sending the authentication token to the first service . The first service can respond by verifying that the authentication token is valid and if so then providing a response which can reveal that the associated profile is authorized to use the first service . For example in the response the first service can provide a Web page listing features provided by the first service . The profile may be signed onto a realm that is defined by the subscription that an associated tenant has to the first service . For example if the profile s name were joe contoso.com the realm may be a realm associated with contoso.com and there may be one or more subscriptions associated with the contoso.com realm. This may allow the profile to use features provided by the first service that are associated with that realm e.g. access to files provided by other user profiles of the contoso.com realm . While the profile is signed into the first service the first service and or the identity provider can maintain an identifier associated with the profile such as a personal unique identifier PUID .

While the user profile is using the first service user input may be provided at the client to select the second service . For example the user input may be provided by selecting a link within a Web page provided by the first service . Referring to an example of a browser display is illustrated in such as where the passive client is a Web browser. The browser display features an example of a Web page display of a page e.g. an HTML page or a page in some other format received from the first service such as in the response of . The example Web page display includes a list of features provided by the first service which may be selected to invoke those features. For the illustrated example these features include an email feature a calendar feature a tasks feature a contacts feature and an account management feature. Additionally the Web page display includes a link for selecting the second service which is a file sharing service in the illustrated example. User input can be provided to select the second service link such as by touching the link on a touch screen.

Referring to in response to the second service being selected by user input the client can send a second service selection to the first service according to instructions included in a response from the first service e.g. in a Web page . In response to the second service selection the first service can make a service to service call to the second service . This service to service call can include a service to service token and can request a proof token. The service to service token may have been obtained by the first service from another source such as from the identity provider . In response to receiving the service to service token from the first service the second service can verify the service to service token to verify that the message comes from the first service . The service to service token may only be sent from the first service to the second service once during a lifecycle of a pool of services that includes the first service and the second service even if the first service makes multiple service to service calls to the second service . As an example the service to service call may be made to an API of the second service for requesting proof tokens e.g. an API entitled GetProofToken .

The second service can respond to the service to service call by generating and sending a proof token and a proof key to the first service . For example the response can include a Java Script Object Notation JSON object that can contain the proof token and the proof key such as in the following format 1 proof token The proof token which can be opaque to first service such as an encrypted value 2 exp The expiry of the proof token and 3 the proof key which may be a plain text base64 encoded key. The proof key can be a symmetric key that is encrypted by the second service prior to being sent using any of various different encryption schemes that will allow the first service to decrypt the proof key . Alternatively an asymmetric key pair could be used with the proof key being the public key which can be sent without encryption. The object that includes the proof token and the proof key can be signed by the second service . For example the second service may sign the object using a 256 bit RSA key or some other signature scheme.

Upon receiving the proof token and the proof key the first service can assure that the signature of the object including the proof token and the proof key is valid and can decrypt the proof key . The first service can include additional information with the proof token and can sign the additional information with the proof key to produce signed information . For example the first service may generate a user identity token to be included as the additional signed information .

In an example the user identity token may include the following characteristics 1 Token format JWT JSON Web Token 2 Signature SHA 256 which can be the type of signature used with the proof key to sign the identity token and 3 Claims. The following table lists some claims that may be included in an example of the user identity token 

The first service can send a message including the signed additional information e.g. a user identity token and the proof token to the client with an instruction to forward the message to the second service e.g. as a redirect message . The body of this message can include a field for the user identity token and a field for the proof token.

Following is an example of contents of a proof token and an identity token although any of various different formats for such contents could be used where the fields are as discussed above and the alg field is a signature algorithm identification field the x5t field includes the proof key and the prf field includes the proof token 

As instructed the client can forward the message with the proof token and the signed additional information to the second service . In response the second service can parse and validate the information received in the message. For example the second service may perform the following 1 Validate the signature of the proof token 2 Decrypt the proof token 3 Validate the expiry of the proof token 4 Extract the symmetric key from the proof token 5 Use that symmetric key to validate the signature on the user identity token 6 Validate the expiry of the user identity token and 7 Validate the audience aud claim such as where the format is and the expected values are the second service s principal id Hostname of the URL where this token is posted to and Current first service tenant s ID if it is present this can be validated .

The second service can use the information in the identity token to perform mapping to the second service s corresponding profile so that the second service s profile can be authorized to use the second service . For example the second service may perform the following 

B. Approach to Securely Sending Information in a Session Token Between Services Through a Passive Client

The example approach discussed in this section can be used for securely sending information in session tokens between the two services through a passive client. Referring to the call flow diagram of this approach involves communications between a client a first service and a second service . Unless otherwise noted in this section the formats of various communications can be the same as in the approach discussed in the previous section or some other format. In the example a second service selection can be sent by the client to the first service . For example the client may send the second service selection in response to user input provided by a user of the client . Alternatively this approach may be performed without the first service receiving such a second service selection from the client . The first service can send a session token request to the second service. For example the session token request may identify information that is to be sent from the first service to the second service through the client . For example the session token request may identify a user profile that is authorized to use the first service and whose identity is to be delegated to the second service so that a corresponding user profile or the same user profile for the second service can be authorized to use the second service as well.

In response the second service can include the requested information in a session token and may encrypt the session token . The session token with the information can be sent from the second service to the first service . The first service can forward the session token to the client with instructions to forward the session token to the second service e.g. by including the session token with a redirect message . The client can respond to these instructions by forwarding the session token to the second service as instructed. The second service can process the session token and can provide a response to the client .

Many different variations of the approaches discussed herein could be used. For example session tokens may be used to pass information other than identity delegation information between services through a passive client. Also various different encryption schemes signature schemes etc. may be used to insure that sent information is not tampered with en route between the services and or that such tampering can be detected.

Several techniques for sending session tokens through passive clients will now be discussed. Each of these techniques can be performed in a computing environment. For example each technique may be performed in a computer system that includes at least one processor and memory including instructions stored thereon that when executed by at least one processor cause at least one processor to perform the technique memory stores instructions e.g. object code and when processor s execute s those instructions processor s perform s the technique . Similarly one or more computer readable storage media may have computer executable instructions embodied thereon that when executed by at least one processor cause at least one processor to perform the technique. The techniques discussed below may be performed at least in part by hardware logic.

Referring to a technique for sending session tokens through passive clients will be described. The technique can include a first computing service requesting a session token from a second computing service. The first computing service can receive the requested session token from the second computing service. The first computing service can send a message comprising the session token through a passive client to the second computing service.

The session token can be a proof token and the first computing service can also receive a proof key with the proof token. The technique can further include the first computing service signing a set of additional data with the proof key and including the set of additional data in the message comprising the proof token. The set of additional data can be termed a first set of additional data and the message including the proof token can be termed a first message. The technique can further include the first computing service signing a second set of additional data with the proof token. The technique can also include including the second set of additional data in a second message. The second message can include the proof token. The second message can be sent through a passive client either the same passive client through which the first message was sent or a different passive client from the passive client through which the first message was sent to the second computing service. The first and or second set of additional data can include a profile identity token indicating that an identified profile associated with the passive client is authorized to use the first computing service.

The technique of can further include authorizing a first profile to use the first computing service as well as the first computing service receiving a request to use the second computing service. The request to use the second computing service can be received from the passive client and the passive client can be associated with the first profile. The first computing service requesting the session token from the second computing service can be done in response to the first computing service receiving the request to use the second computing service. The first computing service authorizing the first profile to use the first computing service can include the first computing service using an identity providing service that is separate from the first computing service to authenticate the first profile. For example this authorization can include the first computing service redirecting the passive client to the identity providing service. As another example this authorization can include the first computing service programmatically calling to the identity providing service.

The passive client can be remote from the first computing service. In one example the passive client can be a browser client such as a Web browser client that interacts with the first computing service and the second computing service over a network such as a global computer network.

Referring to another technique for sending session tokens through passive clients will be discussed. The technique can include sending a first session token to a first computing service from a second computing service. The second computing service can receive from a passive client a message that includes a second session token that is purported to match the first session token. The second computing service can verify that the message is valid which can include verifying that the second session token matches the first session token such as verifying that the second session token is the same as the first session token.

The message can indicate that a profile such as a user profile or an application profile is authorized to use the first computing service. The technique of can further include in response to the second computing service verifying that the message is valid the second computing service authorizing an identity corresponding to the profile to use the second computing service e.g. by authorizing the same profile to use the second computing service and or authorizing a different corresponding profile to use the second computing service . The validated message can include identity information that the second computing service can use for the second computing service s internal authorization technique. Accordingly the second computing service can perform a separate internal authorization before granting access to the identified profile. For example this may include mapping information in the profile to profile information maintained for a subscription to the second computing service assuring that such a subscription is currently active and valid etc.

In the technique of the passive client can be remote from the first computing service and from the second computing service. The passive client may be browser client such as a Web browser client.

The first session token of can be a first proof token the second session token can be a second proof token and the second computing service can send a proof key with the first proof token. The message of that includes the second proof token can also include a set of additional data included in the sending of the first proof token from the second computing service to the first computing service. Verifying that the message is valid can include verifying that the set of additional data was signed with the proof key.

The set of additional data may be termed a first set of additional data and the message that includes the second proof token can be termed a first message. The technique can further include the second computing service receiving a second message that includes a second set of data and a third proof token. The second computing service can verify that the second message is valid which can include verifying that the third proof token matches the first proof token and that the second set of additional data was signed with the proof key.

The sending of the first session token to the first computing service from the second computing service can include sending the first session token from the second computing service to the first computing service without directing the session token through the passive client.

Referring now to yet another technique for sending session tokens through passive clients will be discussed. The technique can include a first computing service requesting a proof token from a second computing service. The first computing service can receive the requested proof token and a proof key from the second computing service. The proof token can be opaque to the first computing service. The first computing service can sign a set of additional data with the proof key with the set of additional data including a profile identity token indicating that an identified profile associated with a passive client is authorized to use the first computing service. The first computing service can include the signed set of additional data in a message. The first computing service can send the message over a computer network and through the passive client to the second computing service. The sending of the message through the passive browser can include the first computing service identifying the second computing service to the passive browser and instructing the passive browser to send the message to the second computing service such as by sending the passive browser a redirect message identifying the second computing service.

The techniques discussed above can provide various benefits such as allowing for information such as identity delegation messages to be securely and efficiently passed between computing services within a client server configuration that involves the passive client initiating communications and services responding to the passive client e.g. in a typical Web browser configuration .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

