---

title: Composite graphical interface with shareable data-objects
abstract: Aspects of the present disclosure involve receiving references to application data of applications hosted by the servers. The application data includes information defining an interface of the application (e.g., a set of interface elements), and data types associated with the application. As a part of the process for generating a composite graphical user interface (GUI), the composite interface system receives references to application data of one or more applications at various memory locations (e.g., at both local and third-party servers). In this way, the composite interface system accesses the application data of any referenced application in order to retrieve application data to configure a composite GUI which includes interface elements of each of the referenced application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612723&OS=09612723&RS=09612723
owner: Palantir Technologies Inc.
number: 09612723
owner_city: Palo Alto
owner_country: US
publication_date: 20160427
---
This application claims the priority benefit of U.S. Provisional Application No. 62 273 320 entitled COMPOSITE GRAPHICAL INTERFACE WITH SHAREABLE DATA OBJECTS filed Dec. 30 2015 which is hereby incorporated by reference in its entirety.

The subject matter disclosed herein relates to the seamless sharing of data object across multiple application platforms. In particular example embodiments relate to a composite interface system for generating a composite graphical user interface and facilitating the sharing of data objects across multiple platforms in a computer network environment through the composite graphical user interface.

In an effort to create specialized and independent products developers have developed a multitude of unique applications for computer systems configured to perform a vast array of functions quickly and effectively. However in pressing for this isolated application development model some of the advantages of monolithic products and applications have been abandone namely seamless user experience and data sharing. Applications of computer systems utilize a variety of different file and data types to perform distinct functions which are often unique to a particular application or system. Additionally the applications themselves have corresponding user interfaces with interface elements unique to themselves and specially configured to facilitate access to certain data types.

As a result user experience between applications tends to be choppy and jarring with little to no continuity. Furthermore data types are often incompatible between applications. These issues lead to a disconnected and problematic user experience.

Reference will now be made in detail to specific example embodiments for carrying out the inventive subject matter of the present disclosure. In the following description specific details are set forth in order to provide a thorough understanding of the subject matter. It shall be appreciated that embodiments may be practiced without some or all of these specific details.

Example embodiments relate to a network based composite interface system employed for generating a composite graphical user interface GUI based on interface elements of referenced applications to facilitate the sharing of data objects across those applications. A data object as used herein may include any item of data or code that can be used by one or more computer programs to execute operations. Application data refers to data associated with an application including for example configuration files to configure the parameters and initial settings of applications as well as application program interfaces API associated with the applications. In example embodiments the data is stored in one or more network databases and are capable of being accessed by applications hosted by servers that share common access to the network database through the composite graphical user interface. Additional details regarding data objects can be found in U.S. Provisional Application No. 62 272 003 entitled NETWORK BASED PERMISSIONING SYSTEM assigned to the assignee of the instant application which application is hereby incorporated by reference in its entirety.

Aspects of the present disclosure involve receiving references to application data of applications hosted by the servers. As briefly stated above the application data includes the set of routines protocols and tools for building an application and the interface of the application. Additionally the application data may also refer to specific data types associated with the application. Thus the application data is essentially a description for a computer of how to build a particular application including its functionality . As a part of the process for generating a composite GUI the composite interface system receives references to application data of one or more applications at various memory locations e.g. at both local and third party servers as well as cloud servers . In this way the composite interface system may access the application data of any referenced application in order to configure a composite GUI which includes interface elements of the referenced application e.g. interface elements and locations of the interface elements within a GUI .

Accordingly having received the references to the application data the composite interface system generates and presents a composite GUI at a client device. The composite GUI includes the interface elements of the referenced application and thereby facilitates the execution of functions and operations performed by the application without the client device necessarily having direct access or compatibility to the functions of the application itself. In some embodiments the composite interface system is configured to cause one or more processors of the client device to generate the composite interface.

A portion of the composite GUI generated by the composite interface system includes a sidebar configured to display a graphical element or elements representative of the referenced applications. The composite GUI may receive inputs from a client device through the sidebar e.g. a selection of a graphical element to launch and cause display of interface elements associated with referenced applications.

Once the composite GUI has been generated and displayed at the client device the composite interface system receives a selection of a data object from the client device. The data object may be located at a third party server a local database or at the client device itself. Having received a selection of the data object the composite interface system identifies an object type of the data object in order to determine a compatible application to access. After determining the compatible application the composite interface system access the application data of the compatible application to retrieve the information defining the interface of the application and causes display of the interface elements of the application within the composite GUI. Thus a user of the client device may have access to interfaces and functionality of multiple applications through a single composite GUI.

In some embodiments in order to facilitate sharing of data objects between applications the composite interface system employs a method of creating and storing artifacts which reference individual data objects of the application or applications referenced to the composite GUI. Artifacts are structured and accessed depending on what the base application specifies. An artifact is a reference to a particular data object or instance of a data object . For example the referenced application has a data object associated with it and the data object itself has a number of data attributes surrounding it. The data attributes include for example user permissions a data type identifier a search instance identifier a source identifier and a specific ID of the data object itself.

Having received a selection of a particular data object the composite interface system creates an artifact referencing the data object. The artifact includes metadata associated with the data object and formatted by the composite interface system. For example the composite interface system may include an artifact repository for the discovery organization and collection of artifacts to enable collaborative project development by facilitating the creation and sharing of projects comprising one or more artifacts.

In some example embodiments the composite interface system provides a publish subscribe type messaging service where users may define projects within the composite graphical user interface by selecting one or more artifacts to include in a project and automatically distribute the project to groups of subscribers. For example a user of the client device may search the set of artifacts displayed at the client device via a search field within the composite GUI. The composite interface system may then remove at least a portion of artifacts from the set of artifacts based on the search leaving a presentation of only relevant artifacts. The user may then select one or more artifacts from among the remaining artifacts to assign to a project. Having defined a project the user may then distribute the project to a subscriber or group of subscribers.

An Application Program Interface API server and a web server are coupled to and provide programmatic and web interfaces respectively to one or more application servers . The application servers host the composite interface system . The application servers are in turn shown to be coupled to one or more database servers that facilitate access to one or more databases .

A composite interface system facilitates the creation of composite GUI and sharable artifacts for the networked system . For example the composite interface system is configured to receive references to application data from a client device and generate a composite GUI based on the referenced application data.

As shown the network environment includes the client device in communication with the networked system over the network . The networked system communicates and exchanges data with the client device that pertains to various functions and aspects associated with the networked system and its users. Likewise the client device which may be any of a variety of types of devices that include at least a display a processor and communication capabilities that provide access to the network e.g. a smart phone a tablet computer a personal digital assistant PDA a personal navigation device PND a handheld computer a desktop computer a laptop or netbook or a wearable computing device may be operated by a user e.g. a person of the network system to exchange data with the presentation platform over the network .

The client device communicates with the network via a wired or wireless connection. For example one or more portions of the network may comprises an ad hoc network an intranet an extranet a Virtual Private Network VPN a Local Area Network LAN a wireless LAN WLAN a Wide Area Network WAN a wireless WAN WWAN a Metropolitan Area Network MAN a portion of the Internet a portion of the Public Switched Telephone Network PSTN a cellular telephone network a wireless network a Wireless Fidelity Wi Fi network a Worldwide Interoperability for Microwave Access WiMax network another type of network or any suitable combination thereof.

In various embodiments the data exchanged between the client device and the networked system may involve user selected functions available through one or more user interfaces UIs . The UIs may be specifically associated with a web client e.g. a browser or an application executing on the client device and in communication with the presentation platform .

Turning specifically to the networked system a web server is coupled to e.g. via wired or wireless interfaces and provides web interfaces to an application server . In some embodiments the composite interface system runs and executes on the application server while in other embodiments the application server provides the client device with a set of instructions e.g. computer readable code that causes the web client and the client application of the client device to execute and run the composite interface system .

As is understood by skilled artisans in the relevant computer arts each functional component e.g. module illustrated in may be implemented using hardware e.g. a processor of a machine or a combination of logic e.g. executable software instructions and hardware e.g. memory and processor of a machine for executing the logic. Furthermore one or more of the various functional components depicted in may reside on a single computer e.g. a laptop client device or may be distributed across several computers in various arrangements such as cloud based architectures. In some embodiments modules of the composite interface system may be distributed between the client device and application server . Moreover it shall be appreciated that while the functional components e.g. modules of are discussed in the singular sense in other embodiments multiple instances of one or more of the modules may be employed.

The composite interface system is shown as including an artifact module a composite interface module a notification module and a permissions module all configured to communicate with each other e.g. via a bus shared memory a switch or application programming interfaces APIs .

The artifact module facilitates discovery organization and collection of artifacts and to enable collaborative project development. The artifact module creates artifacts based on metadata of identified data objects e.g. by the artifact module itself or via user selection . An artifact is a reference to a data object crated based on metadata associated with the data object. For example a data object may have metadata which includes data defining a source of the data object user permissions of the data object a unique identifier of the data object a data type of the data object and so on. Upon identifying the data object the artifact module creates an artifact for the data object with the metadata. Having created an artifact the artifact module may store the artifact within an artifact repository along with a set of artifacts.

In some embodiments the artifact module facilitates the creation editing and exporting of projects. In the context of this specification a project is a sharable object comprising one or more artifacts. For example the artifact module may receive a selection of one or more artifacts through a composite GUI presented at a client device and assign the selection of artifacts to a project. The artifact module may additionally assign a project identifier e.g. project ID to the project.

The composite interface module receives references to application data extracts interface data defining interface elements from the application data and generates a composite GUI based on the application data. The application data may include an identifier of the application a network address of the application and interface data defining an interface of the application. The composite interface module may reside server side e.g. within the application server or in some embodiments may reside client side e.g. within the client device such that the generation of the composite GUI is accomplished by one or more processors of the client device .

In some example embodiments the composite interface module receives a set of references to multiple sets of application data and in response to receiving an instruction to generate a composite GUI generates a composite GUI based on the referenced application data. The composite GUI includes a presentation of interface elements from each of the applications associated with the set of application data received. For example in response to receiving a reference to application data the composite interface module may generate and cause display of a graphical icon representative of the application data at a location within the composite GUI such that selection of the graphical icon causes the composite interface module to display the interface elements associated with the selected graphical element.

In further example embodiments a portion of the composite GUI created by the composite interface module includes a sidebar containing a presentation of the graphical icons associated with each of the referenced applications. For example the sidebar may include an application icon such that selection of the application icon results in display of a window which includes an arrangement of the graphical icons. A user may select one or more of the graphical icons from the display window in order to cause display of the corresponding interface elements associated with each referenced application. In some embodiments the composite interface module communicates the selection of the graphical icon to the artifact module and in response to receiving the selection the artifact module causes display of an assortment of artifacts referencing data objects associated with the selected graphical icon. The assortment of graphical icons may be presented as a sortable list within the composite GUI.

The notification module provides publish subscribe type messaging capability to automatically distribute projects defined by a user within the composite graphical user interface e.g. by selecting one or more artifacts to include in a project to a group of subscribers. For example upon receiving a project definition i.e. a set of artifacts selected and assigned to the project the notification module identifies a subscription request from a referenced application. The subscription request may include one or more user identifiers with various network addresses to receive the project and corresponding artifacts .

The notification module distributes the project to the application. Upon receipt of the project the application may access the data objects associated the project through the associated artifacts. For example upon receipt of the projects the applications may extract the artifacts and access the data objects associated with the artifacts through the composite interface system . In this way an application itself doesn t have to know how to read a particular data type itself but can instead rely on the composite interface system to retrieve and access the data based on the artifact.

The permissions module is configured to evaluate and determine user access permissions with respect to data objects referenced by artifacts in the composite interface system . The evaluation of user access permissions in most instances is triggered by receipt of an access request received via an API from a referenced application supported by the composite interface system . The access request includes a data resource identifier corresponding to the data object for which access is being requested and a user identifier corresponding to the requesting user. In some instances the access request may further include one or more filters identifying one or more particular operations or sets of operations that are of interest.

At operation the composite interface module receives a reference to application data of an application. For example the composite interface module may provide a set of computer readable instructions to the client device that causes the client device to display an application reference interface. The user may thereby provide references to application data of applications to be included within the composite GUI generated by the composite interface system . In some embodiments in response to receiving the reference to the application data the artifact module identifies data objects associated with the referenced application and creates one or more artifacts based on the metadata of the data objects.

At operation the composite interface module receives an instruction to generate a composite GUI and in response generates a composite GUI which includes the interface elements of the referenced application. A portion of the composite GUI may include a sidebar in which a graphical icon representing the referenced application data is displayed. In some example embodiments the sidebar may include an application icon which a user may select and in response to receiving a selection of the application icon the composite interface module may cause display of a window which includes one or more graphical icons associated with referenced applications e.g. such that selection of the graphical icon results in display of interface elements of a referenced application .

In further example embodiments the composite GUI includes a presentation of a listing of artifacts associated with the referenced application data. For example responsive to receiving the reference to the application data the artifact module creates one or more artifacts based on the referenced application data and stores the artifacts within an artifact repository e.g. database . Thus at operation when the composite interface module generates the composite GUI based on the application data the composite interface module may access the artifact repository to retrieve the set of artifacts associated with the application.

At operation the composite interface module causes display of the composite GUI at a client device e.g. client device . In some embodiments the permissions module may identify user access permissions associated with a user identifier associated with the client device and cause display of the composite GUI based on the determined user permissions. For example a user may not have access to an entire set of artifacts based on their user permissions. Upon determining the user permissions of the user identifier the permissions module removes artifacts which are inaccessible to the user identifier and presents only those artifacts which the user permissions allow.

At operation the composite interface module receives a selection of an artifact from a client device . For example the composite GUI may include a set of artifacts associated with referenced applications. The set of artifacts may be presented in a user defined sort order e.g. through a selection of an attribute based on metadata associated with the artifact.

At operation in response to receiving a selection of the artifact at the client device the composite interface module identifies the referenced application associated with the artifact and causes display of the interface elements of the identified application.

Many applications or services need long running calls and a scheme for pushing data to the front end and in some cases backend services may need to communicate with unrelated or incompatible front ends e.g. pushing data from one referenced application to another referenced application . The front end refers to the portion of an application which users interact with while the back end refers to the resources of the application configured to service and provide functionality to the front end. The front end of one application may not necessarily be compatible with the back end of another application. The composite GUI generated by the composite interface system therefore provides a general communications channel between the back end of a referenced application and a front end of another referenced application and as such provides a way to address messages to reach the front end via the use of projects e.g. sets of artifacts .

At operation the notification module receives a subscription request from a referenced application. The subscription request includes an application identifier of the subscribing application and a user identifier of a subscribing user. The subscription request may also include a data type.

At operation the artifact module receives a selection of one or more artifacts at the client device . For example a user may select one or more artifacts among a set of artifacts displayed in the composite GUI at the client device .

At operation the artifact module receives a request from the client device to assign the selected artifacts to a project. In response to receiving the request to assign the selected artifacts to a project the artifact module generates a project which includes the selected artifacts.

At operation the notification module distributes the project based on the subscription request to the referenced application. The referenced application may then notify the subscribing user e.g. based on the user identifier of the project. The requesting application may then access then artifacts through the project and cause display of the data objects associated with the artifacts through the composite GUI.

As an example of the composite GUI generated by the composite interface module is an interface diagram illustrating a composite GUI for displaying interface elements of a referenced application according to some example embodiments. As shown the composite GUI includes a sidebar an application window the application window including a set of graphical icons representing referenced applications e.g. graphical icon a cursor to make selections within the composite GUI a referenced application interface and a set of interface elements of the referenced application.

For example in response to receiving the reference to the application data as in operation of the composite interface module creates a graphical icon to display within the sidebar . As shown in the sidebar may also include an application icon which a user may select with the cursor to display the application window which includes a set of graphical icons such as graphical icon representative of referenced applications. Upon receiving a selection of the graphical icon the composite interface module causes display of the associated interface e.g. interface and its interface elements .

As an example of the composite GUI generated by the composite interface module is an interface diagram illustrating the composite GUI for displaying a set of artifacts to create a sharable project according to some example embodiments. As shown the composite GUI is shown to include a set of artifacts a graphical icon identifying an application type a search field a project creation window and the cursor .

In some embodiments the composite GUI displays a set of artifacts associated with the referenced applications e.g. set of artifacts . A user may select an artifact e.g. artifact with the cursor . In response to receiving the selection of the artifact the composite GUI causes display of a project creation window . The project creation window includes a set of options to share the artifact in a project or to an individual or group of individuals based on a user identifier or set of user identifiers provided by the user or to duplicate rename or convert the artifact into another format or data type. For example as in operation of a user may select the artifact to assign the artifact to a project which may then be distributed to a subscriber or subscriber list.

The composite GUI is also shown to include a search field . A user may enter a search term into the search field and in response to receiving the search term the artifact module may present relevant artifacts within the composite GUI .

By way of non limiting example the machine may comprise or correspond to a television a computer e.g. a server computer a client computer a personal computer PC a tablet computer a laptop computer or a netbook a set top box STB a personal digital assistant PDA an entertainment media system e.g. an audio video receiver a cellular telephone a smart phone a mobile device a wearable device e.g. a smart watch a portable media player or any machine capable of outputting audio signals and capable of executing the instructions sequentially or otherwise that specify actions to be taken by machine . Further while only a single machine is illustrated the term machine shall also be taken to include a collection of machines that individually or jointly execute the instructions to perform any one or more of the methodologies discussed herein.

The machine may include processors memory storage unit and I O components which may be configured to communicate with each other such as via a bus . In an example embodiment the processors e.g. a central processing unit CPU a reduced instruction set computing RISC processor a complex instruction set computing CISC processor a graphics processing unit GPU a digital signal processor DSP an application specific integrated circuit ASIC a radio frequency integrated circuit RFIC another processor or any suitable combination thereof may include for example processor and processor that may execute instructions . The term processor is intended to include multi core processors that may comprise two or more independent processors sometimes referred to as cores that may execute instructions contemporaneously. Although shows multiple processors the machine may include a single processor with a single core a single processor with multiple cores e.g. a multi core processor multiple processors with a single core multiple processors with multiples cores or any combination thereof.

The memory e.g. a main memory or other memory storage and the storage unit are both accessible to the processors such as via the bus . The memory and the storage unit store the instructions embodying any one or more of the methodologies or functions described herein. In some embodiments the databases resides on the storage unit . The instructions may also reside completely or partially within the memory within the storage unit within at least one of the processors e.g. within the processor s cache memory or any suitable combination thereof during execution thereof by the machine . Accordingly the memory the storage unit and the memory of processors are examples of machine readable media.

As used herein machine readable medium means a device able to store instructions and data temporarily or permanently and may include but is not be limited to random access memory RAM read only memory ROM buffer memory flash memory optical media magnetic media cache memory other types of storage e.g. erasable programmable read only memory EEPROM or any suitable combination thereof. The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions . The term machine readable medium shall also be taken to include any medium or combination of multiple media that is capable of storing instructions e.g. instructions for execution by a machine e.g. machine such that the instructions when executed by one or more processors of the machine e.g. processors cause the machine to perform any one or more of the methodologies described herein e.g. methods and . Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium excludes signals per se.

Furthermore the machine readable medium is non transitory in that it does not embody a propagating signal. However labeling the tangible machine readable medium as non transitory should not be construed to mean that the medium is incapable of movement the medium should be considered as being transportable from one real world location to another. Additionally since the machine readable medium is tangible the medium may be considered to be a machine readable device.

The I O components may include a wide variety of components to receive input provide output produce output transmit information exchange information capture measurements and so on. The specific I O components that are included in a particular machine will depend on the type of machine. For example portable machines such as mobile phones will likely include a touch input device or other such input mechanisms while a headless server machine will likely not include such a touch input device. It will be appreciated that the I O components may include many other components that are not specifically shown in . The I O components are grouped according to functionality merely for simplifying the following discussion and the grouping is in no way limiting. In various example embodiments the I O components may include input components and output components . The input components may include alphanumeric input components e.g. a keyboard a touch screen configured to receive alphanumeric input a photo optical keyboard or other alphanumeric input components point based input components e.g. a mouse a touchpad a trackball a joystick a motion sensor or other pointing instrument tactile input components e.g. a physical button a touch screen that provides location and or force of touches or touch gestures or other tactile input components audio input components and the like. The output components may include visual components e.g. a display such as a plasma display panel PDP a light emitting diode LED display a liquid crystal display LCD a projector or a cathode ray tube CRT acoustic components e.g. speakers haptic components e.g. a vibratory motor resistance mechanisms other signal generators and so forth.

Communication may be implemented using a wide variety of technologies. The I O components may include communication components operable to couple the machine to a network or devices via coupling and coupling respectively. For example the communication components may include a network interface component or other suitable device to interface with the network . In further examples communication components may include wired communication components wireless communication components cellular communication components near field communication NFC components Bluetooth components e.g. Bluetooth Low Energy WiFi components and other communication components to provide communication via other modalities. The devices may be another machine or any of a wide variety of peripheral devices e.g. a peripheral device coupled via a Universal Serial Bus USB .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules . In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. APIs .

Example embodiments may be implemented in digital electronic circuitry or in computer hardware firmware or software or in combinations of them. Example embodiments may be implemented using a computer program product for example a computer program tangibly embodied in an information carrier for example in a machine readable medium for execution by or to control the operation of data processing apparatus for example a programmable processor a computer or multiple computers.

A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a standalone program or as a module subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

In example embodiments operations may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method operations can also be performed by and apparatus of example embodiments may be implemented as special purpose logic circuitry e.g. an FPGA or an ASIC .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In embodiments deploying a programmable computing system it will be appreciated that both hardware and software architectures merit consideration. Specifically it will be appreciated that the choice of whether to implement certain functionality in permanently configured hardware e.g. an ASIC in temporarily configured hardware e.g. a combination of software and a programmable processor or in a combination of permanently and temporarily configured hardware may be a design choice. Below are set out hardware e.g. machine and software architectures that may be deployed in various example embodiments.

Although the embodiments of the present invention have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader scope of the inventive subject matter. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show by way of illustration and not of limitation specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be used and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

Such embodiments of the inventive subject matter may be referred to herein individually and or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description.

All publications patents and patent documents referred to in this document are incorporated by reference herein in their entirety as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference the usage in the incorporated references should be considered supplementary to that of this document for irreconcilable inconsistencies the usage in this document controls.

In this document the terms a or an are used as is common in patent documents to include one or more than one independent of any other instances or usages of at least one or one or more. In this document the term or is used to refer to a nonexclusive or such that A or B includes A but not B B but not A and A and B unless otherwise indicated. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim.

