---

title: Runtime creation, assignment, deployment and updating of arbitrary radio waveform techniques for a radio waveform generation device
abstract: A system includes a library of elements to create a model describing a waveform parameter technique. A constraint checker verifies that the created model is correct by construction by needing no verification after compilation. The constraint checker also implements a valid programmable device build according to the waveform parameter technique. A placement decision module receives the verified models produces a placement decision for placing the waveform parameter technique based on the verified model in a programmable device. A synthesis tool receives the verified model from the placement decision module and synthesizes the waveform parameter technique based on the verified model. A link/loader receives the placement decision from the placement decision module and receives the synthesized technique from the synthesis tool. The link/loader also places the waveform parameter technique in the programmable device according to the placement decision.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582265&OS=09582265&RS=09582265
owner: Raytheon Company
number: 09582265
owner_city: Waltham
owner_country: US
publication_date: 20160222
---
This patent application is a divisional of U.S. patent application Ser. No. 13 929 116 entitled RUNTIME CREATION ASSIGNMENT DEPLOYMENT AND UPDATING OF ARBITRARY RADIO WAVEFORM TECHNIQUES FOR A RADIO WAVEFORM GENERATION DEVICE filed Jun. 27 2013 issued on Feb. 23 2016 as U.S. Pat. No. 9 268 551 the entire contents of which are hereby incorporated in its entirety.

In currently existing software defined radio ES product roadmaps hardware is reconfigured e.g. a field programmable gate array FPGA device into circuits used to generate and receive waveforms. This may be accomplished before compiling. Often there are more waveform circuits that may be used for a given mission than can fit in the given reconfigurable hardware. Further during a campaign new capabilities may be used and the ability to update a technique generator where a technique defines a waveform with frequency phase and amplitude parameters as a function of time to add and remove capabilities may be performed. The hardware may be dynamically reconfigured to swap out waveform circuits during run time.

Currently waveform technique development takes weeks to months wherein verification alone can take weeks. This is because techniques are currently monolithic and are not designed as independently operating modules where multiple techniques access the same resources. Moreover there are occasionally more waveform circuits that may be used for a given mission than can fit in the given reconfigurable hardware.

Many methods exist that provide for partial reconfiguration approaches as well as dynamic e.g. during runtime reconfiguration approaches. Other dynamic reconfiguration approaches exhaustively compile a new version of a technique for each possible location the technique would be used on a FPGA. Still other dynamic reconfiguration approaches are verified such that the FPGA build is verified for the possible permutations 

The following description and the drawings illustrate specific embodiments to enable those skilled in the art to practice them. Other embodiments may incorporate structural logical electrical process and other changes. Portions and features of some embodiments may be included in or substituted for those of other embodiments. Embodiments set forth in the claims encompass available equivalents of those claims.

Waveform assignment may be made without waveform generation hardware e.g. FPGA programming. To perform the assignment ahead of time assignments are arranged to be dynamically re configured and re programmed onto an FPGA device while other hardware channels are still operating e.g. transmitting. Furthermore the radio waveforms need not even be known ahead of time thus the techniques may be created on the fly. An FPGA architecture a structure of a technique and a way to program an arbitrary technique are provided such that space is allocated on an FPGA ahead of time which enables the FPGA architecture to receive a list of frequencies as a function of time dynamically. The list is interpreted to create an arbitrary waveform that is updateable in real time.

Thus the frequencies modulations protocols of the waveform itself need not be designed and known prior to releasing the device with the FPGA to the field such that even the assigned technique itself is implemented in up to real time. The FPGA infrastructure provide for linkable behavioral modules. Modules can be created independently of one another thereby greatly simplifying the previous monolithic process. Further the module designer does not have to know the module location or resource linking ahead of time. The problem of not knowing parameters ahead of time is overcome by providing an indirect memory architecture for the modules. The correct by construction approach defined as a waveform needing no further verification after compilation ensures that the designer verifies that a designed module has met a pre defined set of resource and timing constraints. Further verification outside of the module need not be performed.

Thus the technique applications may access the services and the services may exist in the FPGA build whether deployed techniques are currently using them or not. Services such as a DDS service produce a waveform based on a list of provided frequency data and modulators such as pulse modulation PM and amplitude modulation AM . Wideband techniques may use a channelizer and an inverse channelizer e.g. reconstructer to separate a message thread into distinct sub channels and to reconstructs the input data stream using reconstructed segmented signals to form the original wideband digitized data. Accordingly technique applications may use an FPGA a DSP or FPGA s and DSP s or multiples of each.

The technique abstraction layer is much like an operating system in a software system. The digital processing infrastructure isolates application programs from the underlying hardware provides inter process communications and provides inter process isolation. Isolation of the application programs from the underlying hardware is provided by predefined access points for input and output I O for specific hardware e.g. such as ports that go to a digital to analog converter DAC and services such as a system time counter.

Interprocess communications is provided through three services. A general purpose data bus provides communication by any application to any other application. The general purpose data bus provides point to point configurable path e.g. a preset number of these paths as well as an adjacent program area connection .

Interprocess isolation is provided by predefined program areas into which an application program may be inserted. An application program occupies one or more program areas . These program areas may be constrained as adjacent program areas e.g. for fastest inter process communications such that the fewest amount of logic gates or physical wire must be transgressed or may not be constrained. This isolation ensures that the actions of an application program executing in one program area does not affect an independent program executing in another program area.

Metadata from the library of elements is provided for a dynamic technique. The metadata defines what the technique will do and how the technique will accomplish its task. Metadata may include resource usage e.g. X number of gates W number of interconnects installation and operation information number and types of services used e.g. a digital to analog converter DAC service and identification of operation frequencies Y Z . Blocks of programmable device are pre allocated for compatible techniques to dynamically switch in and out and the technique has parameter descriptors. A memory is provided to store parameter values and techniques access parameter values from memory . The user data file loads the parameter values into the locations of the memory . The FPGA architecture has ability to handle higher level functionality according to the metadata .

Accordingly techniques may be composed at a high level n a simulation graphical programming environment e.g. Simulink and may be compiled into low level code by using modeling module e.g. Matlab. DSP programming may be included. Technique modeling conversion PDN forwarding and PDN parsing may be updated during runtime while other portions of the FPGA device continue to operate .

A data flow graph DFG representation may be used to build the techniques where the basis set of library modules act as nodes. Connectors to combine modules to form more complex functionality represent the edges of the graph. This graphical representation allows ease of usability and understanding especially compared to textual code. The graphical DFG representation may be abstracted from the target hardware such that the RTG compiler can take existing data flow graphs and compile them to new hardware or compile them to existing hardware in different ways and in different combinations. When hardware resources are limited such that the technique DRGs cannot be compiled to hardware in their entirety a subset of these DRGs may be chosen to be hot swappable onto the hardware. This capability is enabled through partial real time reconfigurability of hardware resources. Hot swapping DFGs is allows more DRGs to be used on the FPGA that could fit within the logic and memory resources on the FPGA simultaneously.

In five blocks may provide data to multiplexer . shows techniques have been created for blocks . The user may commutate between multiple techniques through the time commutation switch . According to the time switched signal the time commutation switch generates a technique at the input of channelizer . The center frequency of the techniques may be controlled through the channelizer or a single technique may be sent out on multiple different channels. In the control processor has left Block open . The may be done to conserve power or allow faster swapping in of a new technique. A filter receives the output of the channelizer to ensure the technique is provided to the selected channel or channels. The filtered output is provided to a DAC to provide an RF signal at an output according to the generated technique .

Partial re configurability allows dynamic technique loading. The binary files used to map technique DFGs to hardware may be compiled pre runtime. The binary files once compiled are mapped to a specific location in hardware. In other words there is a one to one mapping with a technique to a binary file to a specific location in the hardware. To create a truly hot swappable real time reconfiguration algorithm the port mappings and amount of logic for a technique DFG may be uniform across the DRGs.

Many different combinations of DFGs and hardware may be stored to binaries. Thus the reconfiguration algorithm may simply choose a location and associated technique in the hardware to be swapped out. The algorithm then chooses a technique binary available for that specific hardware and initiates the technique swap.

Examples as described herein may include or may operate on logic or a number of components modules or mechanisms. Modules are tangible entities e.g. hardware capable of performing specified operations and may be configured or arranged in a certain manner. In an example circuits may be arranged e.g. internally or with respect to external entities such as other circuits in a specified manner as a module. In an example at least apart of one or more computer systems e.g. a standalone client or server computer system or one or more hardware processors may be configured by firmware or software e.g. instructions an application portion or an application as a module that operates to perform specified operations. In an example the software may reside on at least one machine readable medium. In an example the software when executed by the underlying hardware of the module causes the hardware to perform the specified operations.

Accordingly the term module is understood to encompass a tangible entity be that an entity that is physically constructed specifically configured e.g. hardwired or temporarily e.g. transitorily configured e.g. programmed to operate in a specified manner or to perform at least part of any operation described herein. Considering examples in which modules are temporarily configured a module need not be instantiated at any one moment in time. For example where the modules comprise a general purpose hardware processor configured using software the general purpose hardware processor may be configured as respective different modules at different times. Software may accordingly configure a hardware processor for example to constitute a particular module at one instance of time and to constitute a different module at a different instance of time. The term application or variants thereof is used expansively herein to include routines program modules programs components and the like and may be implemented on various system configurations including single processor or multiprocessor systems microprocessor based electronics single core or multi core systems combinations thereof and the like. Thus the term application may be used to refer to an embodiment of software or to hardware arranged to perform at least part of any operation described herein.

Machine e.g. computer system may include a hardware processor e.g. a central processing unit CPU a graphics processing unit GPU a hardware processor core or any combination thereof a main memory and a static memory at least some of which may communicate with others via an interlink e.g. bus . The machine may further include a display unit an alphanumeric input device e.g. a keyboard and a user interface UI navigation device e.g. a mouse . In an example the display unit input device and UI navigation device may be a touch screen display. The machine may additionally include a storage device e.g. drive unit a signal generation device e.g. a speaker a network interface device and one or more sensors such as a global positioning system GPS sensor compass accelerometer or other sensor. The machine may include an output controller such as a serial e.g. universal serial bus USB parallel or other wired or wireless e.g. infrared IR connection to communicate or control one or more peripheral devices e.g. a printer card reader etc. .

The storage device may include at least one machine readable medium on which is stored one or more sets of data structures or instructions e.g. software embodying or utilized by any one or more of the techniques or functions described herein. The instructions may also reside at least partially additional machine readable memories such as main memory static memory or within the hardware processor during execution thereof by the machine . In an example one or any combination of the hardware processor the main memory the static memory or the storage device may constitute machine readable media.

While the machine readable medium is illustrated as a single medium the term machine readable medium may include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that configured to store the one or more instructions .

The term machine readable medium may include any medium that is capable of storing encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the techniques of the present disclosure or that is capable of storing encoding or carrying data structures used by or associated with such instructions. Non limiting machine readable medium examples may include solid state memories and optical and magnetic media. In an example a massed machine readable medium comprises a machine readable medium with a plurality of particles having resting mass. Specific examples of massed machine readable media may include non volatile memory such as semiconductor memory devices e.g. Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and compact disk read only memory CD ROM and digital versatile disk read only memory DVD ROM disks.

The instructions may further be transmitted or received over a communications network using a transmission medium via the network interface device utilizing any one of a number of transfer protocols e.g. frame relay internet protocol IP transmission control protocol TCP user datagram protocol UDP hypertext transfer protocol HTTP etc. . Example communication networks may include a local area network LAN a wide area network WAN a packet data network e.g. the Internet mobile telephone networks e.g. channel access methods including Code Division Multiple Access CDMA Time division multiple access TDMA Frequency division multiple access FDMA and Orthogonal Frequency Division Multiple Access OFDMA and cellular networks such as Global System for Mobile Communications GSM Universal Mobile Telecommunications System UMTS CDMA 2000 1 standards and Long Term Evolution LTE Plain Old Telephone POTS networks and wireless data networks e.g. Institute of Electrical and Electronics Engineers IEEE 802 family of standards including IEEE 802.11 standards WiFi IEEE 802.16 standards WiMax and others peer to peer P2P networks or other protocols now known or later developed.

For example the network interface device may include one or more physical jacks e.g. Ethernet coaxial or phone jacks or one or more antennas to connect to the communications network . In an example the network interface device may include a plurality of antennas to wirelessly communicate using at least one of single input multiple output SIMO multiple input multiple output MIMO or multiple input single output MISO techniques. The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.

The above detailed description includes references to the accompanying drawings which form a part of the detailed description. The drawings show by way of illustration specific embodiments that may be practiced. These embodiments are also referred to herein as examples. Such examples may include elements in addition to those shown or described. However also contemplated are examples that include the elements shown or described. Moreover also contemplate are examples using any combination or permutation of those elements shown or described or one or more aspects thereof either with respect to a particular example or one or more aspects thereof or with respect to other examples or one or more aspects thereof shown or described herein.

Publications patents and patent documents referred to in this document are incorporated by reference herein in their entirety as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference the usage in the incorporated reference s are supplementary to that of this document for irreconcilable inconsistencies the usage in this document controls.

In this document the terms a or an are used as is common in patent documents to include one or more than one independent of any other instances or usages of at least one or one or more. In this document the term or is used to refer to a nonexclusive or such that A or B includes A but not B B but not A and A and B unless otherwise indicated. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover in the following claims the terms first second and third etc. are used merely as labels and are not intended to suggest a numerical order for their objects.

The above description is intended to be illustrative and not restrictive. For example the above described examples or one or more aspects thereof may be used in combination with others. Other embodiments may be used such as by one of ordinary skill in the art upon reviewing the above description. The Abstract is to allow the reader to quickly ascertain the nature of the technical disclosure for example to comply with 37 C.F.R. 172 b in the United States of America. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. Also in the above Detailed Description various features may be grouped together to streamline the disclosure. However the claims may not set forth features disclosed herein because embodiments may include a subset of said features. Further embodiments may include fewer features than those disclosed in a particular example. Thus the following claims are hereby incorporated into the Detailed Description with a claim standing on its own as a separate embodiment. The scope of the embodiments disclosed herein is to be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

