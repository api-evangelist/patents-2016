---

title: Auto-deployment and testing of system application test cases in remote server environments
abstract: A method for executing a system application test case of a runtime system in an integrated server environment is provided. The method includes establishing a transmission control protocol connection between a client development environment and an integrated server environment, to initiate execution of the system application test case in the integrated server environment. The method further includes issuing a data transfer protocol transmission request to the integrated server environment for a description script of the system application test case. The method further includes transmitting an extensible markup language of the requested description script. The method further includes issuing a data transfer protocol transmission request to execute a test of the system application test case. The method further includes executing the system application test case in the integrated server environment. The method further includes transmitting the extensible markup language document of the compiled test results to the client development environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547583&OS=09547583&RS=09547583
owner: International Business Machines Corporation
number: 09547583
owner_city: Armonk
owner_country: US
publication_date: 20160316
---
The present invention generally relates software system application and more particularly to dynamic deployment of software application test cases within an integrated system environment. In software development it is often necessary to execute and examine a system application test case or code in an integrated environment such as for example a Java application server. The integrated environment generally provides software and hardware resources such as database configuration resources or application development resources for examining the system application test cases. The integrated environment can also be a server development framework that provides a generalized approach for manually creating a client application server implementation for executing and examining the system application test cases. For example one function of the software developed framework can be based on manual execution of application procedures such as programs routines or scripts for supporting processing of the examined software test cases in the integrated environment.

Embodiments of the present invention disclose a computer implemented method for executing a system application test case of a runtime system in an integrated server environment. A transmission control protocol connection between a client development environment and a integrated server environment is established by an integrated server environment. The transmission connection is based on a request in the client development environment to initiate the execution of the system application test case. The established transmission control protocol is performed in parallel between the client development environment and the integrated server environment. A data transfer protocol transmission request is issued by the integrated server environment. The request is issued to the integrated server environment for a description script of the system application test case wherein the data transfer protocol transmission request is Hypertext Transfer Protocol. An extensible markup language of the requested description script to the client development environment is transmitted by the integrated server environment via a server component of the integrated server environment. A data transfer protocol transmission request to execute the test of system application test case in the integrated server environment is issued by the integrated server environment based on the transmitted description script. The system application test case in the integrated server environment is executed by the integrated server environment wherein the server component compiles test results of the executed system application test case in an extensible markup language document. The extensible markup language document of the compiled test results to the client development environment for display is transmitted by the integrated server environment wherein the extensible markup language document comprising a plurality of logs identifying a system application test case condition.

Detailed embodiments of the claimed structures and methods are disclosed herein however it can be understood that the disclosed embodiments are merely illustrative of the claimed structures and methods that may be embodied in various forms. This invention may however be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this invention to those skilled in the art. In the description details of well known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.

In software engineering a test case is a set of conditions or variables under which a tester client or system administrator of a computing system determines whether a software system application or one or more features of the software system application is operating as it was originally configured to operate or as it was originally programmed to execute program instructions. As such a test case can provide important information to the client or the systems administrator regarding operational quality of their software system application or software product. For example mechanisms can be implemented or configured to determine whether the software system application passes or fails such a test. However deployment and execution of such test cases are generally manually performed by the client or the system administrator. As such it may be advantageous among other things to provide a system to dynamically execute and examine software application test cases on a remote server and compile the software application test cases so the results may be used for further testing or evaluation.

Embodiment of the present invention generally relates to software system application and more particularly to automatic deployment of software application test cases between a client environment and a server environment. The embodiments include one or more circuits or subassemblies of circuits as well as a system or computer implemented methods of operation for dynamically executing and examining software application test cases on a remote application server of the server environment whereby the software application test cases are subsequently compiled as test results for further testing or evaluation.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages.

The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein includes an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks. The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which includes one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures.

For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

Referring now to an integrated application test environment for automatically deploying execution of integrated system application tests cases between a client development environment and a remote integrated server system environment whereby the integrated server system environment compiles test results of the executed system application test cases in documents such as extensible markup language XML documents for transmission of the compiled test results to the client development environment all within the integrated application test environment in accordance with at least one embodiment is depicted.

For example in the illustrated embodiment the integrated application test environment may include a computer with a processor and a data storage device that is enabled to run or execute program instructions of a software program . The computer may also include a client development environment A for managing an administrative computing interface for performing system administrative functions of the compiled test results. The integrated application test environment may also include a server running an integrated server environment B and interconnected with computer over communication network for automatically performing execution of integrated system application tests cases between the client development environment A and a remote of servlet application component of the integrated server environment B instantly without manual intervention in accordance with embodiments.

The integrated application test environment may also include a plurality of computers and servers only one of which is shown at least in . The communication network may include various types of communication networks such as a wide area network WAN local area network LAN a telecommunication network a wireless network a public switched network and or a satellite network. It should be appreciated that provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made based on design and implementation requirements.

For example the computer may communicate with the integrated server environment B running on server via the communication network for performing the execution of integrated system application tests cases within the integrated application test environment . The communications network may also include connections such as wire wireless communication links or fiber optic cables. As will be discussed with reference to server may include internal components and external components respectively and computer may include internal components and external components respectively.

The computer may be for example a laptop tablet or notebook personal computer PC a desktop computer a mainframe or mini computer or a personal digital assistant PDA . The computer can also be any portable device that provides computing information storage and computing retrieval capabilities including for example a handheld device or handheld computer pocket PC connected organizer electronic book eBook reader a personal digital assistant PDA a smart phone or other portable devices or any type of computing devices capable of accessing a network for performing the execution of integrated system application tests cases between the client development environment A and the integrated server environment B.

The database storage device of computer is any type of storage device storage server storage area network redundant array of independent discs RAID cloud storage service or any type of data storage. The database storage device can also be a relational model database server for storing program instructions for displaying information pertaining to automatic deployment of executed integrated system application tests cases in a computing interface of client development environment for viewing by client or systems administrator of client development environment A.

The server can be for example a mainframe server computer system such as a management server a web server or any other electronic device or computing system capable of transmitting data between server and computer for performing the automatic deployment of execution of integrated system application tests cases. The server can also represent a cloud of computers interconnected by one or more networks whereby the server is a primary server of a plurality of server computing systems that utilizes clustered computers when accessed through the communication network . For example a cloud computing system can be an implementation of automatic deployment of integrated system application tests cases within the integrated application test environment .

The system application test case repository of server is any type of storage device storage server storage area network redundant array of independent discs RAID cloud storage service or any type of data storage for storing information relating to execution of integrated system application tests cases of sever . Similarly the system application test case repository can also be a relational model database server for storing program instructions for display information pertaining to automatic deployment of integrated system application tests cases within the integrated application test environment . For example the relational model for database management of the system application test case repository is based on first order predicate logic. For example in the relational model of a database all data execution of integrated system application tests cases is represented in terms of tuples grouped into relations.

For example in the relational model of the system application test case repository related records of the executed of integrated system application tests cases are linked together based on a relative relationship of one or more system application test. Also one function of the relational model of the system application test case repository is to provide a declarative method for specifying data and queries of the system application test cases whereby users clients or systems administrators of the integrated application test environment can directly state what information pertaining to the executed system application test cases is contained in the system application test case repository and subsequently what information they would like to retrieve from the system application test case repository .

As such the integrated server environment B may provide a platform for implementing client retrieval mechanisms for categorizing data structures for storing data of the system application test cases and also retrieval procedures for answering queries for retrieving the data within the integrated application test environment .

Referring now to a functional block diagram illustrating program components and algorithms associated with the client development environment A in accordance with embodiments.

Client development environment A can be a web browser plug in system application program that provides an administrative user interface for indentifying integrated system application test cases that are created or modified by a systems administrator. The computing interface also provides functions for configuring automatic deployment of the identified integrated system application tests cases to the integrated server environment B whereby as described the integrated system environment B compiles test results of the executed system application test cases in an extensible markup language document XML for transmission of the compiled test results to the client development environment A.

The client development environment A may access system application test repository running on server for executing automatic deployment of the identified integrated system application test cases to the integrated server environment B. For example the client development environment A may be centralized on the server and also it may be divided between two different components server side and client side. The server side of integrated system environment B running on server may interact with the web browser of client development environment A for transmission of the compiled test results to the client development environment A via the interface of the web browsers of the client development environment A.

Client development environment A includes an administrative web page module . The administrative web page module is a web browser plug in add on that extends the functionality of client development environment A by adding additional user interface elements to the client development environment A for recording client user or system administrative actions in the additional user interface elements of client development environment A during execution and dynamic deployment of the identified integrated system application test cases between client development environment A and the integrated server environment B. Examples of web browsers include Internet Explorer Internet Explorer is a trademark of Microsoft Inc. in the United States other countries or both Firefox Firefox is a trademark of Mozilla Corporation in the United States other countries or both Safari Safari is a trademark of Apple Inc. in the United States other countries or both and Google Chrome Google Chrome is a trademark of Google Inc. in the United States other countries or both respectively.

Administrative web page module can also be a deamon a script or a process. The administrative web page module includes system development tool . System development tool is a software test environment which may consist of a code editor a compiler a debugger or a graphical user interface GUI builder for providing an interface of an integrated development environment IDE which may include system application test case development features for automatically authoring modifying compiling or deploying system application test cases of client development environment A and executing the system application test cases for testing within integrated server environment B.

System development tool may be a standalone application or may be included as part of one or more existing and compatible applications of computer for performing the automatic deployment of the system application test cases between the client development environment A and the integrated server environment B. The system development tool can be executed or processed to be deployed automatically by a system to improve programming efficiency and productivity of system administrators or application programmers for evaluating results of the system application test cases within integrated application test environment .

Examples of system development tool may include Eclipse IBM Rational Application Developer RAD Microsoft .NET Visual Studio etc. Eclipse is a trademark of the Eclipse Foundation in the United States and other countries IBM and Rational are registered trademarks of International Business Machines Corporation in the United States other countries or both Microsoft Visual Studio and .NET are registered trademarks or a trademark of Microsoft Corporation in the United States and other countries .

System development tool includes system test case analyzer . System test case analyzer identifies system application test cases in the client development environment A based on a notification of an initiation to execute modified data files of the system application test cases for executing test results of the modified data files in the integrated server environment B. For example the system test case analyzer automatically transmits the compiled test cases to the integrated server environment B whereby the integrated server environment B categorizes system classes of the data files pertaining to the integrated server environment B and triggers the integrated server environment B to reload the categorized system class for executing examining and automatically deploying the system application test cases.

The system test case analyzer includes test case runtime application and test case runner application . Test case runtime application is an application unit testing framework that provides facility or resources to client development environment A for managing performance execution of the system application test cases within integrated application test environment . Test case runtime application may be for example a JUnit JUnit is a registered trademark of Tom Warhover in the United States other countries or both . For example the JUnit can be utilized by test case runner application to dynamically create a set of unit tests based on the system application test cases whereby the unit tests are automatically deployed to integrated server environment B for executing the system application test cases whereby the integrated server environment B compiles test results of the executed system application test cases in an extensible markup language XML document for transmittal and display in client development environment A based on the configured unit tests.

The unit tests of JUnit can also provide particular system testing frameworks and services such as hardware or software services of an application server such as Java EE Java EE is a registered trademark of Oracle Corporation in the United States other countries or both which is adaptive to provide an application programming interface API and runtime environment for developing and running enterprise software of the executed test cases including network and web services and other large scale multi tiered scalable reliable and secure network applications for executing the test cases within the integrated application test environment .

The system test case analyzer can include a container of managed transactions of network services of software introspection of the identified integrated system application test cases identified for execution between the runtime application and test case runner application . The managed transactions can be utilized to issue a data transfer protocol transmission request for automatically transmitting a request to execute the system application test cases in integrated server environment B whereby for instance during any instance that the system application test case is built and identified in client development environment A the identified system application test case is automatically deployed to integrated server environment B for testing.

Initially a transmission control protocol TCP and internet protocol IP TCP IP network connection may be established between client development environment A and integrated server environment B via the communication network before commencement of the network message flow diagram . The TCP is the protocol utilized by Internet applications such as the World Wide Web email remote administration and file transfer of client development environment A for remotely connecting with applications or systems of integrated server environment B .

Also the IP is responsible for maintaining a network connection between the client development environment A and the integrated server environment B . IP is also responsible for routing the one or more packets of information for performing the automatic deployment of the identified integrated system application test from integrated server environment B to the client development environment A across integrated application test environment in accordance with embodiments.

Once the TCP IP connection is established at message flow the test case runtime application sends a request for a document description of the system application test cases to the test runner application . For example as previously described the document can be in a XML description format for providing software application introspection of the system development tool . Thereafter at message flow the test case runner application subsequently sends a message request to the servlet application component for a HyperText Markup Language HTML file of the document description of the system application test cases. For example the servlet application component is server plug in add on that extends network capabilities of integrated server environment B for performing the automatic deployment of the identified integrated system application test cases. The servlet application component can also be adaptive to respond and transmit any type of networking requests over the communication network . The servlet application component may be utilized by the integrated server environment B for generating content such as XML documents for executing the system application test cases in integrated server environment whereby the servlet application component compiles test results of the executed system application test cases.

At message flow the servlet application component transmits a response of the document description of the system application test cases to the test runner application whereby at message the test case runner application transmits the response of the document description of the system application test cases to the test runtime application . Thereafter at message the test runtime application issues a data transfer protocol transmission request to test case runner application for executing a test of system application test case in the integrated server environment B based on the transmitted description script of the response at message flow .

Further at message flow the issued data transfer protocol transmission request is subsequently transmitted to the servlet application component whereby the servlet application component executes the system application test case in the integrated server environment B . For example the servlet application component compiles test results of the executed system application test case in an XML document format for transmission of the results to the test runtime application . The servlet application component compiles test results of the executed system application test cases for transmission of the results consecutively in the form of subsequent programming request events such as at message event 1 XML response at message event 2 XML response and subsequently at message event N . . . XML response and so on. Also at message flow the test case runner application subsequently provides notification of the results to the test case runtime application for display of the results to the client development environment A.

As previously described at step the integrated server environment B establishes a TCP IP connection based on a request in client development environment to initiate execution of the system application test in integrated server environment B . For example a request response model between the client development environment A and the integrated server environment B is established and subsequently performed in parallel between the client development environment and the integrated server environment B for executing the system application test case. For example client development environment A identifies the system application test case in the client development environment based on a notification of an initiation to execute modified data files of the system application test case for executing test results of the modified data files in the integrated server environment B .

For example the client development environment further compiles the modified data files based on the identification of system application test case. For example the client development environment transmits the compiled test case to the integrated server environment B whereby the integrated server environment B categorizes system classes of the data files in the integrated server environment and triggers the integrated server environment to reload the categorized system class for executing system application test cases in the in the integrated server environment B .

Thereafter at step integrated server environment B issues the HTTP connection request transmission request within the integrated server environment B for a document description script of the system application test case. Further at step the integrated server environment B transmits the document description script to the client development environment via the servlet application component of the integrated server environment B . Also at step the integrated server environment B issues a data transfer protocol transmission request to execute a test of system application test case in the integrated server environment B based on the transmitted description script. For example at step the integrated server environment B issues a data transfer protocol transmission request to execute a test of system application test case in the integrated server environment B . Further at step the integrated server environment B executes the system application test case within integrated server environment B based on the request whereby the servlet application component compiles test results of the executed system application test case in a document script such as XML document that describes the executed system application test case.

Finally at step the integrated server environment B transmits the extensible markup language document of the compiled test results to the client development environment for display of test results of the system application test case in accordance with embodiments. For example the extensible markup language document of the compiled test results includes a plurality of events that occur during execution of the system application test case in the integrated server environment B . For example the plurality of events identify whether the execution the system application test case was initiated passed or failed automatic deployment and testing of the test results between integrated server environment B and client integrated environment B in accordance with embodiments.

Data processing system is representative of any electronic device capable of executing machine readable program instructions. Data processing system may be representative of a smart phone a computer system PDA or other electronic devices. Examples of computing systems environments and or configurations that may represented by data processing system include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems network PCs minicomputer systems and distributed cloud computing environments that include any of the above systems or devices.

Client development environment A and integrated server environment B may include respective sets of internal components and external components illustrated in . Each of the sets of internal components includes one or more processors one or more computer readable RAMs and one or more computer readable ROMs on one or more buses and one or more operating systems and one or more computer readable tangible storage devices . The one or more operating systems and software programs in client computer is stored on one or more of the respective computer readable tangible storage medium for execution by one or more of the respective processors via one or more of the respective RAMs which typically include cache memory . In the embodiment illustrated in each of the computer readable tangible storage medium is a magnetic disk storage device of an internal hard drive.

Alternatively each of the computer readable tangible storage medium is a semiconductor storage device such as ROM EPROM flash memory or any other computer readable tangible storage device that can store a computer program and digital information.

Each set of internal components also includes a R W drive or interface to read from and write to one or more portable computer readable tangible storage medium such as a CD ROM DVD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device. A software program such as client development environment A can be stored on one or more of the respective portable computer readable tangible storage medium read via the respective R W drive or interface and loaded into the respective hard drive .

Each set of internal components also includes network adapters or interfaces such as a TCP IP adapter cards wireless Wi Fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The software program and client development environment A in client computer and integrated server environment B can be downloaded to client computer and server computer respectively from an external computer via a network for example the Internet a local area network or other wide area network and respective network adapters or interfaces . From the network adapters or interfaces the code software programs and client development environment A in client computer and integrated server environment B in server computer are loaded into the respective hard drive . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Each of the sets of external components can include a computer display monitor a keyboard and a computer mouse . External components can also include touch screens virtual keyboards touch pads pointing devices and other human interface devices. Each of the sets of internal components also includes device drivers to interface to computer display monitor keyboard and computer mouse . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

