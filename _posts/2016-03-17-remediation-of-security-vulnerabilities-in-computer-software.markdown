---

title: Remediation of security vulnerabilities in computer software
abstract: Processing a downgrader specification by constructing a set of candidate downgrader placement locations found within a computer software application, where each of the candidate downgrader placement locations corresponds to a transition between a different pair of instructions within the computer software application, and where each of the transitions participates in any of a plurality of data flows in a set of security-sensitive data flows within the computer software application, applying a downgrader specification to the set of candidate downgrader placement locations, and determining that the downgrader specification provides full coverage of the set of security-sensitive data flows within the computer software application if at least one candidate downgrader placement location within each of the security-sensitive data flows is a member of the set of candidate downgrader placement locations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589134&OS=09589134&RS=09589134
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09589134
owner_city: Armonk
owner_country: US
publication_date: 20160317
---
The invention relates to computer software analysis in general and more particularly to remediation of security vulnerabilities in computer software.

Static analysis tools are often used by computer software developers to provide information about computer software while applying only static considerations i.e. without executing a computer software application . In one type of static analysis data flows are traced within a computer software application from sources being application programming interfaces API that introduce untrusted input into a program such as user input to sinks being security sensitive operations such as modifying a database. Such flows are identified as security vulnerabilities that may require remediation typically by ensuring that a flow that is identified as a security vulnerability encounters a downgrader that validates and or sanitizes untrusted input such as by checking whether the input contains illegal characters or is in an illegal format both common tactics used in malicious attacks. Static analysis tools that identify security vulnerabilities typically provide computer software developers with a short description of each type of security vulnerability found and may even provide sample code snippets that may be used by the developer to construct a downgrader for remediating the security vulnerability.

In addition to identifying a security vulnerability and deciding what type of downgrader to use for its remediation deciding where to locate a downgrader within a data flow is a matter of importance as well. Misplacement of a downgrader may leave the original security vulnerability in place or cause other problems. Also in order to maximize code quality and maintainability it is desirable to apply as few code changes as possible.

In one aspect of the invention a method is provided for processing a downgrader specification the method including constructing a set of candidate downgrader placement locations found within a computer software application where each of the candidate downgrader placement locations corresponds to a transition between a different pair of instructions within the computer software application and where each of the transitions participates in any of a plurality of data flows in a set of security sensitive data flows within the computer software application applying a downgrader specification to the set of candidate downgrader placement locations and determining that the downgrader specification provides full coverage of the set of security sensitive data flows within the computer software application if at least one candidate downgrader placement location within each of the security sensitive data flows is a member of the set of candidate downgrader placement locations.

In another aspect of the invention a method is provided for processing a downgrader specification the method including constructing a set of candidate downgraders for processing a set of security sensitive data flows within a computer software application where each of the security sensitive data flows is processable by at least one of the candidate downgraders applying a downgrader specification to the set of candidate downgraders and determining that the downgrader specification provides full coverage of the set of security sensitive data flows within the computer software application if each of the security sensitive data flows is processable by at least one of the candidate downgraders remaining in the set of candidate downgraders.

In other aspects of the invention systems and computer program products embodying the invention are provided.

The invention is now described within the context of one or more embodiments although the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical data storage device a magnetic data storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Reference is now made to which is a simplified conceptual illustration of a system for remediation of security vulnerabilities in computer software constructed and operative in accordance with an embodiment of the invention. In the system of a downgrader manager is configured to construct a set of candidate downgrader placement locations found within a computer software application . Each of the candidate downgrader placement locations in set corresponds to a transition between a different pair of instructions within computer software application and each of the transitions participates in one or more data flows in a set of security sensitive data flows within computer software application such as where the security sensitive data flows were identified using conventional static analysis techniques. Downgrader manager is additionally or alternatively configured to construct a set of candidate downgraders for processing any and preferably all of the security sensitive data flows in set preferably where each of the security sensitive data flows in set is processable by at least one of the candidate downgraders in set . Downgrader specification processor is preferably configured to construct set by selecting candidate downgraders from a predefined set of downgraders .

A downgrader specification processor is configured to eliminate from set of candidate downgrader placement locations any of the candidate downgrader placement locations whose elimination is indicated by a downgrader specification . Downgrader specification may be predefined for use with any computer software application or user defined to be specifically adapted for use with a particular computer software application or predefined in part and user defined in part. Downgrader specification may for example indicate that downgraders are to be placed in particular modules or layers of a computer software application and therefore candidate downgrader placement locations in set that are not in the indicated modules or layers are to be eliminated from set . Downgrader specification may for example additionally or alternatively indicate that downgraders may not be placed in certain areas in the computer software application code and therefore candidate downgrader placement locations in set that are located in the indicated areas are to be eliminated from set . Downgrader specification may for example additionally or alternatively indicate that downgraders be placed at most n instruction steps away from a code location where the untrusted data is read and or m instruction steps away from a security sensitive operation and therefore candidate downgrader placement locations in set that are not within the indicated distances are to be eliminated from set . Downgrader specification processor is alternatively or additionally configured to eliminate from the set of candidate downgraders any of the candidate downgraders whose elimination is indicated by downgrader specification . Downgrader specification may for example require that

A coverage manager is configured to determine whether or not downgrader specification provides full coverage of set of security sensitive data flows within computer software application . If after downgrader specification processor has processed downgrader specification as described hereinabove at least one candidate downgrader placement location within each of the security sensitive data flows in set is a member of set of candidate downgrader placement locations then downgrader specification provides full coverage of set of security sensitive data flows within computer software application . Otherwise if downgrader specification is configured such that all of the candidate downgrader placement locations within any of the security sensitive data flows in set have been eliminated from set of candidate downgrader placement locations then downgrader specification does not provide full coverage of set of security sensitive data flows within computer software application . Coverage manager is additionally or alternatively configured to determine that downgrader specification provides full coverage of the set of security sensitive data flows within the computer software application if each of the security sensitive data flows is processable by at least one of the candidate downgraders remaining in the set of candidate downgraders. Coverage manager is preferably configured to report such as via a computer output device not shown whether or not downgrader specification provides full coverage of set preferably indicating which aspects of downgrader specification resulted in less than full coverage and or which security sensitive data flows are not covered by downgrader specification .

Any of the elements shown in are preferably implemented by one or more computers such as a computer in computer hardware and or in computer software embodied in a non transitory computer readable medium in accordance with conventional techniques.

Reference is now made to which is a simplified flowchart illustration of an exemplary method of operation of the system of operative in accordance with an embodiment of the invention. In the method of a set is constructed of candidate downgrader placement locations found within a computer software application step . Each of the candidate downgrader placement locations in the set corresponds to a transition between a different pair of instructions within the computer software application and each of the transitions participates in one or more data flows in a set of security sensitive data flows within the computer software application such as where the security sensitive data flows were identified using conventional static analysis techniques. Candidate downgrader placement locations are eliminated from the set of candidate downgrader placement locations if their elimination is indicated by a downgrader specification step . If at least one candidate downgrader placement location within each of the security sensitive data flows is a member of the set of candidate downgrader placement locations step then it is determined that the downgrader specification provides full coverage of the set of security sensitive data flows within the computer software application step . Otherwise it is determined that the downgrader specification does not provide full coverage of the set of security sensitive data flows within the computer software application step . The coverage determination is preferably reported step preferably indicating which aspects of the downgrader specification resulted in less than full coverage and or which security sensitive data flows are not covered by the downgrader specification.

It is noted that step need not be performed if when constructing the set of candidate downgrader placement locations a candidate downgrader placement location is included in the set if its membership in the set is indicated by the downgrader specification.

Reference is now made to which is a simplified flowchart illustration of an exemplary implementation of the system of and method of operative in accordance with an embodiment of the invention. In the method of static security analysis of a computer software application is performed during which analysis a data propagation graph is computed and a set of security sensitive data flows is identified step . Each transition that participates in one or more security sensitive data flows in the data propagation graph is encoded as a unique propositional variable step . Each of the security sensitive data flows is encoded as a disjunctive propositional clause where the clause includes all propositional variables corresponding to the transitions that participate in the data flow step . Variables corresponding to transitions whose elimination are indicated by a downgrader specification are eliminated step . The clauses are conjoined to form a Conjunctive Normal Form CNF formula step which is then processed by a satisfiability SAT solver step . If the formula is satisfiable step then it is determined that the downgrader specification provides full coverage of the set of security sensitive data flows within the computer software application step . Otherwise it is determined that the downgrader specification does not provide full coverage of the set of security sensitive data flows within the computer software application step . The coverage determination is preferably reported step preferably indicating which aspects of the downgrader specification resulted in less than full coverage and or which security sensitive data flows are not covered by the downgrader specification.

Reference is now made to which is a simplified flowchart illustration of an exemplary method of operation of the system of operative in accordance with an embodiment of the invention. In the method of a set is constructed of candidate downgraders for processing any and preferably all of the security sensitive data flows found within a computer software application step preferably where each of the security sensitive data flows is processable by at least one of the candidate downgraders. Candidate downgraders are eliminated from the set of candidate downgraders if their elimination is indicated by a downgrader specification step . If each of the security sensitive data flows is processable by at least one of the candidate downgraders remaining in the set of candidate downgraders step then it is determined that the downgrader specification provides full coverage of the set of security sensitive data flows within the computer software application step . Otherwise it is determined that the downgrader specification does not provide full coverage of the set of security sensitive data flows within the computer software application step . The coverage determination is preferably reported step preferably indicating which aspects of the downgrader specification resulted in less than full coverage and or which security sensitive data flows are not covered by the downgrader specification.

It is noted that step need not be performed if when constructing the set of candidate downgraders a candidate downgrader is included in the set if its membership in the set is indicated by the downgrader specification.

It will be appreciated that the methods of and may be combined where both candidate downgraders and candidate downgrader placement locations may be determined with respect to a downgrader specification as described herein.

Referring now to block diagram illustrates an exemplary hardware implementation of a computing system in accordance with which one or more components methodologies of the invention e.g. components methodologies described in the context of may be implemented according to an embodiment of the invention.

As shown the techniques for controlling access to at least one resource may be implemented in accordance with a processor a memory I O devices and a network interface coupled via a computer bus or alternate connection arrangement.

It is to be appreciated that the term processor as used herein is intended to include any processing device such as for example one that includes a CPU central processing unit and or other processing circuitry. It is also to be understood that the term processor may refer to more than one processing device and that various elements associated with a processing device may be shared by other processing devices.

The term memory as used herein is intended to include memory associated with a processor or CPU such as for example RAM ROM a fixed memory device e.g. hard drive a removable memory device e.g. diskette flash memory etc. Such memory may be considered a computer readable storage medium.

In addition the phrase input output devices or I O devices as used herein is intended to include for example one or more input devices e.g. keyboard mouse scanner etc. for entering data to the processing unit and or one or more output devices e.g. speaker display printer etc. for presenting results associated with the processing unit.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be appreciated that any of the elements described hereinabove may be implemented as a computer program product embodied in a computer readable medium such as in the form of computer program instructions stored on magnetic or optical storage media or embedded within computer hardware and may be executed by or otherwise accessible to a computer not shown .

While the methods and apparatus herein may or may not have been described with reference to specific computer hardware or software it is appreciated that the methods and apparatus described herein may be readily implemented in computer hardware or software using conventional techniques.

While the invention has been described with reference to one or more specific embodiments the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

