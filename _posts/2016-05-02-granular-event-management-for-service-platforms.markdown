---

title: Granular event management for service platforms
abstract: Granular event management for service platforms. First bundle information relating to the content of a bundle is received at a first time, wherein the bundle relates to one or more resources in an application of a distributed computing environment. The bundle is monitored for a bundle event, wherein the bundle event is generated from a change in a lifecycle state of the bundle. Whether the bundle event has occurred is determined. Responsive to determining that the bundle event has occurred, second bundle information relating to the content of the bundle is received at a second time. Responsive to receiving the second bundle information, a granular event associated with the bundle event is identified, wherein the granular event relates to a difference between the first bundle information and the second bundle information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471403&OS=09471403&RS=09471403
owner: International Business Machines Corporation
number: 09471403
owner_city: Armonk
owner_country: US
publication_date: 20160502
---
The present invention relates generally to the field of distributed computing environments and more particularly to a method for managing granular events by processing bundle events.

Distributed computing environments implement service platforms for managing lifecycles of software components of network devices. An Open Service Gateway initiative OSGi architecture is a known service platform that uses bundles to dynamically install and manage new services on network devices as well as executing the services provided by those bundles. Bundles are basic units which run within an OSGI container responsible for performing a specific task including at least one OSGi service and undergo one or more bundle events.

Typically event management for OSGi architectures and other service platforms involves a plugin descriptor to detect an occurrence of an event at the bundle level. Furthermore detection of bundle events helps improve lifecycle management of objects in distributed computing environments.

Embodiments of the present invention provide systems methods and computer program products for managing granular events by processing bundle events. First bundle information relating to the content of a bundle is received at a first time wherein the bundle relates to one or more resources in an application of a distributed computing environment. The bundle is monitored for a bundle event wherein the bundle event is generated from a change in a lifecycle state of the bundle. Whether the bundle event has occurred is determined. Responsive to determining that the bundle event has occurred second bundle information relating to the content of the bundle is received at a second time. Responsive to receiving the second bundle information a granular event associated with the bundle event is identified wherein the granular event relates to a difference between the first bundle information and the second bundle information.

Embodiments of the present invention provide systems methods and computer program products for managing granular events in open service gateway initiative OSGi environments. Embodiments of the present invention can detect bundle events and process the detected bundle events into granular events. Furthermore embodiments of the present invention may be used to provide subscribers with generated notifications describing one or more granular event occurrences.

Gateway is a service platform framework e.g. Java framework for developing and deploying modular software programs and libraries. Note the term Java may be subject to trademark rights in various jurisdictions throughout the world and is used here only in reference to the products or services properly denominated by the marks to the extent that such trademark rights may exist. In one embodiment gateway comprises container as well as additional services and components that facilitate functionality of gateway . For example gateway may include registries application programming interfaces API s and other services e.g. system services protocol services etc. . Furthermore gateway may be integrated in runtime environments e.g. Java Runtime Environment operating systems and appropriate other components as described in .

Container includes bundle bundle subscriber notifier manager and comparator . In other embodiments container may include additional bundles other than bundle and bundle . In one embodiment container includes components that are modular and help manage one or more services. For example an application utilizing container may involve multiple services that are distributed in one or more components of container . Furthermore the one or more components in container help more easily manage cross dependencies between bundle and bundle .

Bundle and bundle comprise artifacts e.g. Java classes bundle content etc. metadata e.g. bundle descriptor manifest file etc. as well as additional services that give the artifacts sophisticated behaviors. In one embodiment bundle and or bundle undergo a bundle event. The bundle event may be based at least in part on bundle information relating to bundle content of bundle and or bundle at a first time and bundle information relating to bundle content of bundle and or bundle at a second time. Furthermore the bundle information relating to bundle content of bundle and or may be metadata e.g. bundle descriptor manifest file etc. as previously discussed. In another embodiment a bundle event may be based at least in part on a change in lifecycle state e.g. INSTALLED RESOLVED STARTING ACTIVE STOPPING UNINSTALLED etc. . For example bundle is INSTALLED at a first time and is subsequently UNINSTALLED at a second time. In this instance bundle content e.g. Java classes etc. are modified with respect to the changed lifecycle state. Furthermore the modifications made to the bundle content can be described by identified granular events as described in greater detail herein. In one embodiment the identified granular events are one or more changes in bundle content as a result of a bundle event e.g. class definition changes object changes etc. . The various lifecycle states of bundle and bundle can be detected by manager . As previously discussed a greater number of bundles can be located in container or in another container of gateway and there may be a number of dependencies between the bundles. For example in certain embodiments bundle may have one or more dependencies on bundle . In yet another embodiment bundle or bundle may be located outside of container e.g. in a distributed caching solution . Furthermore bundle and or bundle may be bundles that contain one or more dynamically loadable Java class files.

Subscriber includes one or more components or parties that subscribe to notifications generated by notifier . In one embodiment subscriber is an application and or a bundle e.g. bundle bundle etc. configured to receive notifications that describe bundle events. In another embodiment subscriber is disposed within container and helps manage services executed within container . In yet another embodiment subscriber is implemented by another component of service platform environment not depicted to help manage services executed across service platform environment . In general subscriber is used by service platform environment and components therein to receive notifications that describe bundle events and leverage the received notifications to help manage services and changes in lifecycle states of components within service platform environment . Furthermore it should be understood that a greater or lesser number of subscribers may be implemented by service platform environment to facilitate management of executable services and application of service platform environment .

Notifier generates event messages e.g. bundle events granular event occurrences etc. and uses the generated event messages to notify one or more subscribers . In one embodiment notifier uses information retrieved from a sub component e.g. event log of manager .

Manager monitors bundle and bundle for bundle events e.g. a change in a bundle lifecycle state . Furthermore manager interacts with notifier and comparator to further process bundle events and generate notifications based on granular event occurrences. In one embodiment manager identifies granular event occurrences in bundle and bundle by using bundle information relating to bundle content of bundles and at a first time and bundle information relating to content of bundles and at a second time e.g. metadata that describes bundle content .

Comparator processes bundle events for bundle and bundle that were detected by manager to generate granular events. In one embodiment comparator compares bundle information relating to bundle content of bundle and bundle e.g. metadata bundle descriptor content metadata and annotations in the Java class by using bundle information relating to bundle content of bundles and at a first time and bundle information relating to content of bundles and at a second time. For example if bundle underwent a change in lifecycle state e.g. UNRESOLVED to RESOLVED then comparator compares bundle information relating to bundle content from an UNRESOLVED lifecycle state of bundle with bundle information relating to bundle content from a RESOLVED lifecycle state of bundle .

In step manager monitors bundle and bundle for bundle events. In one embodiment manager uses a bundle descriptor for bundle and a bundle descriptor for bundle to monitor for a bundle event e.g. change in lifecycle state in bundle and or bundle . As previously discussed a bundle event is based at least in part on one or more changes in objects and or classes of bundles and or i.e. bundle content . In one embodiment the one or more changes in objects and or classes of bundles and or may be a result from a change in lifecycle state of bundles and or . Furthermore the one or more changes i.e. granular events can be identified by processing discrepancies between bundle information relating the bundle content of bundles and or at a first time and bundle information relating the bundle content of bundles and or at a second time as described in greater detail herein. For example bundle may undergo a bundle event wherein the bundle event involves a change in lifecycle state from STARTING to STOPPING. In this instance one or more changes in objects and or classes of bundle may occur as a result of the change in lifecycle state for bundle . Accordingly subsequent processing of the bundle event may help generate and identify granular events that describe the one or more changes in objects and or classes i.e. bundle content of bundle .

In step manager determines whether a bundle event was detected. In one embodiment the bundle descriptor for bundle and the bundle descriptor for bundle contains information to determine whether one or more bundle events occurred. In other embodiments manager may determine bundle event occurrences for bundles and or using any method known in the art.

If in step manager determines that a bundle event was detected then in step manager transmits the detected bundle event to comparator to identify one or more granular events. For example if bundle undergoes a bundle event e.g. from UNINSTALL to INSTALL lifecycle state then comparator compares bundle information relating the bundle content of bundle at a first time and bundle information relating the bundle content of bundle at a second time. Stated differently discrepancies of metadata between the UNINSTALL lifecycle state of bundle and the INSTALL lifecycle state of bundle help create one or more granular events. It should be understood that the one or more identified granular events are identified in a different manner from which the bundle event is detected. For example the information used to identify granular events in step may be unavailable to manager or comparator at the time that manager is monitoring bundles for bundle events step . In certain embodiments the metadata used by manager to detect bundle events includes only lifecycle state information while the information used to identify granular events by comparator includes additional more granular information.

If in step manager determines that a bundle event was not detected then manager continues to monitor bundle and bundle as described in step .

In step manager receives the created one more granular events from comparator . In one embodiment manager receives information describing the one or more granular events. For example the information may describe mapping of the bundle event or higher level event to the granular events attributes of the bundle descriptor introspection depth for bundle content computed values of bundle content annotations of interest event annotation etc.

In step manager identifies the one or more created granular events and transmits the identified granular events to notifier . In one embodiment manager uses the information received from comparator in step to identify the one or more created granular events. Furthermore manager also identifies cross dependencies of objects in container and or gateway that are associated with the granular event. For example as previously discussed bundle underwent a lifecycle state change e.g. a bundle event from ACTIVE to INACTIVE. In this instance one or more granular events were created and subsequently identified. Furthermore manager analyzes the one or more identified granular events to determine if one or more portions of bundle content in bundle have dependencies outside of bundle . If one or more portions of bundle content are identified in bundle that have external dependencies e.g. a dependent class and or object in bundle then manager ensures that notifications reflect granular event occurrences in both bundle and bundle . Examples of information that manager uses to analyze the one or more identified granular events are EBEMSupported which can describe whether an extended bundle event manager is supported or not EBEMSupportedPackages which describes a group of classes and or objects e.g. packages to be introspected by the extended bundle event manager EBEMSupportedClasses which includes a list of specific classes that should be introspected by the extended bundle event manager SupportedAnnotations which include a list of annotations that should be considered by the extended bundle event manager to detect the changes that have been introduced AuditLog which logs the changes that has been detected and rollbackSupported which helps to rollback in the event of failures such as metadata updates etc.

In step notifier receives granular event information from manager . In one embodiment this information may be retrieved from a sub component i.e. event log of manager .

In step notifier uses the information received from manager to generate a notification. In one embodiment the notifications describe the granular event occurrence by including information such as describing the one or more portions of bundle content that have changed i.e. class changes object redefinitions etc. . An example of a notification can be seen in Code 1.

In step notifier transmits the generated notification to subscriber . In one embodiment the generated notification includes parameters that can provide additional detail to subscriber . Furthermore the type of granular event is defined in the metadata of the generated notification that is later used by subscriber to take action.

In one embodiment bundle event listener monitors applications and for bundle events. For example application may undergo a bundle event and change the bundle state from active bundle state to uninstall bundle state . In this instance bundle event listener detects the bundle event in application and transmits bundle event information to extended bundle event manager for subsequent processing.

Extended bundle event manager uses bundle content comparator and bundle event information to generate granular events based at least in part on discrepancies between metadata of bundles in application prior to the bundle event e.g. active bundle state and metadata of bundles in application subsequent to the bundle event e.g. uninstall bundle state . As previously discussed extended bundle event manager may transmit the detected granular events to notifier . Subsequently notifier may generate notifications to one or more subscribers e.g. web services registry business glossary metadata manager and other resources . Accordingly the one or more subscribers may leverage information pertaining to the granular events to help improve lifecycle management of application and in OSGi container .

Computer system includes communications fabric which provides for communications between one or more processors memory persistent storage communications unit and one or more input output I O interfaces . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In one embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media. Software is stored in persistent storage for execution and or access by one or more of the respective processors via one or more memories of memory .

Persistent storage may include for example a plurality of magnetic hard disk drives. Alternatively or in addition to magnetic hard disk drives persistent storage can include one or more solid state hard drives semiconductor storage devices read only memories ROM erasable programmable read only memories EPROM flash memories or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage can also be removable. For example a removable hard drive can be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit provides for communications with other computer systems or devices via a network e.g. network . In this exemplary embodiment communications unit includes network adapters or interfaces such as a TCP IP adapter cards wireless Wi Fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The network can comprise for example copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers. Software and data used to practice embodiments of the present invention can be downloaded through communications unit e.g. via the Internet a local area network or other wide area network . From communications unit the software and data can be loaded onto persistent storage .

One or more I O interfaces allow for input and output of data with other devices that may be connected to computer system . For example I O interface can provide a connection to one or more external devices such as a keyboard computer mouse touch screen virtual keyboard touch pad pointing device or other human interface devices. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. I O interface also connects to display .

Display provides a mechanism to display data to a user and can be for example a computer monitor. Display can also be an incorporated display and may function as a touch screen such as a built in display of a tablet computer.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

