---

title: Apparatus, systems and methods for deployment and management of distributed computing systems and applications
abstract: Embodiments of apparatus, systems and methods facilitate the running a distributed computing application on at least one of a plurality of cloud infrastructures. In some embodiments, the processor implemented method comprises: deriving an infrastructure independent representation of the distributed computing application; and running the distributed computing application on one of a plurality of cloud infrastructures by utilizing a cloud-specific implementation of the infrastructure independent representation of the distributed computing application. The cloud-specific implementation of the infrastructure independent representation corresponds to the cloud infrastructure on which the distributed application is run.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09661071&OS=09661071&RS=09661071
owner: CLIQR TECHNOLOGIES, INC.
number: 09661071
owner_city: San Jose
owner_country: US
publication_date: 20160202
---
This application is a continuation of U.S. patent application Ser. No. 14 497 196 entitled Apparatus Systems and Methods for Deployment and Management of Distributed Computing Systems and Applications filed Sep. 25 2014 which is a continuation of U.S. patent application Ser. No. 13 024 302 now U.S. Pat. No. 8 862 933 entitled Apparatus Systems and Methods for Deployment and Management of Distributed Computing Systems and Applications filed Feb. 9 2011. Both of the above applications are assigned to the assignee hereof and are incorporated by reference in their entireties herein for all purposes.

The present invention relates to the field of distributed computing and in particular to apparatus systems and methods to facilitate the deployment and management of distributed computing systems and applications.

The performance of computing applications may often be increased by distributing the computational workload across nodes in a cluster of computers. For example the performance of compute intensive applications such as DNA sequencing financial modeling weather simulations electronic design automation etc. can be significantly improved by distributing the applications across nodes in computing clusters. Similarly by distributing web applications over a computing cluster performance of the application may be enhanced by decreasing latency and or increasing throughput. Most applications today including the examples mentioned above are designed and programmed to be distributed over a cluster of computers. Indeed a vast majority of organizations such as corporations academic departments and research centers use computing clusters for both mission critical applications and for a variety of other functions that arise in the course of normal business operations. Because applications that utilize an organizations private cluster may be run infrequently the utilization of such clusters may be less than ideal. In addition there are significant costs associated with the provisioning and maintenance of large computing clusters. Moreover for a given private cluster and application there is an upper threshold on the scalability of the application because increasing the capacity of the cluster may involve the physical addition of hardware and other resources to the cluster. The evolution of Cloud computing services or public clouds which provide on demand access to high performance computing capabilities over the Internet is an attempt to increase efficiencies and scalability while reducing the costs associated with large computing clusters.

 Cloud computing can refer to the use of a company s own computer cluster but more often the term refers to the use of publicly available computing resources over the Internet through Web browser based or client side applications. The cloud infrastructures are typically made available on an on demand basis. Cloud computing enables organizations to run applications on reliable highly available and scalable software and hardware infrastructures referred to as clouds. Clouds may use virtualization or sophisticated systems management solutions to provide a flexible fault tolerant and highly available view of underlying resources so that dedicated hardware resources can be dynamically shared across several users instead of being assigned individually. These computing resources which are often made available as virtual machines and in some instances as physical machines may be accessed using Application Programming Interfaces APIs and self service portals such as websites accessed using a web browser. Cloud infrastructure which is offered by companies such as Amazon EC2 Terremark Rackspace and Savvis refers to the provision of Infrastructure as a Service IaaS and permits fee based on demand access to the power of computing clusters and datacenters over the Internet. In some instances organizations may use virtualization and convert their private data centers into clouds as well. These are termed private clouds. As used herein the term cloud can refer to both public and private clouds which can be set up as virtualized or physical compute clusters.

One drawback of current cloud computing systems is that they continue to present an infrastructure view of the resources so that end users manage cloud dependent machines with varying storage network memory and compute capabilities. For example cloud providers may use very different APIs to present resources and the underlying capabilities of the cloud computing infrastructure to users. Consequently complicated software systems may be even harder to manage on clouds than on private datacenters because i the infrastructure may be very different from a configuration under one s private control ii the cloud infrastructure varies with provider and iii each cloud provider has very different APIs to access provision and scale resources. For example shared storage may be provided in different ways on different clouds. Amazon for e.g. has https based shared storage called Amazon S3 while on Rackspace one can utilize Network Attached Storage System Area Network NAS SAN hardware to get shared storage. These differences in hardware and distributed systems capabilities creep into the virtualization abstraction so that porting and migrating existing applications to cloud infrastructures can involve significant re coding re architecting and revision of systems management security and compliance features. Therefore there is a need for apparatus systems and methods that facilitate the quick seamless and transparent porting and migration of existing applications to a variety of cloud infrastructures including hybrid public private infrastructures.

Consistent with embodiments disclosed herein apparatus systems and methods for the deployment and management of distributed computing systems and applications are presented. In some embodiments a method for running a distributed computing application on at least one of a plurality of cloud infrastructures may comprise deriving an infrastructure independent representation of the distributed computing application and running the distributed computing application on the at least one cloud infrastructure by utilizing at least one cloud specific implementation of the infrastructure independent representation of the distributed computing application and wherein the at least one cloud specific implementation corresponds to the at least one cloud infrastructure.

Embodiments also relate to software firmware and program instructions created stored accessed or modified by processors using computer readable media or computer readable memory. The methods described may be performed on computers including distributed computing systems such as clouds.

In accordance with embodiments disclosed herein apparatus systems and methods for the deployment and management of distributed computing systems and are presented.

Cloud platform layer allows developers to build applications to run on a platform provider s infrastructure which can free developers from concerns about environment configuration and infrastructure scaling. Typically the service delivery model allows the customer to rent a platform which may include virtualized servers along with associated services that provide an integrated environment for one or more of development testing deployment hosting maintenance and running of applications. The functionality provided by the cloud platform layer is also termed Platform as a Service PaaS . Finally Cloud application layer is where applications run. These applications may include those that offer web based software as a service SaaS .

In the DIY method significant work may be needed to re code and re architect existing applications create virtual image deployments and implement a management layer to provision configure and manage those images in the target cloud environment. Because distributed systems require orchestration between several components that can be part of different images migrating applications between clouds may involve complicated deployment and management procedures.

Using an appropriate PaaS may help reduce the complexity of the migration task. However available PaaS are also specific to a given style of computing and application and technology stack. For example Heroku is a PaaS cloud that takes applications written in the Ruby language and deploys them to Amazon EC2. Heroku maintains appropriate Amazon Machine Images AMIs that are needed for running Ruby applications on Amazon and a management layer to provision and scale such applications. However Heroku suffers from the limitations similar to the DIY methodology because its custom built Amazon specific library of virtual machine images can be only used on Amazon for Ruby applications.

As shown in cloud infrastructure Cloud may be Amazon EC 2 while cloud infrastructure Cloud may be Terremark and cloud infrastructure Cloud may be a private cloud. The conventional process of migrating applications to cloud infrastructures and or typically involves significant effort in the form of migration tasks and respectively. As explained above migration tasks and to port application may involve a Recoding and re architecting distributed application to fit cloud infrastructure b Creating Virtual Machine Images for distributed application on that cloud c Coding a deployment and management layer to provision configure and scale application deployment on the cloud and d Implementing additional management features such as security and compliance.

In some embodiments infrastructure independent representation may be obtained based on characteristics and or attributes associated with distributed application . For example a metadata representation of distributed application may be used as infrastructure independent representation . In some embodiments infrastructure independent representation may be obtained without recoding or re architecting distributed application .

For example infrastructure independent representation may be obtained based on a contract or behavior associated with the applications that guarantees successful execution. In general distributed systems may be modeled by in terms of constructs that capture these contracts or behaviors. Constructs can include system constructs which pertain to a manner of utilizing resources e.g. compute resources storage memory and or network and pattern constructs which pertain to the mechanics framework or paradigm governing the interaction of systems in performing a computational task e.g. master slave map reduce message passing stateless applications . In some embodiments infrastructure independent representation may be obtained by using the contract or behavior associated with distributed application to remove infrastructure dependent details from system and pattern constructs in a manner that is independent of the underlying implementation of that construct.

For example from the perspective of distributed application shared storage is a distributed system that adheres to the contract that bits stored in the system are consistently available to individual nodes in the computing cluster. Shared storage may be implemented by many available systems such as Network File System NFS over NAS SAN Cluster File System Distributed File System DFS or https based remote storage such as Amazon S3. In addition the shared storage used by distributed application may have various associated characteristics such as one or more of security high availability and or redundancy constraints minimum read and write performance etc. Although the eventual implementation of the shared storage may be infrastructure dependent infrastructure independent representation can include a description of the shared storage in terms of the contract and characteristics associated with the storage.

In some embodiments seamless transparent migration and deployment of distributed application to various cloud infrastructures may be facilitated by using the infrastructure independent representation to obtain corresponding infrastructure dependent implementations such as shared storage implementations for the respective cloud infrastructures. Cloud infrastructures include but are not limited to public cloud infrastructures such as Amazon RackSpace Terremark Microsoft Azure and Savvis and or private clouds that may be built using products such as VMware vCloud Nimbula OpenStack or over plain linux clusters. For example the shared storage information in infrastructure independent representation may be used to obtain an appropriate shared storage implementation with the appropriate specified characteristics such as DFS for Amazon NAS SAN for Terremark etc.

In some embodiments code libraries on the various clouds may be used to obtain infrastructure dependent implementations from infrastructure independent representation . Accordingly implementations of distributed application may be automatically realized and deployed on cloud infrastructures Cloud Cloud and or Cloud based on information infrastructure independent representation . As shown in cloud infrastructure Cloud may be Amazon EC 2 while cloud infrastructure Cloud may be Terremark and cloud infrastructure Cloud may be a private cloud. In some embodiments infrastructure independent representation may be generated by using language primitives in an appropriate programming or description language which in some instances may be a proprietary language.

In some embodiments the primitives used may be based on the system and pattern constructs used to models distributed systems. For example System Primitives may include commands or instructions that facilitate the launching of cluster with n nodes on one or more clouds. Cloud specific implementations of launching of cluster with n nodes may be used to implement the primitive. As another example system primitives may also include commands or instructions that facilitate the launching of shared storage wherein the underlying implementation of the primitive on individual clouds can be a cloud specific.

Pattern Primitives may include commands or instructions such as parallel pattern which may be used to run an application command or a series of commands on n compute nodes with shared storage in parallel. The parallel pattern primitive describes the simple execution of commands simultaneously on cluster nodes. Another example of a pattern primitive is batch execution pattern which may be used to run a number t of tasks placed on a queue on a number n of compute nodes. The batch execution pattern primitive example above can describe an execution pattern that utilizes shared storage a queue and master slave compute nodes. Pattern primitives may be used to orchestrate the set up of underlying distributed systems during application deployment.

Additionally as shown in batch execution pattern primitive specification further includes information such as inputs at modeling time Model Inputs None inputs utilized at deployment execution time at the time of application deployment execution Run Inputs and application characteristics Characteristic Inputs None . Batch execution pattern primitive specification lists Run Inputs as NumTasks NumNodes which indicates that the Number of Tasks and the Number of Nodes to be utilized are input at run time.

Batch execution pattern primitive specification also includes a listing of implementations of the primitive on various clouds Implementations which lists the clouds Amazon Rackspace under Cloud on which the primitive has been implemented. In some embodiments a library of implementations for primitives is maintained for one or more clouds. Implementations of the primitive may include metadata and code. For example the metadata portion of a primitive implementation on a cloud may include i a reference to the primitive for which this is the implementation and ii a reference to the cloud type for which this implementation has been made and or iii concrete values for characteristics that this implementation can meet. The code portion may include details pertaining to the specific implementation represented by an execute method that has the appropriate logic to launch or execute the primitive on the cloud. In one embodiment for an Object Oriented implementation primitives may be represented by interfaces or XML metadata while implementations can be concrete classes with execute methods. As shown in Cloud lists the specific execute methods for Amazon and Rackspace as AmazonBatchExecution and RackspaceBatchExecution respectively.

Additionally as shown in RUN CMD LINE primitive specification further includes information such as Model Inputs inputs utilized at deployment execution time Run Inputs and application characteristics Characteristic Inputs . Model Inputs lists the Application bits which is the name of the executable the command line to run the executable and the names of command line parameters. RUN CMD LINE primitive specification lists Run Inputs as Command line parameters and in practice would list the actual command line parameter values to be used at run time.

Further RUN CMD LINE primitive specification also lists the operating system and hardware configuration for running under Characteristic Inputs . RUN CMD LINE primitive specification also includes a listing of implementations of the primitive on various clouds Implementations which lists the clouds Amazon Rackspace under Cloud on which the primitive has been implemented. As shown in Cloud lists the cloud specific implementations of RUN CMD LINE primitive for Amazon and Rackspace as Amazon RunCmdLine and RackspaceRunCmdLine respectively.

Additionally as shown in SHARED STORAGE primitive specification further includes information such as Characteristic Inputs which can list the maximum and minimum storage Max Storage Min Storage for the application. SHARED STORAGE primitive also includes a listing of implementations of the primitive on various clouds Implementations which lists the clouds Amazon Rackspace under Cloud on which the primitive has been implemented. As shown in Cloud lists the cloud specific implementations of SHARED STORAGE primitive for Amazon and Rackspace as AmazonDFS and RackspaceSAN respectively.

Additionally as shown in COMPUTE NODE primitive specification further includes information on additional characteristics Characteristic Inputs . COMPUTE NODE primitive specification can optionally list Pricing under Characteristic Inputs . When Pricing is specified under Characteristic Inputs the application may be run on those clouds whose pricing model falls within the pricing constraints specified under Pricing. COMPUTE NODE primitive specification also includes a listing of implementations of the primitive on various clouds Implementations which lists the clouds Amazon Rackspace under Cloud on which the primitive has been implemented. As shown in Cloud lists the cloud specific implementations of COMPUTE NODE primitive specification for Amazon and Rackspace as Amazon InstanceType and RackspaceNode respectively.

INF BUS primitive specification also includes a listing of implementations of the primitive on various clouds Implementations which lists the clouds Amazon Rackspace under Cloud on which the primitive has been implemented. As shown in Cloud lists the cloud specific implementations of INF BUS primitive specification for Amazon and Rackspace as AmazonSQS and Rackspacelnfinisim JMSQ respectively.

Based on available metadata descriptions of primitives exemplified by an application can be a modeled in terms of a high level primitive such as Batch Execution using the model inputs and characteristics needed and b deployed executed on a cloud of choice using runtime inputs.

Using the above algorithm for an exemplary application CompApp.exe which is being batch executed using the exemplary BATCH EXECUTION primitive discussed above the following inputs may be provided at modeling time 

Using the above algorithm for the exemplary batch executed application CompApp.exe the following inputs will be provided at run time 

Note that the primitives above are exemplary and for illustrative purposes only. In general composite interfaces can be built based on these primitive patterns. In addition cluster synchronization operations may be used to create workflow templates that capture the mechanics of a distributed computing pattern. Examples of cluster synchronization operations include Wait on Node where a task on a node in a workflow can proceed after the immediately preceding task has completed on that node. Another example of a cluster synchronization operation is Wait on Cluster where task in a workflow can proceed after the immediately preceding task has completed on all nodes

For example for a parallel problem where i data is split ii followed by parallel computations in batch mode on n nodes and iii followed by processing of results on a single node can be modeled using the pattern template below. The number in parentheses indicates the size of the cluster launched.

In step 1 above shared storage is launched. A single node is launched next step 2 which in step 3 splits the data set in parallel so that it can be processed using t tasks. Further computational steps are delayed by synchronization operator wait on cluster until all the data has been split. Next in step 4 n 1 nodes are launched and in step 5 the application is set up in parallel on n worker nodes. The wait on node synchronization operator ensures that the batch execution of the application on any individual node will not take place until application setup for that node has completed. After batch execution of the application t tasks on n nodes step 6 has completed which is ensured by the synchronization operator wait on cluster then in step 7 n 1 nodes are terminated. Finally in step 8 the results are processed in parallel by one node.

Other patterns for which primitives may be derived include but are not limited to applications based on Message Passing Interface MPI Map Reduce and Stateless Three Tier Web patterns. MPI applications are typically launched initially on one node in a cluster. The computation is then automatically distributed by the MPI platform which launches independent computational processes on some specified number of nodes in the cluster. These independent computational processes running on individual cluster nodes synchronize state periodically using the platform interfaces. A pattern template for MPI may use launch nodes RUN CMD LINE SHARED STORAGE and INF BUS primitives. An exemplary workflow template for MPI is shown below.

Map Reduce is a programming model for processing and generating large data sets. Users specify a map function that processes a key value pair to generate a set of intermediate key value pairs and a reduce function that merges all intermediate values associated with the same intermediate key. A template based pattern for Map Reduce may be derived by combining two batch execution primitives with a Wait On Cluster synchronization operation. The first batch execution is the Map part while the second batch execution is the reduce part.

In some embodiments the application model is specified in terms of pattern and system primitives. In some embodiments pattern and or system primitives may be combined to build higher level primitives termed composite interfaces which may facilitate application modeling for more complex applications. Composite interfaces may be built using basic primitives as building blocks.

For example web applications are typically designed to be stateless three tier web applications. The three tiers are the application or application stack the application container or the server and the database. A higher level composite interface for the three tier stateless pattern may comprise three primitives for the three tiers. Because the applications are stateless they can be distributed simply by adding more instances of the same application stack to an existing cluster with the same database tier. Although various three tier application stacks exist today such as Java Applications over well known containers such as JBoss Apache Tomcat and Ruby over Rails applications the underlying distributed paradigm is the same. Therefore a three tier stateless web application primitive can be derived. Model time inputs for the primitive may include the specific application stack technologies and the application bits.

In some embodiments at deployment time the system may invoke execute methods corresponding to a composite interface s implementation for a specific cloud on which the deployment is taking place. Because composite interfaces can be built using system and pattern primitives the implementation for a composite interface can also result in the invocation of execute methods that implement the underlying system and pattern primitives which have been used to build the composite interface for the cloud on which the application is being deployed. In addition in some embodiments the deployment system may also interact directly with the cloud provider s APIs to achieve deployment.

If the application model is specified using a workflow template then the deployment system follows the semantics of the workflow for that template. Steps in the workflow template may be executed and upon completion of a step the workflow may proceed to the next step either in a cluster wide fashion or a node wise fashion depending on the cluster synchronization operation between the steps. In some embodiments the deployment system may maintain a workflow state in memory to facilitate deployment. The workflow state may include information such as the size of the cluster list of current nodes in the cluster current task status on individual nodes etc.

In some embodiments an execution engine may perform the function of using the infrastructure independent representation to deploy and execute applications on a specified cluster. In one embodiment the following algorithm may be used to deploy execute the application on a cluster.

In some embodiments system manager may be deployed on a cloud infrastructure which may be private or public cloud . As shown in resource in cloud represents the hardware and software that underlies cloud . For example resource may include hardware such as servers computers storage and software such as operating systems platforms application servers applications etc. For example resource may facilitate the hosting of distributed computing applications to be modeled and deployed. Resource may also facilitate the hosting of data for the distributed computing application to be modeled and deployed and store the results obtained after running the distributed computing application. Data and communications between Resource and System Manager may occur over secure communication interlinks .

In some embodiments system manager may facilitate the modeling and deployment of distributed computing applications on one or more cloud infrastructures such as exemplary Amazon cloud infrastructure Terremark and or Rackspace . For example system manager may provide APIs for managing templates and modeling new applications. In one embodiment system manager may provide User Console to allow users to model distributed computing applications for deployment and may also be used to provide run time inputs for deploying applications. For example a program implementing exemplary algorithm shown in may be invoked on User Console to obtain inputs for modeling.

In some embodiments coordinator gateway orchestrates the deployment and execution of distributed computing application for a cloud. In some embodiments each cloud Amazon cloud Terremark cloud and Rackspace may include a distinct coordinator gateway . Coordinator gateway and system manager may communicate with each other over the network using secure communication interlinks . In one embodiment system manager and coordinator gateway may communicate with each other over the using Representational State Transfer REST compliant or RESTful web service calls.

In some embodiments when an application needs to be deploy executed on a cloud the infrastructure independent application model may be passed to the gateway for that cloud as an input. In the description below for ease of explanation the cloud is assumed to be the Amazon cloud infrastructure . However the concepts discussed are not limited to any specific cloud infrastructure and may be applied to any cloud infrastructure with appropriate modifications as would be apparent to one of ordinary skill in the art. For example system manager may pass the infrastructure independent application model to coordinator gateway for Amazon cloud infrastructure .

As shown in Amazon cloud infrastructure includes virtual machine nodes and shared storage which may be encrypted. In some embodiments coordinator gateway may also run on one or more virtual machine nodes. The exchange of data between virtual node and shared storage can occur over secure communication interlinks . In some embodiments coordinator gateway maintains a library of implementations for primitives and composite interfaces for Amazon cloud . When an application is to be deployed coordinator gateway can use the library to perform deployment and execution tasks for Amazon cloud . Accordingly the launching of a shared storage implementation will set up a DFS on Amazon cloud while launching the shared storage implementation on Terremark cloud will set up NAS SAN. In some embodiments coordinator gateway may launch agents which can be deployed on application cluster nodes to monitor and report task status back to coordinator gateway .

In some embodiments system manager may perform the following steps while deploying an application after obtaining appropriate run time inputs either directly from the user or by using other automated mechanisms to obtain the inputs. For example when run time inputs are obtained from the user algorithm may be invoked to obtain the appropriate run time inputs through user console . In some embodiments system manager may select one of clouds or for deployment. For example for the batch execution pattern example above system manager may determine that there is no existing implementation for Batch Execution pattern for Terremark cloud . Therefore system manager may rule out Terremark as a possible execution cloud.

System manager may then select Amazon cloud and may then provide coordinator gateway for Amazon cloud with all model time and run time inputs for that application and job. Since this is a primitive abstract the execute method corresponding to the implementation for Amazon cloud will be called along with the user provided model time and run time inputs. Accordingly coordinator gateway may select AmazonBatchExecution as the Amazon implementation for the batch execution pattern of computing based on information in batch execution pattern primitive specification which lists the specific execute method for Amazon under Clouds in batch execution pattern primitive specification as AmazonBatchExecution.

Note that batch execution pattern primitive specification also lists SHARED STORAGE primitive and INF BUS primitive as dependencies . Therefore in some embodiments the implementation code AmazonBatchExecution may request the implementation of these primitives from coordinator gateway . Coordinator gateway may then provide AmazonDFS and AmazonSQS as the implementations of SHARED STORAGE primitive and INF BUS primitive respectively to AmazonBatchExecution.

AmazonBatchExecution may then execute methods associated with AmazonDFS and AmazonSQS to setup the shared storage and the information bus. For example various well known distributed systems technologies may be used to create shared storage as a distributed file system. In one embodiment commercially available systems such as SectorFS GlusterFS etc. may be used. In general the execute method associated with AmazonDFS will include logic for how to bring up and run an appropriate distributed file system on Amazon Similarly execute methods associated with AmazonSQS may bring up Amazon Shared Queue Service which provides a Queue for producing and consuming messages.

After the AmazonDFS and AmazonSQS methods have completed AmazonBatchExecution may launch the appropriate number compute nodes as specified by Number of Nodes numNodes run time input. COMPUTE NODE primitive specification lists the cloud specific implementations of COMPUTE NODE primitive specification for Amazon as AmazonInstanceType. Accordingly for the example above the execute method associated with AmazonInstanceType may be used to launch the nodes. In some embodiments AmazonBatchExecution may also launch agents on the individual nodes. The agents may monitor and report task status back to coordinator gateway and perform other tasks as directed.

In some embodiments AmazonBatchExecution may also place numTasks units of compute tasks on the information bus which may be Amazon Shared Queue Service to synchronize batch execution. In some embodiments AmazonBatchExecution running on coordinator gateway may request the agents on compute nodes to pick up compute tasks from the Amazon Shared Queue service and run them as per the RUN CMD LINE pattern primitive which specifies AmazonRunCmdLine as the Amazon implementation. Accordingly AmazonRunCmdLine may be invoked using the appropriate run time inputs. For example in one instance AmazonRunCmdLine may simply open a command shell and call the virtual machine node OS to execute the command as specified in the command line.

Note that although the description above uses exemplary cloud infrastructures to describe possible implementations alternate implementations are envisaged and the methods described could be extended to other cloud infrastructures as would be apparent to one of ordinary skill in the art. Further although primitives composite interfaces and templates have been described as exemplary intermediate infrastructure independent representations other infrastructure independent intermediate representational schemes may also be used. In some embodiments software to facilitate conducting the processes described above can be recorded on computer readable media or computer readable memory. These include but are not limited to hard drives solid state drives optical media removable media and the like.

Other embodiments of the present invention will be apparent to those skilled in the art from consideration of the specification and practice of one or more embodiments of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

