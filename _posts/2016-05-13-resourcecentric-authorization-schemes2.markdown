---

title: Resource-centric authorization schemes
abstract: A method includes receiving a request of a user to perform an operation with respect to a first resource, in response to the request, determining, in view of a resource-based master data structure, a first resource-based permission data structure associated with the first resource, and accessing the first resource-based permission data structure to identify a first resource entry associated with the user. The method further includes upon determining that the first resource entry does not indicate that the user has a permission to perform the requested operation with respect to the first resource, determining a second resource-based permission data structure associated with a second resource that is a parent of the first resource, accessing the second resource-based permission data structure to identify a second resource entry associated with the user, and upon determining that the second resource entry indicates that the user has a permission to perform the requested operation with respect to the second resource, allowing the user to perform the requested operation with respect to the first resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602517&OS=09602517&RS=09602517
owner: Red Hat, Inc.
number: 09602517
owner_city: Raleigh
owner_country: US
publication_date: 20160513
---
This application is a continuation of U.S. patent application Ser. No. 14 223 989 filed Mar. 24 2014 which is a divisional of U.S. patent application Ser. No. 13 149 079 filed on May 31 2011 both of which are incorporated herein by reference in their entirety.

Embodiments of the present invention relate generally to computing resource authorization. More particularly embodiments of the invention relate to resource centric authorization schemes.

In a data processing system in which multiple different users access and execute operations security and other access control measures may be necessary to prevent one or more users from accessing certain resources and or executing certain operations. For example an owner or creator of a file may wish to prevent other users from modifying the owner s file. Access controls are used to control which users have access to a file and what types of operations these users can perform on the file.

Conventionally there are various types of access control mechanisms available such as discretionary access control DAC and role based access control RBAC . Discretionary access control permission is defined in accordance with the identity of the user or invoker of a command. A user or invoker may have an identity such as owner member of a group or other. Role based access control defines access to command execution based on what authorizations the user has been assigned rather than basing access on the user s identity. In role based access control a role consists of a set of authorizations. A role is assigned to one or more users. Multiple roles may be assigned to a single user. Such access control mechanisms typically do not work well in a resource centric operating environment.

In the following description numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring embodiments of the present invention.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments a resource centric based authorization scheme is provided for access control in a resource centric operating environment. The resource centric based authorization scheme is configured to associate a user with a resource and an operation on that resource. The authorization system may be implemented in representational state transfer REST compatible architecture which may be accessible via a variety of Web based communication protocols such as hypertext transfer protocol HTTP . In one embodiment a set of RESTful application programming interfaces APIs is designed to allow a user such as a regular user or an administrator to set up access controls on data and operations within a resource centric system. The APIs can also allow a user to specify users and groups of users to have restricted access rights to resources such as data objects or files. A user can also specify different types of access or permission e.g. READ WRITE or DELETE to the resources in the system.

In one embodiment authorization system includes a set of authorization APIs to allow a user such as administrator to grant or revoke a permission or role to another user such as user for accessing resources e.g. data or files stored in a storage device managed by system where resources may be local or remote resources. In one embodiment a user can utilize APIs to grant or revoke a permission of a resource to or from another user. A user can also utilize APIs to grant or revoke permissions associated with a role for accessing a resource to or from one or more other users. A user can further utilize APIs to add or remove a user to or from a specific role which may be managed by role management module . The change of a role of a user may affect certain permissions of certain resources accessed by the user.

In one embodiment APIs include grant permission API and revoke permission API to grant and revoke a permission to and from a user or role respectively where the permissions may be stored in role based permission database and resource based permission database which may be managed by permission management module . Permission s to a particular resource can be granted or revoked via APIs to a particular user based on information from resource based permission database . Permission s associated with a role can be granted or revoked via APIs based on information from role based permission database and or resource based permission database . In order for a first user e.g. administrator to change a permission of a second user the first user has to be authorized and verified by authorization verification module . Such an authorization may be requested by the first user based on a resource having information indicating a desire to change a permission of the second user. Thus in this embodiment such an authorization is not determined based on a role of the first user. Rather it can be determined based on a resource associated with an operation of changing a permission of the second user.

In one embodiment each of the role based permission tables includes entries indexed based on resource IDs e.g. URIs and and each of the resource IDs is associated with a list of one or more permissions or operations e.g. permissions and that can be performed on the corresponding resource. That is based on a particular role ID from field of role based master table one can quickly identify which of the role based permission tables e.g. tables should be examined based on the associated permission table ID from field e.g. directory and or filename . From the identified role based permission table one can determine the permissions for a particular resource for a user that has the capacity of a particular role. Note that data structures as shown in are described for illustration purposes only other formats or architectures may also be utilized.

In one embodiment each of the resource based permission tables includes entries indexed based on user IDs e.g. users and and each of the user IDs is associated with a list of one or more permissions or operations e.g. permissions and that can be performed by the associated user on the corresponding resource. That is based on a particular resource ID from field of resource based master table one can identify which of the resource based permission tables e.g. tables should be examined based on the associated permission table ID from field e.g. directory and or filename . From the identified resource based permission table one can determine the permissions for a particular user. Note that data structures as shown in are described for illustration purposes only other formats or architectures may also be utilized.

A permission maps a resource and an operation or permission to a set of users that are able to perform the operation on the given resource. In one embodiment permission can include at least one of CREATE READ UPDATE DELETE and EXECUTE operations collectively referred to herein as CRUDE . A CREATE permission allows a user to create a new resource and or its associated property or properties on a particular domain or a server. A READ permission allows a user to read a resource and or its associated property or properties from a particular domain or server. An UPDATE permission allows a user to modify a resource and or its associated property or properties. A DELETE permission allows a user to remove a resource and or its associated property or properties. An EXECUTE permission allows a user to modify one or more properties of a resource but not the resource itself. In one embodiment resources e.g. files and or directories may be organized in a tree like hierarchical structure from a root directory. In order to allow different degrees of granularity while granting permissions according to one embodiment permissions may be inherited down the tree from a parent to a child. The permission precedence may also follow from a parent to a child meaning that permissions cannot get more restrictive as they move down the tree. That is a child resource will inherit all the permissions from its direct or indirect parent resource s .

A role can be one of a variety of roles created by an organization or enterprise. The permissions to perform certain operations are assigned to specific roles. Members of staff or other system users are assigned particular roles and through those role assignments acquire the permissions to perform particular system functions. Since users are not assigned permissions directly but only acquire them through their role or roles management of individual user rights becomes a matter of simply assigning appropriate roles to the user this simplifies common operations such as adding a user or changing a user s department.

In addition referring back to APIs include a create role API to allow an administrator to create a particular role which is stored in role database . A user can utilize API to add a user to a particular role or utilize API to remove a user from a particular role. is a block diagram illustrating an example of a role database according to one embodiment of the invention. Referring to role table includes entries indexed based on role IDs that identify a variety of roles where each role ID is associated with one or more user IDs that are members of the corresponding role. Referring to in response to a request role management module is configured to create a new role via API which will add a new entry to role table . In addition a user can be added to or removed from a particular role via APIs and respectively where the corresponding user ID may be added to or removed from field of the corresponding entry in role table .

Note that the terms of operation and permission are interchangeable terms throughout this application. For example when an operation is CREATE it represents a permission to perform an operation of CREATE or vice versa. When a request for a permission associated with a resource is to be granted to or revoked from a user according to one embodiment the request includes a first parameter identifying a resource being accessed e.g. URI a second parameter identifying a user e.g. user ID who will be granted or will lose a permission and an operation e.g. permissions such as any of the CRUDE permissions described above . Examples of the corresponding APIs can be defined as follows 

If it is determined the first user has the authority at block permission management module is configured to access resource based permission master table to identify a resource based permission table e.g. one of tables associated with the resource. In one embodiment permission management module extracts the resource identifier e.g. URI from the request and performs a lookup operation on master table to locate an entry having a resource ID that matches the one from the request e.g. lookup based on column . A resource based permission table identifier e.g. filename is retrieved from the corresponding field of the located entry.

In this example it is assumed that table is the resource based permission table corresponding to the resource ID extracted from the request. At block a search is performed on the identified resource based permission table to locate an entry associated with the second user identified in the request. In this example permission management module is configured to look up based on column to identify an entry having a user ID that matches the user ID of the second user. Once the entry of the second user is identified from the resource based permission table at block the permissions e.g. column of the identified entry are updated for the second user. If a permission is being added the operation identified from the request is added to field . Similarly if a permission is being revoked the operation identified from the request is removed from field .

According to one embodiment APIs can also be utilized to grant or revoke a permission to and from a role of users. Examples of such APIs can be defined as follows 

In response to the request at block it is determined whether the user has the authority to change the permission of the role based on the user s role. In one embodiment authorization verification module is configured to extract a user ID of the user from the request and access role database to determine whether the user has the authority to change the permission for example using the techniques described above.

At block a search is performed within a role based master table to identify a role based permission table associated with the role. In one embodiment permission management module is configured to access role based master table to identifying an entry from column having a role that matches the role extracted from the request. From the corresponding field of the matching entry a role based permission table identifier e.g. filename is retrieved and the associated role based permission table is identified. In this example it is assumed that role based permission table is the one associated with the resource identified from the request. From table a search is conducted based on a resource ID extracted from the request by matching the corresponding ones from column to locate an entry that matches the resource ID. Once the entry has been identified at block the permissions of corresponding field are updated.

In addition at block for each of the users associated with the role permissions of the user in the resource based permission table corresponding to the resource are updated. In one embodiment the users associated with the role are identified based on information of role table of for example by matching the role ID in column . For each of the users identified from the corresponding column field the permissions of the corresponding column field such as field of a resource based permission table associated with the resource identified in the request are updated.

According to one embodiment APIs can be utilized to add or remove a user to or from a role which may affect the permissions of the user. Examples of the APIs may be defined as follows 

In addition at block permissions of the second user are updated based on changing of the role of the second user. In one embodiment if the user is added to a role all permissions associated with the role will be automatically granted to the user. For example a role based permission table e.g. role based permission table associated with the new role is identified. For each of the resources listed in the role based permission table the associated permissions are added to the second user s entry in a resource based permission table associated with the corresponding resource e.g. resource based permission table . Similarly if the user is removed from the role all permissions associated with the role will be automatically revoked from the user.

According to one embodiment a new role can also be created and a list of users associated with a particular role may be retrieved via other APIs such as API . Examples of such APIs may be defined as follows 

A new role can be added to role database using create role interface while a role can also be removed from role database using delete role interface. Note that when a role is added or removed permissions associated with the role may be affected for those users associated with that role. In addition a list of users that are associated with a particular role can be retrieved from role database using list users in role interface.

In order to allow different degrees of granularity while granting permissions according to one embodiment permissions may be inherited down the tree from a parent to a child. The permission precedence may also follow from a parent to a child meaning that permissions cannot get more restrictive as they move down the tree. That is a child resource will inherit all the permissions from its direct or indirect parent resource s .

The machine may operate in the capacity of a server or a client machine in client server network environment or as a peer machine in a peer to peer or distributed network environment. The machine may be a personal computer PC a tablet PC a set top box STB a Personal Digital Assistant PDA a cellular telephone a web appliance a server a network router a switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processors such as a microprocessor a central processing unit or the like. More particularly the processor may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute the instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer accessible storage medium also known as a machine readable storage medium or a computer readable medium on which is stored one or more sets of instructions or software e.g. module embodying any one or more of the methodologies or functions described herein. The module may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine accessible storage media. The module may further be transmitted or received over a network via the network interface device .

The computer readable storage medium may also be used to store the some software functionalities described above persistently. While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The terms computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The modules components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the modules can be implemented as firmware or functional circuitry within hardware devices. Further the modules can be implemented in any combination hardware devices and software components.

In the above description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

