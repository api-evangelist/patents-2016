---

title: Election and use of configuration manager
abstract: In an approach for election of a manger for a network, a processor detects that a first set of management tasks is not running. A processor identifies at least a first node in a network and information about the first node. A processor determines that the first node is capable of performing the first set of management tasks based on the information about the first node. A processor elects the first node as a manager in the network to perform the first set of management tasks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497080&OS=09497080&RS=09497080
owner: International Business Machines Corporation
number: 09497080
owner_city: Armonk
owner_country: US
publication_date: 20160323
---
The present invention relates generally to the field of configuring Infiniband networks and more particularly to the electing and use of a manager that controls the configuration of an Infiniband network.

InfiniBand is an industry standard specification that defines and input output architecture used to interconnect servers communications infrastructure equipment storage and embedded systems. InfiniBand is a computer network communications connection used in high performance computing featuring very high throughput and very low latency. InfiniBand is used for data interconnect both among and within computers. InfiniBand is a commonly used interconnect in supercomputers. InfiniBand is a type of communications connection for data flow between processors and I O devices that offers throughput of up to 56 gigabytes per second and supports for up to 64 000 addressable devices.

The internal data flow system in most personal computers PCs and server systems is inflexible and relatively slow. As the amount of data coming into and flowing between components in the computer increases the existing bus system becomes a bottleneck. Instead of sending data in parallel typically 32 bits at a time but in some computers 64 bits across the backplane bus InfiniBand specifies a serial bit at a time bus. Fewer pins and other electrical connections are required saving manufacturing cost and improving reliability. The serial bus can carry multiple channels of data at the same time in a multiplexing signal. InfiniBand also supports multiple memory areas each of which may be addressed by both processors and storage devices.

With InfiniBand data is transmitted in packets that together form a communication called a message. A message can be a remote direct memory access RDMA read or write operation a channel send or receive message a reversible transaction based operation or a multicast transmission. Similar to the channel model many mainframe users are familiar with a transmission or a message begins or ends with a channel adapter. Each processor has what is called a host channel adapter HCA and each peripheral device has a target channel adapter TCA . HCAs are I O engines located within a server. TCAs enable remote storage and network connectivity into the InfiniBand interconnect infrastructure called a fabric.

Infiniband links have physical and logical state properties. The physical property of the link is negotiated in hardware. The logical state of the link is managed by software. When physical link goes up the logical state of the link is not active. There is no address assigned to the port and applications cannot communicate with the port using arbitrary data protocols. A possible communication is done by sending and receiving subnet management protocol hereinafter SMP Unicast datagrams hereinafter UD which are used to discover and configure the network. Infiniband networks require a subnet manager software entity running on one of the nodes.

The Subnet Manager uses SMP datagrams to discover and configure the network. The discovery is done via direct route by specifying each hop of source to destination path and does not require switch routing. The task of the Subnet Manager is to discover the fabric assign LID addresses to each end point configure switch routing tables and put each end point to logical Active state. The Subnet Manager is also responsible for removing the no longer present end points from the routing tables and answering subnet administration hereinafter SA queries which perform operations on its internal tables and do multicast management. Once Subnet Manager brings the end point to Active state the end point can exchange data with other end points in the fabric in Active state.

The Subnet Manager standard is covered in Infiniband Architecture Specification. Existing standard assumes a single Subnet Manager in master role in the fabric and does not cover dynamic distributed configuration management where configuration is supplied externally and shall be distributed to configuration manager . Enforcing expected configuration within a network cluster by subnet manager becomes a challenge since propagation of expected configuration and election of a configuration manager is not possible before network is operational. Furthermore if configuration manager node fails to receive a configuration update or is considered failed by other nodes on the cluster it will not have an up to date configuration and enforcing such configuration may break the network connectivity.

Aspects of an embodiment of the present invention disclose a method computer program product and a computer system for election of a manger for a network. A processor detects that a first set of management tasks is not running. A processor identifies at least a first node in a network and information about the first node. A processor determines that the first node is capable of performing the first set of management tasks based on the information about the first node. A processor elects the first node as a manager in the network to perform the first set of management tasks.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

Embodiments of the present invention recognize that there are many different methods and standards for electing and using a manager that controls the configuration within a network. Embodiments of the present invention disclose an approach to elect a manager that controls the configuration within the network and also the tasks performed by the configuration manager within a network. An approach allows enforcing configuration in a way that does not break network connectivity and prevents failed or run away nodes to enforce stale configuration.

Embodiments of the present invention disclose a method computer program product and computer system to provide a process electing a manager that controls the configuration within the network and also the tasks performed by the configuration manager within a network. Embodiments of the present invention allow enforcing a configuration in a way that does not break network connectivity and prevents failed or run away nodes to enforce stale configuration.

Network may be a local area network LAN a wide area network WAN such as the Internet any combination thereof or any combination of connections and protocols which support communications between node and node switch and switch . Network maybe a subnet or other type of networks which are embedded in a larger system. In one embodiment network is an Infiniband network. Network may include wired wireless or fiber optic connections. Network provides a network for nodes node switch and switch to communicate with one another without the significant overhead of an operating system. Additionally network allows nodes and to discover and configure the network fabric.

Node and node each can be a source or destination in communication. Node and node are substantially similar to one another. A communication can be a message data or other information which is sent from one location e.g. a source to a next location e.g. a destination in computing environment . Nodes and may be a desktop computer laptop computer tablet computer netbook computer personal computer PC a desktop computer mobile device or any programmable electronic device capable of communicating via network . Node and node may be for example a host node a destination node a target node an initiator node or any other type of node within the network fabric. In one embodiment nodes and may be a storage initiator a storage target a database server a database client a management server a web server or other electronic device or computing system capable of processing program instructions and receiving and sending data. In another embodiment nodes and may be any hardware component such as a processor random access memory RAM or other hardware components which output data that is then sent to another hardware component.

Switch and switch are computer networking devices which connect devices together on network . Switch and switch are substantially similar to one another. Network contains at least one switch. Switches and switch route messages or data from the source to the destination based on routing tables which are populated with forwarding information during startup of network or modifications to network as described below. The routing tables may describe unicast or multicast rules and conform to InfiniBand Linear Forwarding Table LFT or Multicast Forwarding Table MFT specifications. In another embodiment the format content and organization of the routing tables in switches and is vendor specific. In another embodiment switches and are multiport network bridges which use hardware addresses to process and forward data. In other embodiments switch and switch can also process data at the network layer by additionally incorporating routing functionality. In one embodiment the size and number of ports of switch and switch may vary. In one embodiment switches through manage the flow of data across network by transmitting a received message from node or node . In another embodiment switch and switch manage the flow of data across network by exchanging a received message from node to node .

Subnet manager and subnet manager are responsible for discovery and configuration of the network . Subnet manager and are substantially similar to one another. In the depicted embodiment subnet manager is located on node and subnet manager is located on node . In additional embodiments subnet manager and subnet manager can be located on other nodes.

Subnet manager and subnet manager participate in the election of a master subnet manager by invoking election function and election function . Election function and election function send and receive election messages across network to facilitate election of master subnet manager and configuration manager.

The selected master discovers and configures the network and invokes configuration management function and configuration management function to enforce expected configuration. Enforcing configuration may include powering off and powering on switch ports assigning addresses to end points doing miswire tests implementing switch port phase out component test and phase in etc.

In decision configuration management function determines if the port is expected to be disabled. Configuration management function may implement a configuration option which allows to specify which switch ports are expected to be enabled and which switch ports are expected to be disabled. Turning off unused ports saves power and turning off bad links allows applications to fail over to redundant links. If configuration management function determines the port shall be disabled yes branch proceed to decision configuration management function determines if the link is enabled on the port. If configuration management function determines the port shall not be disabled no branch proceed to decision configuration management function determines if the port shall be enabled.

In decision configuration management function determines if the port link is enabled. The fabric information obtained during discovery is used to check the state of the link. In one embodiment configuration management function checks if the port link is enabled by querying the port state using Get method of the SMP PortInfo attribute and checking whether the physical property of the link is disabled. In another embodiment simple network management protocol SNMP protocol can be used to query the switch port state. In additional embodiments a vendor application programming interface API is used to query the switch. If configuration management function determines the link is enabled yes branch proceed to step configuration management function disables the port. If configuration management function determines the link is not enabled no branch proceed to END configuration management function ends the process.

In step configuration management function disables the port. In one embodiment configuration management function uses Set method of SMP attribute PortInfo to disable the port setting the physical property of the link to disabled state . In another embodiment configuration management function uses SNMP protocol to set the switch port state. In yet another embodiment configuration management function uses a vendor API to set the switch port state.

In decision configuration management function determines if the port is enabled. Configuration management function may implement a configuration option which specifies which switch ports are expected to be enabled and which switch ports are expected to be disabled. If new nodes are added or bad links are replaced the relevant switch ports need to be turned on. If configuration management function determines the port shall be enabled yes branch proceed to decision configuration management function determines if the port link is disabled. If configuration management function determines that the port shall not be enabled no branch proceed to decision configuration management function determines if the port is being tested.

In decision configuration management function determines if port link is disabled. The fabric information obtained during discovery is used to check the state of the link. In one embodiment configuration management function checks if the port link is disabled by querying the port state using Get method of the SMP PortInfo attribute and checking whether the physical property of the link is disabled. In additional embodiments configuration management function checks if the port link is disabled by using SNMP protocol to query the switch port state. In additional embodiments configuration management function uses a vendor API to query the switch. If configuration management function determines that the port link is disabled yes branch proceed to step configuration management function enables the port. If configuration management function determines that the link is not disabled no branch proceed to END configuration management function ends the process.

In step configuration management function enables port. In one embodiment configuration management function enables the port using Set method of SMP attribute PortInfo setting the physical property of the link to enabled state . In additional embodiments configuration management function uses SNMP protocol to set the switch port state. In additional embodiments configuration management function uses a vendor API to set the switch port state.

In decision configuration management function determines if the port is being tested. Configuration management function may implement a configuration option to test the switch port. Such test may implement a miswire test and link quality test on new links. Furthermore component test may query a state of the application on a remote component. Implementing component test allows testing the port and applications behind the port for readiness to operate before the port is moved to ACTIVE state and thus allows to protect the health of the cluster against non authorized components bad links or run away applications. If configuration management function determines that the port is being tested yes branch proceed to step configuration management function invokes the test port function. If configuration management function determines that the port is not being tested no branch proceed to decision configuration management function determines if the port is miswired.

In step configuration management function invokes the test port function. This step is described in greater detail in .

In decision configuration management function determines if port is miswired. Configuration management function may implement a configuration option to specify the expected component which is connected to the switch port. Implementing miswire tests allows configuration management function to protect the health of the cluster against unauthorized components. The identification of discovered components is checked against expected configuration. In one embodiment configuration management function identifies the component by a remote port globally unique identifier GUID . In additional embodiments configuration management function identifies the components using a combination of one or more of the following parameters node GUID port GUID node name MAC address vendor ID serial number or network address. If configuration management function determines that the port is miswired yes branch proceed to step configuration management function disables the port. If configuration management function determines that the port is not miswired no branch proceed to END configuration management function ends the process.

In step configuration management function disables the port. In one embodiment configuration management function uses Set method of SMP attribute PortInfo to disable the port setting the physical property of the link to disabled state . In another embodiment configuration management function uses SNMP protocol to set the switch port state. In yet another embodiment configuration management function uses a vendor API to set the switch port state. Configuration management function marks the state of the port as failed and adds additional information regarding the reason for the failure.

In step election function waits for an event. The event can be for example an election message from another node external request to change priority local port state change or election timeout. Election messages may be for example STATUS TAKEOVER or CEED and signify status update request to become master or request to yield mastership. The subnet manager binds to one or more local ports. These ports are used to send and receive election messages and discover the network fabric. Local port state changes physical or logical link changes are interesting because they may affect priority of the local subnet manager. Timers are used to complete or restart election and can also be used to trigger periodic checks of local ports state. When an event is received election function sets the event s internal property status update required to false value. The property is examined at decision .

In step election function processes the local port state change event. The state change may be of logical or of physical property of the link. In one embodiment the port state change event is received from host channel adapter HCA as asynchronous port state change event and is processed by the election function . In additional embodiments a periodic timer is configured to trigger a port state detection. In additional embodiments the port state change event has all required information. In additional embodiments the state of the port needs to be validated after processing the event. In additional embodiments the state of the port is checked using verbs API and the physical and logical state of the port is examined. In additional embodiments Get method of SMP PortInfo attribute is used in order to query the port and physical and logical state of the port are looked up in reply. In additional embodiments only the physical property changes affect priority and only physical state changes are examined. In additional embodiments both the physical and logical properties affect subnet manager priority and both properties are examined.

In step election function computes subnet manager priority. Election messages exchanged by election functions contain subnet manager priority and the state of subnet manager MASTER ELECTING STANDBY . The highest priority subnet manager wins the election and elected masters are preferred. The good health state of the local ports shall increase the priority while bad health state of the local ports shall decrease the priority. Subnet manager or subnet manager with the highest number of ports in good state are preferred to achieve faster and complete discovery of the existing fabric. For example in the embodiment depicted in node is preferred if when node links to switch and switch are operational and node has a good link to a single switch. Thus in the case when links connecting switches and fail the preferred subnet manager is able to discover all nodes and switches in the network while node sees a single switch. Furthermore if network cluster elects the subnet manager to be a configuration manager the elected configuration manager shall have a highest priority and become master. To satisfy these requirements a process which computes the priority shall take into account the health of the ports the state of subnet manager whether the subnet manager is master or not and whether the current subnet manager has been chosen as configuration manager. In one embodiment the configuration management function can use the following bitmask to compute the priority 

When using this computation process the elected configuration manager is a preferred master over other subnet manager instances regardless of other parameters in subnet manager. If no running subnet manager is a configuration manager then the subnet manager with all ports in good state is preferred. If all running subnet managers have the same value of PORTS OK in the priority then a running master is preferred.

If compute priority function changes priority of running SM election function sets its internal property status update required to true value.

In decision election function determines if election timeout passed. Each time election is restarted the state of running subnet manager changes to ELECTING election timeout is reset to a predefined value. The master subnet manager is expected to be elected within this timeout. Similarly whenever the state of subnet manager changes to STANDBY the election timeout is set to another predefined value. Standby subnet manager expects to receive a status message from the current master subnet manager within this timeout. If such message is not received election is restarted. Each time the standby subnet manager receives a status update from the active subnet manager master election timeout is reset to the keep alive master value. Each time a subnet manager becomes master the subnet manager sets election timeout to yet another value status update timeout and uses that value to inform other subnet manager instances of its state.

If election function determines the election timeout has passed yes branch proceed to step election function processes the election timeout. If election function does not determine the election timeout passed no branch proceed to decision election function determines if a configuration check is necessary.

In step election function processes the election timeout. Election function processes the type of the election timeout. For all types internal property status update required is set to true value. If the state of the running subnet manager is ELECTING subnet manager is designated as MASTER and election timeout is set to status update value. If the state if the running subnet manager is master election timeout is set to status update value. If the state of subnet manager is STANDBY the state of subnet manager is changed to ELECTING and election function sets the election timeout to master election timeout value.

In decision election function determines if a configuration check is necessary. During the cold boot of the fabric when fabric is not completely operational and cluster network services are not able to communicate elected master subnet manager is not requested to enforce expected configuration. The task of master subnet manager is to bring the network fabric to a coherent state and allow cluster network services and election function to elect a configuration manager. In one embodiment a cluster network service initiates election of configuration manager when a cluster becomes operational. In additional embodiments a running master may query the cluster services for permission to do configuration enforcement. In either case when electing a configuration manager a present subnet manager master is preferred unless the present subnet manager master is running on a blacklisted node in the cluster. If the subnet manager master is chosen the subnet manager master is notified that the subnet manager master is allowed to do configuration enforcement and the subnet manager master remains the active master. If a standby instance is chosen because present master runs on a blacklisted node or node with a lower priority the current subnet manager is notified that the current subnet manager is chosen to be configuration manager and the current subnet manager promotes itself to master status by election function because of increased priority. Regardless of receiving configuration election requests from cluster network services election function implements a periodic check against the state of cluster configuration whether the cluster is allowed to enforce configuration management or not. This configuration check is required when the periodic timer fires after running instance was promoted as configuration manager or when the running instance wants to promote itself as configuration manager. If election function determines the configuration check is necessary yes branch proceed to step election function performs the configuration check. If election function determines the configuration check is not necessary no branch proceed to decision election function determines if status update is required.

In step election function performs a configuration check. In one embodiment cluster services are contacted for permission to do a configuration check. In additional embodiments election function uses a periodic check to examine configuration updates from other nodes in the cluster to determine whether the node has been blacklisted or communicated. If configuration updates or communication with cluster services indicate a loss of communication or running node status as black listed election function is not allowed to enforce configuration management. The configuration check may change the running subnet manager priority either set or unset the IS CONF MANAGER bit . If running the subnet manager priority changes the status update required property is set to true value.

In decision election function determines if status update is required. Election function uses status update required internal property to determine whether to send election status or master status updates. If election function determines the status update is required yes branch proceed to step election function performs the status update. If election function determines the status update is not required no branch proceed to decision election function processes the pending election messages.

In step election function performs a status update. Each status message update includes for example the state of the running subnet manager subnet manager s priority and subnet manager identification. The type of the status election message is STATUS and signifies status update. Election function may use for example node GUID node name or other forms of unique identification of node as identification. In one embodiment a broadcast message is sent and is received by all subnet managers in the network. In additional embodiments the message can be a multicast message. In additional embodiments other broadcast messages can be used. In additional embodiments election function has a list of present subnet manager instances and uses unicast communication to each member of the list. In additional embodiments the list of subnet manager instances is static. In additional embodiments the list of subnet manager instances is dynamic and is updated during periodic fabric discoveries or though processing trap messages informing about subnet manager presence.

In step election function processes election message. Election function uses election messages to facilitate the election of the master subnet manager. Election messages may be of for example of the following types STATUS TAKEOVER or CEED and signify status update request to become master or request to yield mastership. Processing of these messages is further described in .

In step configuration management function waits for network event. In one embodiment configuration management function waits for network event or the fabric discovery timer. The master of the subnet manager performs periodic discoveries of the network fabric. Discovery can be triggered by a network event e.g. switch port going up or down or a discovery timer. Discoveries are needed in order to detect changes in the fabric. Configuration management function may use timers for periodic discoveries. In one embodiment configuration management function discovers network events by receiving appropriate Trap messages from switches or . In another embodiment configuration management function receives a notification from a new node to signal joining the fabric and health monitoring application can send messages about a node leaving the fabric. In other embodiments configuration management function uses methods specific to the deployed networking environment which are deployed to send and receive events. Other network events can be SA subnet administration requests that query internal databases or request multicast management.

In step configuration management function process network events. Configuration management function performs the tasks or required operation related to the network event. In additional embodiments the actions triggered by a network event may be queued for delayed execution. For example some SA actions can be delayed by pending fabric discovery.

In decision configuration management function determines if fabric discovery is necessary. Configuration management function determines that the network discovery is needed if processed network events signal a port up or port down or if a periodic timer for network discovery has fired. If configuration management function determines the fabric discovery is necessary yes branch proceed to step configuration management function reads the network configuration. If configuration management function determines the fabric discovery is not necessary no branch proceed to step configuration management function waits for network events.

In step configuration management function reads network configuration. In one embodiment configuration management function recognizes the current configuration update from cluster services. In another embodiment configuration management function investigates the expected configuration. In additional embodiments configuration management function gathers information from the network configuration and compiles a list of all expected switches and the expected state of each switch port ENABLED DISABLED TEST along with what is expected connected component of each switch port.

In step configuration management function discovers network fabric. Configuration management function can use multiple local ports to speed up the discovery. At first discovery iteration configuration management function discovers components attached to local ports. If the attached component is not switch or switch discovery does not proceed further. If attached component is switch or switch configuration management function discovers components attached to switch or switch ports during a second iteration. Configuration management function discovers fabric using all local ports of node . If switch or switch is found as reachable using more than one local port configuration management function uses one local port with the shorter path to the switch for the switch discovery. Configuration management function repeats the discovery procedures until no new switches are found within the network fabric at which point discovery of the fabric completes. In additional embodiments configuration management function performs discovery using direct Infiniband routing with the help of Get methods of SMP attributes PortInfo NodeInfo and SwitchInfo. In additional embodiments configuration management function uses vendor specific API to query switch or switch topology. In additional embodiments configuration management function uses SNMP protocol to do the discovery.

In decision configuration management function determines if configuration enforcement is possible. In one embodiment configuration enforcement is possible if subnet manager has been elected as configuration manager and the last configuration check was successful. If configuration management function determines the configuration enforcement is possible yes branch proceed to step configuration management function applies the configuration. If configuration management function determines the configuration enforcement is not possible no branch proceed to step configuration management function handles the network alterations.

In step configuration management function enforces configuration. Configuration management function enforces the configuration related to the ports within the network fabric and is invoked for each discovered switch port. Configuration management function enables the ports which shall be enabled according to expected configuration. Ports which shall be disabled according to expected configuration are turned off. Ports that shall be tested initiate component test. In one embodiment configuration management function permits miswire checks to be performed. This step is further explained in greater detail in .

In step configuration management function handles network alterations. Configuration management function assigns for example addresses and adds where appropriate to the routing tables the newly discovered components or the updated components. Configuration management function removes the dead components from the routing tables. Configuration management function may also reset the malfunctioning components.

In decision configuration management function determines if the port component test is in progress. In one embodiment configuration management function implements an option to test a switch port. During the test procedure the link is turned on and the state of the link required speed and width and the quality of the link whether link shows error during data transfers can be checked. Additionally communication with an application running on the node connected to switch port can be attempted to test the health of the node and its software services availability. In additional embodiments configuration management function performs miswire checks. Component test of the switch port is done before the link of the port is moved to active state and remote component is assigned expected address and allows the health of the network cluster to be protected against bad links alien components and run away applications. Testing switch port involves background tasks like link quality test or application test and is re entrant from the point of view of the configuration management function . Thus the test can be in progress or not started. When the background tasks complete the test is finished with status OK or FAILED. If configuration management function determines the test is in progress yes branch proceed to decision configuration management function determines if the test is complete. If configuration management function determines the test is not in progress no branch proceed to decision configuration management function initiates the test timer.

In decision configuration management function determines if test is successful. The testing of switch port involves background tasks like link quality test or application test and is re entrant from the point of view of the configuration management function . When the background tasks complete the test is finished with status OK or FAILED. Thus the test can be in progress or successful. If configuration management function determines the test has completed successfully yes branch proceed to step configuration management function marks the port as having passed the test and enables the port. If configuration management function determines the test has not completed successfully no branch proceed to decision configuration management function determines if the test has failed.

In decision configuration management function determines if the test has failed. Testing switch port involves background tasks and is re entrant from the point of view of the configuration management function . Thus the test can be in progress or FAILED. If configuration management function determines the test has failed yes branch proceed to step configuration management function marks the port failed and deactivates the port. If configuration management function determines the test has not failed no branch proceed to step configuration management function resumes the test.

In step configuration management function initiates the test timer. The component test is supposed to complete within a finite amount of time and failure to perform link test discovery of a remote component or communication with the remote application within the defined timeout fails the test. The test timer ensures that the test is to be completed with FAIL status if this condition is not met.

In step configuration management function marks the port as having passed the test and enables the port. Enabling the port may involve assigning the remote component one or more network addresses and joining the switch port to one or more multicast groups. In one embodiment the addresses are Infiniband LID addresses. In additional embodiments addresses can be IP addresses MAC addresses or other addresses. In additional embodiments the Set method of SMP attribute PortInfo is used to assign the addresses and Set method of SMP attribute MulticastForwardingTable is used to join the switch port to multicast groups. In additional embodiments SNMP protocol is used to assign addresses and configure the switch port. In additional embodiments vendor defined APIs are used to configure the switches and end points. In additional embodiments enabling the port involves moving the link to ACTIVE state and requires routing table updates on the switch. In additional embodiments the routing table updates are done via Set methods of SMP attributes PortInfo and LinearForwardingTable. In other embodiments SNMP or vendor defined APIs can be used to configure switches and end points.

In step configuration management function marks that the port failed and deactivates the port. Deactivating the link involves disabling the switch port. In one embodiment the switch port is disabled using Set method of SMP PortInfo attribute. In additional embodiments vendor APIs or SNMP protocols can be used to set the switch port state.

In step configuration management function resumes the test. If the link presence check is pending the state of the link is checked using last fabric discovery. If link presence is detected a miswire check can be started. A miswire check requires remote port to be discovered and match expected identification. The data obtained during the previous discovery is used to do the check. Identification of a remote node can be node GUID port GUID node name MAC address network address serial number or any combination of these parameters.

If the miswire check completes link quality check is started. The link quality check initiates a data transfer to remote node and checks that link state does not change and that errors in the link do not go above defined thresholds. The state of the link is checked against the data returned during the last discovery. The thresholds of the link can be checked using performance counters of the switch port remote node or both. The format and meaning of performance counters depends on the network environment deployed. In one embodiment these are Infiniband performance counters. In another embodiment Ethernet port statistics are used. Other embodiments may use other forms of counters.

If link quality check completes remote application check is started. Remote application check does a network communication with an application on remote node to check its readiness to operate and includes a simple request response sequence. In one embodiment request can be Infiniband MAD packet. In other embodiments the application check may be an Ethernet frame IP packet or other type of communication. The test is completed successfully when the reply from the remote application is received and configuration management function matches the reply with expected sequence.

In step configuration management function starts the test. Configuration management function turns on the switch port configuration management function is not already on as seen during the previous fabric discovery and various background tasks are started to implement the test. Link presence check requires the link to have required width and speed. Miswire check requires remote component to be discovered and match expected configuration. Link quality check requires that the link remains in required width and speed for a predefined time and also requires that the link have no errors during initiated data transfer with the remote port. Remote application check requires successful communication with a remote application. Port test tasks are serialized. Link presence check is started first. When link presence test completes miswire check is started. When miswire check completes link quality test is started. When link quality test completes remote application test is started. In one embodiment all tests are required. In additional embodiments miswire checks link quality checks or remote application checks can be omitted. Port test re entrant from the point of view of the configuration management function .

In order to facilitate the election election function may send election messages of the following types STATUS TAKEOVER or CEED. These types signify status update request to become master or request to yield mastership. Each election message contains type sender identification sender status ELECTING MASTER STANDBY and sender priority.

In step election function receives a message. In one embodiment SMP datagrams are used to receive the message. In additional embodiments unicast broadcast or multicast messages that are specific to the network environments deployed are used.

In decision election function determines if the message is a status message. The field type of the message is examined and compared to STATUS value in order to make the check. If election function determines the message is a status message yes branch proceed to decision election function determines if the node is in the state ELECTING. If election function determines the message is not a status message no branch proceed to decision election function determines if the message is a takeover message.

In decision election function determines if the node is electing. The election state of the each subnet manager is ELECTING STANDBY or MASTER. If election function determines the node is electing yes branch proceed to decision election function determines if the current node is a more appropriate candidate for master. If election function determines the node is not electing no branch proceed to decision election function determines if current node has higher priority.

In decision election function determines if the current node is a better master candidate. The current node is a better candidate if the current node has a higher priority. If the sender node of election message has the same priority a discrimination process which takes the identification of the node is used to determine the better candidate. The same discrimination process is used by a plurality of nodes to ensure that plurality of nodes prefer the same electing candidate if subnet manager or subnet manager priorities are equal and this allows the election to converge. In one embodiment the discrimination process can compare node identification by number or string and choose a higher value as more preferable. In additional embodiments the discrimination process may compare node identification by number or string and choose a lower value as more preferable. In another embodiment the discrimination process may have a static prioritized list of identifications and use the list to determine a better candidate. If election function determines the current node is a more appropriate candidate to be master yes branch proceed to step election function decreases election timeout. If election function determines the current node is not a more appropriate candidate for master no branch proceed to step election function increases election timeout.

In decision election function determines if the message is a takeover message. The type field of the message is examined and compared to TAKEOVER value. If election function determines the message is a takeover message yes branch proceed to decision election function determines if the node is electing. If election function determines the message is not a takeover message no branch proceed to decision election function determines if message is a cede message.

In decision election function determines if current node has a higher priority. The sender priority field of the message is compared with the priority value of election function computation of priority is explained in description of in step . If election function determines the current node has higher priority yes branch proceed to step election function sends cede message. If election function determines the current node does not have higher priority no branch proceed to step election function sends takeover message.

In step election function sends a cede message. In one embodiment SMP datagrams are used to send and receive the messages. In additional embodiments unicast broadcast or multicast messages that are specific to the network environments deployed are used.

In step election function sends a takeover message. In one embodiment SMP datagrams are used to send and receive the messages. In additional embodiments unicast broadcast or multicast messages that are specific to the network environments deployed are used.

In step election function increases an election timeout. Election function uses election timeout to facilitate election as described in . If election is not completed within the election timeout the current node becomes master subnet manager. Increasing election timeout when observing that current node is a worse master candidate allows faster election converging while choosing the best candidate. To avoid too large timeouts and competition with run away master nodes increase of timeout can be limited to a predefined number of times during election.

In decision election function determines if the message is a cede message. The type field of the message is examined and compared to CEDE value. If election function determines the message is a cede message yes branch proceed to decision election function determines if the node is electing. If election function determines the message is not a cede message no branch proceed to END election function ends the process.

In decision election function determine if the current node is the master node. Each subnet manager has election state ELECTING MASTER or STANDBY and these states are used by election flow described in . If election function determines the current node is the master node yes branch proceed to END election function ends the process. If election function determines the current node is not the master node no branch proceed to decision election function changes the state to electing.

In step election function decreases the election timeout. Election function uses election timeout to facilitate election as described in . If election is not completed within the election timeout the current node becomes master subnet manager. Decreasing election timeout when observing that current election function is a better master candidate allows faster election converging while choosing the best candidate. To avoid too narrow timeouts decrease of timeout can be limited to a predefined number of times during election.

In step election function changes the state to electing. Each subnet manager has election state ELECTING MASTER or STANDBY and these states are used by election flow described in .

Node node switch and switch includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any additional hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In one embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Memory is stored for execution by one or more of the respective computer processors of node node switch and switch via one or more memories of memory of node node switch and switch . In the depicted embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in the examples provides for communications with other data processing systems or devices including node node switch and switch . In the examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links.

I O interface s allows for input and output of data with other devices that may be connected to node node switch and switch . For example I O interface may provide a connection to external devices such as a keyboard keypad camera a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. configuration management function configuration management function election function election function subnet manager and subnet manager can be stored on such portable computer readable storage media and can be loaded onto persistent storage of node node switch and switch via I O interface s of node node switch and switch . Software and data used to practice embodiments of the present invention e.g. statistical machine translation program can be stored on such portable computer readable storage media and can be loaded onto persistent storage of node node switch and switch via I O interface s of node node switch and switch . I O interface s also connect to a display .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

