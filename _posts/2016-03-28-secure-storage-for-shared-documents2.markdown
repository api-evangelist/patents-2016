---

title: Secure storage for shared documents
abstract: Embodiments are directed towards managing data storage for secure storage of shared documents. A user or an application may provide data destined for encryption and a public key. Instruction set information that references at least a seed file that may be installed on the network computer may be generated. An encryption key based on the instruction set information may be generated. Header information that includes the instruction set may be generated. And, the header information may be encrypted using the public key. A secure bundle that includes the public key, the encrypted header information, and the encrypted data may be generated and provided to the user that provided the data and the public key or the application that provided the data and the public key. Decrypting the data included in the secure bundle the above actions are generally performed in reverse.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584321&OS=09584321&RS=09584321
owner: Centri Technology, Inc.
number: 09584321
owner_city: Seattle
owner_country: US
publication_date: 20160328
---
This Utility patent application is a Continuation of U.S. patent application Ser. No. 14 815 806 filed on Jul. 31 2015 now U.S. Pat. No. 9 298 940 issued on Mar. 29 2016 which is based on U.S. Provisional Patent Application No. 62 102 942 filed on Jan. 13 2015 the benefits of which are claimed under 35 U.S.C. 120 and 119 e and which are both further incorporated by reference in their entireties.

The invention relates generally to communication over computer networks and more particularly but not exclusively to secure storage for shared documents in a networked environment.

More and more service providers are moving their applications onto distributed networked environments such as public or private cloud environments. Likewise clients of these distributed applications have an expectation of ubiquitous access to applications from a variety of different mobile or non mobile client computers and devices. Accordingly the information security applications for applications hosted in distributed network environments and or cloud computing environments may be expected to protect communications originating from a wide variety of devices unexpected unplanned locations or the like. Accordingly users and companies generating many digital documents that may be stored on network accessible storages As individuals and companies increasing rely on computer networks such as the internet for document storage the threat of malicious and or unauthorized access to sensitive information also increases. Large scale attacks that steal electronically stored documents can cause significant damage and embarrassment to companies relying on such documents to be accessible over the internet or other computer networks. Thus it is with respect to these considerations and others that the subject innovations have been made.

The present innovations now will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration specific embodiments by which the invention may be practiced. These innovations may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Among other things the present innovations may be embodied as methods computers or devices. Accordingly the present innovations may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

Throughout the specification and claims the following terms take the meanings explicitly associated herein unless the context clearly dictates otherwise. The phrase In one of the embodiments or in at least one of the various embodiments as used herein does not necessarily refer to the same embodiment though it may. Furthermore the phrase in another embodiment as used herein does not necessarily refer to a different embodiment although it may. Thus as described below various embodiments of the innovations may be readily combined without departing from the scope or spirit of the innovations.

In addition as used herein the term or is an inclusive or operator and is equivalent to the term and or unless the context clearly dictates otherwise. The term based on is not exclusive and allows for being based on additional factors not described unless the context clearly dictates otherwise. In addition throughout the specification the meaning of a an and the include plural references. The meaning of in includes in and on. 

As used herein the term cloud network refers to cloud based networked computing environments that usually enable location transparent access to services and or applications. Cloud networks may be comprised of one or more physical network computers. These physical network computers may be coupled using one or more networks and or arranged into clusters. In some cases users may access cloud networks over public networks such as the internet. Cloud networks generally made available to the public are sometimes called public cloud networks. In other cases access to a cloud network may be restricted. This type of cloud network configuration may be called a private cloud network.

Cloud networks may comprise numerous physical computers and storage devices arranged such that the number and arrangement of the physical computers and devices is hidden from the users of a cloud network. Cloud network infrastructure the details and architecture of which may vary depending on the cloud network provider automatically provision and deploy applications and services onto the physical hardware transparent to the users of cloud services.

As used herein the term cloud instance refers to an addressable identifiable and distinct allocation of computing resources in a cloud network. In many embodiments cloud instances are virtual servers implemented using one or more virtual machine technologies. In some embodiments cloud instances may be optimized for particular computing tasks.

As used herein the term credentials refers to information that is used for unambiguous identification of entities or items in a network. In some embodiments cryptographic techniques may be employed to generate credentials for establishing the identity of parties that are in communication over a network including users client computers server computers or the like. In at least one of the various embodiments credentials may comprise machine readable cryptographic keys passwords certificates public key private keys or the like. In at least one of the various embodiments credentials may be self issued or issued by a trusted third party. For example an X.509 certificate and a corresponding private key is a credential that may be generated using well known cryptographic techniques.

As used herein the term seed file refers to unencrypted data that is preselected for use during compression and encryption operations. Seed files include data that may be processed and used for preloading a work space buffer used during codec operations such as compression cryptographic operations or the like or combination thereof. In at least one of the various embodiments seed files may be selected to include data that may optimize the codec operations for a particular type of data. For example if source data is determined to be HTML a particular seed file may include data that improves the initial performance of codec operations performed on the source data. Seed files may be various sizes such as 1K 10 Kbytes or more depending on the particular implementation.

As used herein the term instruction set and instruction set information refer to information that may be communicated from a security application server on a server computer to a client security application on a client computer. Instruction information may include a seed file identifier an offset value a length value and optionally a range of port numbers. In some embodiments the instruction set information may employed by a security application both client and servers to extract a pass phrase from a seed file. The extracted pass phrase may be employed by a security application to generate a cryptographic key.

As used herein the term hardware security module refers to a hardware device or computer arranged for providing additional safeguards for storing and using security cryptographic information such as keys digital certificates passwords passphrases two factor authentication information personal identification numbers or the like. In some embodiments hardware security modules may be employed to support one or more standard public key infrastructures PKI and may be employed to generate manage and or store keys pairs or the like. In some embodiments hardware security modules may be arranged and or configured as stand alone network computers in other cases they may be arranged as hardware cards that may be added to a computer. Further in some cases hardware security modules may be arranged as a portable computer and or incorporated into client computers.

As used herein the terms encryption and decryption refer to cryptographic operations that may be performed on message data. Generally encryption may refer to one or more cryptographic operations that may be performed on data to secure it for transmission and or storage. In some cases data may be encoded using public key private key cryptography. In other cases cryptographic operations may employ symmetric keys. Further in some embodiments data operations such as compression decompression may be employed before and or simultaneously while data is encrypted or decrypted. Accordingly herein it is assumed that encryption decryption and cryptographic operations may include one or more additional steps such as compression decompression data padding data seeding or the like or combination thereof.

As used herein the term transport key as used herein is a cryptographic key used for symmetric encryption that is generated by a security application based on instruction set information. The transport key is used in cryptographic operations to encrypt and or decrypt information communicated between two endpoints.

As used herein the term encryption key as used herein is a cryptographic key used for symmetric encryption that is generated by a security application and or secure storage application based on instruction set information. The encryption key is used in cryptographic operations to encrypt and or decrypt data for secure storage.

As used herein the terms cache values seed values or working set values refer to values generated by the operation of a stream cipher encryption engine. In some stream ciphers the cache values are used as part of the encryption process. Accordingly the cache of the encryption must be seeded with the correct cache values to invert decrypt the process of encryption.

The following briefly describes the embodiments of the invention in order to provide a basic understanding of some aspects of the invention. This brief description is not intended as an extensive overview. It is not intended to identify key or critical elements or to delineate or otherwise narrow the scope. Its purpose is merely to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly stated embodiments are directed towards seeded cryptography and compression for data transport and storage. In at least one of the various embodiments the client applications and server application may be installed with client security application and security application servers respectively. The client application and server application may employ the client security application and the security application server to communicate over a network.

In at least one of the various embodiments the client security application may register with a security application server using one or more cryptographic credentials. Upon successful registration the client security application and security application server may conduct cryptographically secure communication over the network.

In at least one of the various embodiments at the beginning of each secure cryptographic communication session the client security application and the security application server may exchange instruction sets that are used to generate an initial transport key that may enable the two security applications to conduct secure communications. In at least one of the various embodiments the instruction set information may at least include information for determining a pass phrase from one or more preinstalled seed files copies of which are present on each security application e.g. both the client and server .

In at least one of the various embodiments during cryptographic operations a workspace memory may be filled deliberately and or as a by product of a compression operation. Accordingly the information in the workspace may be employed to generate a new transport key for encrypting or decrypting the next portion of the data.

In at least one of the various embodiments data that is encrypted for storage e.g. as a file or in a database may be bundled with a separately encrypted copy of the instruction set that was used to generate the initial transport key used for encrypting the data. Accordingly if the encrypted bundle is retrieved from storage the original initial transport key may be regenerated from the instruction set information that was bundled with the stored encrypted data.

Furthermore in at least one of the various embodiments embodiments may be directed towards managing data storage using one or more network computers that perform actions for secure storage of shared documents.

In at least one of the various embodiments a user or an application may provide data destined for encryption and a public key to a secure storage application that is running on a network computer. In at least one of the various embodiments instruction set information that references at least a seed file that may be installed on the network computer may be generated.

In at least one of the various embodiments an encryption key based on the instruction set information may be generated. In at least one of the various embodiments generating the encryption key may include determining the seed file from a plurality of seed files based on an identifier that is included in the instruction set information extracting a pass phrase from the seed file based on an offset value and a length value that are included in the instruction set information and generating the encryption key based on the pass phrase that is extracted from the seed file. Further in at least one of the various embodiments generating the encryption key may further comprise employing a sensor to introduce entropy. In at least one of the various embodiments an encryption engine may be employed to encrypt the data using the encryption key.

In at least one of the various embodiments header information that includes the instruction set may be generated. And the header information may be encrypted using the public key. In at least one of the various embodiments generating the header information may include adding one or more cache values generated by the encryption engine to the header information. In at least one of the various embodiments the header information may be modified include to a seed file that corresponds to the instruction set information.

In at least one of the various embodiments a secure bundle that includes the public key the encrypted header information and the encrypted data may be generated and provided to the user that provided the data and the public key or the application that provided the data and the public key.

In at least one of the various embodiments for decrypting the data included in the secure bundle the above actions are generally performed in reverse. Accordingly in at least one of the various embodiments the secure bundle and a private key may be provided to the secure storage application by a user or an application. In at least one of the various embodiments the encrypted header information included in the secure bundle may be decrypted using that private key. In at least one of the various embodiments the instruction set information included in the decrypted header information may be accessed. Accordingly the encryption key may be generated based on the instruction set information. And in at least one of the various embodiments the encrypted data that may be included in the secure bundle may be decrypted using the encryption key and provided to the user that provided the secure bundle and the private key or the application that provided the secure bundle and the private key.

In at least one of the various embodiments another public key from another user or another application may be provided. In at least one of the various embodiments additional encrypted header information may be generated using the other public key and the header information. And in at least one of the various embodiments the other public key and the additional encrypted header information may be included in the secure bundle.

In at least one of the various embodiments a common public key may be provided and used to encrypt header information. In at least one of the various embodiments using a common public key may enable two or more users or two or more applications to decrypt the encrypted header information using a common private key that corresponds to the common public key.

At least one embodiment of client computers is described in more detail below in conjunction with . In one embodiment at least some of client computers may operate over one or more wired and or wireless networks such as networks and or . Generally client computers may include virtually any computer capable of communicating over a network to send and receive information perform various online activities offline actions or the like. In one embodiment one or more of client computers may be configured to operate within a business or other entity to perform a variety of services for the business or other entity. For example client computers may be configured to operate as a web server firewall client application media player mobile telephone game console desktop computer kiosk point of sale or the like. However client computers are not constrained to these services and may also be employed for example as for end user computing in other embodiments. It should be recognized that more or less client computers as shown in may be included within a system such as described herein and embodiments are therefore not constrained by the number or type of client computers employed.

Computers that may operate as client computer may include computers that typically connect using a wired or wireless communications medium such as personal computers multiprocessor systems microprocessor based or programmable electronic devices network PCs or the like. In some embodiments client computers may include virtually any portable computer capable of connecting to another computer and receiving information such as laptop computer mobile computer tablet computers or the like. However portable computers are not so limited and may also include other portable computers such as cellular telephones display pagers radio frequency RF devices infrared IR devices Personal Digital Assistants PDAs handheld computers wearable computers integrated devices combining one or more of the preceding computers or the like. As such client computers typically range widely in terms of capabilities and features. Moreover client computers may access various computing applications including a browser or other web based application.

A client computer may include a browser application that is configured to receive and to send web pages web based messages and the like. The browser application may be configured to receive and display graphics text multimedia and the like employing virtually any web based language including a wireless application protocol messages WAP and the like. In one embodiment the browser application is enabled to employ Handheld Device Markup Language HDML Wireless Markup Language WML WMLScript JavaScript Standard Generalized Markup Language SGML HyperText Markup Language HTML eXtensible Markup Language XML JavaScript Object Notation JSON or the like to display and send a message. In one embodiment a user of the client computer may employ the browser application to perform various activities over a network online . However one or more other applications may also be used to perform various online activities.

Client computers also may include at least one other client application that is configured to receive and or send content between another computer. The client application may include a capability to send and or receive content or the like. The client application may further provide information that identifies itself including a type capability name and the like. In one embodiment client computers may uniquely identify themselves through any of a variety of mechanisms including an Internet Protocol IP address a phone number Mobile Identification Number MIN media access control address MAC address an electronic serial number ESN operating system generated hardware identifier or other device identifier. Such information may be provided in a network packet or the like sent between other client computers application server computer or other computers.

Client computers may further be configured to include a client application that enables an end user to log into an end user account that may be managed by another computer such as application server computer cloud instances or the like. Such an end user account in one non limiting example may be configured to enable the end user to manage one or more online activities including in one non limiting example search activities social networking activities browse various websites communicate with other users perform one or more financial activities online banking online investment management or the like. However participation in such online activities may also be performed without logging into the end user account.

Wireless network is configured to couple client computers and its components with network and or cloud network . Wireless network may include any of a variety of wireless sub networks that may further overlay stand alone ad hoc networks and the like to provide an infrastructure oriented connection for client computers . Such sub networks may include mesh networks Wireless LAN WLAN networks cellular networks and the like. In one embodiment the system may include more than one wireless network.

Wireless network may further include an autonomous system of terminals gateways routers and the like connected by wireless radio links and the like. These connectors may be configured to move freely and randomly and organize themselves arbitrarily such that the topology of wireless network may change rapidly.

Wireless network may further employ a plurality of access technologies including 2nd 2G 3rd 3G 4th 4G 5th 5G generation radio access for cellular systems WLAN Wireless Router WR mesh and the like. Access technologies such as 2G 3G 4G 5G and future access networks may enable wide area coverage for mobile computers such as client computers with various degrees of mobility. In one non limiting example wireless network may enable a radio connection through a radio network access such as Global System for Mobil communication GSM General Packet Radio Services GPRS Enhanced Data GSM Environment EDGE code division multiple access CDMA time division multiple access TDMA Wideband Code Division Multiple Access WCDMA High Speed Downlink Packet Access HSDPA Long Term Evolution LTE and the like. In essence wireless network may include virtually any wireless communication mechanism by which information may travel between client computers and another computer network cloud network cloud instance or the like.

Network is configured to couple network computers with other computers including application server computer client computers through wireless network cloud network cloud instances or the like. Network is enabled to employ any form of computer readable media for communicating information from one electronic device to another. Also network can include the Internet in addition to local area networks LANs wide area networks WANs direct connections such as through a universal serial bus USB port other forms of computer readable media or any combination thereof. On an interconnected set of LANs including those based on differing architectures and protocols a router acts as a link between LANs enabling messages to be sent from one to another. In addition communication links within LANs typically include twisted wire pair or coaxial cable while communication links between networks may utilize analog telephone lines full or fractional dedicated digital lines including T1 T2 T3 and T4 and or other carrier mechanisms including for example E carriers Integrated Services Digital Networks ISDNs Digital Subscriber Lines DSLs wireless links including satellite links or other communications links known to those skilled in the art. Moreover communication links may further employ any of a variety of digital signaling technologies including without limit for example DS 0 DS 1 DS 2 DS 3 DS 4 OC 3 OC 12 OC 48 or the like. Furthermore remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link. In one embodiment network may be configured to transport information of an Internet Protocol IP .

Cloud network may be a public or private cloud network. Cloud network may comprise multiple physical network computers interconnected by one or more networks such as networks similar to and or including network and or wireless network . Cloud network may enable and or provide one or more cloud instances. For example cloud instances may be operative in cloud network . The number and composition of cloud instances may be vary depending on the demands of individual users cloud network arrangement operational loads performance considerations application needs operational policy or the like. In at least one of the various embodiments cloud network may be arranged as a hybrid network that includes a combination of private hardware resources private cloud resources public cloud resources or the like.

Cloud instances may be virtualized embodiments of network computer . Further one or more cloud instances may be operative on physical network computers such as network computer . Cloud instances that may be operative on a network computer such as network computer may be managed by a hypervisor such as hypervisor . Further cloud instances may be arranged to use various computer operating systems. And cloud instances running different computer operating systems may be operative in the same cloud network.

Additionally communication media typically embodies computer readable instructions data structures program modules or other transport mechanism and includes any information delivery media. By way of example communication media includes wired media such as twisted pair coaxial cable fiber optics wave guides and other wired media and wireless media such as acoustic RF infrared and other wireless media.

One embodiment of application server computer is described in more detail below in conjunction with . Briefly however application server computer includes virtually any network computer capable of managing the running one or more provider applications and or security application compressing application databases or the like or combination thereof.

Although illustrates application server computer as a single computer the innovations and or embodiments are not so limited. For example one or more functions of application server computer may be distributed across one or more distinct network computers. Moreover application server computer is not limited to a particular configuration. Thus in one embodiment application server computer may be implemented using a plurality of network computers. In other embodiments the application server computer may operate as a plurality of network computers within a cluster architecture a peer to peer architecture or the like. Further in at least one of the various embodiments one or more application server computers may be implemented using one or more cloud instances in one or more cloud networks. Accordingly these innovations and embodiments are not to be construed as being limited to a single environment and other configurations and architectures are also envisaged.

As shown in the figure client computer includes a processor in communication with a mass memory via a bus . In some embodiments processor may include one or more central processing units CPU . Client computer also includes a power supply one or more network interfaces an audio interface a display a keypad an illuminator a video interface an input output interface a haptic interface . In some embodiments a client computer may include components such as hardware security module or a global positioning system GPS receiver .

Power supply provides power to client computer . A rechargeable or non rechargeable battery may be used to provide power. The power may also be provided by an external power source such as an alternating current AC adapter or a powered docking cradle that supplements and or recharges a battery.

Client computer may optionally communicate with a base station not shown or directly with another computer. Network interface includes circuitry for coupling client computer to one or more networks and is constructed for use with one or more communication protocols and technologies including but not limited to GSM CDMA TDMA GPRS EDGE WCDMA HSDPA LTE user datagram protocol UDP transmission control protocol Internet protocol TCP IP short message service SMS WAP ultra wide band UWB IEEE 802.16 Worldwide Interoperability for Microwave Access WiMax session initiated protocol real time transport protocol SIP RTP or any of a variety of other wireless communication protocols. Network interface is sometimes known as a transceiver transceiving device or network interface card NIC .

Audio interface is arranged to produce and receive audio signals such as the sound of a human voice. For example audio interface may be coupled to a speaker and microphone not shown to enable telecommunication with others and or generate an audio acknowledgement for some action.

Display may be a liquid crystal display LCD gas plasma light emitting diode LED organic LED or any other type of display used with a computer. Display may also include a touch sensitive screen arranged to receive input from an object such as a stylus or a digit from a human hand.

Keypad may comprise any input device arranged to receive input from a user. For example keypad may include a push button numeric dial or a keyboard. Keypad may also include command buttons that are associated with selecting and sending images.

Illuminator may provide a status indication and or provide light. Illuminator may remain active for specific periods of time or in response to events. For example when illuminator is active it may backlight the buttons on keypad and stay on while the client computer is powered. Also illuminator may backlight these buttons in various patterns when particular actions are performed such as dialing another client computer. Illuminator may also cause light sources positioned within a transparent or translucent case of the client computer to illuminate in response to actions.

Video interface is arranged to capture video images such as a still photo a video segment an infrared video or the like. For example video interface may be coupled to a digital video camera a web camera or the like. Video interface may comprise a lens an image sensor and other electronics. Image sensors may include a complementary metal oxide semiconductor CMOS integrated circuit charge coupled device CCD or any other integrated circuit for sensing light.

Client computer also comprises input output interface for communicating with external devices such as a headset or other input or output devices not shown in . Input output interface can utilize one or more communication technologies such as USB infrared Bluetooth or the like.

Haptic interface is arranged to provide tactile feedback to a user of the client computer. For example the haptic interface may be employed to vibrate client computer in a particular way when another user of a computer is calling. In some embodiments haptic interface may be optional.

Client computer may also include GPS transceiver to determine the physical coordinates of client computer on the surface of the Earth. GPS transceiver in some embodiments may be optional. GPS transceiver typically outputs a location as latitude and longitude values. However GPS transceiver can also employ other geo positioning mechanisms including but not limited to triangulation assisted GPS AGPS Enhanced Observed Time Difference E OTD Cell Identifier CI Service Area Identifier SAI Enhanced Timing Advance ETA Base Station Subsystem BSS or the like to further determine the physical location of client computer on the surface of the Earth. It is understood that under different conditions GPS transceiver can determine a physical location within millimeters for client computer and in other cases the determined physical location may be less precise such as within a meter or significantly greater distances. In one embodiment however client computer may through other components provide other information that may be employed to determine a physical location of the computer including for example a Media Access Control MAC address IP address or the like.

Further client computer may also comprise hardware security module HSM for providing additional safeguards for generating storing and or using security cryptographic information such as keys digital certificates passwords passphrases two factor authentication information cryptographic hashing or the like. In some embodiments hardware security module may be employed to support one or more standard public key infrastructures PKI and may be employed to generate manage and or store public private key pairs or the like. In some embodiments HSM may be a stand alone client computer in other cases HSM may be arranged as a hardware card that may be added to a client computer. In some embodiments HSM may be arranged to provide hardware accelerated cryptography and or compression of data.

Client computer may also include sensors for determining geolocation information e.g. GPS monitoring electrical power conditions e.g. voltage sensors current sensors frequency sensors and so on monitoring weather e.g. thermostats barometers anemometers humidity detectors precipitation scales or the like or the like. Sensors may be one or more hardware sensors that collect and or measure data that is external to client computer .

Mass memory includes a Random Access Memory RAM a Read only Memory ROM and other storage means. Mass memory illustrates an example of computer readable storage media devices for storage of information such as computer readable instructions data structures program modules or other data. Mass memory stores a basic input output system BIOS or the like for controlling low level operation of client computer . The mass memory also stores an operating system for controlling the operation of client computer . It will be appreciated that this component may include a general purpose operating system such as a version of UNIX or LINUX or a specialized client communication operating system such as Microsoft Corporation s Windows Mobile Apple Corporation s iOS Google Corporation s Android or the Symbian operating system or the like. The operating system may include or interface with a Java virtual machine module or the like that enables control of hardware components and or operating system operations via application programs.

Mass memory further includes one or more data storage which can be utilized by client computer to store among other things applications and or other data. For example data storage may also be employed to store information that describes various capabilities of client computer . The information may then be provided to another computer based on any of a variety of events including being sent as part of a header during a communication sent upon request or the like. Data storage may also be employed to store social networking information including address books buddy lists aliases user profile information or the like. Further data storage may also store messages web page content or any of a variety of user generated content. Further data storage may be used for storing credentials that may be employed for cryptography operations. Also data storage may employed for storing seed files that may be employed for operations related to cryptography compression or the like or combination thereof.

At least a portion of the information stored in data storage may also be stored on another component of client computer including but not limited to processor readable storage media a disk drive or other computer readable storage devices not shown within client computer .

Processor readable storage media may include volatile non transitory non transitive nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer or processor readable instructions data structures program modules or other data. Examples of computer readable storage media include RAM ROM Electrically Erasable Programmable Read only Memory EEPROM flash memory or other memory technology Compact Disc Read only Memory CD ROM digital versatile disks DVD or other optical storage solid state drives SSD magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other physical medium which can be used to store the desired information and which can be accessed by a computer. Processor readable storage media may also be referred to herein as computer readable storage media and or computer readable storage device.

Applications may include computer executable instructions which when executed by client computer transmit receive and or otherwise process network data. Network data may include but is not limited to messages e.g. SMS Multimedia Message Service MMS instant message IM email and or other messages audio video and enable telecommunication with another user of another client computer. Applications may include for example client application client security application a browser and other applications .

Browser may include virtually any application configured to receive and display graphics text multimedia messages and the like employing virtually any web based language. In one embodiment the browser application is enabled to employ HDML WML WMLScript JavaScript SGML HTML HTML5 XML and the like to display and send a message. However any of a variety of other web based programming languages may be employed. In one embodiment browser may enable a user of client computer to communicate with another network computer such as application server computer shown in .

Other applications may include but are not limited to calendars search programs email clients IM applications SMS applications voice over Internet Protocol VOIP applications contact managers task managers transcoders database programs word processing programs security applications spreadsheet programs games search programs and so forth.

Additionally in one or more embodiments not shown in the figures client computer may include an embedded logic hardware device instead of a CPU such as an Application Specific Integrated Circuit ASIC Field Programmable Gate Array FPGA Programmable Array Logic PAL or the like or combination thereof. The embedded logic hardware device may directly execute its embedded logic to perform actions. Also in one or more embodiments not shown in the figures the client computer may include a hardware microcontroller instead of a CPU. In at least one embodiment the microcontroller may directly execute its own embedded logic to perform actions and access its own internal memory and its own external Input and Output Interfaces e.g. hardware pins and or wireless transceivers to perform actions such as System On a Chip SOC or the like.

Network computer may include processor processor readable storage media network interface unit an input output interface hard disk drive hardware security module video display adapter and memory all in communication with each other via bus . In some embodiments processor may include one or more central processing units. In at least one of the various embodiments network computer may include global positioning system GPS receiver .

As illustrated in network computer also can communicate with the Internet or other communication networks via network interface unit which is constructed for use with various communication protocols including the TCP IP protocol. Network interface unit is sometimes known as a transceiver transceiving device or network interface card NIC .

Network computer also comprises input output interface for communicating with external devices such as a keyboard or other input or output devices not shown in . Input output interface can utilize one or more communication technologies such as USB infrared NFC Bluetooth or the like.

Network computer may also include GPS transceiver to determine the physical coordinates of network computer on the surface of the Earth. GPS transceiver in some embodiments may be optional. GPS transceiver typically outputs a location as latitude and longitude values. However GPS transceiver can also employ other geo positioning mechanisms including but not limited to triangulation assisted GPS AGPS Enhanced Observed Time Difference E OTD Cell Identifier CI Service Area Identifier SAI Enhanced Timing Advance ETA Base Station Subsystem BSS or the like to further determine the physical location of network computer on the surface of the Earth. It is understood that under different conditions GPS transceiver can determine a physical location within millimeters for network computer and in other cases the determined physical location may be less precise such as within a meter or significantly greater distances. In one embodiment however network computer may through other components provide other information that may be employed to determine a physical location of the computer including for example a Media Access Control MAC address IP address or the like.

Further network computer may also comprise hardware security module HSM for providing additional safeguards for generating storing and or using security cryptographic information such as keys digital certificates passwords passphrases two factor authentication information personal identification numbers or the like. In some embodiments hardware security module may be employed to support one or more standard public key infrastructures PKI and may be employed to generate manage and or store keys pairs or the like. In some embodiments HSM may be a stand alone network computer in other cases HSM may be arranged as a hardware card that may be added to a network computer. In some embodiments HSM may be arranged to provide hardware accelerated cryptography and or compression of data.

Network computer may also include sensors for determining geolocation information e.g. GPS monitoring electrical power conditions e.g. voltage sensors current sensors frequency sensors and so on monitoring weather e.g. thermostats barometers anemometers humidity detectors precipitation scales or the like or the like. Sensors may be one or more hardware sensors that collect and or measure data that is external to network computer .

Memory generally includes RAM ROM and one or more permanent mass storage devices such as hard disk drive tape drives solid state drives optical drives and or floppy disk drives. Memory stores operating system for controlling the operation of network computer . Any general purpose operating system may be employed. Basic input output system BIOS is also provided for controlling the low level operation of network computer .

Although illustrated separately memory may include processor readable storage media . Processor readable storage media may be referred to and or include computer readable media computer readable storage media and or processor readable storage device. Processor readable storage media may include volatile nonvolatile non transitory non transitive removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of processor readable storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices thumb drives memory cards or any other media which can be used to store the desired information and which can be accessed by a computer.

Memory further includes one or more data storage which can be utilized by network computer to store among other things applications and or other data. For example data storage may also be employed to store information that describes various capabilities of network computer . The information may then be provided to another computer based on any of a variety of events including being sent as part of a header during a communication sent upon request or the like. Data storage may also be employed to store messages web page content or the like. At least a portion of the information may also be stored on another component of network computer including but not limited to processor readable storage media hard disk drive or other computer readable storage medias not shown within network computer .

Data storage may include a database text spreadsheet folder file or the like that may be configured to maintain and store user account identifiers user profiles email addresses IM addresses and or other network addresses or the like. Data storage may further include program code data algorithms and the like for use by a processor such as processor to execute and perform actions. In one embodiment at least some of data store might also be stored on another component of network computer including but not limited to processor readable storage media hard disk drive or the like.

Data storage may be used for storing credentials that may be employed for cryptography operations. Also data storage may employed for storing seed files that may be employed for operations related to cryptography compression or the like or combination thereof.

Applications may include computer executable instructions which may be loaded into mass memory and run on operating system . Examples of application programs may include transcoders schedulers calendars database programs word processing programs Hypertext Transfer Protocol HTTP programs customizable user interface programs IPSec applications encryption programs security programs SMS message servers IM message servers email servers account managers and so forth. Applications may also include website server hypervisor security application server application or secure storage application .

Website server may represent any of a variety of information and services that are configured to provide content including messages over a network to another computer. Thus website server can include for example a web server a File Transfer Protocol FTP server a database server a content server email server or the like. Website server may provide the content including messages over the network using any of a variety of formats including but not limited to WAP HDML WML SGML HTML HTML5 XML Compact HTML cHTML Extensible HTML xHTML or the like.

Additionally in one or more embodiments not shown in the figures network computer may include an embedded logic hardware device instead of a CPU such as an Application Specific Integrated Circuit ASIC Field Programmable Gate Array FPGA Programmable Array Logic PAL or the like or combination thereof. The embedded logic hardware device may directly execute its embedded logic to perform actions. Also in one or more embodiments not shown in the figures the network computer may include a hardware microcontroller instead of a CPU. In at least one embodiment the microcontroller may directly execute its own embedded logic to perform actions and access its own internal memory and its own external Input and Output Interfaces e.g. hardware pins and or wireless transceivers to perform actions such as System On a Chip SOC or the like.

In at least one of the various embodiments client computer may be a client computer such as client computer . Likewise in at least one of the various embodiments application server computer may be a network computer such as network computer . Further in at least one of the various embodiments network may be a network such as wireless network network cloud network or the like or combination thereof.

In at least one of the various embodiments client computer may include client cloud application that may be logically coupled with client security application . Further client security application may include one or more components such as core . In at least one of the various embodiments core may be arranged to include one or more hardware and or software cryptography components. In some embodiments such components may be arranged to generate cryptographic credentials and or credential information such as public private key pairs cryptographic certificates or the like. Also in at least one of the various embodiments core may be arranged to perform actions such as encryption cryptographic hashing cryptographic signing key generation compression or the like or combination thereof. In some embodiments core may be partly or fully implemented as a hardware security modules such as HSM .

Similarly in at least one of the various embodiments application server computer may include security application server and cloud application server . Similar to client security application security application server may include one or more components such as core . In at least one of the various embodiments core may be partly or fully implemented as a hardware security module such as HSM . Further in some embodiments server computer may include one or more data storage systems such as data store . In some embodiments data store may be a file system distributed file system database or the like or combination thereof. Further in some embodiments data store may reside on one or more network computers and or storage computers that are separate from server computer .

In at least one of the various embodiments client security application may be statically or dynamically coupled with client cloud application . In some embodiments client security application may be built in to client cloud applications. In other embodiments client cloud application may be arranged to logically couple with client security application through an API or the like. For example communication between client cloud applications and client security applications may be performed using one or more inter process communication mechanism that may be supported by the client computer.

In at least one of the various embodiments client cloud application may transparently employ client security application to securely cryptographically secure communicate with a cloud application server such as cloud application server . Likewise in at least one of the various embodiments cloud application server may be arranged to employ security application server to cryptographically secure communications between itself and client cloud applications such as client cloud application .

In at least one of the various embodiments client security application may be embedded with credential information that is associated with the entity that owns the server cloud application. For example a financial service company may arrange its client security applications to include particular public key credentials that correspond to one or more particular security application servers. Also in at least one of the various embodiments the cloud security application and or the server security application may be arranged include other predefined identifiers for associating one or more client security applications with one or more particular security application servers. In at least one of the various embodiments seed files client identifiers entity identifiers platform identifiers or the like may be preinstalled e.g. built in client security applications such as client security application .

In at least one of the various embodiments a user may download and install client security applications from restricted access application portals that are associated with a particular entity e.g. an enterprise app store for a financial services company . Accordingly an entity may rely on the security features of the restricted access application download portal to ensure that the users of client security applications e.g. those that include credentials associated with the owning entity are authorized users.

In at least one of the various embodiments client security applications may be arranged to enable users to download and or update the credential information from a source that is different than the application download portal. For example the client security application may be made publically available e.g. on a public app store with the credentials provided later from a restricted secure source.

In at least one of the various embodiments before a client security application may be enabled for secure communication it may be registered with the one or more security application servers. In at least one of the various embodiments client security applications and security application servers may be arranged to employ a defined handshake protocol to exchange credential information at least one embodiment of which is described below. In at least one of the various embodiments client security applications and security application servers may then generate transport keys to employ for communication of secure data with a security application server they may be registered with.

In at least one of the various embodiments this arrangement at least enables client security applications and security application servers to conduct secure communication without the need to exchange keys and or the intervention of trusted third parties.

In at least one of the various embodiments at step client security application may generate a client public key private key pair. In at least one of the various embodiments client security application may be arranged to include facilities e.g. core that may be employed to generate cryptographic credentials such as public key private key pairs. One of ordinary skill in the art will appreciate that there are multiple ways to generate public private keys to implement public key cryptography. The any cryptographic secure public key cryptography protocols infrastructures may be employed without departing from the scope of these innovations.

At step in at least one of the various embodiments client security application may generate a registration information bundle that at least includes credential information to employ to register with security application server . In at least one of the various embodiments credential information may include an entity identifier entity ID a platform identifier platform ID the public key generated by client security application or the like or combination thereof. In at least one of the various embodiments the combination of the entity ID and the platform ID may be considered together as a client identifier client ID .

In at least one of the various embodiments the entity ID may be an identifier that corresponds to the entity associated with services applications the user is trying to access. For example the entity ID may correspond to a particular financial services company that requires secure communication between its client applications and server applications. In at least one of the various embodiments the entity ID may be employed to enable security application servers to determine if the client security application is associated with an authorized entity. In at least one of the various embodiments entity ID values and mapping to entities may be configured for each security application server and or client security application.

In at least one of the various embodiments platform ID may be an identifier that corresponds to the client computer the client security application is running on. For example if a user is employing a mobile computer e.g. a smart phone the platform ID may be a platform dependent identifier that may be employed to identify the particular mobile computer being using. In some embodiments the particular structure and method of acquisition of the platform ID may vary depending on the features of the client computer. In the interest of brevity the various techniques are not detailed herein. However one of ordinary skill in the art will be able to arrange the client security application to determine how to obtain a suitable platform ID particular to the make manufacture operating system or the like of the particular client computer that is being employed.

In at least one of the various embodiments the client public key included in the registration information bundler may be the public key that is generated at step .

In at least one of the various embodiments the plain text unencrypted format of the registration information bundle will be known to the client security application and the security application server. In some embodiments the registration information bundle may include a version number to indicate a particular format that may be employed for a bundle.

In at least one of the various embodiments before communicating the registration information to the security application server the client security application may encrypt the information using the public key of the security application server. In at least one of the various embodiments the public key of the security application server may be embedded in the client security application before it is installed on the client computer. Or in some embodiments it may have been provided from another source.

At step in at least one of the various embodiments the security application server may decrypt the registration information bundle using its private key. Accordingly if the public key used by the client security application to encrypt the registration information bundle corresponds to the security application server the entity ID may be extracted and employed to confirm that the client security application is associated with the entity. Alternatively if the entity ID is incorrect the security application server may disregard the registration request.

In at least one of the various embodiments if the registration information is authenticated by the security application server the server may generate a response information bundle that includes the client ID that was sent by client security application in step . In at least one of the various embodiments before providing the response information bundle to client security application the information may be encrypted using client security application s public key that was provided in the registration information bundle at step .

At step in at least one of the various embodiments client security application may decrypt the response information bundle using its private key and confirm that the client ID information sent in step is the correct value. In at least one of the various embodiments if the client ID e.g. entity ID platform ID is authenticated by client security application the client security application may consider itself as successfully registered with security application server . Accordingly in at least one of the various embodiments secure communication sessions may be established between client security application and security application service .

In at least one of the various embodiments client application may not be a direct participant in the registration protocol described above however client application may have initiated the registration process during an install startup and or configuration process. Or in some embodiments upon a user logging in or otherwise authenticating herself with the client application or the like may initiate a registration process.

At step in at least one of the various embodiments cloud client application may begin executing. In some embodiments cloud client application may start up automatically if end user device boots up. In other embodiments cloud client application may be begin executing based on a user s input and or action. In at least one of the various embodiments cloud client application may be arranged to communicate to client security application to initiate a registration process. In at least one of the various embodiments communication between cloud application client and client security application may be performed using a library function call inter process communication or the like or combination thereof.

At step in at least one of the various embodiments client security application may initiate a request to security application server for initializing a transport key trx key . In at least one of the various embodiments the first time a connection is established the message may include information such as entity ID platform ID client public key or the like. In at least one of the various embodiments the message may be encrypted using a public key that corresponds to security application server . In at least one of the various embodiments for subsequent initialization requests since a client ID may be available the message bundle may include the client ID and client public key.

At step in at least one of the various embodiments if security application server is provided the message bundle from step it may be decrypted using the server private key that corresponds to the server public key employed by client security application to encrypt the message bundle. In at least one of the various embodiments if this is the first initialization and or a the client ID is not included in the message bundle a client ID may be generated using the entity ID and platform ID included in the bundle. In at least one of the various embodiments the client ID may be generated by concatenating the entity ID and the platform ID. In some embodiments additional value may be included such as region codes time stamps or the like. Further in at least one of the various embodiments the client ID may be generated by cryptographically hashing the information used for the client ID. In at least one of the various embodiments the generated client ID may be stored as a key index value for subsequent identification of end user device cloud application client client security application or the like or combination thereof. In at least one of the various embodiments if the client ID is determined and or generated security application server may generate a transport key trx key initial instruction set.

At step in at least one of the various embodiments security application server may encode the message bundle generate at step using the client public key that is provided at step . Accordingly in at least one of the various embodiments the encrypted message bundle may be provided to client security application .

At step in at least one of the various embodiments client security application may decrypt the message bundle using its client private key and value the client ID and store to initial instruction set. At this point in at least one of the various embodiments a connection between client security application and security application server may be established. Accordingly in some embodiments client security application may indicate that a connection is opened to cloud application client. shows a transport key generation process performed by system that is in accordance with at least one of the various embodiments. In at least one of the various embodiments client security applications and security application servers that are registered with each other See may be arranged to perform various steps to generate an initial transport key to establish a secure communication session between a client security application and a security application server. In this example system comprises client security application and security application server that may be in communication over a network.

At step in at least one of the various embodiments client security application may generate a session request information bundle that includes an initialize transport key request and a client ID. The session request information bundle may be encrypted using the security application server s public key. The encrypted session request information may be provided to security application server .

At step in at least one of the various embodiments security application server may decrypt the session request information bundle using its private key. If the client ID is valid and authentic security application server may generate an instruction set. In at least one of the various embodiments the instruction set may include at least three parts a seed file identifier position offset value and a pass phrase length value. The format of the instruction set may be known in advance to both client security application and security application server . In some cases the instruction set may include information such as a version number that indicates the format of the instruction set. In at least one of the various embodiments the instruction set may be bundled with the client ID of client security application . In at least one of the various embodiments security application server may encrypt the instruction set bundle using client security application s public key. In at least one of the various embodiments the public key may be associated with the client ID of client security application and stored on the security application server as part of the registration of client security application with security application See . If the instruction set bundle is successfully encrypted it may be provided to client security application .

At step in at least one of the various embodiments client security application is provided the encrypted instruction set bundle from security application server . The instruction set bundle may be decrypted and authenticated by client security application . In at least one of the various embodiments the instruction set bundle may be authenticated by comparing the value of the provided client ID with the client ID of the client security application.

In at least one of the various embodiments if the instruction set bundle is authenticated and found valid client security application may generate a transport key for cryptographic operations.

In at least one of the various embodiments the transport key may be generated using the instruction set information. The instruction set information may be employed to generate a pass phrase from which an initial transport key may be generated.

In at least one of the various embodiments the seed file identifier may be employed to select a particular seed file that is on or available to the client security application. The offset value may be employed to determine a starting position in the selected seed file. And the phrase length value may be employed to define the number of words bytes from the seed file to include in the pass phrase. Once the pass phrase is determined the pass phrase may be cryptographically hashed to produce a transport key.

Also since in at least one of the various embodiments security application server has the same instruction set and seed files as client security application it may generate the correct transport key using a similar procedure as client security application .

Accordingly in at least one of the various embodiments an initial transport key may be employed to cryptographically secure communications between client security application and security application server . In at least one of the various embodiments this transport key initialization process enables the initial transport key to be generated without exchanging the transport key over the network. In at least one of the various embodiments data intended for secure communication may be encrypted using the initial transport key. Similarly at step if security application server sends data rather than receives data it may encrypt the data using the initial transport key. In at least one of the various embodiments the transport keys for the client security application and the security application server may be independent from each other. Accordingly in at least one of the various embodiments one key may be generated for encrypting decrypting data from the client and another transport key may be generated for encrypting decrypting data sent from the server. Accordingly in at least one of the various embodiments a particular transport key may be employed for one direction of transmission. In at least one of the various embodiments the transport keys and correspondent workspace memory may be independent for each direction of communication.

Note in at least one of the various embodiments the transport keys in step and step may be referred to as initial transport keys at least because the key rotation process inherent in the cryptographic process may generate subsequent transport keys during the ongoing encryption process.

At step in at least one of the various embodiments cloud application client may initiate a service request message directed to cloud application server . In at least one of the various embodiments the request message may be provided to client security application using a library function call inter process communication or the like or combination thereof.

At step in at least one of the various embodiments client security application may generate an initial transport key TRX key using the initial instruction set that was provided previously by the security application server. Accordingly the request message may be encrypted using initial transport key TRX key and provided to cloud server over a network.

At step in at least one of the various embodiments security application server may generate its copy of TRX Key using its copy of the initial instruction set. Accordingly it may employ its copy of TRX Key to decrypt the request message provided by client security application .

At step in at least one of the various embodiments security application server may provide the decrypted request message to cloud application server . In at least one of the various embodiments the request message may be provided using one or more inter process communication methods support by cloud server . Further in at least one of the various embodiments cloud server application may provide a response message to security application server to provide to cloud application client .

At step in at least one of the various embodiments security application server may generate a subsequent transport key based on one or more encryption algorithms that may be employed. For example in at least one of the various embodiments the transport key employed for decrypting the last message sent by the client security application may be cryptographically hashed to generate an initial key for security application server to employ to encrypt information that may be sent to the client security application.

In at least one of the various embodiments cache e.g. workspace memory information that is generated during the decryption of the request message may be employed to derive the next transport key for encrypting the response message. Accordingly in at least one of the various embodiments the next transport key may be employed to encrypt to response message. Also in at least one of the various embodiments an encryption cache generated during the encryption of the response using the next transport key may be employed to generate an additional key that may be employed to further encrypt the response message. If the response message is encrypted may be provided to client security application over the network 

At step in at least one of the various embodiments client security application may generate a transport key for decrypting the response message that was encrypted using the server s transport key. In at least one of the various embodiments the client security application may generate its own copy of the server s transport key based on the transport key used by the client to encrypt the request message. For example in at least one of the various embodiments the client security application may cryptographically hash its transport key the as the server did to generate a transport key to decrypt the encrypted response message that was sent by the security application server. Further in at least one of the various embodiments client security application may be arranged to further decrypt the response message based on the values storage in a workspace memory included in an encryption core such as encryption core . Accordingly the decrypted response message may be provided to cloud application client for processing.

In at least one of the various embodiments each subsequent request and response may use transport keys generated based on transport key rotation and or key schedule inherent in the particular encryption algorithm. In at least one of the various embodiments such transport keys may be generated based on cryptographic information that may be generated during the previous messages encryption and or decryption. In at least one of the various embodiments such cryptographic information may be a consequence of a particular cryptographic process and or it may be explicitly generated using one or more key rotation generation protocols.

The operation of certain aspects of the invention will now be described with respect to . In at least one of various embodiments processes and described in conjunction with respectively may be implemented by and or executed on a network computer such as network computer of . In other embodiments these processes or portions of these processes may be implemented by and or executed on a plurality of network computers such as network computer of . Further in other embodiments these processes or portions of these processes may be implemented by and or executed on one or more client computers such as client computer as shown in . Also in at least one of the various embodiments these processes or portions of these processes may be implemented by and or executed on one or more cloud instances operating in one or more cloud networks. However embodiments are not so limited and various combinations of network computers client computer cloud computer or the like may be utilized.

At block in at least one of the various embodiments credential information associated with the client security application including at least its public key may be combined into a registration information bundle and encrypted using a public key that corresponds to the security application server that the client security application is registering with. If encrypted successfully the encrypted registration information bundle may be provided to the target security application server.

In at least one of the various embodiments the client security application may be preinstalled with the public key for one or more of its associated security application servers. Also in at least one of the various embodiments the public key corresponding to a targeted security application server may be provided by some other means such as downloaded from a secure portal or the like.

In at least one of the various embodiments the registration information may include a client ID that uniquely identifies the source of the registration request. In at least one of the various embodiments the client ID may be comprised of an entity ID and a platform ID that are associated with the client security application that is attempting to register with the security application server.

At block in at least one of the various embodiments the security application server may decrypt and authenticate the provided registration information bundle. In at least one of the various embodiments the security application server may employ its private key that corresponds to the public key employed by the client security application to encrypt the registration information bundle. In at least one of the various embodiments the decrypted credential information may be employed to authenticate the client security application. For example the security application server may authenticate the registration attempt by comparing the entity ID included in the provided client ID to the entity ID associated with itself the particular security application server.

At block in at least one of the various embodiments the security application server may generate a response information bundle that includes a copy of the client ID. At block in at least one of the various embodiments the security application server may encrypt the response information bundle. In some embodiments it may be encrypted using the public key of the client security application.

At block in at least one of the various embodiments the encrypted response bundle may be provided to the client security application. In at least one of the various embodiments upon obtaining the encrypted the response bundle the client security application may decrypt the response bundle using its private key. If the response bundle is decrypted the client security application may authenticate the response by comparing the client ID that is included in the response bundle with its own client ID. If the client ID included in the response bundle matches the client security application s own client ID the response may be determined to be valid and authentic.

At decision block in at least one of the various embodiments if the response bundle is authenticated by the client security application control may flow to block otherwise control may flow to block .

At block in at least one of the various embodiments since the client security application successfully registered with the security application server they may engage in secure communication. Next control may be returned to a calling process. At block in at least one of the various embodiments since the response bundle was not successfully authenticated the client security application may reject cancel the registration attempt. Next control may be returned to a calling process.

At block in at least one of the various embodiments the client security application may encrypt its client ID using the public key of the security application server that it is registered. In at least one of the various embodiments the client ID may be comprised of a platform ID and an entity ID that is associated with the client security application on the client computer. In at least one of the various embodiments the client security application may generate a session request information bundle that includes the client ID and request as described in . The session request bundle may be encrypted using the public key of the security application server.

At block in at least one of the various embodiments the client security application may be provide the encrypted session request bundle to the security application server. At decision block in at least one of the various embodiments if the session request bundle is authenticated successfully by the security application server control may flow to connector for further processing otherwise control may flow to block .

At block in at least one of the various embodiments since the session request bundle is not authenticated the security application server may reject the communication session request. Also in at least one of the various embodiments the security application server may log the failed attempt or otherwise notify an administrator of the failed connection attempt. Next control may flow to a calling process.

At block in at least one of the various embodiments the security application server may generate an instruction set bundle that includes the client ID of the client security application and the instruction set. In at least one of the various embodiments the security application server may encrypt the instruction set bundle using the public key of the client security application. If encrypted successfully the encrypted instruction set bundle may be provided to the client security application.

At block in at least one of the various embodiments the client security application may decrypt and authenticate the instruction set bundle that is provided by the security application server. In at least one of the various embodiments the client security application may decrypt the instruction set bundle using the client security application s private key.

In at least one of the various embodiments the client security application may authenticate the instruction set bundle by comparing the client ID included in the bundle with the client security application s own client ID. If the value matches the instruction set bundle may be authenticated.

At block in at least one of the various embodiments both the client security application and the security application server may generate local copies of a symmetric transport key based on the instruction set information. In at least one of the various embodiments the client security application may employ the instruction set sent by the security application server to generate its local copy of the transport key. And in some embodiments the security application server may employ the instruction set information to generate its local copy of the transport key.

In at least one of the various embodiments the security applications may determine a seed file identifier from the instruction set. In at least one of the various embodiments the identifier may be an index into the set of available seed files. In other embodiments other values such as file names may be employed.

In at least one of the various embodiments a seed file corresponding to the seed file identifier may be determined. Accordingly the security applications may employ the offset value to determine position in the in seed file. For example if the offset value 120 the security application may count 120 bytes and or words from the beginning of the seed file to determine a starting point for generating a pass phrase. Next in at least one of the various embodiments the pass phrase length value may define how many bytes words from the seed file starting at the offset point to include in a pass phrase. In at least one of the various embodiments if the pass phrase is selected the transport key may be generated by cryptographically hashing the pass phrase to produce the key.

At block in at least one of the various embodiments the client security application and the security application server may employ their respective transport keys to conduct cryptographically secure communication. Next control may be returned to a calling process.

At block in at least one of the various embodiments process may determine the necessary values from the instruction set such as the seed file ID offset position and pass phrase length. At block in at least one of the various embodiments process may determine the pass phrase from a seed file based on the instruction set values.

At block in at least one of the various embodiments process may generate the transport key from the passphrase. In at least one of the various embodiments various deterministic techniques may be employed to generate the transport key from the pass phrase. For example in at least one of the various embodiments a one way cryptographically secure hash algorithm may be employed to generate the transport key from the pass phrase. Next control may be returned to a calling process.

At block in at least one of the various embodiments the first portion of the data may be encrypted using the initial transport key. In at least one of the various embodiments the data may be compressed and then encrypted depending on the configuration of the security application.

In at least one of the various embodiments one or more various symmetric or asymmetric compression algorithms may be employed. Likewise one or more encryption protocols may be employed. In at least one of the various embodiments the encryption decrypt may be arranged to use the initial transport key to perform symmetric cryptographic operation on the data.

In at least one of the various embodiments during the cryptographic operation compression encryption performed on the first portion of data the security application may determinately produce resultant information that is stored in a workspace memory. In at least one of the various embodiments this information may be produced as a side effect of the particular cryptographic operations being performed. Or in some embodiments it may be deliberately generated from the first data portion and or the first cypher data portion.

At block in at least one of the various embodiments the encrypted first portion of data may be provided to an appropriate endpoint e.g. a client security application or a security application server . In at least one of the various embodiments if the data is encrypted for storage the encrypted data may be accumulated locally until it stored as part of an encrypted storage bundle.

At block in at least one of the various embodiments a new transport key may be generated based in part on cryptographic information that was generated when the first portion of data was encrypted in block and stored in the workspace memory. In at least one of the various embodiments a portion or the entirety of the data in the workspace memory may be cryptographically hashed with the previous transport key to produce the new transport key.

At block in at least one of the various embodiments a next portion of data may be encrypted using the new transport key. Similar as described in block the workspace memory will be filled with new information corresponding the next portion of the data.

At block in at least one of the various embodiments the encrypted next portion of data may be provided to the appropriate endpoint. In at least one of the various embodiments if the data is encrypted for storage the encrypted data may be accumulated locally until it stored as part of an encrypted storage bundle. At decision block in at least one of the various embodiments if more data is available for encryption control may loop back to block otherwise control may be returned to a calling process.

After a start block at block in at least one of the various embodiments an initial transport key may be generated based on an instruction set as described above. In at least one of the various embodiments since both sides of the communication know the instruction set the initial transport key will be the same. In at least one of the various embodiments the current operation is part of a secure storage load operation the instruction set may be retrieved from the encrypted data bundle. At block in at least one of the various embodiments the first portion of the encrypted data may be decrypted using the initial transport key. In at least one of the various embodiments the decryption step may be arranged to fill a workspace memory based on the results of the cryptographic operations similarly as described for block . At block in at least one of the various embodiments the decrypted first portion of encrypted data may be provided to the appropriate endpoint. At block in at least one of the various embodiments a new transport key may be generated based in part on cryptographic information that was generated when the first portion of encrypted data was decrypted in block and stored in the workspace memory. In at least one of the various embodiments a portion or the entirety of the data in the workspace memory may be cryptographically hashed with the previous transport key to produce the new transport key.

At block in at least one of the various embodiments a next portion of encrypted data may be decrypted using the new transport key. Similarly as described in block the workspace memory will be filled with new information corresponding the next portion of the data.

At block in at least one of the various embodiments the decrypted next portion of the encrypted data may be provided to the appropriate endpoint. At decision block in at least one of the various embodiments if more encrypted data is available for decryption control may loop back to block otherwise control may be returned to a calling process.

Similarly in at least one of the various embodiments application server computer may include secure storage application and application . Secure storage application may include one or more components such as core . In some embodiments application server computer may include one or more data storage systems such as data store . In at least one of the various embodiments data store may be file system database or the like. In at least one of the various embodiments additional data storage not shown may be remotely located in distributed file system cloud based storage or the like. Also in at least one of the various embodiments core may be arranged similar to core in and may be considered an encryption engine for performing cryptographic operations.

In at least one of the various embodiments secure storage application may be arranged to provide one or more application programming interfaces APIs that enable an application such as application to provide data that may be encrypted for secure storage. In at least one of the various embodiments secure storage application may be provided data such as a file or document that may be encrypted.

In at least one of the various embodiments secure storage application may generate an instruction set as described above and employ the instruction set to generate a pass phrase from a seed file. The pass phrase may then be used to generate an encryption key that may be used for encrypting the data that may be provided by an application such as application .

In at least one of the various embodiments secure storage application may then encrypt the provided data. After encrypting the provided data secure storage application may generate a header that includes the instruction set information the last cache working set values that were generated by the encryption engine if any as well as any additional meta data such as as checksums file size information or the like. Also in at least one of the various embodiments the entire seed file that was used to generate the pass phrase from the instruction may be included in the header information. In at least one of the various embodiments header information may be then may be asymmetrically encrypted using a public key that may be provided by application .

In at least one of the various embodiments the header information may be encrypted using the application or services provided by the application or other processes. Accordingly in at least one of the various embodiments secure storage application may provide the header information to a cryptographic service or the application for encryption rather than being provided a public key from application .

In at least one of the various embodiments secure storage application may then generate a secure bundle that includes a unique identifier the encrypted header information the public key used to encrypt the header and the encrypted data. In at least one of the various embodiments the secure bundle may be returned to the caller that provided the data for encryption.

In at least one of the various embodiments decryption may be generally considered to be the inverse of the encryption steps. Accordingly. To decrypt the data included in a secure bundle a caller such as application may provide the secure bundle and a private key that corresponds to the public key used to encrypt the header information to secure storage application .

In at least one of the various embodiments secure storage application may use the private key to decrypt the encrypted header information to access the information needed to decrypt the data. Thus in at least one of the various embodiments secure storage application will use the instruction set information from the header to generate a pass phrase from a seed file similar to seed files used by security applications described above that may be used for generating that same valued encryption key that was used to encrypt the data. Also in at least one of the various embodiments if the encryption engine requires a corresponding cache working set data it will also be retrieved from the decrypted header information. Using the encryption key and the cache values to seed to the encryption engine in core secure storage application may decrypt the data included in the secure bundle and provide it unencrypted data to the caller e.g. application .

In at least one of the various embodiments secure storage application may not have access to one or more of the cryptographic used to encrypt the header. For example the application may have encrypted the header without providing the key to the secure storage application. In such cases in at least one of the various embodiments secure storage application may provide the header to application or some other cryptographic service for decryption.

In at least one of the various embodiments a shared public key may be used for cryptography operations. In this case several clients may employ the same public key that may be used for encrypting the header information that is included in a secure bundle. In some embodiments the secure storage application may be provided a private key that corresponds to the shared public key that may be used to decrypt the header information of secure bundles. In at least one of the various embodiments more than one application may add their public key to the secure bundle along with a corresponding encrypted header.

Further in at least one of the various embodiments application server computer is arranged to include one or more sensors for determining geolocation information e.g. GPS monitoring electrical power conditions e.g. voltage sensors current sensors frequency sensors and so on monitoring weather e.g. thermostats barometers anemometers humidity detectors precipitation scales or the like or the like.

For example in at least one embodiment geolocation information such as latitude and longitude coordinates or the like is collected by a hardware GPS sensor and subsequently employed to introduce entropy for generating a network packet key from a passphrase. Similarly in at least one embodiment weather information such as temperature atmospheric pressure wind speed humidity or the like is collected by a hardware weather sensor and subsequently employed to introduce entropy. Additionally in at least one embodiment electrical power information such as voltage current frequency or the like is collected by a hardware electrical power sensor and subsequently employed to introduce entropy for generating a network packet key from a passphrase.

In some embodiments one or more public keys such as public keys associated with one or more callers of the secure storage application may be included in a secure bundle. In some embodiments more than one user may be sharing the same document. Accordingly they each may provide their own individual public keys to the secure storage application. In some embodiments the public keys of each party that has secured the documents may be stored in public keys . Similarly the header information may be encrypted for each user using their provided public key. Accordingly each set of encrypted header information may be stored in secure bundle in encrypted headers . In at least one of the various embodiments the information set and cache working set information will have the same values for each user. Though the encrypted versions of the header information may be different since they may be encrypted using different separate public keys. Accordingly only the holder of the private key that corresponds to the public key used to encrypt a given set of header information may be able to decrypt it.

The operation of certain aspects of the invention will now be described with respect to . In at least one of various embodiments processes and described in conjunction with respectively may be implemented by and or executed on a network computer such as network computer of . In other embodiments these processes or portions of these processes may be implemented by and or executed on a plurality of network computers such as network computer of . Further in other embodiments these processes or portions of these processes may be implemented by and or executed on one or more client computers such as client computer as shown in . Also in at least one of the various embodiments these processes or portions of these processes may be implemented by and or executed on one or more cloud instances operating in one or more cloud networks. However embodiments are not so limited and various combinations of network computers client computer cloud computer or the like may be utilized.

In at least one of the various embodiments the common public keys as well as other cryptographic information may be obtained and or stored in a cryptographic key vault. Also in at least one of the various embodiments common keys may be generated stored or retrieved using a public key management system. Also in at least one of the various embodiments hardware security modules HSMs such as HSM HSM or the like may be employed for generating storing or retrieving various cryptographic information such as common public keys.

At block in at least one of the various embodiments a unique identifier to associate with the provided data may be generated. In at least one of the various embodiments the unique identifier may be a GUID. In at least one of the various embodiments configuration information or information passed through the API of the secure storage application may include additional formatting patterning information that may be used to generate the unique identifier. For example in at least one of the various embodiments the secure storage application may be configured to use prefix values suffix values or the like when generating unique identifiers.

At block in at least one of the various embodiments an instruction set may be generated. In at least one of the various embodiments an instruction set may be generated as described above. In at least one of the various embodiments instruction set information may include a seed file identifier an offset value and a length value.

At block in at least one of the various embodiments an encryption key may be generated based on the instruction set. In at least one of the various embodiments the seed file identifier in the instruction set may be used to determine one of a plurality of seed files. The offset value included in the instruction set may be used to find a starting point in the seed file. And the length value in the instruction set may be used to determine a number of characters to copy from the seed file starting at the offset . These characters may be used to as a pass phrase to generate an encryption key. In at least one of the various embodiments the encryption key may be generated cryptographically hashing the pass phrase or the like.

At block in at least one of the various embodiments the provided data may be encrypted using the encryption key that was generated based on the instruction set. In at least one of the various embodiments the data may be encrypted similar to the way communication is encrypted using a security application such as security application except that the provided data will be encrypted by the secure storage application rather than data that that is part of a communication stream over a network.

At block in at least one of the various embodiments optionally the encryption engine may provide the values from a cache used during the encryption. In at least one of the various embodiments this step may be optional if the encryption engine uses an encryption process that does not generate accessible cache and or the cache memory is not required for decryption. Otherwise since the cache values may be required for decryption they may be gathered from the encryption engine.

At block in at least one of the various embodiments a header may be generated that include header information such as the instruction set the cache values and optionally one or more meta data values. At block in at least one of the various embodiments the header may be encrypted using the public key that may have been provided to the secure storage application.

At block in at least one of the various embodiments a secure bundle that includes the unique identifier the public key the encrypted header and the encrypted data may be generated. In at least one of the various embodiments the secure bundle may be generated by appending the unique identifier the public keys the encrypted header information and the encrypted data into a single data blob or file that that may be provided to the user or application that is requesting the data be encrypted. Next control may be returned to a calling process.

At block in at least one of the various embodiments the encrypted header information may be decrypted using the private key that corresponds to the public key that was used to encrypt when the secure bundle was generated. In at least one of the various embodiments the header information may include meta data such as a copy of the public key that was used to encrypt it. Accordingly in at least one of the various embodiments each time encrypted header information is decrypted with a private key the public key of the decrypting process may compared with the public key values stored in the header to confirm that the header was indeed encrypted using the public key that corresponds to the private key used for decrypting.

In at least one of the various embodiments if there are two or more header information sets the secure storage application may iterate over each header information set until it finds the one that decrypts with the user s application s private key. Meta data such as a unique identifier or public key in the header information may be tested to determine if the correct header information has been decrypted.

In at least one of the various embodiments a public key associated with the secure storage application was not used to encrypt the header the secure storage application will be unable to decrypt the header and its associated data. In at least one of the various embodiments the secure storage application may be configured to forward the encrypted file include the header information to the application e.g. application application or the like or other cryptographic service.

At block in at least one of the various embodiments the instruction set may be obtained from the header. At block in at least one of the various embodiments the encryption key may be generated based on the instruction set information. In at least one of the various embodiments the encryption key may be generated using a seed file and the instruction set information as described above.

At block in at least one of the various embodiments optionally the encryption engine cache values may be obtained from the header. This step is optional because some encryption engines encryption protocols may not require cache values to decrypt data.

At block in at least one of the various embodiments the data portion of the secure bundle may be decrypted using the encryption key and the cache values. In some embodiments the encryption key and cache values may be loaded into the encryption engine to seed it in preparation for decrypting the data. Next control may be returned to a calling process.

At block in at least one of the various embodiments the secure storage application may generate an instruction set to employ for generating the initial encryption key for encrypting the data. In at least one of the various embodiments the secure storage application may employ the same procedures as described in for process to generate an instruction set.

At block in at least one of the various embodiments the secure storage application may generate the initial encryption key based on the generated instruction set. In at least one of the various embodiments rather than generating an encrypted instruction set bundle and providing it to a client security application the secure storage application may directly employ the instruction set information to generate a encryption key. At block in at least one of the various embodiments the secure storage application may employ the encryption key to encrypt the data.

At block in at least one of the various embodiments the secure storage application may encrypt the instruction set using public key that is known only the secure storage application. In at least one of the various embodiments the public key used for encrypting the instruction set may be part of an administration key pair that includes a public key and a corresponding private key owned by the secure storage application. In at least one of the various embodiments the key pair may be obtained from and or stored in a cryptographic key vault. Also in at least one of the various embodiments this key pair may be generated stored or retrieved using a public key management system. Also in at least one of the various embodiments hardware security modules HSMs such as HSM HSM or the like may be employed for generating storing or retrieving various cryptographic information such as public private key pairs. At block in at least one of the various embodiments the encrypted instruction set may be appended or pre pended to the encrypted data to generate an encrypted data bundle. At block in at least one of the various embodiments the encrypted data bundle may be stored in the data store. Next control may be returned to a calling process.

In at least one of the various embodiments secure data storage may be provided for files in a file system and or data that is stored a database. In at least one of the various embodiments in the case of databases the scope of the data bundle is an individual column value for a row in a table. Accordingly the server application may request that one or more columns in a database table are encrypted. Thus in at least one of the various embodiments each encrypted value in the database is bundled with its own instruction set.

In at least one of the various embodiments the security application may receive unencrypted data from the server application and encrypt as described above. In at least one of the various embodiments the security application may encrypt the data and provide it back to the server application enabling the server application to store the data in a file database or the like.

At block in at least one of the various embodiments the secure storage application may decrypt the instruction set using the private key that corresponds to the public key was employed to encrypt it. At block in at least one of the various embodiments the secure storage application may generate the initial encryption key based on the instruction set information. At block in at least one of the various embodiments the security application service may decrypt the requested data by employing the encryption key. At block in at least one of the various embodiments the decrypted data may be provided to the requestor. Next control may be returned to a calling process.

It will be understood that each block of the flowchart the illustrations and combinations of blocks in the flowchart illustrations can be implemented by computer program instructions. These program instructions may be provided to a processor to produce a machine such that the instructions which execute on the processor create means for implementing the actions specified in the flowchart block or blocks. The computer program instructions may be executed by a processor to cause a series of operational steps to be performed by the processor to produce a computer implemented process such that the instructions which execute on the processor to provide steps for implementing the actions specified in the flowchart block or blocks. The computer program instructions may also cause at least some of the operational steps shown in the blocks of the flowcharts to be performed in parallel. Moreover some of the steps may also be performed across more than one processor such as might arise in a multi processor computer system. In addition one or more blocks or combinations of blocks in the flowchart illustration may also be performed concurrently with other blocks or combinations of blocks or even in a different sequence than illustrated without departing from the scope or spirit of the invention.

