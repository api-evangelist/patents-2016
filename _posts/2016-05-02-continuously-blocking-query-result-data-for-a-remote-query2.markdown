---

title: Continuously blocking query result data for a remote query
abstract: Continuously blocking query result data for a remote query is provided. Included is: creating a first connection, using a communications network, between a database server and a client. At least one secondary connection is created, using the communications network, between the database server and the client, based on the database server supporting a continuous block fetch protocol. Using the at least one secondary connection, the database server receives at least one cursor-based fetch query. The database server generates continuous blocks of result data, based on the received at least one cursor-based fetch query and sends to the client, using the at least one secondary connection, the continuous blocks of result data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626444&OS=09626444&RS=09626444
owner: International Business Machines Corporation
number: 09626444
owner_city: Armonk
owner_country: US
publication_date: 20160502
---
Aspects of the present invention have been disclosed by the Applicant who obtained the subject matter disclosed directly from the inventors in the product IBM DB2 V11 for z OS made available to the public on Oct. 25 2013.

The present disclosure relates generally to the field of database systems and more particularly to continuously blocking result data for a remote query.

Minimizing the response time for a query while maximizing the throughput within the database server as a whole is an important goal of database performance. One way to accomplish this goal is to balance the utilization of system resources such as network traffic disk input output and CPU usage. Through understanding application characteristics system resources may be allocated when needed and released when they are no longer needed by the application. In this way system resources may be available when required by other applications connecting to the database. While some system resources such as disk and CPU may be dedicated to support the performance of a particular application or database the network resource may be shared among all the workloads and users within the enterprise. Therefore an application with a query that returns a large result set may impact the performance of other workloads as well as that of the application. If the requests and replies between the client and database server can be efficiently managed network overhead may be reduced and distributed database performance improved.

Among other things a method for continuously blocking query result data for a remote query is provided. According to an embodiment of the invention continuously blocking query result data may include creating a first connection using a communications network between a database server and a client creating at least one secondary connection using the communications network between the database server and the client based on the database server supporting a continuous block fetch protocol receiving at the database server using the received at least one secondary connection at least one cursor based fetch query generating by the database server continuous blocks of result data based on the at least one cursor based fetch query and sending to the client using the at least one secondary connection the continuous blocks of result data.

In another embodiment a computer program product for continuously blocking query result data for a remote query may be provided. The computer program product may comprise a computer readable storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method comprising creating a first connection using a communications network between a database server and a client creating at least one secondary connection using the communications network between the database server and the client based on the database server supporting a continuous block fetch protocol receiving at the database server using the received at least one secondary connection at least one cursor based fetch query generating by the database server continuous blocks of result data based on the at least one cursor based fetch query and sending to the client using the at least one secondary connection the continuous blocks of result data.

In another embodiment a computer system for continuously blocking query result data for a remote query may be provided. A computer system may comprise one or more processors one or more computer readable storage devices and a plurality of program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors the plurality of program instructions comprising a computer readable storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method comprising creating a first connection using a communications network between a database server and a client creating at least one secondary connection using the communications network between the database server and the client based on the database server supporting a continuous block fetch protocol receiving at the database server using the received at least one secondary connection at least one cursor based fetch query generating by the database server continuous blocks of result data based on the at least one cursor based fetch query and sending to the client using the at least one secondary connection the continuous blocks of result data.

Embodiments of the present invention will now be described with reference to the figures. Referring to an exemplary implementation for continuously blocking query result data for a remote query is provided.

The database server generally includes a processor connected via a bus to a memory a network interface device a storage an input device and an output device . The database server is generally under the control of an operating system such as for example Linux. However any operating system supporting the functions disclosed herein may be used. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger formats. The network interface device may be any type of network communications device allowing the database server to communicate with other computers via the network .

The storage may be a persistent storage device. Although the storage is shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives solid state drives floppy disc drives tape drives removable memory cards or optical storage. The memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

The input device may be any device for providing input to the database server . For example a keyboard and or a mouse may be used. The output device may be any device for providing output to a user of the database server . For example the output device may be any conventional display screen or set of speakers. Although shown separately from the input device the output device and input device may be combined as in a display screen with an integrated touch screen.

As shown the memory of the database server includes one or more software modules comprising the DBMS and configured to manage one or more databases contained in the storage of the database server . Each database may store control structures for the DBMS such as system catalog tables in addition to application data.

The client application may be configured as a separate workstation or other computer that is remote from the database server . In this context remote refers to a client using a network connection such as the network to communicate with the database server .

The particular description in is for illustrative purposes only it should be understood that the invention is not limited to specific described embodiments and any combination is contemplated to implement and practice the invention.

Referring now to a client s perspective of an exemplary embodiment for continuously blocking query result data for a remote query is provided. A client may connect to a database server even though the two are geographically dispersed. For example the compiled client application is linked together with vendor supplied library modules that publish common routines and application programming interfaces API so that the client and database server can communicate with each other. The routines assist the client and database server in negotiating mutually agreeable parameters and protocols that may govern the connection. Other information referred to as session data or global variables may be exchanged between the database server and client and may persist for the duration of the connection. Session data that is shared by several applications such as a printer name an accounting period or a department identifier may be stored in a database table for retrieval and use by the client in subsequent structured query language SQL statements after the connection is established.

In the database server environment several database statements may be interleaved on the same network connection between the database server and the client. For a fetch query the client sends a request to the database server for data. The result is returned to the client a block of data at a time. In this configuration which may be referred to as block fetch or send request after processing a block of result data the client sends a request to the database server for the next block of result data. The client then waits for the subsequent reply from the database server which may contain another block of result data or a message that the query is exhausted. When the reply contains large amounts of data the database server must keep the client s thread active and wait until either the client closes the network connection or ends the transaction.

At the client requests a connection to a database server . In general when designing the SQL queries and type of database connection a developer takes into consideration the nature and volume of data that is likely to be fetched. When the developer expects large result sets from the remote query a continuous block fetch protocol may be preferred over the block fetch model discussed above. The continuous block fetch protocol may reduce network overhead since multiple send request interactions between the client and database server are avoided. Network latency may be improved by allowing the client to establish additional connections i.e. secondary connections with the database server to process multiple remote queries in parallel. In addition database server utilization may be improved since the database server may implicitly close the fetch cursor and terminate the query once it recognizes that all the result data blocks have been generated.

At the client requests that the continuous block fetch protocol be used for the cursor based fetch query i.e. a SQL query that fetches data through a cursor. However at the database server may not support the continuous block fetch protocol. This may occur for example when the database server product is at an older version that does not contain the continuous block fetch protocol feature. In that case although the connection may be successfully made the client s functionality will be limited to only those features the database server supports. Therefore at the client is limited to block fetch described previously. However at if both the client and database server support it and the client requests it at the connection will be established using the continuous block fetch protocol. The client may generate more than one cursor based fetch query at a time and request the continuous block fetch protocol for each one. Using the continuous block fetch protocol a secondary connection i.e. thread is opened for each cursor based fetch query generated by the client . The query result data blocks are returned to the client using the secondary connection corresponding to the cursor based fetch query.

If the SQL statement at is not for a cursor based fetch query then at the SQL statement is sent to the database server using the established primary connection. If at the SQL statement is for a cursor based fetch query then at the client opens the secondary connection. When the client opens the secondary connection at the client sends along with the request the current set of session data being used within the transaction at . This ensures that the database server recognizes this new secondary connection as belonging to the same transaction as any other open connection within the transaction be it the primary connection or any of the secondary connections. At the client sends the open cursor request to the database server using its newly opened secondary connection from . Since the database server recognizes the secondary connections as belonging to the same transaction as the primary connection the session data participates in maintaining the consistent context of the transactional relationship between the database server and the client . For example being separate queries any of the connections may modify the transaction s session data. Therefore to keep session data synchronized across all the connections in the transaction the database server may return changed session data when responding to a communication from the client such as establishing a new secondary connection or returning query results. Consequently at when the client sends the open cursor request to the database server using the new secondary connection the database server responds with any changed session data at thus keeping the session data consistent.

As part of the open cursor request at the client identifies the secondary connection as read only and sends the size of the query block that the client can hold in memory at any time. Additionally the client identifies the secondary connection as part of the same transaction as the primary connection. This prevents resource or lock contention among the connections within the transaction. For example the client may choose to generate more than one cursor based fetch query using the continuous block fetch protocol. Accordingly a secondary connection is established for each of these queries and the client may fetch data from any of the secondary connections in any order depending upon the logic of the application. The database server recognizes that each of the secondary connections is part of the same transaction and may share transaction logs for the transaction across all the secondary connections. Consequently locking and other contention errors may be avoided. Processing may now continue in parallel on the database server where the blocks of query result data are prepared for transmission to the client . Accordingly the remainder of i.e. and will be discussed in the context of the database serve in below.

Referring now to a database server s perspective of an exemplary embodiment for continuously blocking query result data for a remote query is provided. At the database server accepts the client s request to open the cursor for a secondary connection. At the database server opens the cursor and begins to continuously generate and send query result data blocks using the block size provided by the client . Along with a query result data block the database server may also return any session data that another query in another connection may have changed. As described previously the session data participates in maintaining the context of the transactional relationship between the database server and the client . However since each secondary connection represents a separate query one of the connections or the primary connection may potentially modify the transaction s session data. To keep session data synchronized across all the connections in the transaction the database server may return changed session data using the secondary connections when sending query result data blocks to the client . Using the continuous block fetch protocol the database server sends the generated query result data block to the client on the network over the secondary connection established for that query until the query is satisfied i.e. exhausted. The database server terminates the process and closes the query s secondary connection when there are no more query results to transmit to the client .

As long as the database server determines that the query is not exhausted at another query result data block may be generated for the client and transmitted over the secondary connection at . However the database server adheres to the network s congestion protocols in pacing the transmission of subsequent query result data blocks. Therefore the database server may transmit as much data as the client reads from the secondary connection preventing the network and the client from being flooded with data. When the query is exhausted at the database server terminates the process and closes the secondary connection for the associated cursor based fetch query.

The client begins fetching rows from the returned query result data block at . When the client attempts to fetch the next row at if the query result data block still contains data the client may continue to fetch rows at from the returned query result data block. When the client finishes fetching the rows in the current query block at but has not received a notification from the database server that the query is exhausted the network s congestion protocols may indicate to the database server that the client can receive the next block of query results. Accordingly as long as the database server determines that the query is not exhausted at another query result data block may be generated for the client and transmitted over the secondary connection at . The client may continue to fetch rows from the query result data blocks until at the client detects for example by a condition code that the query is exhausted.

Referring now to computing device may include respective sets of internal components and external components that together may provide an environment for a software application such as a database management system DBMS . Each of the sets of internal components includes one or more processors one or more computer readable RAMs one or more computer readable ROMs on one or more buses one or more operating systems one or more software applications e.g. DBMS modules executing the method and one or more computer readable tangible storage devices . The one or more operating systems and DBMS modules are stored on one or more of the respective computer readable tangible storage devices for execution by one or more of the respective processors via one or more of the respective RAMs which typically include cache memory . In the embodiment illustrated in each of the computer readable tangible storage devices is a magnetic disk storage device of an internal hard drive. Alternatively each of the computer readable tangible storage devices is a semiconductor storage device such as ROM EPROM flash memory or any other computer readable tangible storage device that can store a computer program and digital information.

Each set of internal components also includes a R W drive or interface to read from and write to one or more computer readable tangible storage devices such as a CD ROM DVD SSD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device.

Each set of internal components may also include network adapters or switch port cards or interfaces such as a TCP IP adapter cards wireless WI FI interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The DBMS modules and operating system that are associated with computing device can be downloaded to computing device from an external computer e.g. server via a network for example the Internet a local area network or other wide area network and respective network adapters or interfaces . From the network adapters or switch port adapters or interfaces and operating system associated with computing device are loaded into the respective hard drive and network adapter . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Each of the sets of external components can include a computer display monitor a keyboard and a computer mouse . External components can also include touch screens virtual keyboards touch pads pointing devices and other human interface devices. Each of the sets of internal components also includes device drivers to interface to computer display monitor keyboard and computer mouse . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

Various embodiments of the invention may be implemented in a data processing system suitable for storing and or executing program code that includes at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements include for instance local memory employed during actual execution of the program code bulk storage and cache memory which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input Output or I O devices including but not limited to keyboards displays pointing devices DASD tape CDs DVDs thumb drives and other memory media etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the available types of network adapters.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

Although preferred embodiments have been depicted and described in detail herein it will be apparent to those skilled in the relevant art that various modifications additions substitutions and the like can be made without departing from the spirit of the disclosure and these are therefore considered to be within the scope of the disclosure as defined in the following claims.

