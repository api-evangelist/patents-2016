---

title: System and method for providing additional functionality to existing software in an integrated manner
abstract: An improved system and method are disclosed for improving functionality in software applications. In one example, the method includes a mobile device having a network interface, a processor, and a memory configured to store a plurality of instructions. The instructions include instructions for a superblock application having instructions for a function block included therein. The function block is configured to provide functions that are accessible to the superblock application via an application programming interface (API). The functions are provided within the superblock application itself and are accessible within the superblock application without switching context to another application on the mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491233&OS=09491233&RS=09491233
owner: DAMAKA, INC.
number: 09491233
owner_city: Richardson
owner_country: US
publication_date: 20160222
---
This application is a continuation of U.S. application Ser. No. 14 690 619 filed Apr. 20 2015 entitled SYSTEM AND METHOD FOR PROVIDING ADDITIONAL FUNCTIONALITY TO EXISTING SOFTWARE IN AN INTEGRATED MANNER which published as U.S. Patent Application Publication No. 2015 0229706 on Aug. 13 2015 now U.S. Pat. No. 9 270 744 issued on Feb. 23 2016. U.S. application Ser. No. 14 690 619 is a continuation of U.S. application Ser. No. 14 024 027 filed on Sep. 11 2013 entitled SYSTEM AND METHOD FOR PROVIDING ADDITIONAL FUNCTIONALITY TO EXISTING SOFTWARE IN AN INTEGRATED MANNER published as U.S. Application Publication No. 2015 0026700 on Jan. 22 2015 now U.S. Pat. No. 9 027 032 issued on May 5 2015. U.S. application Ser. No. 14 024 027 claims the benefit of U.S. Provisional Application No. 61 846 958 filed on Jul. 16 2013 entitled SYSTEM AND METHOD FOR PROVIDING ADDITIONAL FUNCTIONALITY TO EXISTING SOFTWARE IN AN INTEGRATED MANNER U.S. application Ser. Nos. 14 690 619 14 024 027 and 61 846 958 U.S. Application Publication Nos. 2015 0229706 and 2015 0026700 and U.S. Pat. Nos. 9 270 744 and 9 027 032 are incorporated by reference herein in their entirety.

The manner in which functionality is accessed in certain environments such as mobile device environments may impact performance and or battery life. Accordingly what is needed are a system and method that addresses these issues.

It is understood that the following disclosure provides many different embodiments or examples. Specific examples of components and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting. In addition the present disclosure may repeat reference numerals and or letters in the various examples. This repetition is for the purpose of simplicity and clarity and does not in itself dictate a relationship between the various embodiments and or configurations discussed.

Referring to in one embodiment a device includes a memory . The memory stores a superblock which may be a set of executable instructions used to perform one or more functions via the device . For example the device may be a mobile device and the superblock may be an application the superblock application on the mobile device. The instructions of the superblock enable a user of the mobile device to perform one or more actions such as communications data manipulation and or data management. However the functionality of the superblock application is constrained to some degree by the device and by the instructions of the superblock itself.

With respect to the device the amount of available memory how the memory is structured e.g. segment sizes and how the memory is managed e.g. how much memory is allocated to the superblock how swapping occurs when another application needs physical memory and how multiple applications are handled are generally outside of the control of the superblock . However mobile devices frequently provide a separate memory space for each application that is being run and so must keep track of the memory boundaries for each application. This tracking requires resources such as processing time and power.

Furthermore as a user switches between applications e.g. switches contexts the device may have to swap instructions into and out of physical memory which impacts performance and battery life. While context switching occurs in other devices such as desktop and laptop computers the resource impact used for those context switches is generally lower due to the greater amount of resources available for such devices compared to mobile devices. For example as mobile devices generally have a smaller memory footprint compared to larger devices such as desktop and laptop computers not only will a mobile device likely need to swap files in and out of memory when a context switch occurs but the processor load and battery life will likely be negatively impacted on the mobile device more than would occur on larger devices having more resources. In addition while a single application may use multi threading and therefore require the allocation of processor time for different threads swapping between applications is generally a more resource intensive task for a mobile device.

With respect to the instructions of the superblock additional functionality may be desired for the superblock application that is not provided by the instructions. For example the superblock application may not currently support a particular type of data and or operation e.g. audio video email and or file transfer and it may be desirable for the superblock application to do so. To provide such additional functionality instructions would have to be added to the superblock to give the superblock application the ability to support the data type and or operation. This process typically entails reworking the superblock application to include the desired functionality and then releasing the updated version of the superblock application for use. Depending on the complexity and nature of the superblock application and the desired functionality this process may take a substantial amount of time effort and or expense.

One alternative is to use another application to provide the desired functionality but this may not be a satisfactory solution. For example assume the superblock provides a superblock application that needs email functionality. On current mobile devices a user would typically select a link in the superblock application such as an email address. Selection of the link would launch an email application or switch context to an email application if one is already running which removes the user from the superblock application and places the user in the email application. The user would then compose and send the email before switching back to the superblock application. This process of leaving the superblock application performing some other function and then returning to the superblock application is currently a common occurrence for mobile device users.

However this process is disruptive difficult to manage and pulls the user away from the superblock application while the provider of the superblock application may want the user to continue to stay in their application. Furthermore the functions of the superblock application are not available while in the other application and so the user may have to switch back and forth between the superblock application and the other application in order to interact with both applications. This is inefficient and frustrating for the user and may also increase the number of errors in the text of the email since both applications are not simultaneously available for reference.

Another example is a video window for a phone call. Assume a user is in the superblock application and has a question about data that the superblock application is displaying. In order to call and visually interact with someone about the question and still have access to the data the user has to conduct the call while switching back and forth between the video window of the call and the superblock application. This is extremely disruptive to the user and limits the benefits of the video call which include the ability to interact with someone on a visual basis rather than just an audio basis.

Yet another example is a user walking around a shop floor engaged in his or her duties. In order to join a virtual meeting the user will have to exit the superblock application find and or enter the meeting information using another application and join the meeting using the other application. As with the preceding example this is extremely disruptive to the user wastes time and lowers productivity.

Referring to in another embodiment the superblock of is illustrated with a function block attached via a glue point . It is understood that is for purposes of illustration and may not represent an actual arrangement of the superblock and function block in the memory .

The function block includes instructions for providing the superblock with one or more functions e.g. capabilities that are not otherwise possessed by the superblock . Such functions are illustrated in part with respect to and may include instant messaging presence e.g. online offline and away audio video collaboration e.g. sharing of applications documents and or files whiteboard file transfer email backgrounding push notifications conferencing meetings and or other functions. Continuing the previous examples the function block may provide email or video capabilities for the superblock and does so by providing those capabilities within the superblock application. Although the functions need not be provided visually as shown in e.g. in the case of playing an audio file visual functions may also be presented without leaving the superblock application display. In other words there is no need to switch context to an email application or to any other application in order to access the additional functionality provided by the function block .

To accomplish this the function block may be provided as a set of instructions that are included in the superblock . For example the function block may be provided as a software developer s kit SDK or as an otherwise independent module by a developer unrelated to the superblock . The developer of the superblock may then compile or otherwise include the function block instructions in the superblock . This ensures that the function block will occupy the same memory space as the superblock unless otherwise placed elsewhere by the mobile device . For example as the superblock likely has little or no control over how the mobile device handles memory management the mobile device may actually separate some or all of the instructions making up the superblock and the function block . However by including the instructions for the function block within the instructions for the superblock the likelihood that the instructions will be separated may be minimized. The independent nature of the function block means that the developer of the superblock needs little information about the operation of the function block other than how to access the services.

Furthermore the function block may be handled by developers as a single block of instructions or as multiple blocks depending on the operating system environment. For example the function block may be handled as a single block in an environment such as iOS a mobile operating system developed and distributed by Apple Inc. of Cupertino Calif. while the function block may be handled as multiple blocks in an environment such as Android a mobile operating system released as open source by Google Inc. of Mountain View Calif. .

The function block may be configurable after being distributed as part of the superblock application. For example the function block may provide access to certain parameters such as network address information of a server for the external services . Other parameters such as call parameters e.g. payload size may also be configurable.

The function block may provide services in a self contained manner e.g. internal services that may be provided without needing support outside of the device or may use one or more external services . The external services may be provided via a server a peer to peer endpoint and or by any other source with which the function block is able to communicate. For example the function block may be able to provide audio video playback services for a file stored in the memory without needing anything outside of the device assuming the device includes a screen for displaying the video and speakers and or a headset for sound output.

However for an audio video call session the function block needs to connect to another device in order to establish the session even though it can play audio video locally. In order to connect to the other device the function block may use the services . Accordingly how the function block handles a particular service request from the superblock may depend on the specific service and the resource needs of that service. From the point of view of the superblock whether the function block uses local and or external services does not matter as the superblock is simply requesting the service from the function block . In embodiments that use an external service the function block is the entity between the superblock and the external service but does not control either the superblock or the external service .

In the case of a request from the external services e.g. an incoming file transfer or phone call the handling performed by the function block may also depend on the specific service and the resource needs of that service. For example the function block may send a notification to the superblock and wait for a response or may handle the externally initiated request according to defined parameters.

Returning to the previous examples the function block may provide the superblock application with email functionality that enables a user to receive notifications check email and compose edit send manage email without leaving the superblock application. For the audio video phone call the function block may provide a video window for the phone call within the display of the superblock application enabling a user to simultaneously see the video window and the superblock application. The video window may be resizable and or movable. For the user walking around on the shop floor the function block may enable the user to receive a meeting notification accept the meeting and enter the meeting all within the superblock application. To accomplish this the function block may hook into the meeting information e.g. on a server and render this in the superblock application.

Referring to one embodiment of the superblock illustrates the role of the glue point in enabling the superblock to interact with the function block . For example the glue point may be an application programming interface API and the superblock may make API calls to the function block to access the function block s capabilities. The function block then provides services to the superblock in response to the API calls. In some embodiments the function block may also provide notifications to the superblock in response to events triggered by the external services .

In the present example the set of instructions that make up the function block may be used with many different applications and on many different platforms and accessed via the API although some customization may be performed if needed or desired. The function block may be viewed as a set of instructions providing intelligence needed to perform the tasks described herein and that set of instructions may be compiled or otherwise incorporated into the instructions of the superblock . As the instructions can be incorporated into many different applications to satisfy many different needs some of the capabilities provided by the function block may not be used by a particular application but may still be present. In other embodiments functionality that is not desired may be removed to minimize the footprint of the function block .

One embodiment of a header for the function block referred to in the header text as the Amadeo block may be as follows 

Referring to another embodiment illustrates the superblock as being part of another superblock . It is understood that any number of nested superblocks may be present. The function block may be accessible to only the superblock or may be accessible to one or more of the other superblocks e.g. the superblock either directly or via the superblock . For example the superblock may be able to make an API call directly to the function block in some embodiments or may only be able to make a call through the superblock in other embodiments e.g. the superblock may call the superblock for a service and the superblock may in turn make an API call to the function block for that service .

Referring to as previously stated it is understood that the function block need not be a single block in memory. As illustrated by blocks and the function block may be separated into different parts automatically e.g. due to the operation of the operating system and how it handles memory allocation or may be handled as separate parts during integration into the superblock application e.g. by the developer of the superblock application .

Referring to one embodiment of a timeline illustrates the simultaneous operation of the superblock and function block when the instructions of the function block are being executed to provide one or more services to the superblock application. The timeline moves from left to right and includes five specific times t t. At time t the superblock instructions as indicated by line are being executed but the function block instructions are not. In other words the superblock application is in use and has not called the function block API to provide any services. It is understood that the function block may be in a waiting state at time tand instructions of the function block may be executed to maintain the waiting state but the function block is not actively providing services.

At time t the superblock application calls the function block API or an external service contacts the function block and the function block instructions as indicated by line are executed to provide the service requested by the API call or handle the contact from the external service . The instructions for the superblock and function block are executed from time tuntil time t at which time the function block is no longer needed and is shut down although this may include going into the waiting state for purposes of example . The superblock instructions are executed from time tuntil time t at which time the function block is again called as indicated by line . The instructions for the superblock and function block are executed from time tuntil time t at which time the function block is no longer needed and is shut down although this may include going into the waiting state for purposes of example while the superblock instructions continue being executed.

Accordingly while two different applications on a mobile device would not typically execute concurrently the execution of the instructions for the superblock and function block as shown in allows the function block to provide additional capabilities to the superblock through the use of API calls. By providing an interface for the function block such as an API the instructions of the superblock may require minimal modification to access the capabilities provided by the function block .

Referring to a sequence diagram illustrates one embodiment of a process that may be executed to access the functionality provided by the function block . The superblock may use the function block under a static model or a dynamic model. In the static model the superblock calls for a specific function e.g. video the function block provides the requested function if available the superblock consumes the services provided and the function block is shut down. In the dynamic model the function block may enter a waiting state and wait for a request from the superblock and or a request or another event trigger from the external services e.g. an incoming call email or file transfer handle the request and then resume the waiting state.

In step the superblock unlocks the function block . For example the unlock process may indicate that the superblock is authorized to unlock some or all of the functionality provided by the function block by providing a key or other authorization indicator. This step may not only limit the superblock to authorized functionality but may also insure that other applications cannot access the function block s capabilities. In step the function block is initialized. It is noted that these steps may occur during initialization of the superblock or may occur later such as when the superblock calls the function block for a particular function. For example steps and may occur when the superblock application is launched and may not be repeated while the superblock application remains open may occur each time the superblock application calls the function block API for a service may occur only for particular services may occur for defined periods of time e.g. the function block may lock every half hour and or using other parameters. It is understood that steps and may be reversed in some embodiments.

During initialization or at another time policies may be applied. For example a cost policy may require that any available Wi Fi network is used before a 3G network. A security policy may require that a virtual private network VPN be used whenever available. Backgrounding may be selected as an option when available to allow the superblock application to run in the background. Accordingly the function block may be configured to provide for specific behavior if desired and this behavior may in turn limit or enhance the capabilities of the superblock .

In steps and the superblock may provide login information to the function block and the function block may use this information to access the external services . For example if the function block needs authentication credentials to access the external services steps and may be used to gain access to those external services. In some embodiments steps and or may be combined with step and the unlocking of the function block may include logging into whatever external services are authorized and or available.

In step the function block and the superblock may perform a capability exchange. More specifically the function block may determine whether 1 the function block has a particular capability 2 whether the function block can render that capability and 3 whether the superblock can render that capability. For example the function block may determine that the function block has the capability to capture audio and play that captured audio through a speaker.

Next the function block may determine whether it can render that capability by checking for example to see whether there is an available microphone mic input and an available speaker output. If one or both of the mic and speaker are not present then the function block has the capability to handle the audio but not the capability to render the audio. The superblock is not involved in this process as it is not needed to render the audio so the third determination may not be made. Although the superblock is not involved in rendering the audio it is understood that the superblock may visually represent the audio such as by means of an icon one or more control buttons e.g. play and stop and or other visual representations.

In another example the superblock may desire to display video. Again the function block may determine that the function block has the capability to handle the video. Next the function block may determine whether it can render that capability by checking for example to see whether there is an available screen. If a screen is not present then the function block has the capability to handle the video but not the capability to render the video. In this example the superblock is involved in this process as it is needed to provide a video window to render the video e.g. the function block may provide the video data to be rendered and the superblock may place that video data in a video window so the third determination is made.

By making such determinations the function block is able to notify the superblock of the available functions. If a function needs the external services lack of a connection may prevent the function block from delivering external services to the superblock but local services may still be provided. It is understood that while a screen speaker or other destination e.g. a sink may not be available the function block may handle some services using a secondary sink such as a memory to which the video or audio is stored for later use.

With additional reference to a flow chart illustrates one embodiment of a process for the capability exchange of step of . In step the function block may be initialized in embodiments where the capability exchange is performed on initialization or the function block may receive a request for service in embodiments wherein the capability exchange occurs when a service is requested .

In step a determination is made as to whether the function block has the particular capability. For example whether the function block has the capability to support an audio video call. If the determination of step is that the function block does not have the particular capability the method moves to step and the capability is indicated as not being available. It is noted that if a particular capability has not been unlocked the function block may indicate the capability is not available even if the function block can actually provide the capability. If the determination of step is that the function block does have the particular capability the method moves to step .

In step a determination is made as to whether the function block can render the capability as described previously. This step may determine whether the device supports the needed functionality e.g. has a microphone if audio input is needed or a speaker if audio output is needed . If the determination of step is that the function block cannot render the capability the method moves to step and the capability is indicated as not being available. If the determination of step is that the function block does have the capability the method moves to step .

In step a determination is made as to whether an external service is needed to provide the capability. If the determination of step is that an external service is not needed the method moves to step . If the determination of step is that an external service is needed the method moves to step .

In step a determination is made as to whether a needed external service is available. For example the external service may be offline e.g. a server used to provide the service may be non responsive or the device may have minimal or no network connectivity . This step may also determine whether the superblock application is authorized to access the external service e.g. whether the external service will allow access by the superblock application . If the determination of step is that the needed external service is not available the method moves to step and the capability is indicated as not being available. If the determination of step is that the needed external service is available the method moves to step .

In step a determination is made as to whether the superblock is needed to render the capability as described previously. If the determination of step is that the superblock is not needed to render the capability the method moves to step and the service is indicated as available e.g. a capability list is updated and or the service is provided . If the determination of step is that the superblock is needed to render the capability the method moves to step .

In step a determination is made as to whether the superblock can render the capability as described previously. If the determination of step is that the superblock cannot render the capability the method moves to step and the capability is indicated as not being available. If the determination of step is that the superblock does have the capability the method moves to step .

The superblock and or function block may use a table or other structure for listing available capabilities. For example a table may identify a particular service whether the superblock is authorized to access the service whether the function block can support the service whether the function block can render the service whether the superblock is needed to render the service and whether the superblock can render the service if needed. It is understood that this information may not be provided in detail in all embodiments but may be condensed to a simple indication of whether the service is available or not. However by providing additional levels of detail more useful indicators may be provided. For example the superblock application may be able to indicate that a particular service is not authorized or that speakers are not available rather than simply indicating that audio service is not available.

Table 1 illustrates one embodiment of a mapping table that may be used to track the capabilities that the function block can provide to the superblock on the device . It is understand that the mapping table may vary for the same function block superblock and device in different scenarios such as whether the device has network access or not when needed for a particular service. For purposes of illustration the first column lists services supported by the function block the second column identifies whether that service is supported by the device e.g. whether the function block can render the service the third column identifies whether the superblock application can render the service if needed the fourth column identifies whether the external services support the service if needed and the fifth column identifies where the superblock application has authorization rights to that service.

In some embodiments the service column may be limited to services that the superblock application is authorized to access. For example if function block supports instant messaging but the superblock application is not authorized to use this feature the service may or may not show up in the mapping table depending on the particular implementation. An additional column may be used to identify whether a needed external service is currently available or the fourth column may be used to show this information.

For purposes of example the first service involves playing a video from a file and is supported by both the device and the superblock . The external services are not needed and are marked as not applicable. The second service involves playing a local audio file and is supported by the device . The superblock and external services are not needed and are marked as not applicable. The third service involves playing a streaming audio file and is supported by the device and the external services . The superblock is not needed and is marked as not applicable. The fourth service involves content sharing and is supported by the device and the superblock but not the external services . As the external services are needed for sharing in this example this service is not available to the superblock application. The fifth service involves instant messaging and is supported by the device and the external services but not the superblock .

The sixth service involves a whiteboard but the superblock is not authorized to access this service and so the capabilities are not checked. In other embodiments capabilities for unauthorized services may be checked and if supported the superblock application may notify the user that the service is not authorized. In such embodiments a dialog or other option may appear to allow the user to subscribe or otherwise gain access to the service if allowed.

With additional reference to a diagram provides a visual illustration of the process of from a source sink perspective. For the function block to successfully bridge a source and a sink to provide a service both the source and the sink must be present and available to the function block as indicated by lines and respectively. The source may be the superblock the external services and or a component of the device such as a wireless interface a microphone a camera and or any other component capable of providing input to the function block . The sink may be the superblock the external services and or a component of the device such as a wireless interface a speaker a display screen and or any other component capable of receiving output from the function block . In some cases the lack of availability of a sink may result in the use of a dummy sink e.g. writing audio to memory when there is no available speaker .

It is understood that the source sink model provided by the source and sink may be viewed as generic. For example at the device level the source and sink operate to read send data. At the network interface level each side acts as both source sink because network interfaces allow for read write simultaneously in most modern devices. In contrast a microphone is a source and a speaker is a sink. A speaker may serve as a sink for multiple data in some cases such as if multiple audio sources are mixed into the single speaker. In this scenario the source for rendering audio data may be a microphone network audio encoded data a music file on the device and or other sources. The source sink model can also be considered for service level consumer producer models. For example the function block may be viewed as a source for presenting client side capabilities to a server and at the same time may be viewed as a sink for rendering capabilities presented by the server.

With additional reference to a diagram provides a more detailed illustration of . Source is a microphone and the function block is to send the audio captured from the microphone to sink representing an external service e.g. as outbound audio for a telephone call . For the function block to successfully bridge the source and the sink both the source and the sink must be present and available to the function block as indicated by lines and respectively and the source sink and function block must be capable of handling the service. If the function block is thought of as providing services via a series of switches lines and must both be closed to connect the source and sink . Accordingly the process of may be executed to ensure that the function block can render the audio input and that the connection to the external service is valid e.g. that the switches can be closed .

In the present example one or more additional flow layers represented by line may also present. For example line may represent whether an audio hold exists. If the audio has been placed on hold the function block will notify the audio pipeline to stop e.g. the switch will be opened . The audio capture may continue but it will not be rendered e.g. sent to the external services represented by sink as the circuit formed by the function block will no longer be complete.

Referring again to in step the function block may shut down if operating under the static model or may enter a wait mode if operating under the dynamic model. In step the function block may provide one or more services to the superblock if requested by the superblock or an external service . It is understood that steps and may repeat any number of times while the superblock application is running. If no services are requested step would not be executed.

In steps and the superblock may finalize any service requests and shutdown the function block . For example if the superblock application is closing the superblock may use one or more API calls to the function block to notify the function block that the function block should close any open ports e.g. with an external service and close down any running processes.

Referring to a sequence diagram illustrates one embodiment of a process that may be executed in order to provide a service by the function block in response to a service request by the superblock . This present example may operate under either the static model or the dynamic model. The process begins with step of which is not described in detail in the present example.

In step the superblock issues a request for a service to the function block using an API call or another suitable method. In step the function block obtains any needed support from the external services . In step the function block provides the service to the superblock . In step the function block may repeat step and either shut down or enter the wait mode depending on whether the function block is operating under the static model or the dynamic model.

Referring to a flow chart illustrates one embodiment of a process for accessing an external service such as may occur with respect to step of . In step the function block receives a request from the superblock as occurs in step of . In step a determination is made as to whether the function block needs to use an external service to handle the request. If the determination of step indicates that no external service is needed the method moves to step . In step the service is provided by the function block . If the determination of step indicates that an external service is needed the method moves to step .

In step a determination is made as to whether the external service is available. If the determination of step indicates that the external service is available the method moves to step where any parameters needed for communications and or service provision may be negotiated between the function block and external service . Such parameters may include both signaling and media parameters such as bandwidth codecs and or similar information and would typically depend on the particular service.

The method then moves to step where the service is provided by the function block . If the determination of step indicates that the external service is not available the method moves to step . In step the function block may indicate that the service is not available. For example the function block may indicate that the server is not responding or that there is no network connectivity for the device .

Referring to a sequence diagram illustrates one embodiment of a process that may be executed in order to provide a service by the function block in response to a notification from an external service . This present example may operate under the dynamic model as the function block is in listening mode to receive notifications from the external services . The process begins with step of which is not described in detail in the present example.

In step an external service issues a notification to the function block that the external service has something for the superblock . In step the function block may pass the notification to the superblock . It is understood that step may not actually pass on the notification but that the notification of step may trigger functionality within the function block that serves to notify the superblock . For example if the notification of step is about an incoming phone call the function block may receive the notification initiate a phone response display e.g. a display with options for accepting or rejecting the call and provide the information to the superblock in that manner. In another example the notification of step may be a presence change e.g. a user changes status from offline to online and the function block may update a presence indicator within the superblock application s display. In still another example the function block may use an event system and send event notifications to the superblock . Accordingly some notifications may require action on the part of a user of the superblock application while other notifications may not.

In the present example the notification requires a response and the superblock responds in step by requesting and or accepting the service e.g. a phone call . In step the function block handles services between the superblock and the external service . In other words the function block serves as an interface between the external service and the superblock . For example the function block may bridge the phone call handle call waiting and other call features and otherwise provide support for the superblock application. In step the function block may enter wait mode after the services have been provided.

Referring to a flow chart illustrates one embodiment of a process for execution by the function block with respect to an external service such as may occur with respect to . In step the function block receives a notification from the external service . In step a determination is made as to whether the function block needs instructions from the superblock . If the determination of step indicates that instructions are needed the method moves to step . In step the function block indicates to the superblock that service is requested. The method then moves to step .

In step a determination is made as to whether the service request has been approved by the superblock . If the determination of step indicates that the request has not been approved the method moves to step where the notification may be rejected ignored or otherwise handled. It is understood that the actual response of the function block in step may vary depending on the notification type. For example the function block may indicate to the external service that the call is rejected. If the determination of step indicates that the request has been approved the method moves to step where the function block may handle the service provision.

Returning to step if the determination of step indicates that instructions are not needed the method moves to step . In step a determination is made as to whether the superblock is to be updated based on the notification. If the determination of step indicates that the superblock is not to be updated the method moves to step where the notification may be rejected ignored or otherwise handled. If the determination of step indicates that the superblock is to be updated the method moves to step where the update may be performed. For example another user s presence status may be updated from online to offline or vice versa.

Referring again to embodiments of the device include cellular telephones including smart phones personal digital assistants PDAs netbooks tablets laptops desktops workstations telepresence consoles and any other computing device that can communicate with another computing device using a wireless and or wireline communication link. Such communications may be direct e.g. via a peer to peer network an ad hoc network or using a direct connection indirect such as through a server or other proxy e.g. in a client server model or may use a combination of direct and indirect communications. Although not shown in other embodiments the device may be an application specific integrated circuit ASIC a processor or another device within which the function block may be embedded. In some embodiments external access may not be needed. Accordingly the function block may be implemented in many different ways and in many different types of systems and may be customized as needed to operate within a particular environment.

Referring to one embodiment of a system is illustrated. The system is one possible example of a device such as the device of . The system may include a controller e.g. a central processing unit CPU a memory unit an input output I O device and a network interface . The components and are interconnected by a transport system e.g. a bus . A power supply PS may provide power to components of the computer system such as the CPU and memory unit via a power system which is illustrated with the transport system but may be different . It is understood that the system may be differently configured and that each of the listed components may actually represent several different components. For example the CPU may actually represent a multi processor or a distributed processing system the memory unit may include different levels of cache memory main memory hard disks and remote storage locations the I O device may include monitors keyboards and the like and the network interface may include one or more network cards providing one or more wired and or wireless connections to a network . Therefore a wide range of flexibility is anticipated in the configuration of the computer system .

The system may use any operating system or multiple operating systems including various versions of operating systems provided by Microsoft such as WINDOWS Apple such as Mac OS X UNIX and LINUX and may include operating systems specifically developed for handheld devices personal computers servers and embedded devices depending on the use of the system . The operating system as well as other instructions e.g. for the superblock and function block may be stored in the memory unit and executed by the processor . For example if the system is the device the memory unit may include instructions for performing some or all of the message sequences and methods described herein.

Referring to in one embodiment the function block may contain functionality similar to that of an endpoint as described in detail in U.S. Pat. No. 7 656 870 filed on Mar. 15 2005 and entitled SYSTEM AND METHOD FOR PEER TO PEER HYBRID COMMUNICATIONS and hereby incorporated by reference in its entirety. In such an embodiment the graphical user interface GUI of the endpoint may be replaced with the API of and some functionality may be removed if not needed for a particular implementation of the function block . Other functionality that is not necessarily in the described endpoint such as mobile device management MDM functionality may be included in the function block . Accordingly the basic functionality of the described endpoint may exist as logic embodied in the instruction set of the function block .

For purposes of example the function block may be accessed by the API and may communicate with an operating system of the device of . The API provides access to the capabilities of the function block for the superblock while the operating system provides underlying functionality as is known to those of skill in the art. Although shown as separate from the function block for purposes of illustration it is understood that the API may be part of the function block in some embodiments.

The function block may include multiple components and layers that support the functionality required to perform the operations requested by the superblock . For example the function block may include a softswitch a management layer an encryption decryption module a feature layer a protocol layer a speech to text engine a text to speech engine a language conversion engine an out of network connectivity module a connection from other networks module a p commerce e.g. peer commerce engine that includes a p commerce agent and a p commerce broker and a cellular network interface module .

Each of these components layers may be further divided into multiple modules. For example the softswitch may include a call control module an instant messaging IM control module a resource control module a CALEA Communications Assistance to Law Enforcement Act agent a media control module a peer control module a signaling agent a fax control module and a routing module.

The management layer may include modules for presence i.e. network presence peer management detecting peers and notifying peers of being online firewall management navigation and management media management resource management profile management authentication roaming fax management and media playback recording management.

The encryption decryption module may provide encryption for outgoing packets and decryption for incoming packets. In the present example the encryption decryption module provides application level encryption at the source rather than at the network. However it is understood that the encryption decryption module may provide encryption at the network in some embodiments.

The feature layer may provide support for various features such as voice video IM data voicemail file transfer file sharing class features short message service SMS interactive voice response IVR faxes and other resources. The protocol layer may include protocols supported by the function block including SIP HTTP HTTPS STUN RTP SRTP and ICMP. It is understood that these are examples only and that fewer or more protocols may be supported.

The speech to text engine converts speech received by the function block e.g. via a microphone or network into text the text to speech engine converts text received by the function block into speech e.g. for output via a speaker and the language conversion engine may be configured to convert inbound or outbound information text or speech from one language to another language. The out of network connectivity module may be used to handle connections between the function block and the external services and the connection from other networks module handles incoming connection attempts from the external services . The cellular network interface module may be used to interact with a wireless network.

While the preceding description shows and describes one or more embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the present disclosure. For example various steps illustrated within a particular flow chart or sequence diagram may be combined or further divided. In addition steps described in one flow chart or diagram may be incorporated into another flow chart or diagram. Furthermore the described functionality may be provided by hardware and or software and may be distributed or combined into a single platform. Additionally functionality described in a particular example may be achieved in a manner different than that illustrated but is still encompassed within the present disclosure. Therefore the claims should be interpreted in a broad manner consistent with the present disclosure.

