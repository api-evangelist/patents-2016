---

title: System and method for separating content site visitor profiles
abstract: Embodiments of the systems described herein can implement one or more visitor tearing processes. Visitor tearing can include, among other things, one or more processes by which multiple visitors that may appear to be the same visitor may be separated into different visitor profiles due to the leveraging of one or more unique persistent identifiers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09537964&OS=09537964&RS=09537964
owner: TEALIUM INC.
number: 09537964
owner_city: San Diego
owner_country: US
publication_date: 20160310
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner understands that the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records may be used in the ordinary course of business or transactions with the Patent and Trademark Office but hereby reserves all copyright rights whatsoever.

Any and all applications if any for which a foreign or domestic priority claim is identified in the Application Data Sheet of the present application are hereby incorporated by reference under 37 CFR 1.57.

Some operators of content sites such as websites regularly obtain the results of analytics performed with regard to user interactions on their content sites. User analytics can include any type of data regarding interactions of end users with content sites among other types of data. There are different approaches to gathering analytics data one of which includes employing the use of tags.

Tags can include small pieces of website code that allow a website operator to measure traffic and visitor behavior understand the impact of online advertising and social channels use remarketing and audience targeting and test and improve a content site among optionally other functions. Adding tags to a content site has typically included involving a developer to manually insert tag code into one or more pages of a website.

A method of managing content site visitor profiles can be performed under control of a hardware processor. The method can include receiving first visitor data from a first tag embedded within a first content page the first visitor data comprising a cookie derived visitor identifier associated with a first visitor visiting the first content page identifying a first identifier of the first visitor from the first visitor data adding at least some of the first visitor data to a first visitor profile receiving second visitor data from a second tag embedded within a second content page the second visitor data comprising the cookie derived visitor identifier identifying a second identifier from the second visitor data determining whether the first and second identifiers are different and in response to determining that the first and second identifiers are different adding at least some of the second visitor data to a second visitor profile different from the first visitor profile.

The method of the preceding paragraph can include one or more of the following features The first identifier or the second identifier can include a persistent identifier. The first identifier or the second identifier can include an email address a social network identifier or a login credential. The first identifier or the second identifier can include a phone number or a mailing address. The method can further include receiving third visitor data from a third tag embedded within a third content page the third visitor data comprising the cookie derived visitor identifier identifying the second identifier from the third visitor data and adding at least some of the third visitor data to the second visitor profile and not adding the third visitor data to the first visitor profile. The first and second visitor profiles can be configured so that the first visitor associated with the first visitor profile is considered to be different from a second visitor associated with the second visitor profile. The first and second content pages can be the same content page and the first and second tags can be separate instances of the same tag. The first and second visitor data can be received in response to the first and second content pages being accessed by the same computing device. The method can further include in response to determining that the first and second identifiers are different not adding the second visitor data to the first visitor profile.

A system for managing content site visitor profiles can include a memory device and a hardware processor. The memory device can store a first visitor profile associated with a first visitor to a content page the first visitor profile being associated with a first persistent identifier. The hardware processor can access the first visitor profile from the memory device update the first visitor profile based at least on visitor data comprising interaction data regarding interactions with the content page the visitor data being obtained from a tag embedded in the content page identify a second persistent identifier from the visitor data and in response to determining that the first and second persistent identifiers are different add the interaction data to a second visitor profile different from the first visitor profile.

The system of the preceding paragraph can include one or more of the following features The first and second visitor profiles can be associated with the same computing device. The hardware processor can in response to determining that the first and second persistent identifiers are different remove the interaction data from the first visitor profile. The first and second visitor profiles can be configured so that the first visitor associated with the first visitor profile is considered to be different from a second visitor associated with the second visitor profile. The first persistent identifier or the second persistent identifier can include an email address a social network identifier a phone number a mailing address or a login credential.

Non transitory physical computer storage comprising instructions stored thereon that when executed by a hardware processor can be configured to implement a process comprising creating a first visitor profile based at least on first visitor data comprising first interaction data regarding first interactions of a first visitor with a first content page the first visitor data being obtained from a first tag embedded in the first content page the first visitor profile being associated with a first persistent identifier receiving second visitor data comprising second interaction data regarding second interactions with a second content page the second visitor data being obtained from a second tag embedded in the second content page the second visitor data being initially associated with the first visitor profile identifying a second persistent identifier from the second visitor data determining that the second persistent identifier is associated with a second visitor different from the first visitor based at least on a comparison of the first and second persistent identifiers and adding the second interaction data to a second visitor profile associated with the second visitor.

The non transitory physical computer storage of the preceding paragraph can include one or more of the following features The first persistent identifier or the second persistent identifier can include an email address a social network identifier a phone number a mailing address or a login credential. The process can further include receiving third visitor data comprising third interaction data regarding third interactions with a third content page the third visitor data being obtained from a third tag embedded in the third content page identifying the second persistent identifier from the third visitor data and adding the third interaction data to the second visitor profile. The process can further include in response to determining that the second persistent identifier is associated with the second visitor removing the second interaction data from the first visitor profile. The first and second content pages can be the same content page and the first and second tags can be separate instances of the same tag. The second visitor data can be received in response to the second content page being accessed by a computing device previously used to access the first content page.

Non transitory physical computer storage comprising instructions stored thereon that when executed by a hardware processor can be configured to implement a client system for executing a tag embedded within a content page. The client system can receive a first plurality of inputs from a visitor visiting a first content page with the client system execute a first tag embedded within the first content page in response to at least one of the first plurality of inputs thereby generating first tag output data based on the at least one of the first plurality of inputs access a cookie derived visitor identifier and a first persistent identifier the cookie derived visitor identifier and the first persistent identifier associated with the first tag output data transmit first content site interaction data to a visitor processing system over a network the first content site interaction data comprising the cookie derived visitor identifier the first persistent identifier and the first tag output data wherein at least some of the first content site interaction data is capable of being added to a first visitor profile receive a second plurality of inputs from the visitor visiting a second content page with the client system execute a second tag embedded within the second content page in response to at least one of the second plurality of inputs thereby generating second tag output data based on the at least one of the second plurality of inputs wherein the second tag output data is associated with the cookie derived visitor identifier access a second persistent identifier associated with the second tag output data and transmit second content site interaction data to the visitor processing system over the network the second content site interaction data comprising the cookie derived visitor identifier the second persistent identifier and the second tag output data wherein the second persistent identifier is different from the first persistent identifier so that based at least on the first and second persistent identifiers being different at least some of the second content site interaction data is capable of being added to a second visitor profile different from the first visitor profile.

The non transitory physical computer storage of the preceding paragraph can include one or more of the following features The at least one of the first plurality of inputs can include the first persistent identifier or the at least one of the second plurality of inputs can include the second persistent identifier. The client system can further determine the first or second persistent identifier from a third party tag other than one or more first party tags used to generate the cookie derived visitor identifier. The client system can further determine at least one of the first persistent identifier from data obtained from a first tag script embedded within the first content page or the second persistent identifier from data obtained from a second tag script embedded within the second content page. At least a portion of the second content site interaction data can be capable of being removed from the first visitor profile. The at least the portion of the second content site interaction data can be capable of being removed from the first visitor profile based at least on an identifier other than the first persistent identifier. The identifier can include the second persistent identifier.

Adding tags to web pages without efficient management can create significant problems and inconveniences. For instance the code that is associated with multiple tags can bog down a content site and be a major performance drain. Redundant or incorrectly applied tags can also distort measurements and result in duplicate costs or missing data. Poor tag management can also be time consuming for the information technology IT department or webmaster team to add new tags which may mean that important marketing and measurement programs might be significantly delayed.

Tag management systems have recently been introduced to improve the management of tags. Currently available tag management systems provide content site operators somewhat greater control and ease of use in managing tag deployments in their content pages. In addition some known tag management systems provide some reporting functionality that leverages data obtained from the tags.

Some of those existing systems provide rich but slow batch based data processing. Many of the batch based systems tend to be batched on a daily basis and therefore cannot provide immediate notification of any changes in web site visitor behavior throughout a day. Additionally acting on the collected data from such systems typically requires custom coded and less flexible solutions.

Real time reporting may be available with some tag management systems but the reports generated by such systems tend to be inflexible and are predetermined by the vendor of the tag solution. These reports will almost certainly not be visitor centric making them difficult to use for inferring business critical correlations. Additionally acting on the data in such systems is virtually impossible given the aggregated nature of the reporting data. Various solution vendors such as data management platforms DMP or web analytics provide actionable segmented visitor based data sets. However such solutions often lack flexibility regarding the visitor definitions as well as lacking consistency across the disparate vendor data sets used to create the rich visitor profiles. Further these systems tend to provide little agility and certainly no real time definition of visitor definitions.

This disclosure describes embodiments of systems and methods that can address at least some or all of the foregoing drawbacks among possibly others. In certain embodiments a tag management system can deploy a single tag or a tag container to a content site. Each page or any subset of pages in the content site can incorporate the tag container as a universal tag that can be used to gather any type of visitor data of a visitor to a content site. This tag container can be used to interface with any number of third party vendor tags without requiring in certain embodiments such tags to be coded expressly in the code of the content pages of the content site. Thus changes to the tagging of a content site may be made through a user interface provided by the tag management system without having to use a developer to add the tags to the content pages manually. As a result the tag management system can be more accessible to marketing people without IT or programming knowledge.

This tag container approach to tag management can promote high scalability and provide marketing agility enabling marketers and other marketing users to rapidly change data collected or analyzed by the tag management system. Further since one tag container is embedded within the content pages in certain embodiments the content pages may load faster and therefore include many performance improvements. Additionally the architecture of the tag management system and the tag containers themselves can facilitate other performance improvements which will be described in greater detail below. Moreover there may be reduction of IT costs provided by using the disclosed tag management system because IT personnel can shift away from performing marketing work to focusing on IT work.

In certain embodiments a visitor processing system is also described herein which can provide additional levels of marketing agility by providing a solution that allows for a fully configurable visitor model. The visitor processing system may but need not be implemented in conjunction with the tag management system. The visitor processing system may provide the ability to see the results of this visitor model in a real time or pseudo real time such as within seconds or minutes of making changes to the visitor model . This level of configurability can be beneficial when a goal is to reduce a visitor set to a highly targeted visitor segment. This rich configurability can include the ability to set and manipulate a number of attributes on a visitor. Such attributes can include badges metrics such as numerical functions properties dates flags such as Boolean values and advanced attributes such as funnels and sequences . By allowing marketing users to configure attributes regarding their content sites visitors the visitor processing system can enable marketing users to obtain real time or near real time reports on these visitors. These reports can provide a highly desirable capability to filter a live or historic stream of visitors on the specified attributes resulting in precisely targeted reporting on a highly segmented and highly targeted segment of visitors in certain embodiments.

For purposes of summarizing the disclosure certain aspects advantages and novel features of several embodiments are described herein. It is to be understood that not necessarily all such advantages can be achieved in accordance with any particular embodiment of the embodiments disclosed herein. Thus the embodiments disclosed herein can be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Turning to an embodiment of a computing environment is shown for implementing various tag features including some or all of the tag management or visitor processing features described above. In the computing environment one or more end user systems communicate over a network with a content site . The end user systems can include any form of computing device and may be desktops laptops smartphones tablets or the like. A browser or other application software installed in the end user systems accesses one or more content pages of the content site . The content pages may be web pages or other documents or files that may be accessed remotely and provided to the end user systems . The content site may be a website a web server an application server a database server combinations of the same or the like. Further the network can include a local area network LAN a wide area network WAN a company intranet the public Internet combinations of the same or the like.

As shown one or more content pages of the content site can include a tag container . The tag container can be an example of the tag container described above and can be a universal tag that is installed or incorporated in one or more content pages in place of or instead of incorporating numerous tags in each page. The tag container can communicate with one or more data collection tags implemented on one or more tag servers . Both the content site and the tag servers can be implemented in computer hardware or software. The tags can include third party tags provided by tag vendors that are different entities than an operator of or provider of the tag container . In addition the tags can include a visitor tag or tags that can be provided by the same provider as the provider of the tag container or a different provider in some embodiments .

An analytics system is shown in communication with the tag servers . The analytics system can be implemented in computer hardware or software. In the depicted embodiment the analytics system includes a visitor processing system and a tag management system as well as a visitor profile data repository . The visitor processing and tag management systems are shown separately for illustrative purposes although their functionality may be implemented by a single system. The analytics system can also be implemented without a tag management system and thus the functionality of the visitor processing system can be implemented independent of any tag management functionality.

In certain embodiments the visitor processing system can enable marketing users described below to configure the types of data tracked for different visitors of the content site as well as analyze and report on this visitor data. For instance in one embodiment the visitor processing system can provide one or more user interfaces that enable customization of collecting information about visitors to the content site . This information can be obtained initially by the visitor tag s which may be provided through the tag container to the end user systems for execution in the browser . Upon execution in the browser the visitor tag s can supply visitor data to the visitor processing system optionally through the tag servers . Such visitor data can be stored in visitor profiles in the visitor profile data repository which may include physical computer storage. Marketing users can subsequently query the visitor profiles to obtain reports or other information about visitors to the content site . Other uses for visitor profile data are described in greater detail below.

The tag management system can be used to manage the tags provided by third party vendors. For instance the tag management system can provide functionality for marketing users to select which third party vendor tags to associate with the tag container for a variety of vendor specific processing purposes. These purposes can include obtaining analytics for data analysis or business intelligence tracking affiliate activity with respect to the content site obtaining user data for displaying targeted ads obtaining user data for customizing search functionality or email campaigns targeted to the end users obtaining user data for personalizing content of the content pages obtaining user data for integration with social networking functionality obtaining user data for big data analysis combinations of the same or the like. Data collected by the tags can be provided to tag vendor systems which can perform any of this vendor specific processing. The data may alternatively be passed to the tag vendor systems through the tag management system .

In an embodiment the tag management system provides functionality such as one or more user interfaces for marketing users to map data sources in the content pages to data sources gathered by the third party vendor tags . For instance if one of the content pages includes a shopping cart value named cart value the tag management system can provide a user interface that enables a user to tell the tag management system to collect data on the cart value and map this data to a cart value variable of one of the tags . In addition the tag management system can provide similar functionality for identifying which data sources of the content pages are to be gathered by the visitor tag .

However in some embodiments the visitor tag can instead perform a greedy collection of some or all data available in the content page s . Since the visitor tag tag container and visitor processing system can be provided by the same entity the data obtained by the visitor tag need not be mapped to third party mappings like the data obtained by the third party tags . Instead some or all of the data available to the visitor tag can be provided to the visitor processing system for processing. Thus the visitor tag can facilitate vendor neutral data gathering of some or all of the data elements in a content page . Since this data is not mapped to a vendor specific format in certain embodiments the data can be exported to business intelligence systems without a need to massage the data from its mapped form which can be cumbersome to its original raw form.

Various marketing user systems can access the analytics system or the tag servers via the network . Like the end user systems the marketing user systems can include a browser or other application software that can access network applications over the network . The marketing user systems can also be any type of computing device including but not limited to a desktop laptop tablet smartphone or the like. The marketing user systems can be operated by marketing users such as marketing professionals website operators business users operators of the content site or any other individual who uses tags or data obtained from tags. Marketing users are not the end users of the content site in certain embodiments. A marketing user might use a marketing user system to dynamically update the types of data tracked or analyzed for different visitors of the content site . This data can be tracked by the visitor processing system via either updating the visitor tag stored on the tag server or by updating processing of data obtained from the visitor tag to build updated visitor profiles many example features of which will be described in greater detail below.

Turning to an embodiment of a tagging overview process is shown. The tagging overview process illustrates an example mode of operation of the computing environment of and may be implemented by the various components shown in the computing environment of .

At block of the process an end user system requests content such as a content page from the content site . The end user system receives the content page including a tag container at block . Thereafter at block the end user system can request one or more tags associated with the tag container from a tag server . The tag container may include script code such as Javascript code or the like embedded in the source of the content page initially requested by the end user system. The tag container upon being processed by the browser of the end user system can programmatically access the visitor tag or other tag stored on the tag server to request the tag to be provided or downloaded to the end user system . The tag itself may be a static file or the like that includes executable code such as HTML code or script code such as Javascript or the like.

The tag s are received at block at the end user system and the tag or tags are executed at block by the end user system to obtain visitor data about the end user and to send the visitor data to the visitor processing system . In another embodiment the visitor data is sent to the tag server which may store and process the data or may forward the visitor data on to the visitor processing system . The visitor data may also be sent to both the tag server and the visitor processing system .

The visitor data can include any of a variety of information about the end user and the end user s interactions with the content site . For instance the visitor data may include information about what type of browser or application the end user is using to access the content site . The visitor data may also include information about a geographic location of the user a duration that the user is accessing the content site or is logged into the content site or the like. In addition the visitor data can include information about any interaction by the visitor with the content site including for example any clicks made by the visitor on links on the content page served by the content site any user selection of a form element or any user scroll behavior text entry behavior in form text boxes chat boxes e mail boxes social networking other user interaction with other user interface controls combinations of the same or the like.

The visitor processing system can aggregate the visitor data with unique visitor profiles for each end user visitor to the content site at block . By storing the visitor data in association with unique visitor profiles the data may be associated with individual visitors. Unique visitor profiles may be maintained by obtaining via the tag identification data associated with the end users so as to match the visitor data with a particular user s visitor profile. The identification data may be obtained by the tag for example by accessing a cookie that may be installed in the end user system by accessing login information associated with the user if the user logged into the content site by identifying the user s internet protocol IP address or a Media Access Control MAC address from network packets transmitted to or from the content site and the end user systems combinations of the same or the like.

At block the visitor processing system generates visitor segment reports which can be custom reports accessible by marketing users and which may include segment information on the aggregated visitor profile data organized by visitor segments. This segment information can include information regarding visitors who are frequent visitors to the content site or information regarding visitors who are frequent purchasers of the content sit to name a few examples. Segments may advantageously be defined by the marketing users via customization user interfaces provided by the visitor processing system many examples of which are described in greater detail below see . The custom reports provided by the visitor processing system can be generated or updated in real time or substantially real time for example on the order of seconds or minutes in response to receiving updated visitor data.

In addition marketing user customizations made to reports or types of visitor data gathered or operations upon the data can take effect in real or near real time. The reports can reflect this dynamic activity advantageously in certain embodiments overcoming deficiencies in existing systems that apply batch processing daily. Even in existing systems that provide real time reporting such systems may be controlled by the tag vendor and therefore may be inflexible or impossible to customize by the marketing users. In contrast the visitor processing system can enable the marketing users to have control over the types of data collected or processed the configuration rules that process the data and the way that such processed data is output via reports to those users. As a result in certain embodiments the visitor processing system can provide greater marketing agility to marketing users and can provide increased performance for tracking visitor data.

Turning to an embodiment of a visitor processing system is shown in greater detail. The visitor processing system can have all the features of the visitor processing system . In the depicted embodiment the visitor processing system is in communication with the marketing user systems over a network which may be the network described above with respect to . The visitor processing system as shown includes various components such as a visitor profile configuration module a visitor data collector a visitor data aggregator and a reporting module . A visitor profiles data store is also in communication with the visitor processing system . The visitor processing system and each of the components thereof can be implemented in computer hardware or software. In some embodiments the visitor processing system can be part of or used in conjunction with a tag management system such as the tag management system .

The visitor profile configuration module can output one or more user interfaces that enable marketing users of the user systems to customize the way that visitor data is tracked or analyzed by the visitor processing system . Many example such user interfaces are described in greater detail below. In general in one embodiment the visitor profile configuration module allows marketing users to define visitor profile definitions or templates that include attributes of data to be collected from the content site as well as rules to be used in transforming collected visitor data into visitor profiles for further analysis. The visitor profile templates can be stored in the visitor profile data repository . Visitor data transformed into visitor profiles based on one or more visitor profile templates may also be stored in the data repository . These visitor profiles may be accessed by marketing users for reporting and marketing or business intelligence analysis. The profiles may also be accessed from the repository programmatically for taking further programmatic action such as content page personalization described in greater detail below .

The visitor data collector can perform the actual data collection of visitor profile data by communicating with the tag in the tag server described above with respect to . In one embodiment the data collection process works by the tag itself including an inline frame iframe HTML element that further includes an HTML form. This frame may or may not be visible on the content page . The form can automatically obtain visitor data elements from the content page and submit those visitor data elements to the visitor processing system or tag server via an HTTP POST or GET operation. In another embodiment the tag can provide the visitor data to the visitor data collector using a web services communication scheme for example by making application programming interface API calls over the network to the visitor data collector .

The visitor data aggregator can aggregate like data based on the particular visitor or the type of data being aggregated for example based on attributes of the data or user. For instance if a user has visited a site a number of times each time the user visits the site the visitor data aggregator can increment a variable or attribute corresponding to the number of times the user has visited the site. Further the visitor data aggregator can apply one or more rules to those attributes in the visitor data to transform the visitor data into segment based data. This segment data can provide enhanced information about segments of visitors to the content site . For instance the visitor data aggregator can assign one or more badges or labels to a particular class of visitors based on a rule based analysis of the visitors browsing habits with respect to the content site . Users that share a particular badge can represent a segment of users having certain characteristics that may be interesting to study for targeted marketing or other purposes. The badges can also represent gamification of analytics that can provide useful insights to marketing users about visitor behavior. Badges are described in greater detail below see e.g. .

Another example of information that can be aggregated by the visitor data aggregator is metrics about the data. For instance the visitor data aggregator can compute a metric such as the total number of purchases made by a user on an ecommerce content site or other numerical values related to the user s interactions with the content site. In still other embodiments the visitor data aggregator can compile attributes such as flags or Boolean values associated with the visitor s profile. Such flags might represent data related to whether a user has left unpurchased items in an electronic shopping cart whether a user tends to use a chat function or whether a user clicks social networking links to share information about the content site to name a few examples. Such flags or Boolean values can provide useful insight into the activities of different users with respect to the content site. Still other attributes that can be determined by the visitor aggregator module includes funnels such as purchase funnels and sequences as well as properties dates and other attributes. These attributes are described in greater detail below with respect to .

The reporting module can provide a custom reporting user interface that allows marketing users to query visitor attributes and organize visitor attributes based on different segments or dimensions of those visitor attributes. For instance such a user interface can allow users to sort or organize or otherwise view a portion of visitors that share a common attribute such as a badge or flag or funnel characteristic or the like. Thus the reporting module can provide a flexible interface for marketing users to view different segments of the visitor profile data. Further changes made by users via the visitor profile configuration module can be reflected in the reports provided by the reporting module in real time or near real time. Thus for example if an marketing user desires to track a new characteristic implemented on a content page the user can easily specify via the visitor profile configuration module to track this particular attribute and the visitor data collector can begin tracking this data almost immediately. Likewise the visitor data aggregator can rapidly begin aggregating the collected data and the reporting module can also rapidly output this information in a format requested by the user. This type of flexibility provided by the visitor processing system in certain embodiments can greatly enhance the ability of marketing users to see rapidly changing visitor behavior and gain insights into how to personalize content pages to better target visitors or to promote purchases or other desired visitor behavior.

Turning to various additional processes and are shown which may be implemented by the visitor processing system or or other components of the computing environment of . For instance in an embodiment of a visitor profile configuration process is shown which may be implemented by the visitor profile configuration module of .

At block of the visitor profile configuration module can receive a request from a marketing user to configure a visitor profile definition or template. In response at block the configuration module can output a visitor profile user interface that enables the marketing user to specify site visitor attributes and rules of a visitor profile template to be applied to visitor data. Generally any collection of one or more attributes or one or more rules may be part of a visitor profile definition or template. A user need not define a specific visitor template explicitly but may rather do so implicitly by defining one or more attributes or one or more rules. Thus for convenience the remainder of this specification frequently describes the definition of attributes or rules without specifically referring to the creation of visitor profile definitions or templates. It should be understood that any reference to attribute or rule creation editing features can be considered to refer to creation or editing of visitor profile templates.

At block of the configuration module can receive marketing user configurations of site visitor attributes or rules and store customized attributes or rules for later analysis and dynamic reporting at block .

Turning to an embodiment of a visitor data analysis process is shown that can be implemented for example by the visitor data aggregator . The visitor data aggregator can capture data associated with the visitors of a content site at block and transform this visitor data according to configuration rules . The configuration rules may have been specified by an marketing user using the process or the like described above. The visitor data analysis process via the visitor data aggregator can save the transformed visitor data in visitor profiles created for each unique visitor at block . At block a visitor segment report can be provided based on the visitor attributes and this block may be implemented or performed by the reporting module .

A more detailed view of a segment reporting process is shown in . In the example process the reporting module can output a reporting user interface for presentation to an marketing user at block . The reporting module can receive a user selection of the site visitor attributes for which to generate a report at block . At block the reporting module can receive an marketing user query parameters with respect to the selected site visitor attributes and may generate the segment report based on the selected visitor attributes at block . The reporting module can output the segment report for presentation to the marketing user at block .

Each of the user interfaces shown includes one or more user interface controls that can be selected by an marketing user for example using a browser or other application software. Thus each of the user interfaces shown may be output for presentation by a browser such as the browser or the like or any other application software. The user interface controls shown are merely illustrative examples and can be varied in other embodiments. For instance buttons dropdown boxes select boxes text boxes check boxes slider controls and other user interface controls shown may be substituted with other types of user interface controls that provide the same or similar functionality. Further user interface controls may be combined or divided into other sets of user interface controls such that similar functionality or the same functionality may be provided with very different looking user interfaces. Moreover each of the user interface controls may be selected by a user using one or more input options such as a mouse touch screen input or keyboard input among other user interface input options.

Turning to the visitor profile configuration user interfaces of a visitor profile configuration user interface in is shown. The user interface includes features for constructing visitor profile templates discovering data with respect to visitor profiles created from visitor data by generating reports and features for obtaining visitor profiles through API access. The example visitor profile configuration user interfaces can provide functionality for marketing users to specify different types of visitor profile templates to be used in creating visitor profiles from captured visitor data.

In the user interface includes various menu options for accessing features of the visitor profile configuration module and reporting module of the visitor processing system . These menu options include a set of tabs and that may be selected by a user. The menu options include a build option which upon selection can output a user interface shown in described below or the like a discover option which upon selection can output a custom reports interface shown in described below or the like and an API sampler option which upon selection can output an integration user interface shown in described below or the like.

Using the build option an marketing user can configure visitor profile templates. As described above a visitor profile template can be made up of one or more attributes or rules discussed below which are defined or customized by a marketing user. Some attributes may be updated each time an event happens such as a visitor interaction with a content page while other attributors may be composed of multiple conditions and rely on values of other attributes created by the marketing user. As described above badges are one example of these attributes. A badge can include an icon or label that may be assigned to a visitor based on different attributes or characteristics of that visitor s interactions with the content page whether within a single visit or over multiple visits.

One example of such a badge is shown in the badge . The badge is shown as merely an example to illustrate one optional configuration of an attribute that may be made by a marketing user. The badge is titled fan boy and depicts a square icon with a smiley face superimposed therein. The fanboy badge represents the following other attributes of a visitor including that the visitor has viewed at least five products on the content site has purchased at least 90 of the products viewed and has visited the content site at least three separate times. These attributes may be configured by a marketing user using the various user interfaces shown in . Another example of a badge that might be configured by a marketing user is a window shopper badge. For instance the window shopper might be assigned to a user having the following attributes the user is visited at least four times to the content site has never made a purchase and has never added items to his shopping cart or has added items to his or her shopping cart but has never purchased any of those items .

As another example a frequent visitor badge might be assigned to a user who has visited a content site a total of at least 20 times and has visited at least two times in the last seven days. As another example an impulse buyer badge might be assigned to a user who has an average product view per purchase of less than two and a total products purchased is greater than one. Further still another example of a badge might be a VIP user badge that might be assigned if a user has visited a content site more than two times per week has a spending total in excess of 1 000 and has tweeted a link or liked an item on the content page on Facebook or another social networking site . These badges and the criteria that trigger their assignment to visitors are merely examples of a massively customizable number of badges that may be configured by marketing users to represent visitors to the content site based on the attributes of their visiting interactions with the content site.

As described above data about the user visits may be obtained by the tag container and the tag on the tag server and provided to the visitor processing system. The visitor processing system can apply the attributes and rules for transforming those attributes into badges or other types of attributes which will be described in greater detail below. Further using the reporting user interface of or the like a marketing user can analyze different segments of visitors based on the data collected about those visitors and transformed into specific attributes such as badges.

Turning to a user interface is shown that may be obtained by a user selecting the build menu option from . In the user interface user interface options for selecting attributes and rule are provided. The attributes can be attributes of visitors or attributes associated with visitor interactions with the content site. The attributes may be as simple as flags indicating whether a user has performed a certain interaction with respect to the content site such as clicking on a link or purchasing a product. Conversely the attributes may be as complex as a funnel representing a predefined ordered list of events such as a payment funnel that occurs through a series of clicks or item selection events made by a user.

In the depicted embodiment the attributes option is selected and a plurality of example attributes are shown organized by title type and scope. Some examples of these attributes include a visit start date that may be set to determine when a user started visiting a website a visit end date that may be used to determine when a visitor ended his visit a visit duration lifetime visit count and the like. The attributes shown can be collected for all end users that visit the content site or a subset thereof. Options may be provided in some embodiments for a marketing user to determine which subset of users will be tracked according to the selected attributes.

The example types of attributes shown include properties metrics dates flags sequences and the like. Other attributes may also be provided examples of which will be described in greater detail below. The scope of the attributes can relate to the current visit that a visitor is experiencing with respect to the content site. The current visit can be a current browse session for instance with respect to the content site. The current visit may begin when the user initially loads a content page from the content site and may end when the user leaves the content page or is otherwise inactive for a period of time such as 30 minutes or more . Alternatively the scope can refer to the visitor instead of the current visit and may therefore correspond to lifetime visits to the content page by the visitor. Other scopes are possible including a configurable time period such as the past 30 days or the like.

An add visitor attribute button is also shown in the depicted embodiment. The add visitor attribute button may be selected by a user to add a new visitor attribute to the list of attributes . Likewise any of the attributes may be selected by a marketing user to edit the attribute . Upon selection of the visitor attribute button a user interface such as the user interface of may be output for presentation to the user.

In the user interface of various options for selecting attribute types to create a new attribute are shown. Upon selection of one of the attribute types the user can define specific characteristics associated with the attribute to be used for analysis of data collected with respect to end users. Users whose characteristics in interacting with the content site satisfy characteristics or rules associated with an attribute can be assigned that attribute. In the depicted embodiment the attribute types that can be selected from include badges which can include labels or other indicia used to identify segments of users e.g. frequent visitors metrics which can store numerical data such as a return visit count metric sets which can store sets or collections of metrics properties which can store strings such as the name of a favorite product property sets which can store sets of properties flags which can store true or false or Boolean values dates which can store a date value such as a date when a user last visited the content page funnels which can store a predetermined order list of events such as a payment funnel and sequences which can store an ordered list of events.

For illustrative purposes creation of an attribute of the badge type is shown in detail with respect to . Example user interfaces for customizing other attribute types are described below with respect to .

Referring to if the badge attribute type is selected in a user interface or the like may be output for presentation to a user. In the user interface various options for configuring a badge attribute are output for presentation to a user. These options include controls for configuring characteristics of a badge such as the title of the badge. In the depicted example the title of the badge is Window Shopper and may have been entered by a marketing user. The options also include controls for entering any notes that a marketing user may wish to enter to describe the badge.

In the depicted embodiment the scope for badges is the visitor scope and thus the badge may correspond to lifetime visits by the visitor. However in other embodiments the scope can be for a current visit instead of the visitor scope or for some other time period as described above. The user interface controls also include functionality for specifying further details about the badge itself such as a text label to be displayed for the badge an image to be selected for the badge shape theme and colors to be selected for the badge and the like. Thus a marketing user can define any characteristic to be associated with a badge to distinguish the badge from other badges and to provide customization of the look and feel of the badge.

In addition a created transformation button is also provided that can be selected by a marketing user to add a transformation for the badge. The transformation can include one or more conditions or rules that transform incoming visitor data collected by the visitor data collector into data that represents the attribute shown. In particular in the depicted embodiment the rules can transform visitor data into an indication of whether a visitor should be assigned the Window Shopper badge. The transformations may be performed by the visitor data aggregator of which can aggregate the data and transform the data into a useable format according to the one or more conditions or rules specified in the transformation. By selecting a finish button the badge attribute can be created.

If the created transformation button is selected a popup box not shown can provide options for either assigning a badge based on a set of conditions or removing a badge from visitors when those conditions no longer apply. Other conditions for assigning the badge to the visitor can include when the visitor is a new visitor or when it is a new visit or upon any page event or the like.

If a user selects to assign a badge from the popup box a user interface such as user interface of can be displayed. In the user interface of an example transformation is shown. The example transformation includes an example condition that assigns this badge to a visitor when a visit has ended. Additional rules may be specified for triggering the assignment of this badge by selecting an attach a rule button . Upon selection of the attach rule button a list of rules can be displayed from which a user can select to attach to the transformation. Some example rules are shown in the list of rules including visit is direct visit is referred and so forth. Other rules may be selected by scrolling down through the list . These rules may be created by accessing the rules option of for example as described in greater detail with respect to below.

Rules can also be created by selecting an add a new rule button . Selection of this button can cause a user interface shown to be displayed. A similar interface can be selected from to create a new rule see In the user interface of a new rule creation box is shown that includes options for creating a new rule including a text box for titling the rule. In this particular embodiment for the window shopper badge a user has created a title Did not purchase this for this rule. One or more conditions can be selected for the rule. The condition shown is an if condition and includes subconditions and . The subconditions include a dropdown box for selecting an attribute see also . Any attribute available in the attribute list of can be selected or a new attribute can be created see . A dropdown box includes options for comparing the attribute selected in the box with some value selected from box . The value selected in box can be an attribute such as a metric or some custom value that can be specified in box . Controls are provided for adding or removing additional conditions to the if statement. An add or condition button may also be selected to add a Boolean OR condition to the rule.

Referring to a user interface is shown in which an example rule has been attached to the transformation for the Window Shopper badge of . The rule is entitled visitor did not purchase. This rule is triggered if the data object cart value is greater than zero. This rule may have been created using the user interface of to specify that the data object cart value selected from the dropdown box is greater than box a custom value box of zero text entered into box .

Thus in certain embodiments the badge window shopper created in can be assigned to a visitor when a visit has ended and if the visitor did not purchase as specified by the rule . Of course additional rules may also be attached to any badge attribute to create a more complex set of conditions or rules that would trigger the badge being assigned to a visitor. Likewise similar sets of one or more rules or conditions can be attached to a badge attribute to remove or deassign a badge from a visitor.

A create a transformation button may be selected by the user to create transformations. Upon selection of this button a select box is shown giving options for creating different types of transformations to associate with this metric attribute. These types can include an increment or decrement metric that increments or decrements a metric based on a set of conditions. For instance a visit count can be a metric that uses the increment transformation such that each time an end user visits a content site this metric is incremented by one to produce a total visit count over the lifetime of the visitor. Other metric creation options in the select box include a set ratio metric or transformation that can set the quotient of two metrics as a new ratio metric a set product transformation that can set the product of two metrics as a new metric a set difference transformation that can set the difference of two metrics as a new metric a set sum transformation that can set the sum of two metrics as a new metric set metric transformation that can set the metric to a specific number and a set difference between two dates transformation that can set the difference between two dates as a new metric. These transformations are examples and may be further combined for example by creating both a product and a sum or both a quotient and a difference or any number of different operations to create a single metric from a plurality of data inputs related to visitor data.

Although not shown a similar user interface could be used to define a metric set. Metric sets can include a set of metrics that is dynamic in nature in contrast to metrics which may be static in nature. An example of a static metric is time on site which can represent the amount of time a user spent in a browse session on a content site. A metric set can grow over time with name value pairs that represent changing metrics with respect to user visit behavior. For example a metric sent might include an array of times to be collected such as time spent football 120 minutes time spent baseball 60 minutes etc. The values in a metric set may be determined at runtime rather than during configuration although the opposite may be true in some embodiments.

For instance as shown in an example user interface depicts a transformation selected from the create a transformation button to set a ratio. In the depicted embodiment the options enable a metric to be set to a first attribute value selected from a dropdown box divided by a second attribute value selected from a dropdown box when a certain triggering event occurs selected from a dropdown box such as when the visitor is a new visitor or when the visit ends etc. . Likewise a rule can be attached to the metric to apply further processing or configuration to the metric. Rule creation using the attach a rule button can be similar to rule creation described above and below with respect to .

Although not shown property sets can be configured similarly. The attribute of a property set can contain more than one assigned string property value. If a property not a property set called category is set to football e.g. representing a football related link selected by a user and is then set again to baseball e.g. representing a similar link the result may change from category football to category baseball. Each of these properties is a string. In contrast as property set called category can be first set to football with the result that category football and can then be set to baseball with the result that the string baseball is appended to the property set such that category football baseball . Property sets can be used to detect correlations in visitor data such as whether a visitor selected links related to both football and baseball within a visit or multiple visits to a content page.

In another example user interface is shown which can be used to configure a flag attribute. The user interface also includes options for assigning a title and optional notes to the attribute as well as a scope button set to define the scope of the attribute. A create a transformation button is also shown which can allow one or more transformations to be created. An example transformation shown can allow the flag to be set to a Boolean value such as true or false when a triggering condition or conditions occur as defined by the dropdown box and optionally when one or more rules are satisfied as may be defined by attaching a rule . In a simple example the flag attribute may be a new visitor attribute and may be assigned when the condition of a new visitor being detected occurs. In another example the flag attribute may be titled added item to cart and may be triggered when the condition of a visitor adding an item to a shopping cart has occurred. This condition may be detected by a rule that detects when their cart value associated with the visitor is greater than zero.

Turning to an example user interface is shown for configuring a date attribute. Options are provided for specifying the title of the attribute and optional notes are shown as well as scope buttons for selecting the scope of the attribute. A creative a transformation button is shown which upon selection enables the user to select from an options popup box to either capture the date to set the date to the current time stamp or to set a date based on a set of conditions. In the capture the date transformation shown as example transformation the date attribute can capture the date and time when one or more following conditions are met specified by condition such as during a visit. A rule may also be attached using button . Thus the date and time may be captured for instance when a user adds an item to a shopping cart or clicks a certain link taking the user to a certain page etc.

In an example user interface is shown for configuring a funnel attribute. Option for assigning the title and notes are supplied in the depicted embodiment. Scope variables are not provided as the funnel attribute can be determined for a single visit. Alternatively funnels can be determined from multiple visits. Create a step button is provided similar to the creative transformation buttons described above. A funnel may include a series of steps including one or more steps that once satisfied indicate that the attribute has occurred for a particular visitor. For instance a funnel attribute can represent a series of steps taken by a visitor prior to and optionally including a purchase. Such a purchase funnel can be indicative of how close visitors come to purchasing items visitors who make it further into the funnel come closer to purchasing and vice versa.

One example step is shown to update the funnel including options through for defining when the step has occurred. For instance a text box is provided for specifying a title of the step and a select box and attribute button are provided for adding attributes to capture related to the funnel. A condition box is provided for determining when this step is considered to have occurred. Further a rule may be attached by selecting a rule button .

In certain embodiments funnels can provide for the configuration of an expected flow that has a known or anticipated start and end. For example a shopping experience on an electronic commerce website can be modeled as a funnel attribute with step 1 being viewing a product e.g. any number of times step 2 being adding the item to a cart step 3 being to proceed to checkout step 4 being filling out shipping information step 5 including filling out billing information and step 6 including confirming the order. The funnel attribute can allow the visitor to be traced through the funnel providing a resulting report of where visitors fall out of the funnel e.g. by stopping at a certain step in the funnel . This report may be useful to marketing users who wish to determine the conversion rate of end users among other useful data.

Funnel attributes may be time ordered such that in order for a funnel to be associated with a visitor the visitor must follow the steps of the funnel in order. Other configurations that are not based on time ordering are possible. Data may be captured at each step of the funnel or at the end of the funnel. For instance it may be useful to inspect the value of a shopping cart that a user abandoned midway into a purchase funnel. Other funnel attribute features can include the ability to make a step optional meaning it can be skipped. In the example above shipping is often skipped because the billing info often provides all the info needed for shipping.

Purchase funnels are merely one example use of funnel attributes. Other example uses for funnels include campaigns flight check ins email sign ups or any other sequence of steps that use an online tool on the content site.

Referring to an example user interface is shown for configuring a sequence attribute. The user interface includes option for specifying a title and optional notes and a scope button for selecting the scope. In addition the user interface includes a button for creating an entry which can be similar to the create transformation buttons described above. One or more entries may be created to update a sequence. An example entry is shown that records an event for the sequence. The entry can capture attribute data specified using a select box and add or attribute button upon a condition occurring as specified by the dropdown box . Optionally a rule may also be attached .

In contrast to funnel attributes which may have a defined end goal such as a purchase sequences can log or track more general data points such as click actions or link selection actions of an end user. Sequences can provide a mechanism for logging significant visitor events as a historical trace without the need to store all the data between the events. For example an end user s purchase history with respect to an electronic commerce site can be represented by a sequence attribute. The purchase history sequence can include a list of the user s purchases but may not include for example each of the user links selected between purchases. Another example of a sequence can be a search keyword history that resulted in a user finding a content page. Yet another example can include a list of movies watched e.g. in a Netflix queue and the like. Events in a sequence may be associated with a timestamp so that later analysis of the sequence can compare timestamps of the events.

In addition selecting the add rule button can show a user interface such as an example user interface shown in . The user interface provides options for titling and annotating a rule as well as conditions to specify for the rule. Selection of these conditions can include dropdown boxes and for specifying subconditions associated with the condition. An example list of attributes is shown from which visitor attributes may be selected data sources may be selected or the like. Mathematical operators may be selected via the dropdown box to compare the attribute with a custom value as specified in the dropdown box or text box . For example an attribute may be selected from the dropdown box and compared with a metric or property that is defined elsewhere in the set of attributes described above. Select boxes can be used to add or take away conditions. An add or condition button can be selected to add one or more additional Boolean OR conditions.

Turning to an example reporting user interface is shown. In the example reporting user interface options are shown for filtering the various attributes that have been defined for visitors to produce a set of results that illustrate aggregations or segments of visitor profile data. The filters include metrics filters that enable a marketing user to select different metrics associated with visitors as well as flag filters and badge filters . Other filters may also be included in other embodiments.

A user may select one or more of the metrics filters to adjust metrics associated with different users to be output in the reporting section . In the depicted embodiment these metrics include products purchased orders placed total visits language total purchase count total purchase amount and time of sale. These metrics may have been defined using the interfaces described above. Different slider selection tools and allow users to adjust the values of metrics data to be displayed. For instance the slider depicts values for a total purchase count that may be selected. In this depicted embodiment the user selected a total purchase count between 10 and 30 to thereby view a segment of visitors that purchased between 10 and 30 items. Likewise the slider has been used to select a total purchase amount between values of 30 000 and 60 000. The slider shows the metric time of sale being selected between 10 00 a.m. and 5 00 m.

Within the flag filters various flags are shown such as has made purchase emailed link retweeted link and returning visitor as well as a number of times that those flags have occurred indicated by amount . Check boxes next to the flags are provided for selectively selecting the flags to filter the output of the reporting area . Similarly check boxes are next to different badges in the badge filters . Different badges are shown such as VIP window shopper fan boy and the like next to amounts of visitors that have earned these badges or been assigned these badges. Any combination of the badges may be selected with the check boxes to filter the output of the reporting display .

The output of the reporting display can also be adjusted by selecting the different perspective to show the reporting data from using a drop down box that shows in this embodiment that the perspective is from the point of view of flags. Thus different bars in the reporting display reflect value amounts that different flags represent such as has made purchase emailed link etc. A query is shown at the top represented by controls that represents the selections of the filters to filter the different flags. Each of the subaspects of the query can be deselected by clicking on X buttons . In addition selection of a particular bar of the bar graph can show snapshots of the metrics. The example reporting interface is illustrative only and may be varied considerably in other embodiments.

Turning to an example user interface is shown for integrating raw data output by the visitor processing system with third party vendor data or systems. The integration user interface can provide functionality for building a sample query using controls to query their live feed or other date ranges for data. Additional API access can be provided for developers of third party vendors to access the raw visitor data collected by the visitor processing system and processed using the transformations and rules described above.

The raw data may be used for more than just reporting either by the visitor processing system itself or these third party vendors. For instance the data output by the visitor processing system can be used for generating ads or ad campaigns email campaigns personalization including ads or recommendations or the like. For instance in one embodiment the visitor processing system outputs a periodic feed for example daily monthly weekly hourly of data from the visitor processing system to external vendors so that the vendors can use this data to update information about visitors. The data in the feed can be used to perform business intelligence aggregate the data for long term trends and trend analysis and the like.

In yet another embodiment the raw data or processed data output by the visitor processing system can be used to update the content site itself by personalizing the content of the content site based on the visitors and their attributes. For instance a marketing user may create a chatter badge that is assigned to visitors who are influenced by chat because they tend to purchase items when they are using a chat function on the content site. If such a visitor comes to the content site the content site can programmatically personalize itself to show a chat window more prominently for that particular visitor. As another example if a visitor is assigned a VIP badge the content site may not show ads to the user. If the user is a regular buyer the content site may give a 10 discount offer to that user. As yet another example if a badge early adopter is assigned to a visitor the content site may show the latest electronic gadgets to the user or prioritize those gadgets in a display to a user over other gadgets or products.

Referring to an example data source user interface is shown. As described above data sources may be accessed when creating attributes or rules to access data that is part of the content page or that is associated with the browser or end user system itself. These data sources may be specified by a marketing user associated with the content site so that the visitor processing system can be aware of these data sources and know to collect their data. For instance if the content site is an electronic shopping site and has a shopping cart and if one of its content pages has a cart value data source the marketing user can use this user interface to specify that the cart value data source is available and should be obtained for analysis in the visitor data.

A button is provided for adding a data source. Upon selection of this button a row can be added to the user interface . Data inserted in the new row can be saved in computer storage such as in a database. The row can include a text box for specifying the name of the data source select boxes for specifying the type of the data source and a description box providing a written description of the data source. The name in the text box can be the name of the data source used by the content site. Specifying this name can enable the visitor processing system to be aware of which variable or data source to look for when obtaining data using the tag container or tag see .

The type of the data source identified in the dropdown box can be a data object that is associated with the page itself it may be a Javascript page variable or other script value associated with the page a meta tag associated with the page a query string parameter associated with an HTTP PUT or GET statement or a cookie value that is associated with the end user system or browser. Other options are also possible. Thus if the data sources are specified in the user interface the visitor processing system can obtain data from the specified data sources using an appropriate tag .

As shown in a user interface for mapping the data sources can be used for some tags. The user interface shows example tags added to the tag server s from third party vendors. In the depicted embodiment these tags include a live person tag and a Google Analytics tag. Configuration details for the Google Analytics tag are provided and mapped data sources are also shown. The mapped data source functionality can be provided to enable a user to map the data sources defined in the user interface to a data source in the tag vendor s tag. However in certain embodiments such mapping is not performed by the visitor processing system for the visitor attributes and rules described above. Rather the mapping may not be needed because the visitor processing system can collect all the data sources specified by the marketing user and can make these available in the attributes and rules configuration displays without further mapping required. Mapping may instead be used with such visitor rules and attributes in other embodiments.

Turning to a more detailed example embodiment of a computing environment is shown that can perform any of the tag management features described herein. The computing environment is a more detailed example of implementation of the computing environment of . As in end user systems are shown in communication with content sites which may communicate over a network not shown . In addition marketing user systems are also shown. The computing environment facilitates implementation of a tag management system which may include the functionality of the visitor processing systems described above. Alternatively the functionality of the visitor processing systems may be implemented in place of the tag management system in without using some or all of the features of the tag management systems described herein.

In the depicted embodiment the tag management system is shown distributed in a cloud platform that provides redundant and geographically dispersed access to the tag management system . In particular the tag management system is implemented in various cloud regions . These cloud regions may be implemented in any type of cloud platform which may simply be a data center operated by a vendor of the tag management system or by a third party vendor such as Amazon Web Services Microsoft Azure Rackspace Linode combinations of the same or the like. Each cloud region includes a load balancer that can balance requests to tag management system instances .

The tag management system instances can be implemented as virtual machines or physical machines. In the Amazon Web Services embodiment the instances can be elastic compute cloud EC2 instances that are distributed geographically for faster and redundant access to geographically dispersed analysis user systems . In addition visitor profile data storage devices are shown in the different cloud regions and can store tag and visitor data in the cloud. Virtual private network VPN tunnels facilitate secure communication in a virtual private network among the different cloud regions and enable administrator users not shown of the tag management system to access tag management system instances .

In an embodiment the virtual private network is facilitated or provided by a private cloud service such as the Virtual Private Cloud VPC service provided by Amazon Web Services . The private cloud service can provide security to the tag management system instances by virtue of obscuring IP addresses of the tag management instances . The tag management system instances may have nonpublic IP addresses so that each tag management system instance does not need to have security software that is responsible for securing the tag management system itself.

A geodns provider is provided for interfacing between content sites analysis user systems and the various tag management system instances . The geodns provider also provides access to published tags which are stored in tag servers accessible through one or more or content delivery networks CDNs . The function of the geodns provider in one embodiment is to periodically determine which CDN hosting the tags has the lowest latency thereby selecting which CDN to point the content site to when accessing tags on the tag servers . The geodns provider may implement the DYN DNS system in one embodiment.

Advantageously in certain embodiments by storing tags in CDNs tag access can be much faster than if tags were stored in locally hosted tag servers. Further by using a geodns provider access to tags can be even more rapidly achieved by cycling through the fastest available CDNs .

Turning to another embodiment of a visitor processing system is shown. The visitor processing system can include any of the features of the visitor processing systems described above. For instance the visitor processing system can generate any of the user interfaces described above. Likewise any of these visitor processing systems can implement any of the features of the visitor processing system . The visitor processing system represents an example detailed implementation of tag management for visitor profile creation.

In the depicted embodiment the visitor processing system includes a visit event collector a message queue a message router a visitor processor and a query aggregator . In addition the visitor processing system includes a visitor profile data repository and a REST server . The visit event collector can include any of the features of the visitor data collector of or a portion thereof. Likewise the visitor processor and query aggregator can implement the functionality of the visitor data aggregator of or a portion thereof. Further the REST server can implement the functionality of the reporting module of or a portion thereof. Moreover the visitor profile data store can store any of the data stored by the data store of . In addition the components shown in can include additional functionality.

Each of the components shown can be implemented in computer hardware or software. In one embodiment the components shown are implemented as software instances running in hardware. Some or all of the components may be implemented with multiple instances which may be geographically co located or geographically dispersed. Arrows between the components shown in represent example flow of data or messages between the components for example over a network or via interprocess communication on the same computing device e.g. a server . Although some possible communication paths between the components are indicated by these arrows other communication paths between the components are also possible.

In the depicted embodiment the visit event collector receives visitor event information. This visitor event information may be obtained by a tag container invoking a visitor tag. The tag container can be embedded in a content page of a content site accessed by a visitor and the tag container can load the visitor tag e.g. from a separate tag server see e.g. . The visitor event information can include any of the visitor profile data or visitor data described above including data about any end user interaction with the content page s data about the end user s system hardware or software such as browser type and so forth.

The visit event collector can publish a visitor event containing the visitor event information in response to receiving the visitor event information. The visit event collector provides this visitor event to a message queue in one embodiment. The message queue can implement message broker functionality that implements the Advanced Message Queuing Protocol AMQP standard. For example the message queue can perform asynchronous routing of messages between the various components of the visitor processing system . In one embodiment the message queue implements some or all of the features of the RabbitMQ message broker system. However the message queue can implement other message brokering systems in other embodiments.

The message queue provides an event message picked from a queue to a message router on a first come first serve basis. The event message can include the visitor event data published by the visit event collector to the message queue . In response to receiving the event message the message router can route the event message to a sharded queue implemented by the message queue . The sharded queue may be implemented over multiple servers to increase parallelism and processing efficiency.

The sharded queue provides sharded event messages e.g. portions of the event message to a visitor processor . The visitor processor can aggregate data from the sharded event messages based on attributes of the data or user. For instance the visitor processor can perform any of the aggregation functionality of the visitor data aggregator to produce visitor profile data based on attributes and rules as described above. The visitor processor can persist visitor profile data in visitor profile storage of the visitor profile data store for example in response to the end user s visit to the content site expiring or ending. The visitor processor can also include an in memory set of active visitor profiles associated with current visitors to the content site or sites . The visitor processor can persist the in memory set of active visitor profiles to visitor stream query storage in the visitor data store .

In addition a query aggregator obtains sharded visitor query results from the message queue e.g. in response to a query from a marketing user and maintains an in memory set of aggregated visitor profiles . The query aggregator also persists a near realtime aggregate visitor report in aggregated visitor result storage which can be accessed as part of a user query.

The REST server can received submitted queries and return query results in response using HTTP SOAP or other representational state transfer REST protocols or another protocol . Upon receiving a query for visitor profile data see for a query example the REST server can obtain the requested data from the visitor profile data store . In particular the REST server can retrieve historical query results from the visitor profile storage near realtime visitor stream query results from the visitor stream query storage and near realtime aggregate visitor query results from the aggregated visitor result storage .

In an embodiment the query can be streamed or reported. Streamed queries can include queries for the raw visitor profiles themselves so that further processing can be done for example by a marketing user system. Reported queries can request reports based on visitor profiles such as the example report shown in . Historical queries are also possible showing reports for a set of visitors at a previous point in time such as a day ago or a week month or year ago as opposed to live real time or near real time which can be the default query option . A marketing user may wish to compare historical results from a year ago with current results or with other historical results .

A content site can integrate the services of a traditional web analytics system for the purpose of tracking its visitors for behavioral analysis. Tracking these visitors can be done so that when visitors render content within the property or application the tracking code is triggered. This tracking code can then invoke an event call e.g. via HTTP S back to the web analytics system for collection. Examples of such tracking code are described above including the tag container and tags see e.g. .

The collection of events from a single user agent e.g. the client software such as the browser of may be associated as a chronological sequence of events known as a visit sometimes referred to also as a session . More specifically the visit can be comprised of some or all the sequenced set of events from the beginning of a visit until a pre determined period of inactivity has occurred. For example a user may open a fresh web browser navigate to a content site such as www.acme.com followed by some number of page views. Each page view can be considered an event. Further data entered by the user into a form can also be considered an event. Other events can correspond to any of the attributes described above such as events related to badges funnels sequences etc. . Each event can be associated with a single visit of a user. In an embodiment once thirty minutes or some other predefined time value pass without another page view the web analytics system can consider that visit concluded. Another following page view whether the browser was closed or not may be considered the first event of a new visit.

A visitor can be associated with a visitor profile having a collection of visits associated with a single user agent. A user agent can include a single web browser or application on a single device or end user system . Such visitors may be provided a tracking identifier provided by the web analytics system see described below . These identifiers may be random in nature in order to ensure that no duplicates occur. These identifiers may be provided back by the user agent in order for the web analytics system to identify the historical data to associate freshly received incoming events.

A challenge of this tracking results from many people interacting with a web property or application from multiple user agents or devices. The same challenge can be expressed in a much older scenario regarding the deletion of cookies. Any standards based web browser provides a feature allowing the user to delete any or all cookies. Because cookies may be utilized by web analytic services including any of the systems described herein to store the visitor identifier the ability to delete cookies may cause the web analytic vendors to interpret the visitor as new upon the next visit resulting in the assignment of a new identifier. Because this new identifier can be different from the previous identifier the visitor may now be severed from any historical behavior.

In both of these cases it can be highly desirable to capture the complete picture of a user s behavior as it can be expressed across devices and web browser cookie cleanses. Desirably a single user should be identifiable as one visitor as the user navigates a web property or application across browsers or devices.

Embodiments of the systems described herein can advantageously implement one or more visitor stitching processes to address some or all of the drawbacks identified above. Visitor stitching can include among other things one or more processes by which multiple visitors that may appear distinctly independent may be merged into a single united visitor profile sometimes referred to herein simply as a visitor due to the leveraging of one or more persistent identifiers. Like the identifier issued by the web analytics service a persistent identifer can be unique to the visitor. However its uniqueness may go beyond that of the uniquess of the web analytics service. Due to the nature of a persistent identifier a persistent identifier may not change based on which device is used or which browser is used. A persistent identifier can also be less sensitive to cookie cleansing. 

Some examples of persistent identifiers include email addresses social networking identifiers such as Facebook or Twitter identifiers login credentials such as web property or application login usernames phone numbers mailing addresses and the like. These identifiers can have the unique characteristic of being the user s credentials for one or more websites or applications. More generally any identifier associated with a user that can represent a user from a different perspective or channel from an identifier provided by the visitor processing system can be used as a persistent identifier. These identifiers might be first party identifiers or third party identifiers intended to provide direct or cross site authentication such as social networking identifiers such as Facebook Connect identifiers . Persistent identifiers can provide a much more consistent representation of a user than the content page specific visitor identifiers provided by the visitor processing system.

Visitor stitching can be performed by any of the systems described herein. For example the visitor processing system or tag management system or visitor processor can implement the visitor stitching processes described herein. For convenience the remainder of this disclosure will refer to the visitor stitching and related processes as being implemented by a visitor processing system or visitor processor although it should be understood that these shorthand references can refer to any of the systems or subsystems described herein.

As described more fully above the visitor processing system can provide a new level of marketing agility by providing a solution that in certain embodiments allows for a fully configurable visitor model while seeing the results of this model in real time or pseudo real time. This level of configurability can be beneficial when the goal can be to reduce a visitor set to a highly targeted visitor segment. As described above with respect to this rich configurability can include the ability to set and manipulate a number of attributes on a visitor. By allowing the user to configure attributes on their visitor definition the user can subsequently view reports on these attributes. These reports can provide the capability to filter a live or historic stream of visitors on these specific attributes resulting in a highly segmented and highly targeted segment of visitors.

A visitor stitching process can be a real time or pseudo real time process that can be initiated whenever a persistent identifier is received. The above description of the visitor processing system mentions a property as one of the available attributes or data points that can be associated with a visitor. A persistent identifier can be configured as a special type of property. A persistent identifier can be a property that triggers the visitor stitching process. This special property can be referred to within the visitor processing system and by the user interface as a multi channel visitor ID in some implementations.

When an event containing one or more persistent identifiers is received by the visitor processing system a visitor stitching process can be initiated which can conclude by associating the event with the resultant merged visitor. This merged visitor can be the product of the visitor stitching process merging any and some or all seemingly independent visitors e.g. visitor profiles . This resultant merged visitor or visitor profile may later be further stitched or merged into a more comprehensive stitched visitor as other persistent identifiers are discovered as will be described in greater detail below.

Example visitor stitching processes will now be described with respect to . Prior to describing example visitor stitching processes in an initial visitor profile creation process will be described with respect to and a persistent visitor profile process will be described with respect to . Each of these processes may be implemented by any of the visitor processing systems or visitor processers described herein or by any other computing device.

Turning to an initial visitor profile creation process is shown. At block the tag container of or another tag e.g. or reports a visitor to a content page to the visitor processing system. The information reported by the tag or tag container may include an identifier that the tag or tag container obtained from a cookie from the visitor s browser . Thus at block it is determined whether the visitor has an identifier previously set by the visitor processing system in a cookie associated with the content page. If so the process ends as the purpose of this process is to assign a visitor identifier to visitors that do not already have one.

If the visitor does not have a visitor identifier the process proceeds to block where a visitor profile with a visitor identifier is created for the visitor. The visitor identifier can be an alphanumeric or just alpha or just numeric identifier that is randomly selected or incremented to be unique from other visitor identifiers. The visitor processing system passes the visitor identifier to the tag container or other tag for storage in a cookie associated with the content page at block . This way when the visitor subsequently accesses the page the tag container or tag can access the visitor identifier from the cookie so that visitor data from the subsequent visit can be combined with the prior visit s data. At block the visitor processing system stores visitor data regarding the visitor s interactions with the content page in association with the visitor profile.

The visitor processing system may access another identifier associated with a user user agent e.g. browser or user device in place of cookies for tracking user identities. Other identifiers that may be used in place of cookies for tracking visitors include Internet Protocol IP addresses Media Access Control MAC addresses which may be obtained using a suitable protocol device specific identifiers e.g. any static identifier associated with a device or software install on a device device fingerprints which may include a profile of two or more separate features of a device or user that individually may not be identifying such as any combination of the user agent type e.g. browser type of a user device the language supported by a user s browser plugins installed in a user s browser the user s IP address operating system of the user device etc. mobile advertising identifiers and the like. More generally these identifiers and cookies are examples of user device specific user agent specific or client specific identifiers. Any reference to cookie based identifiers herein may be interchangeable with any other user device specific user agent specific or client specific identifier.

Turning to an example persistent visitor profile process is shown. Like the process the persistent visitor profile process can be implemented by any of the systems described herein or by another computing device. The persistent visitor profile process illustrates an example technique for associating a visitor with a persistent identifier of the visitor. This association with a persistent identifier can enable visitor stitching to be performed.

At block a visitor with an existing visitor profile see supplies a persistent identifier in a visit to a content page. As described above the persistent identifier can be an email address social network identifier login credential e.g. username or the like associated with a user or visitor. The visitor to a content page may supply this information as part of a login process to the content page for example by filling in a form supplying social networking login information using a service such as Facebook Connect or the like. Since the user is supplying the persistent identifier to the content page the persistent identifier becomes part of the document object model DOM of the page and can be read by the tag container or another tag within the tag container. The tag or tag container can transmit the persistent identifier or a hash thereof to the visitor processing system. If the tag or tag container passes the persistent identifier without hashing e.g. in the clear the visitor processing system can hash the persistent identifier instead.

At block the visitor processing system supplements the visitor profile of the visitor with the persistent identifier. Thus when the visitor visits the content page a subsequent time the persistent identifier can be associated with the visitor s subsequent visit. For example at block the visitor visits the content page a subsequent time without supplying the persistent identifier again. At block the tag container or tag can access the visitor identifier of the visitor from a cookie in the visitor s browser and supply this visitor ID to the visitor processing system. The visitor processing system can look up the persistent identifier of the visitor based on the visitor ID at block . The visitor processing system can then associate the persistent identifier in the visitor profile with the visitor data of the subsequent visit to the content page at block . Thus once the visitor supplies a persistent identifier the visitor need not supply it again for the visitor processing system to associate the persistent identifier with the visitor s profile on subsequent visits. Further the visitor processing system can store the persistent identifier in a cookie in the user device.

The following example illustrates a before and after view of a visitor profile processed to include a persistent identifier based on the process of . In Table 1A below assume the following are known timestamp values shown may not be intended to reflect any particular unit of time but rather can demonstrate relative time 

The visitor ID shown for each visitor in Table 1A is an example of the visitor identifier created with respect to the process of . For convenience each visitor is also referred to by his or her visitor ID such as Visitor 1a or Visitor 2b. Each row in Table 1A and in subsequent tables represents a separate visit for each visitor with two total visits being represented in Table 1A.

Assume Visitor 1a visits the content page a third time this time supplying a persistent identifier as the following email address user acme.com. The visitor s profile may look as follows in Table 1B based on this third visit 

When this latest event is received the visitor processing system can invoke a visitor stitching process which may include one or more code modules executing as a local code base within the visitor processing system . This visitor stitching process can merge events of the Visitor 1a under the same persistent identifier. This process could result in a visitor profile such as the following shown in Table 2A 

Note the following points Visitor 2b is unaffected in this example and therefore is not listed in Table 2A. In addition Visitor 1a can be updated with a replaced by field set to the new persistent ID. Any future request or event directed to Visitor 1a can be directed to the replaced by visitor instead of the initial visitor identifier assigned by the process of . However this initial visitor identifier can be maintained in the visitor profile in some embodiments and the persistent identifier can supplement the initial visitor identifier.

The visitor stitching process performs the following steps in an embodiment The visitor stitching process can check to see if the visitor processing system has a live visitor in cache e.g. currently interacting with a content page with the same persistent identifier e.g. visitor  acme email user acme.com  . In this case there is not. The visitor stitching process can check to see if there is a visitor  acme email user acme.com  in the database e.g. visitor profile repository . In this case there is not. The visitor stitching process then creates the  acme email user acme.com  visitor. The visitor stitching process can merge Visitor 1a into Visitor  acme email user acme.com . In this simple case this merge can include copying some or all of the history from Visitor 1a to this new visitor profile. The visitor stitching process can update the Visitor 1a with a replaced by field set to  acme email user acme.com .

Next assume another event is received from Visitor 1a during the same third visit event timestamp 220. The Visitor Processing system can inspect the event to find that this can be associated with Visitor 1a. It can be useful to note that this event does not have to provide the persistent identifier. Instead the visitor processing system can retrieve Visitor 1a for updating as it may for any event but may notice the existence of the replaced by field. The value of this field can be retrieved in this case  acme email user acme.com . The visitor processing system can then retrieve this visitor instead and can update the visitor profile with the newly received event resulting in the following visitor profile update in Table 2B 

It should be clear that now each subsequent event e.g. page load form entry etc. of this visit can contribute to this visitor s  acme email user acme.com  visit. Additionally some or all events for future visits made by Visitor 1a can contribute to the  acme email user acme.com  visitor profile instead of the initial Visitor 1a profile in the same manner. In certain embodiments some or all events for future visits made by Visitor 1a can contribute to the  acme email user acme.com  Visitor instead in the same manner without the need to continually supply the persistent identifier as described above.

Note that although the visitor stitching process has been invoked the process may have additional features when another seemingly distinct visitor provides the same persistent identifier as illustrated with respect to .

In an example visitor stitching process is shown which may also be implemented by any system described herein or by another computing device. At block of the process a first visitor already having a persistent identifier in a visitor profile visits a content page. This persistent identifier may have been associated with the visitor profile using the process of . At block a second visitor with a different visitor identifier assigned e.g. using the process of and no persistent identifier or a different persistent identifier from the first visitor s visits a content page. The content page may be the same or a different page visited by the first visitor.

At block the second visitor supplies the same persistent identifier as the first visitor. This persistent identifier may be detected using for example the features described above with respect to . In response to receiving this persistent identifier the visitor processing system combines the visitor data for the first and second visitors into a single visitor profile at block .

The following features illustrated with respect to Tables 3A through 5 illustrate one example implementation of the process of .

Continuing from the previous examples above assume that sometime later Visitor 2b returns for a third visit. This could result in the following historical visits and current third visit for visitor 2b in Table 3A 

To this point no visitor stitching has been used. Consider when another event within the visit contains the same persistent identifier as Visitor 1a the first visitor in this example email user acme.com 

When this latest event is received the visitor processing system can invoke a visitor stitching process code module which can merge the two visitor profiles 1a and 2b as shown in Table 4 

For example the visitor stitching process can perform the following steps The visitor stitching process checks to see if the visitor processing system has a live visitor in cache with the same persistent identifier e.g. Visitor  acme email user acme.com  . In this case there is not. The visitor stitching process can check to see if there can be a visitor  acme email user acme.com  in the database e.g. visitor profile repository . In this case there is. This visitor can be retrieved. The visitor stitching process then proceeds to merge Visitor 2b into Visitor  acme email user acme.com . The visitor stitching process updates the Visitor 2b with a replaced by field set to  acme email user acme.com . The visitor identifier 2b may be preserved in the database as well.

This merge process can reconstruct the visit history and reprocess each event of each visit as though it was received for the first time in the way that any event can be processed by the visitor processing system. This can ensure or attempt to ensure that visitor attributes reflect the entirety of the history of events. Reconstructing visits can be done by combining some or all overlapping visits into a single visit and by sorting the events in chronological order. From the above first visits of each Visitor 1a and 2b one can see in Table 5 that these visits have overlapping event timestamps 

The overlapping events may have resulted from the visitor using two devices or two different browsers on one device to access the same content page. Because these visits have overlapping event timestamps a single visit can be created where the first event of the visit can be the event with the oldest timestamp smallest the last event can be the event with the newest timestamp largest and some or all other events may be in chronological order. This can result in the single first visit for visitor  acme email user acme.com  comprising of in this case the above six events.

Visits with no overlapping events may be simply copied to the newly stitched visitor profile as can be the case with the original visit third from Visitor 1a and the latest visit from Visitor 2b.

It should be clear that now each subsequent event of this visit can contribute to this visitor s  acme email user acme.com  visitor profile. Additionally some or all events for future visits made by Visitor 1a or 2b can contribute to the  acme email user acme.com  Visitor profile instead in the same manner. In certain embodiments some or all events for future visits made by Visitor 1a or 2b can contribute to the  acme email user acme.com  Visitor instead in the same manner without the need to continually supply the persistent identifier from either visitor.

Further due to the nature of the persistent identifier Visitor 1a and Visitor 2b may be considered to be the same individual or user. This fact can facilitate performing cross platform device or web browser tracking where the tracking may not only be performed in real time or near real time but the individual s history can be considered to be a singular visitor s history. Visitor stitching can therefore allow the visitor processing system to provide analysis of the individual s history in the singular.

Turning to another example visitor stitching process is shown. This process may also be performed by any of the systems described herein or by another computing device. The process illustrates a situation where the persistent identifier is supplied by a different entity than the visitor or user. Rather in this process the visitor identifier is an identifier provided by a third party tag vendor.

As described above in more detail with respect to et seq. the tag container can reference multiple tags from third party tag vendors operators of the tag vendor systems . Individual tag vendors may each maintain their own visitor identifier for a visitor that is separate from the visitor identifier maintained by the visitor processing system . When a persistent identifier supplied by a visitor is not available the visitor processing system can use an identifier provided by another tag vendor to stitch two related visitor profiles together. While this third party identifier may be less persistent than a user email address or social network identifier the third party identifier is still referred to herein as a persistent identifier. More generally the third party identifier as well as the other persistent identifiers described herein including email based social based or login based can also be referred to as external identifiers since they may be created external to the visitor processing system or alternative identifiers as alternative sources of identification to the visitor processing system generated identifier .

With continued reference to at block a first visitor visits a content page. The visitor processing system assigns the first visitor a first identifier at block similar to as described above with respect to . A tag vendor assigns the first visitor a vendor specific identifier at block also using for example similar techniques as described above with respect to .

At block a second visitor visits a content page which may or may not be the same content page that the first visitor visited . The second visitor is assigned a second identifier by the visitor processing system . This identifier would differ in some embodiments from the identifier assigned to the first visitor. At block the tag vendor assigns the second visitor the same vendor specific identifier as the first visitor. The visitor processing system can recognize that this vendor specific identifier is the same for both visitors and combine the visitor data for both visitors into a single visitor profile at block .

The above sequences demonstration example logic of the visitor stitching process. However embodiments described herein go further to function within a distributed environment including multiple computing devices such as multiple physical or virtual servers which may be geographically dispersed or co located e.g. in one or more data centers . A distributed environment can add additional complexity that can be accounted for as shown in an example distributed visitor stitching process of . With respect to the process visitor profiles can be assigned to partitions in the distributed system. Each partition can represent a logical grouping of physical or virtual servers referred to as visitor processors for the remainder of this specification . Each visitor processor can implement the features of any of the systems described herein. The partitions can be numbered for example from 0 to N where N is an integer . As new visitor processors are brought online they can be assigned to one of the partitions or a range of partitions. Visitor identifiers whether persistent or assigned by a visitor processor can be hashed into a numerical value that corresponds to a partition. Thus visitor profiles can be assigned to a single partition in one embodiment so that each time a visitor event occurs the same partition handles that visitor s profile. In this manner visitor profiles can be kept consistent across a distributed computing environment.

An example of partitioning will now be described in more detail. In a local or non distributed non clustered environment the check for a live visitor can involve a query into the local cache of active visitors. However in a distributed e.g. clustered environment there can exist any number of visitor processor instances each with a portion of the live visitors e.g. who are currently visiting content pages . The portion of the live visitors each visitor processor manages can be deterministic based on a partitioning algorithm for consistent hashing. A partition in this case can be a slot that represents an equal subportion of the total range of capacity. The partitioning algorithm assumes N number of available partitions. Each visitor processor can be assigned a range of partitions based on the total number of visitor processors in the cluster. Then as a visitor identifier not necessarily the persistent identifier enters the load balancer a load balancer e.g. the load balancer of can calculate the partition to which that visitor can be assigned. This calculation can be a simple yet deterministic arithmetic modulus of the identifier s hash code also deterministic .

For example assume a cluster of four Visitor Processors. Each can manage one fourth of the partitions. Assume a total partition count of 100. In this case each Visitor Processor can be assigned 25 partitions as shown in Table 6 

A partition can be deterministically determined from a unique identifier using an equation such as the following 1 where x can be the visitor identifier h x can be a deterministic hash code algorithm which converts an identifer into a numerical value and N can be the number of visitor processors in the cluster.

With specific reference to at block an event is received by a target visitor processor. The target visitor processor may be selected based on an initial hash of a visitor identifier associated with the event. If no visitor identifier or persistent identifier are associated with the event the target visitor processor may be selected randomly or using another load balancing algorithm e.g. by the load balancer of .

At block the visitor processor checks to see if the visitor processing system has a live visitor in cache or in the database with the same visitor identifier. If not at block the visitor processor creates a new visitor e.g. visitor profile with an initial visitor identifier at block . From block the visitor processor determines at block whether the event contains a custom identifier such as a persistent identifier. If not the visitor processor can update the new visitor profile with information from the event at block and then end.

If the event does contain a custom identifier the visitor processor can save the visitor with the new custom or persistent identifier replacing or supplementing the initial visitor identifier at block . The visitor processor can then hash this persistent identifier and send the event to the target visitor processor based on the new hash at block assuming the hash results in a different partition than the original target visitor processor. This is done in an embodiment to ensure or attempt to ensure that future visits by the visitor can be sent to a single visitor processor partition for consistent hashing and consistent maintenance of a single unified visitor profile.

Thereafter the new visitor processor determines at block whether the visitor already exists in the new visitor processor. The visitor may already exist in this visitor processor if the visitor has supplied the same persistent identifier before. If not the process proceeds to blocks and block . Visitor stitching of the initial visitor created at block and the newly created visitor can occur at block in such a scenario. If the visitor already exists on the new visitor processor the process proceeds to block where the existing visitor profile is retrieved. It is then determined whether the visitor profile already has a persistent identifier at block and if so the visitor can continue to be processed by the new visitor processor at block e.g. by updating the visitor profile with the event as in block .

Returning again to the initial scenario of block if the visitor identifier does exist on the initial target visitor processor the existing visitor can be retrieved at block and the process can flow through the blocks discussed above according to the flow shown in .

Thus in certain embodiments a solution to ensuring or attempt to ensure that visitor stitching operates correctly in a distributed environment can be to forward the event that contains a persistent identifier to a correct visitor processor based on the partition derived by the persistent identifier. This forwarding can include as a payload the content of the live visitor represented by the originating visitor identifier. It may be tempting by a software developer to simply recognize the persistent identifier within the load balancer in addition to the standard visitor identifier and simply send the event to the correct visitor processor directly. But it should be noted that doing so might be less desirable in an embodiment as this would skip and incorrectly ignore any ongoing live information collected so far within the initial target visitor processor represented by the standard visitor identifier. Nevertheless such an approach can be used in other embodiments.

It can be desirable to ensure or attempt to ensure that the visitor stitching process works as expected in the case a visitor can be associated with more than one persistent identifier. Some or all of the above examples demonstrate the case of a single persistent identifier. When an additional persistent identifier is presented the visitor stitching process can extend and repeat the stitching process for every unique persistent identifier presented.

For example assume the visitor that was stitched on a single persistent identifier from the above example 

Next assume the visitor later returns for a fourth visit and during the visit the visitor presents a second identifier facebookid ABC 

In this case because the visitor stitching process can recognize the event field facebookid as a persistent identifer the visitor stitching process can occur again. However this process does not occur in an embodiment until after the event has been associated with the  acme email user acme.com  visitor. For example the facebookid field may not be considered until after the event has been fully processed and associated with the correct visitor. Then additional identifiers can be considered.

Further in order to correctly associate both persistent identifiers the newly generated visitor identifier can consider both persistent identifiers. Recall that in the single persistent identifier case the generated identifer resulted in  acme email user acme.com . Now in the case of multiple identifiers some or all of them can be considered. In this case yet another new identifier can be created by concatenating these identifiers as such 

Note that the order of these identifiers may be non random or instead may be and can be deterministic. This can be achieved by the order in which they were received as they coincidentally show here but instead may be concatenated in alphanumerical sort order for easier processing. This would result in the facebookid field being appended to the end of the email field.

The same visitor stitching process can then occur as in the above examples and can then result in the following in Table 8 

Note that Visitor 1a has now been updated with the correct replaced by field so that future events can be forwarded to the correct multi stitched visitor. Additionally the original stitched visitor  acme email user acme.com  has also been updated to reflect the further second stitching resulting in the visitor  acme email user acme.com acme facebookid ABC .

There can be many challenges associated with tracking multiple users that use or share common user computing devices. For example two or more people living in the same household may share the same desktop computer for web browsing. The two or more users may use the same account or profile on the user computing device such as an operating system account or profile. Moreover the two or more users may use the same web browser to visit the same content pages such as an electronic commerce site for example. As described herein existing techniques for user tracking may include using a web browser cookie for tracking a web user. However where two users use the same user computing device user account or profile on a computing device web browser or cookie for instance it may be difficult to distinguish between the two users because they use the same user computing device user account or profile on a computing device or browser or are associated with the same cookie.

Embodiments of the systems described herein can advantageously implement one or more visitor tearing processes to address some or all of the drawbacks identified above. Visitor tearing can include among other things one or more processes by which a single visitor may be distinguished as multiple visitors by using one or more identifiers or persistent identifiers. Visitor tearing can be performed by any of the systems described herein. For example the visitor processing system or tag management system or visitor processor can implement the visitor tearing processes described herein. For convenience the remainder of this disclosure will refer to the visitor tearing and related processes as being implemented by a tearing processing system or tearing processor although it should be understood that the shorthand references can refer to any of the systems or subsystems described such as the visitor processing systems or visitor processors.

As used herein with respect to visitor tearing in addition to having its ordinary meaning a visitor may refer to a user such as an individual person. A user may use multiple computing devices or browsers. Multiple users may use the same computing device or browser. As described herein in further detail a visitor may be associated with one or more visitor profiles. Similar to visitor stitching a visit may refer to a chronological sequence of events or session by a visitor or user. For example the visit can include some or all the sequenced set of events from the beginning of a visit until a pre determined period of inactivity has occurred. Again similar to visitor stitching events may include page views or navigation form input or attributes described herein such as events related to badges funnels sequences etc. . As previously mentioned once a time has passed such as a predefined time of twenty or thirty minutes without another page view or user event the visitor processing system can consider that visit concluded. Moreover time thresholds and other techniques described herein may be used to distinguish visits by different users or visitors using the same computing device or browsers.

As used herein with respect to visitor tearing in addition to having its ordinary meaning a persistent identifier may refer to any data associated with a visitor that survives a change in computing device account or profile of a computing device browser or cookie. Some example persistent identifiers include email addresses social networking identifiers and login credentials such as web property or application login usernames phone numbers mailing addresses etc. These persistent identifiers can have the unique characteristic of being the user s credentials for one or more websites or applications. Persistent identifiers can provide a much more consistent representation of a user than the content page specific identifiers or cookies that are received by the visitor processing system.

As used herein with respect to visitor tearing in addition to having its ordinary meaning a session may refer to a collection of events or data that may be associated with one or more visitors. A session may be based on a common attribute. Example common attributes that a session may be based on are common identifiers cookies visitor identifiers visitor profiles or some combination thereof.

As used herein with respect to visitor tearing in addition to having its ordinary meaning a session interruption may refer to any occurrence during a session that does not terminate the session. Some example session interruptions include the passage of time or a period of time without user interaction. Example occurrences that terminate a session and that are not session interruptions are for example a browser cookie cleanse or a user logout. For example cleaning of a browser s cache may remove cookies that are used by the tearing processing system which may end the session because a specific or particular user may no longer be able to be identified. Similarly if a user logs out of a content page or application and without there being a cookie identifier present or accessible then that occurrence would terminate the session because a specific or particular user may no longer be able to be identified.

Similar to the visitor stitching process that may be a real time or pseudo real time process the visitor tearing process may be a real time or pseudo real time process initiated at any time a persistent identifier is received. For example a persistent identifier can be a property that triggers the visitor tearing process. This special property can be referred to within the visitor tearing system and by the user interface as a multi channel visitor ID in some implementations.

Turning to a diagram of an example visiting tearing session is shown. Session includes Sections 1 6 a plurality of events or interaction data A H Session Interruptions 1 and 2 or associations A G. The time values shown in may not be intended to reflect any particular unit of time but rather can demonstrate relative time or the passage of time. Furthermore additional events may be associated with session such as but not limited to user navigations user selections page views etc.

At T 0 or time zero the tearing processing system may receive events or interaction data associated with a visitor. The interaction data may include Cookie 456 A which may be cookie data that identifies a particular browser or computing device. The tearing processing system may initiate a visitor profile based on the received or accessed cookie A. The tearing processing system may create a visitor profile using the process of for instance. The visitor profile may be associated with interaction data between T 0 and T 9. A portion of a session may be referred to herein as a section. Thus the time period T 0 and T 9 corresponds to Section 1. As shown the tearing processing system may associate the created visitor profile with an Anonymous visitor based on the accessed cookie A. For example cookie A may have never been processed by the tearing processing system and a new visitor profile may be created that does not have further identifying information for the respective visitor.

At T 10 a visitor may input Identifier 1 B which the tearing processing system may receive or access via interaction data. Identifier B may be a persistent identifier such as a user login credential like maryjohnson. Section 2 may correspond to the portion of the session including and following T 10. As shown the tearing processing system may further receive or access cookie C during Section 2. Cookie C and each of cookies D F and G may be the same cookie as cookie A or include the particular cookie identifier Cookie 456. As shown session may be associated with the same computing device or browser because Cookie 456 is received or accessed throughout session . In response to receiving or accessing identifier B the tearing processing system may execute one or more steps for associating identifiers or sections with one or more visitor profiles. For example the tearing processing system may associate Section 2 with a first visitor profile as shown by association B. The first visitor profile may include or be associated with Identifier 1 B. In some embodiments the tearing processing system may associate Identifier 1 with the first visitor profile using at least part of process of such as blocks and . Additionally or alternatively the tearing processing system may retroactively associate Section 1 with Visitor 1 or the first visitor profile as shown by association C. Retroactive association of a section with a visitor profile may remove the anonymous status or replace the current association of the respective session.

At T 20 Session Interruption 1 occurs during session . Session Interruption 1 may correspond to any occurrence that does not terminate session . For example Session Interruption 1 may be the passage of time such as two hours or several days. However Session Interruption 1 does not include a cookie cleanse or a cookie identifier cleanse because such an occurrence would terminate session .

Following Session Interruption 1 the tearing processing system may further receive or access cookie D. Thus as described herein the tearing processing system may associate Section 3 with Visitor 1 or the first visitor profile even though Session Interruption 1 occurred.

At T 50 the tearing processing system may receive or access Identifier 2 E. Identifier E may be a persistent identifier such as a user login credential like patrickjohnson. The tearing processing system may determine that a second visitor is present because of some property associated with the identifier E. For example a second visitor may be determined based identifier E Identifier 2 being different from identifier B Identifier 1 . Identification of additional visitors is further described in detail herein and with respect to . The tearing processing system may initiate a second visitor profile based on the received or accessed identifier E. The tearing processing system may then associate Section 4 with the second visitor profile. The association with the second visitor profile may occur even though the same cookie was received during Section 4 because of the determination by the tearing processing system that a second visitor was likely to be present.

At T 60 Session Interruption 2 occurs during session . Session Interruption 2 is similar to Session Interruption 1 in that Session Interruption 1 is an occurrence that does not terminate session .

Following Session Interruption 1 the tearing processing system may further receive or access cookie G. However during Section 5 an identifier may not be received or accessed. In some embodiments the tearing process system may associate Section 5 with Visitor 1 or the first visitor profile as a default association because of the received or accessed cookie G.

At T 80 the tearing processing system may receive or access Identifier 2 H. Identifier H may be the same as identifier E the user login credential patrickjohnson . Thus tearing processing system may once again determine that the second visitor is present because of some property associated with identifier E. For example identifier E Identifier 2 may be different from identifier B Identifier 1 and Identifier 1 is associated with the first visitor profile. Thus the tearing processing system may then associate Section 6 with the second visitor profile.

An example visitor tearing process will now be described with respect to . The example process shown in may be implemented by any of the tearing processing systems or tearing processors described herein or by any other computing device.

Turning to an example visitor tearing process is shown. At block a visitor visits a content page. At block a tearing processing system initiates a first visitor profile for the visitor. The first visitor profile may be created by the tearing processing system using the process of for instance.

At block the visitor supplies a first identifier. A first identifier may include for instance a persistent identifier. The tearing processing system may associate the first identifier with the first visitor profile. In some embodiments the tearing processing system may associate the first identifier with the first visitor profile using at least part of process of such as blocks and .

At block a visitor supplies a second identifier such as upon a subsequent visit by the visitor to the content page. The second identifier may include for instance a persistent identifier. At this point the visitor tearing system has received first and second identifiers where there is some pre existing association between the first and second identifiers. For example the first and second identifiers may both be associated with the same computing device user account user profile cookie or any other data that indicates a relation between the first and second identifiers. For example both first interaction data associated with the first identifier and second interaction data associated with the second identifier may include the same cookie identifier which may indicate a relation between the first and second identifier.

At block the tearing processing system determines whether there may be different visitors based on the first and second identifiers. For example the tearing processing system may analyze the first and second identifiers or data associated with the first and second identifiers to determine whether a second visitor is present or whether a second user profile should be created. In some embodiments a determination of whether there are different visitors may be based on an analysis of the first and second identifiers where the first and second identifiers are persistent identifiers. For example the tearing processing system may determine that there are different visitors if the first and second persistent identifiers are different. The tearing processing system may determine respective identifier types for the first and second persistent identifiers. If the first and second persistent identifiers have the same identifier type then the first and second persistent identifiers may be compared. For example both the first persistent identifier and the second persistent identifier may be associated with an email type of persistent identifier. Continuing with the example if the first persistent identifier is mary abc.com and the second persistent identifier is john abc.com then the tearing processing system may proceed to block because the first and second persistent identifiers are different. In another example the first persistent identifier may be associated with a login username and the second persistent identifier may be associated with a phone number persistent identifier thus the first and second persistent identifier may be of different persistent identifier types. In some embodiments where the first and second persistent identifiers are of different types process can end and the tearing processing system may process the second persistent identifier as described herein with respect to visitor stitching of multiple persistent identifiers such as the description with respect to Tables 7A 7B and 8.

In some embodiments the tearing processing system may determine that the first and second persistent identifiers are different even if their respective identifier types are different. Tearing processing system may for instance perform textual analysis or textual comparisons to determine whether persistent identifiers of different identifier types may be associated with the different visitors. For example the first persistent identifier may be john abc.com an email identifier type and the second persistent identifier may be mary7776 a login identifier type . Thus the tearing processing system may determine that there are two different visitors each associated with one of john abc.com and mary7776 using partial text matching or analysis techniques. In some embodiments further determinations of associations between persistent identifiers and visitors may be determined using visitor metadata. Visitor metadata may include purchased data or third party data regarding visitors or users such as data indicating emails or other information of particular visitors. The tearing processing system may use the visitor metadata to distinguish visitors using persistent identifiers.

In some embodiments the visitor processing system may determine that there are different visitors based on data or metadata associated with the first and second identifiers which may be accomplished for instance where the first and second identifiers are not persistent identifiers . The tearing processing system may analyze content visitor interaction data or other data associated with the first and second identifiers to infer multiple visitors. For example the browsing of history of a particular user such as interaction data associated with sporting goods or particular types of clothing may uniquely identify the user. Moreover browsing history or content site interaction may be associated with particular time periods of the day or time patterns. For example the tearing processing system may differentiate day time interaction data from evening interaction data which may be indicative of separate visitor profiles. For example the same computing device may be used by a particular household member during the day and a different household member during the evening. Thus in some embodiments the tearing processing system may determine a likelihood that there are different visitors without the use of persistent identifiers.

At block the tearing processing system initiates a second visitor profile. The second visitor profile may be associated with the second identifier. The tearing processing system may initiate or create the second visitor profile by using at least part of the process of such as blocks and .

At block the tearing processing system adds visitor data or visitor interaction data to the second visitor profile. The tearing processing system may log events or access recorded events for both the first and second visitor profiles. The tearing processing system may access respective timestamps for events or other event interaction data. The tearing processing system may further distinguish events associated with the visitor or multiple visitors based on the recorded time or timestamp when the second identifier was used. Thus the tearing processing system may process event data to distinguish between event data associated with the first or second visitor profiles respectively based on the recorded timestamps. As previously mentioned the tearing processing system may use a time threshold to determine or segregate events or visitor interaction data. In some embodiments the tearing processing system may further separate visitor data or visitor interaction data between the created first and second visitor profiles. For example some visitor interaction data may be removed from the first visitor profile.

In some embodiments the second visitor profile may be associated with a second visitor. Alternatively or additionally the tearing processing system may associate multiple visitor profiles for the same user or visitor. For example the tearing processing system may maintain a master visitor profile associated with multiple identifiers or visitors and visitor interaction data from multiple visits such as the first and second visit. The tearing processing system may further maintain individual visitor profiles such as a first and second visitor profile along with the master visitor profile.

The following example illustrates the creation of two visitor profiles based on the process of . In Table 9 below assume the following are known timestamp values shown may not be intended to reflect any particular unit of time but rather can demonstrate relative time or the passage of time 

As shown in Table 9 the visitor ID is an example of the visitor identifier created with respect to the process of . For convenience visitors are also referred to by his or her visitor ID such as Visitor 11. Moreover as shown by the persistent identifier provided at event timestamp 5 the Visitor 11 profile is updated by the persistent identifier mary acmecorp.com. For example the visitor identifier 11 may be replaced by the identifier  email mary acmecorp.com . The Visitor 11 profile may be updated by the tearing processing system using at least part of process of such as blocks and .

When event timestamp 120 is received the tearing processing system can invoke a visitor tearing process which may include one or more code modules executing as a local code base within the tearing processing system . This tearing process can add or separate events of Visitor  email mary acmecorp.com  under different persistent identifiers or visitor profiles. The Visitor  email mary acmecorp.com  profile may be updated by the tearing processing system using at least part of process of such as block . This process could result in visitor profiles such as the following shown in Table 10 

As shown in Table 10 a second visitor profile is created. The tearing process can separate the visit history and reprocess each event of each visit as though it was received for the first time in the way that any event can be processed by the visitor processing system. This can ensure or attempt to ensure that visitor attributes reflect the entirety of the history of events for respective visitor profiles. Separating visits can be done for instance by adding events to another profile other than the original profile. Optionally the tearing processing system may move or copy events from one profile to another while removing the events from the original profile. For example the tearing processing system may move or copy events from the second visit of Table 9 to a first visit of Visitor  email john acmecorp.com . As discussed herein the first visit of Visitor  email john acmecorp.com  may be distinguished from the first visit of Visitor  email mary acmecorp.com  based at least in part on a time difference between event timestamp 10 and event timestamp 100 exceeding a predetermined time threshold or the differences in time between event timestamps 100 110 and 120 being within a predetermined time threshold. Also as shown in Table 10 both Visitor  email mary acmecorp.com  and Visitor  email john acmecorp.com  may be associated with Cookie 123 and therefore may be associated with the same computing device or cookie. Advantageously the tearing techniques described herein may enable the tearing processing system to distinguish between two visitor profiles using the same computing device or associated with the same cookie.

Alternatively or additionally other techniques may be used by the tearing processing system to track the likelihood that visitor profiles may be associated with more than one user or visitor. Upon receiving events or data that are indicative of multiple visitors associated with the same visitor profile the tearing processing system may generate indicators that particular visitor profiles may be associated with multiple visitors. For example instead of separating data among various visitor profiles or removing data from visitor profiles the visitor processing system may maintain duplicative data items among two or more visitor profiles while simultaneously storing data that indicates that the respective visitor profiles may be associated with multiple visitors. Thus visitor profiles may include data indicating a likelihood or confidence level that the visitor profile is associated with multiple visitors.

The techniques for visitor tearing and stitching may be used together such as sequentially or at different times or independently. The visitor tearing examples shown in Tables 9 and 10 did not use visitor stitching. However the example shown in Tables 11 and 12 below illustrates the use of visitor tearing and stitching by a visitor processing system. Tables 9 and 10 may be associated with an example where two distinct users use the same computing device in a household such as a desktop. Building on the example from Tables 9 and 10 consider a new visit by a new cookie identifier 

As shown in Table 11 there is a new cookie Cookie 456 which is different from the cookie in Tables 9 and 10 Cookie 123. Thus in the present example Cookie 456 may correspond to a second computing device such as a smartphone. When event timestamp 315 is received the visitor processing system can invoke a visitor stitching process code module which can merge the two visitor profiles  email mary acmecorp.com  and 12 as shown in Table 12 

Thus the visitor processing system may execute the visitor stitching process as described herein to merge multiple visitor profiles such as visitor profiles corresponding to multiple computing devices. As previously mentioned in this example a desktop may correspond to Cookie 123 being used by two users and a smart phone may correspond to Cookie 456 which was being used by one of the two users. More specifically the visitor stitching process may merge Visitor 12 with Visitor  email mary acmecorp.com . For example the visitor stitching process can check to see if there is a live visitor in cache or a data repository with the same persistent identifier.

As described herein the merge process can reconstruct the visit history and reprocess each event of each visit as though it was received for the first time in the way that any event can be processed by the visitor processing system. Reconstructing visits can be done by combining some or all overlapping visits into a single visit and by sorting the events in chronological order. Thus visitor profiles associated with the same computing device may be separated or created using visitor tearing and one of the created visitor profiles may be updated via visitor stitching that may be initiated by user interaction with a different computing device .

Many other variations than those described herein will be apparent from this disclosure. For example depending on the embodiment certain acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially. In addition different tasks or processes can be performed by different machines or computing systems that can function together.

The various illustrative logical blocks modules and algorithm steps described in connection with the embodiments disclosed herein can be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. The described functionality can be implemented in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.

The various illustrative logical blocks and modules described in connection with the embodiments disclosed herein can be implemented or performed by a machine such as a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be a controller microcontroller or state machine combinations of the same or the like. A processor can include electrical circuitry configured to process computer executable instructions. In another embodiment a processor includes an FPGA or other programmable device that performs logic operations without processing computer executable instructions. A processor can also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. A computing environment can include any type of computer system including but not limited to a computer system based on a microprocessor a mainframe computer a digital signal processor a portable computing device a device controller or a computational engine within an appliance to name a few.

The steps of a method process or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module stored in one or more memory devices and executed by one or more processors or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of non transitory computer readable storage medium media or physical computer storage known in the art. An example storage medium can be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The storage medium can be volatile or nonvolatile. The processor and the storage medium can reside in an ASIC.

Conditional language used herein such as among others can might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements or states. Thus such conditional language is not generally intended to imply that features elements or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements or states are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. Further the term each as used herein in addition to having its ordinary meaning can mean any subset of a set of elements to which the term each is applied.

Disjunctive language such as the phrase at least one of X Y and Z unless specifically stated otherwise is to be understood with the context as used in general to convey that an item term etc. may be either X Y or Z or a combination thereof. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of X at least one of Y and at least one of Z to each be present.

Unless otherwise explicitly stated articles such as a or an should generally be interpreted to include one or more described items. Accordingly phrases such as a device configured to are intended to include one or more recited devices. Such one or more recited devices can also be collectively configured to carry out the stated recitations. For example a processor configured to carry out recitations A B and C can include a first processor configured to carry out recitation A working in conjunction with a second processor configured to carry out recitations B and C.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As will be recognized certain embodiments of the inventions described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others.

