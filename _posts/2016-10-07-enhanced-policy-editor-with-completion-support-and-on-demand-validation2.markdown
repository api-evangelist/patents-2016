---

title: Enhanced policy editor with completion support and on demand validation
abstract: In an approach to providing completion support and on demand validation in a web tool that operates on live resources, one or more computer processors create one or more lists of content, where the one or more lists of content include one or more references to one or more runtime objects. The one or more computer processors parse the one or more lists of content. The one or more computer processors populate one or more lists of one or more choices with the parsed one or more lists of content. The one or more computer processors create one or more callbacks for one or more runtime objects referenced by the one or more lists of one or more choices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600516&OS=09600516&RS=09600516
owner: International Business Machines Corporation
number: 09600516
owner_city: Armonk
owner_country: US
publication_date: 20161007
---
The present invention relates generally to the field of software development tools and more particularly to an enhanced policy editor with completion support and on demand validation.

An integrated development environment IDE is a software application that provides comprehensive facilities to computer programmers for software development. An IDE may consist of a source code editor build automation tools and a debugger. IDEs may also include intelligent code completion. IDEs are often designed to maximize programmer productivity by providing tight knit components with similar user interfaces. IDEs present a single program in which all development is done.

In computer programming a callback is a piece of executable code that is passed as an argument to other code which is expected to call back execute the argument at some convenient time. The invocation may be immediate as in a synchronous callback or it may happen at a later time as in an asynchronous callback. Callbacks may be used to program asynchronous applications in windowing systems. The application supplies a reference to a specific custom callback function for the operating system to call which then calls this application specific function in response to events like mouse clicks or key presses. Callbacks can be used to notify a client of a web service that an event has occurred. When defining a callback a user is defining a message that the web service will send to the client to notify the client of an event that has occurred in the user s web service or in an enterprise system.

Representational state transfer REST is the software architectural style of the World Wide Web. REST gives a coordinated set of constraints to the design of components in a distributed hypermedia system that can lead to a higher performing and more maintainable architecture. REST interfaces with external systems using resources identified by a Uniform Resource Identifier URI which can be operated upon using standard Hypertext Transfer Protocol HTTP verbs.

Embodiments of the present invention disclose a method a computer program product and a system for providing completion support and on demand validation in a web tool that operates on live resources. The computer program product may include program instructions to create one or more lists of content where the one or more lists of content include one or more references to one or more runtime objects and where the content in the one or more lists of content includes one or more elements of a uniform resource identifier. The program instructions parse the one or more lists of content where parsing the one or more lists of content includes determining a name of at least one of the one or more runtime objects. The program instructions populate one or more lists of one or more choices with the parsed one or more lists of content. The program instructions create one or more callbacks for one or more runtime objects referenced by the one or more lists of one or more choices. The program instructions display the one or more lists of one or more choices. The program instructions build a dependency tree that includes at least one of the one or more runtime objects referenced by the one or more lists of content. The program instructions receive a notification of a change to one or more of the referenced one or more runtime objects where receiving a notification of a change to one or more of the referenced one or more runtime objects results from creation of the one or more callbacks. The program instructions run a validation against the one or more changed referenced one or more runtime objects. The program instructions determine whether one or more of the one or more changed referenced one or more runtime objects is invalid. In response to determining one or more of the one or more changed referenced one or more runtime objects is invalid the program instructions mark the invalid changed referenced one or more runtime objects. The program instructions output results of the validation. The program instructions apply one or more types of one or more filters to the one or more lists of content wherein one or more types of one or more filters includes at least one of a type filter and a predicate filter.

An Integrated Development Environment IDE includes many useful tools for software development including automatic builds quick fix and content assist. For example when a developer edits a Java class the content assist function can inform the developer of a list of methods that a certain object has based on syntax and language rules. As web tools become more prevalent software administrators may perform increasingly complex tasks such as defining and attaching policies to various objects instantiating templates and performing configuration tasks to deploy simple solutions. Challenges exist for creating an IDE like experience for the user of web tools as the web tools operate on live resources that may become unavailable or whose properties may change at any time. Embodiments of the present invention recognize that efficiency may be gained by providing a web tool set to a software administrator that includes IDE like functions such as completion support e.g. content assist and on demand validation. Embodiments of the present invention may also recognize that an improved web tool set may reduce servicing costs by avoiding build and lifecycle problems that may be difficult to catch and debug. Implementation of embodiments of the invention may take a variety of forms and exemplary implementation details are discussed subsequently with reference to the Figures.

Distributed data processing environment includes client computing device and server computer interconnected over network . Network can be for example a telecommunications network a local area network LAN a wide area network WAN such as the Internet or a combination of the three and can include wired wireless or fiber optic connections. Network can include one or more wired and or wireless networks that are capable of receiving and transmitting data voice and or video signals including multimedia signals that include voice data and video information. In general network can be any combination of connections and protocols that will support communications between client computing device server computer and other computing devices not shown within distributed data processing environment .

Client computing device can be a laptop computer a tablet computer a smart phone or any programmable electronic device capable of communicating with various components and devices within distributed data processing environment via network . In general client computing device represents any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with other computing devices not shown within distributed data processing environment via a network such as network . Client computing device includes web user interface .

Web user interface includes policy editor user interface . In one embodiment web user interface and policy editor user interface may each be a graphical user interface GUI or a web user interface WUI and can display text documents web browser windows user options application interfaces and instructions for operation and include the information such as graphic text and sound that a program presents to a user and the control sequences the user employs to control the program. In another embodiment web user interface and policy editor user interface may also each be mobile application software that provides an interface for a user of client computing device with server computer . Mobile application software or an app is a computer program designed to run on smart phones tablet computers and other mobile devices. Web user interface enables a user of client computing device to perform configuration tasks related to one or more applications on server computer . In one embodiment web user interface may be viewed using a web browser. In one embodiment policy editor user interface is a task focused user interface that enables a user of client computing device to edit policies in a simple form such as editing a file or document and its contents. Web user interface also includes enhanced policy editor .

Enhanced policy editor is a web tool for software administrators that enables an IDE like experience for editing resources such as a policy that reference dynamic objects that can change state at any time specifically by providing content assist via completion support as well as on demand validation. In another embodiment a user may use enhanced policy editor to edit other types of documents that reference live resources identified via a uniform resource identifier URI such as an application that references components via URIs. As a user of client computing device creates a policy for a web application such as web application enhanced policy editor creates a list of content for a policy definition using representational state transfer REST application programming interface API calls. Enhanced policy editor parses the content retrieved by the REST API calls and populates lists of choices for the policy definition. Enhanced policy editor may apply type or predicate filtering to the content before populating a list of choices. Enhanced policy editor sets up callbacks for runtime objects that the policy references. Enhanced policy editor also builds a dependency analysis tree for each runtime object. Once a policy built with enhanced policy editor is in place or while a user is editing a policy built using enhanced policy editor enhanced policy editor can receive a notification of a change of one or more of the runtime objects referenced by the policy. Enhanced policy editor then runs a validation against the affected objects. If any of the objects have become invalid due to the change enhanced policy editor marks the objects as invalid and outputs the results of the validation. In the depicted embodiment enhanced policy editor includes components that perform the various functions within enhanced policy editor . In the embodiment enhanced policy editor includes policy editor component callback handler component and validation component . In another embodiment enhanced policy editor is a fully integrated tool that includes the functions of the previously listed components but the components are not individual entities. Enhanced policy editor is depicted and described in further detail with respect to and .

Policy editor component is responsible for performing REST calls to get the deployed artifacts to a server computer not shown within distributed data processing environment that a user may want to include in a policy. Each time a user initiates a content assist function for example by pressing Ctrl space on a keyboard associated with client computing device policy editor component issues a REST call that handles responses to populate a list of available options for the user.

Callback handler component performs two functions. While the user is creating or editing a policy callback handler component sets up listeners to notifications that may be received from server computer . For example if a policy references a particular resource callback handler component monitors for any notifications that may be relevant to the resource such as the resource being changed or unavailable. In addition when enhanced policy editor receives a notification relevant to a resource referenced by a policy callback handler component identifies the notification context i.e. determines to which object or scope the notification applies. Then callback handler component determines whether any valid callbacks exist that may be associated with the notification and if so then callback handler component runs one or more callback functions that resolve the receipt of the notification.

Validation component is the validation that enhanced policy editor runs as a result of a response to a callback. Validation component may run REST calls to get the latest state of the resource in question and then visually display any errors via web user interface .

In one embodiment policy editor component callback handler component and validation component exist within one or more Javascript libraries. The three components each are an entity that underlies policy editor user interface and not explicitly units of function with which the user interacts.

Server computer can be a standalone computing device a management server a web server a mobile computing device or any other electronic device or computing system capable of receiving sending and processing data. In other embodiments server computer can represent a server computing system utilizing multiple computers as a server system such as in a cloud computing environment. In another embodiment server computer can be a laptop computer a tablet computer a netbook computer a personal computer PC a desktop computer a personal digital assistant PDA a smart phone or any programmable electronic device capable of communicating with client computing device and other computing devices not shown within distributed data processing environment via network . In another embodiment server computer represents a computing system utilizing clustered computers and components e.g. database server computers application server computers etc. that act as a single pool of seamless resources when accessed within distributed data processing environment . Server computer includes web application application runtime and persistence store .

Web application is one of a plurality of software applications running on server computer that may be edited or configured by a software administrator for example a user of client computing device . In the depicted embodiment web application runs on server computer and a user of client computing device can edit a policy of web application via web user interface . Web application includes three components REST API policy manager and subscription manager .

REST API acts as a gateway for policy editor user interface to interface with web application . Web application exposes REST API to client computing device . REST API provides a callable interface to which operations can be performed on server computer which may be based on a URI on which REST API operates. REST API may for example save a new or update an existing policy such that the policy is persisted from the definition in web user interface to a permanent store such as persistence store . REST API may interact with policy manager or subscription manager . In addition REST API may create read update and or delete a policy.

Policy manager is a component that responds to REST calls by appropriately invoking an application runtime environment such as application runtime . For example if web application receives a request to update an existing policy then policy manager may validate the content of the policy document on server computer before passing the request to application runtime to handle.

Subscription manager initiates notifications to one or more subscribed client devices such as web user interface on client computing device regarding changes in objects or resources referenced by a policy. For example if a resource becomes unavailable subscription manager issues a notification to client computing device via web user interface . Subscription manager formulates the notification content and sends a notification with that content to client computing device . In turn the notification initiates enhanced policy editor via callback handler component . Subscription manager knows a list of one or more client devices that are interested in the affected resource based on open connections to the devices across network and uses the connection to send the notification.

Application runtime is a generic runtime environment for web application . Application runtime has responsibilities that may include setting up one or more connections to a database that has stored policy definitions such as persistence store . Additional responsibilities may include retrieving and storing the definitions based on invocation from policy manager . Application runtime may also be responsible for enforcing the policies. Application runtime runs the applications for which the user edits policies.

In the depicted embodiment persistence store resides on server computer . In another embodiment persistence store may reside elsewhere within distributed data processing environment provided web application has access to persistence store . Persistence store may be a database i.e. an organized collection of data. Persistence store can be implemented with any type of storage device capable of storing data and configuration files that can be accessed and utilized by server computer such as a database server a hard disk drive or a flash memory. Persistence store stores policy definitions supplied by a user of client computing device via policy editor user interface .

As a user of client computing device such as a software administrator creates or edits a policy associated with an application or program written by a software developer enhanced policy editor creates a list of content using existing REST API calls step . For example enhanced policy editor may use a GET call to interrogate and retrieve valid components included in a server system. Enhanced policy editor makes REST calls to determine the referenced resources under a server and at each point.

Enhanced policy editor parses the content and populates lists of choices step . Enhanced policy editor uses the created list of content to provide content assist to the user that offers valid choices for various policy edits of URI sections. Enhanced policy editor may parse the content to sort out just the name of the resource since the user may not be interested in other details associated with the resource that may have come back with the REST call such as the date the resource was created the date the resource was last modified the state of the resource etc. Enhanced policy editor may apply filtering to the parsed content resulting from the REST calls. For example enhanced policy editor may apply one or more of type filtering or predicate filtering as would be recognized by one skilled in the art. In an example of type filtering enhanced policy editor may show only applications. In an example of predicate filtering of applications enhanced policy editor may show only applications that are currently running or applications without errors. The category of filtering may be user configured or enhanced policy editor may infer the filter category from other parts of the policy definition. In one embodiment enhanced policy editor parses the content and populates lists of choices via policy editor component . After populating one or more lists of one or more choices enhanced policy editor displays the one or more lists to the user.

Enhanced policy editor sets up callbacks for runtime objects or their containers that are referenced in the policy resources step . For each object referenced by the policy enhanced policy editor creates a callback such that if the object changes for example becomes unavailable or obsolete enhanced policy editor receives a notification from subscription manager . In one embodiment enhanced policy editor receives a notification from subscription manager via callback handler component .

Enhanced policy editor invokes policy manager via REST API to build a dependency analysis tree for each runtime object referenced by the policy step . For example for each application enhanced policy editor builds a list of objects e.g. policies that may be affected by changes to that application. Enhanced policy editor uses the dependency tree to provide notifications for changes in objects remotely associated with a particular policy to avoid for example referencing a URI that is no longer available.

Enhanced policy editor receives a notification of a change step . After a user creates a policy or while a user edits a policy if any objects or resources associated with the policy have changed subscription manager notifies enhanced policy editor . In the embodiment depicted in on receipt of the notification enhanced policy editor delegates to callback handler component . Changes to objects or resources may include unavailability such as a selected server being down. Changes to objects or resources may also include a resource becoming obsolete or deleted. In addition changes to objects or resources may include movement of the object or resource to a different location. In one embodiment the received notification includes the information regarding what has changed. In another embodiment the received notification simply notes a change has occurred and enhanced policy editor may issue a REST call to determine which resource has changed or how the resource has changed.

Enhanced policy editor runs a validation against affected objects step . In response to receiving notification of a change enhanced policy editor runs a validation against affected objects from the dependency tree as discussed with respect to . In the embodiment depicted in enhanced policy editor runs the validation using validation component . Running the validation in this manner offers the user a compile like experience for web defined resources.

Enhanced policy editor determines whether any objects are invalid decision block . Enhanced policy editor analyzes the results of the validation to determine whether any objects referenced by the policy have become invalid due to the changes captured in the notification. If enhanced policy editor determines any objects are invalid yes branch decision block then enhanced policy editor marks the invalid objects step . Enhanced policy editor marks the invalid objects with errors or warnings.

Responsive to marking the invalid objects or if enhanced policy editor determines no objects are invalid no branch decision block then enhanced policy editor outputs the results of the validation step . In an embodiment where the validation was run as a user is editing a policy enhanced policy editor may output the results as a pop up box on a display associated with client computing device via policy editor user interface . In an embodiment where the validation was run at a time when the user was not editing the policy enhanced policy editor may output the results in an email or text message to the user of client computing device via policy editor user interface . In a further embodiment the user may prompt enhanced policy editor via policy editor user interface to determine whether any objects have become invalid since the last time the user edited the policy. In the described embodiments the notification may include details of the changes or a list of one or more objects that have become invalid due to the changes. In one embodiment enhanced policy editor may offer suggestions for replacements of objects that have become obsolete or that were deleted. If enhanced policy editor did not find any invalid objects then enhanced policy editor may provide a message stating the validation was run and no invalid objects were found. In one embodiment the message may include a timestamp for when enhanced policy editor ran the validation.

In an example of an operation of enhanced policy editor a user creates or edits a policy and uses enhanced policy editor s feature of completion support i.e. content assist to fill in URI values with valid selections. The user types in a URI such as host 1234 root where 1234 is a sample port number and then invokes enhanced policy editor to get a list of choices for the completion of the URI. In one embodiment the user invokes enhanced policy editor by pressing Ctrl space on the keyboard associated with client computing device . In another embodiment the user may invoke enhanced policy editor by tapping a touch screen associated with client computing device . In one embodiment enhanced policy editor displays the list of choices as a numbered or bulleted list in a popup window. In another embodiment enhanced policy editor may display the list of choices as a text string following the URI fragment from which the user can click or tap to make a selection.

In response to the user invoking enhanced policy editor enhanced policy editor invokes one or more REST APIs such as REST API to determine valid choices for completing the URI fragment that are available at the time the user invoked enhanced policy editor . Enhanced policy editor receives the results of the REST calls parses the received content and displays a list of valid choices. In the example enhanced policy editor displays the choices servers policy data. The user chooses servers. At the time the user makes the choice enhanced policy editor sets up a callback on the root that will provide notifications of changes to servers. When the user chooses servers enhanced policy editor displays a list of valid choices.

In the example enhanced policy editor displays the choices server1 server2. The user chooses server1. At the time the user makes the choice enhanced policy editor sets up a callback on the root that will provide notifications of changes to server1. When the user chooses server1 enhanced policy editor displays a list of valid choices.

In the example enhanced policy editor displays the choices applications services databases libraries. The user chooses applications. At the time the user makes the choice enhanced policy editor sets up a callback on the root that will provide notifications of changes to applications.

Thus the content assist function of enhanced policy editor provides lists of valid choices by invoking REST API calls and the on demand validation function of enhanced policy editor sets up callbacks for each object in which the user registers an interest which will notify the user when a change is detected. In one embodiment enhanced policy editor issues a REST API call to populate a list of choices for just the next element of the final URI and waits for a user prompt to provide additional choices. In another embodiment enhanced policy editor issues one or more REST API calls to populate a list of choices for the next element of the URI as soon as the user has made a choice. In a further embodiment enhanced policy editor may request a full hierarchy of choices by using a depth parameter and filter the hierarchy accordingly showing the choices at each step enabling enhanced policy editor to handle a single network request while requiring additional filtering by policy editor component .

Client computing device can include processor s cache memory persistent storage communications unit input output I O interface s and communications fabric . Communications fabric provides communications between cache memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM . In general memory can include any suitable volatile or non volatile computer readable storage media. Cache is a fast memory that enhances the performance of processor s by holding recently accessed data and data near recently accessed data from memory .

Program instructions and data used to practice embodiments of the present invention e.g. web user interface policy editor user interface enhanced policy editor policy editor component callback handler component and validation component are stored in persistent storage for execution and or access by one or more of the respective processor s of client computing device via memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device a read only memory ROM an erasable programmable read only memory EPROM a flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including resources of server computer . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Web user interface policy editor user interface enhanced policy editor policy editor component callback handler component and validation component may be downloaded to persistent storage of client computing device through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to client computing device . For example I O interface s may provide a connection to external device s such as a keyboard a keypad a touch screen a microphone a digital camera and or some other suitable input device. External device s can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. web user interface policy editor user interface enhanced policy editor policy editor component callback handler component and validation component on client computing device can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

Display provides a mechanism to display data to a user and may be for example a computer monitor. Display can also function as a touchscreen such as a display of a tablet computer.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be any tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer a special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module a segment or a portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the blocks may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

