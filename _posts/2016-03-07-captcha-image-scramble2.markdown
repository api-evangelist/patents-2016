---

title: CAPTCHA image scramble
abstract: In one embodiment, a client computing device receives information regarding a Completely Automated Public Turing Test to Tell Computers and Humans Apart (CAPTCHA). The CAPTCHA includes an image file, a challenge, and code that is executable by a web browser to unscramble the received image file. The code includes instructions to divide the received image file into image sections, each image section having a unique identifier and grouped into either a first set or a second set. The code further contains instructions to transpose each image section in the first set into a new position, creating a new image. A web browser of the client computing device executes the code to create a second image from the received image file. The second image and the challenge are presented to a user of the client computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635019&OS=09635019&RS=09635019
owner: Facebook, Inc.
number: 09635019
owner_city: Menlo Park
owner_country: US
publication_date: 20160307
---
This application is a continuation under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 532 665 filed 25 Jun. 2012 which is a continuation under 35 U.S.C. 120 of U.S. patent application Ser. No. 12 720 470 filed 09 Mar. 2010 now U.S. Pat. No. 8 209 743.

The present disclosure generally relates to scrambling a CAPTCHA image prior to transmitting it to a computing device in order to prevent malicious software from tricking a human user of the computer device into unwittingly providing a correct CAPTCHA response.

A CAPTCHA or Captcha is a type of challenge response test used to determine whether the response is generated by a non human entity e.g. a computer or a piece of software executing on a computer . The test is based on the assumption that a human s ability in pattern recognition is much superior than that of a machine s at least for the present. In a typical scenario a CAPTCHA test involves presenting one or more images to a testee i.e. the person being tested together with a challenge i.e. a question . The challenge is related to the images presented to the testee and generally requires the testee to recognize some form of pattern in the images. The testee needs to provide a correct response to the challenge in order to pass the test.

CAPTCHAs are often used to prevent automated computer software from performing actions that degrade the quality of service of a given system and or perform unauthorized actions. When constructing CAPTCHA tests several points often need to be considered. First the challenges should be constructed such that current computer software is unable to determine the responses accurately while most humans can. Second there needs to be enough instances of CAPTCHA tests such that human CAPTCHA solvers employed by spammers are unable to enumerate them all.

The present disclosure generally relates to scrambling a CAPTCHA image prior to transmitting it to a computing device in order to prevent malicious software from tricking a human user of the computer device into unwittingly providing a correct CAPTCHA response.

In particular embodiments at a first computing device accessing a first image of a CAPTCHA wherein the CAPTCHA comprises the first image a challenge based on the first image and a correct response based on the first image constructing a second image by scrambling the first image comprising cutting the first image into a plurality of image sections recording positions of the image sections in the first image and randomly rearranging the image sections to construct the second image generating web browser executable code for unscrambling the second image back to the first image wherein the web browser executable code indicates for each one of the image sections in the second image the position of the image section in the first image and transmitting the second image and the web browser executable code to a second computing device.

In particular embodiments at a second computing device receiving a second image and web browser executable code from a first computing device wherein the second image is constructed by randomly rearranging a plurality of image sections of a first image of a CAPTCHA the CAPTCHA comprises the first image a challenge based on the first image and a correct response based on the first image and the web browser executable code indicates for each one of the image sections in the second image a position of the image section in the first image and displaying the first image based on the second image and the web browser executable code.

These and other features aspects and advantages of the disclosure are described in more detail below in the detailed description and in conjunction with the following figures.

The present disclosure is now described in detail with reference to a few embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It is apparent however to one skilled in the art that the present disclosure may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order not to unnecessarily obscure the present disclosure. In addition while the disclosure is described in conjunction with the particular embodiments it should be understood that this description is not intended to limit the disclosure to the described embodiments. To the contrary the description is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the disclosure as defined by the appended claims.

CAPTCHAs are used to distinguish a human from a non human entity such as computer software or bots because a human s ability in pattern recognition is much superior than that of a machine s. In general a CAPTCHA test may include an image a challenge and a correct response. The image and the challenge are presented to a testee and the testee passes the test by providing the correct response.

CAPTCHAs are often used to prevent malicious software malware from harming computer systems. In a typical scenario suppose a computer system allows its human users to perform certain actions e.g. signing up for user accounts posting messages or establishing social connections with other users . To ensure that the actions are really performed by the human users the computer system may issue a CAPTCHA test to an entity when the entity wishes to perform a particular action. The entity is required to provide the correct CAPTCHA response in order to proceed further. The computer system completely performs the action only when the correct response to the CAPTCHA test is provided by the entity. When the entity is not a human user such as a piece of malware because the malware is unable to automatically determine the correct CAPTCHA response from processing the CAPTCHA image the malware is unable to provide the correct CAPTCHA response to the computer system. As a result the requested action is not performed and the malware is prevented from causing harm to the computer system.

Malware continuously finds new means to get around computer security. In the case of CAPTCHAs for example suppose a piece of malware has infected a client device and is executing on the client device. The malware attempts to perform an action on a server with which the client device is connected via a network e.g. the Internet without the knowledge or consent of the human user of the client device. The server issues a CAPTCHA test to the client device and the image and the challenge of the CAPTCHA test are included for example in a web page so that they may be displayed in a web browser executing on the client device. Since malware is unable to automatically determine a correct response from processing an image of a CAPTCHA test it may find a way to trick a human user into providing the correct response and then use that response to pass the CAPTCHA test. For example suppose a piece of malware wants to perform an action on a computer system or cause a computer system to perform an action. As a part of the security measure the computer system issues a CAPTCHA test. The malware is unable to determine the correct response on its own. Thus it may trick a human user into giving the correct response. The malware may use a pop up window to show the CAPTCHA image to the human user together with a message asking the human user to provide the correct CAPTCHA response. To give additional incentive the malware may in the message falsely state that unless the correct CAPTCHA response is provided something undesirable may occur to the human user s computer system. The human user believing the message to be legitimate responds to the message by providing the correct CAPTCHA response. The malware may then use the correct CAPTCHA response provided by the human user to get around the security measure of the computer system and completes the action.

To address this issue particular embodiments may scramble the image of a CAPTCHA test before transmitting it to a computer system. This way even if a piece of malware tricks a human user into unwittingly providing a response to the CAPTCHA test because the CAPTCHA image has been scrambled and the malware may not be able to unscramble it the response provided by the human user is given based on the scrambled assuming the user is able to perceive anything in the scrambled version of the CAPTCHA image incorrect CAPTCHA image not the original correct CAPTCHA image and therefore is not the correct response to the CAPTCHA test. Thus the malware cannot pass the CAPTCHA test using this incorrect response.

At the server particular embodiments may cut a first image into a random number of sections as illustrated in step . This first image is the original correct image that is used to construct a CAPTCHA test. That is a CAPTCHA test which includes the first image a challenge and a correct response has been constructed and the challenge and the correct response of the CAPTCHA test are based on this first image. The first image may be cut horizontally or vertically or both and the individual sections may have the same or different dimensions. illustrates an example CAPTCHA image . Let CAPTCHA image be an example of the first image. CAPTCHA image may be a bit map a JPEG or any other suitable image file format. In CAPTCHA image is cut into six sections vertically again as an example. Particular embodiment may assign a unique identifier e.g. a numerical identifier to each section.

Particular embodiments may construct a second image by randomly rearranging the sections of the first image as illustrated in step . The second image may have the same or different number of sections as the first image. In particular embodiments the second image may have the same dimension i.e. width and height as the first image. illustrates an example image obtained by randomly rearranging the six sections of CAPTCHA image . In this example the six sections are arranged as the sixth section followed by the first section followed by the fifth section followed by the third section followed by the second section and followed by the fourth section. When constructing the second image particular embodiments may insert additional image sections not belonging to the first image into the second image or particular embodiments may repeat some of the image sections of the first image in the second image. For example image section may be included twice or three times in the second image.

Cascading Style Sheets CSS is a style sheet language used to describe the presentation semantics e.g. the look and format of a document written in a markup language. CSS is commonly used to style web pages written in Hyper Text Markup Language HTML and Extensible Hyper Text Markup Language XHTML . In particular CSS includes functionalities that support the formatting e.g. alignment of images. Particular embodiments may take advantage of these CSS functionalities and construct CSS code to unscramble the second image back to the first image correctly when it is display in a web browser as illustrated in step .

When the first image is cut into multiple sections each image section is assigned a unique identifier. These identifiers may be used to identify the individual image sections in the CSS and HTML code. When randomly rearranging the image sections to construct the second image particular embodiments may record the original positions of the image sections in the first image. Using as an example the first section in image is originally the sixth section in image image section the second section in image is originally the first section in image image section the third section in image is originally the fifth section in image image section the fourth section in image is originally the third section in image image section the fifth section in image is originally the second section in image image section and the sixth section in image is originally the fourth section in image image section . Thus to unscramble image back to image the CSS code needs to reverse the process and indicate that when the image is displayed the first section in image should appear in the position of the sixth section the second section in image should appear in the position of the first section the third section in image should appear in the position of the fifth section the fourth section in image should appear in the position of the third section the fifth section in image should appear in the position of the second section and the sixth section in image should appear in the position of the fourth section.

Particular embodiments may specify the image sections using the li tag of HTML. Assuming image sections each have a width of 50 pixels the following illustrates an example HTML and CSS code for unscrambling the second image e.g. image back to the first image e.g. image .

Particular embodiments may transmit the CAPTCHA test and the HTML and CSS code to a client as illustrated in step . The CAPTCHA test is constructed using the first image. That is the challenge and the correct response are determined based on the first image. However only the second scrambled image is transmitted to the client with the CAPTCHA test. The first image is not transmitted to the client.

At the client upon receiving the CAPTCHA test and the HTML and CSS code as part of a web page or other structured document as illustrated in step the CAPTCHA image together with the challenge may be displayed in a web browser based on the HTML and CSS code as illustrated in step . The client only receives the second scrambled image from the server. However because the web browser is able to process the HTML and CSS code the CAPTCHA image is displayed based on the CSS code and the CSS code indicates how the second image may be unscrambled back to the first image when the CAPTCHA image is displayed in the web browser the first correct image appears. As a result a human user sees the first correct image and may provide the correct response accordingly. For CAPTCHA image the correct response is following finding .

On the other hand suppose at the client a piece of malware receives the CAPTCHA test with the second scrambled image. Because the malware does not have the functionality to unscramble the second image back to the first image using the CSS code the malware displays the second image as the CAPTCHA image hoping to trick a human user into providing the correct CAPTCHA response. As a result the human user sees the second scrambled image and is unable to provide the correct response which has been determined using the first correct image. For example when a human user sees image he may not be able to determine what the two words are or at best may believe the two words to be ing fefindwimllon which is of course incorrect. In addition if the image sections are configured to be small enough the human user may not be able to perceive anything intelligible from the scrambled CAPTCHA image at all. The malware cannot pass the CAPTCHA test using this incorrect response if any e.g. sending this incorrect response back to the computer system issuing the CAPTCHA test .

Alternatively in particular embodiments the unscrambling of the CAPTCHA image may be achieved using JavaScript or other types of scripting language that are supported by a web browser. In this case the JavaScript code replaces the CSS code to specify the placements of the image sections so that when displayed e.g. in a web browser the first image appears.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing software validation as a service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . The present disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more servers via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. A HTML file may include CSS code. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touchscreen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

