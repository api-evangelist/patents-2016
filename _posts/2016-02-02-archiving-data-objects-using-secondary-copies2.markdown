---

title: Archiving data objects using secondary copies
abstract: A system for archiving data objects using secondary copies is disclosed. The system creates one or more secondary copies of primary copy data that contains multiple data objects. The system maintains a first data structure that tracks the data objects for which the system has created secondary copies and the locations of the secondary copies. To archive data objects in the primary copy data, the system identifies data objects to be archived, verifies that previously-created secondary copies of the identified data objects exist, and replaces the identified data objects with stubs. The system maintains a second data structure that both tracks the stubs and refers to the first data structure, thereby creating an association between the stubs and the locations of the secondary copies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639563&OS=09639563&RS=09639563
owner: Commvault Systems, Inc.
number: 09639563
owner_city: Tinton Falls
owner_country: US
publication_date: 20160202
---
This application is a continuation of U.S. patent application Ser. No. 14 595 984 filed Jan. 13 2015 now U.S. Pat. No. 9 262 275 entitled ARCHIVING DATA OBJECTS USING SECONDARY COPIES which is a continuation of U.S. patent application Ser. No. 13 250 824 filed Sep. 30 2011 now U.S. Pat. No. 8 935 492 entitled ARCHIVING DATA OBJECTS USING SECONDARY COPIES which claims the benefit of U.S. Patent Application No. 61 388 566 filed Sep. 30 2010 entitled ARCHIVING DATA OBJECTS USING SECONDARY COPIES each of which is hereby incorporated herein by reference in its entirety.

A primary copy of data is generally a production copy or other live version of the data which is used by a software application and is generally in the native format of that application. Primary copy data may be maintained in a local memory or other high speed storage device that allows for relatively fast data access if necessary. Such primary copy data is typically intended for short term retention e.g. several hours or days before some or all of the data is stored as one or more secondary copies for example to prevent loss of data in the event a problem occurred with the data stored in primary storage.

To protect primary copy data or for other purposes such as regulatory compliance secondary copies alternatively referred to as data protection copies can be made. Examples of secondary copies include a backup copy a snapshot copy a hierarchical storage management HSM copy an archive copy and other types of copies.

A backup copy is generally a point in time copy of the primary copy data stored in a backup format as opposed to in native application format. For example a backup copy may be stored in a backup format that is optimized for compression and efficient long term storage. Backup copies generally have relatively long retention periods and may be stored on media with slower retrieval times than other types of secondary copies and media. In some cases backup copies may be stored at an offsite location.

After an initial full backup of a data set is performed periodic intermittent or continuous incremental backup operations may be subsequently performed on the data set. Each incremental backup operation copies only the primary copy data that has changed since the last full or incremental backup of the data set was performed. In this way even if the entire set of primary copy data that is backed up is large the amount of data that must be transferred during each incremental backup operation may be significantly smaller since only the changed data needs to be transferred to secondary storage. Combined one or more full backup and subsequent incremental copies may be utilized together to periodically or intermittently create a synthetic full backup copy. More details regarding synthetic storage operations are found in commonly assigned U.S. patent application Ser. No. 12 510 059 entitled Snapshot Storage and Management System with Indexing and User Interface filed Jul. 27 2009 now U.S. Pat. No. 7 873 806 which is hereby incorporated herein in its entirety.

An archive copy is generally a copy of the primary copy data but typically includes only a subset of the primary copy data that meets certain criteria and is usually stored in a format other than the native application format. For example an archive copy might include only that data from the primary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format. Often archive data is removed from the primary copy and a stub is stored in the primary copy to indicate its new location. When a user requests access to the archive data that has been removed or migrated systems use the stub to locate the data and often make recovery of the data appear transparent even though the archive data may be stored at a location different from the remaining primary copy data.

Archive copies are typically created and tracked independently of other secondary copies such as other backup copies. For example to create a backup copy the data storage system transfers a secondary copy of primary copy data to secondary storage and tracks the backup copy using a backup index separate from the archive index. To create an archive copy a conventional data storage system transfers the primary copy data to be archived to secondary storage to create an archive copy replaces the primary copy data with a stub and tracks the archive copy using an archive index. Accordingly the data storage system will transfer two separate times to secondary storage a primary copy data object that is both archived and backed up.

Since each transfer consumes network and computing resources the data storage system may not be able to devote such resources to other tasks. Moreover the data storage system is required to devote resources to maintaining each separate index. In some cases the archive index may be unaware of the other secondary copy and the other secondary index may be unaware of the archive copy which may lead to further inefficiencies. Moreover in some cases in the event that an archive copy is moved or transferred e.g. to another tier of secondary storage the archive index may not be able to be updated to reflect the move or transfer. In such cases the data storage system may be unable to use the stub to locate the archived data object.

Also in conventional systems archiving operations may require the transfer of large quantities of data during a single archive operation. For example the retention criteria for an organization may specify that data objects more than two years old should be archived. On the first day of the organization s operation it may be entirely unnecessary to archive any data since the only data that exists at that point is newly created and thus ineligible for archiving. However over the course of two years of operations the organization may amass large quantities of data. Thus when the first archive operation finally occurs e.g. approximately two years into the operation of the organization it may be necessary to transfer a large amount of the organization s data.

Additionally backup archive and other secondary storage operations may unnecessarily preserve secondary copies of data created from primary data that has been deleted or is otherwise no longer being actively used as production data by a computing system such as a workstation or server. Thus secondary storage requirements may increasingly and unnecessarily bloat over time.

The need exists for systems and methods that overcome the above problems as well as systems and methods that provide additional benefits. Overall the examples herein of some prior or related systems and methods and their associated limitations are intended to be illustrative and not exclusive. Other limitations of existing or prior systems and methods will become apparent to those of skill in the art upon reading the following Detailed Description.

The headings provided herein are for convenience only and do not necessarily affect the scope or meaning of the disclosure.

A software firmware and or hardware system for archiving data objects using secondary copies the system is disclosed. The system creates one or more secondary copies of primary copy data e.g. production data stored by a production computing system . The primary copy data contains multiple data objects e.g. multiple files emails or other logical groupings or collections of data . The system maintains a first data structure that tracks the data objects for which the system has created secondary copies and the locations of the secondary copies.

To archive data objects in the primary copy data the system applies rules to determine which data objects are to be archived. The system then verifies that previously created secondary copies of data objects to be archived exist and replaces the data objects with stubs pointers or logical addresses. The system maintains a second data structure that both tracks the stubs and refers to the first data structure thereby creating an association between the stubs and the locations of the secondary copies. Notably the system archives data objects without creating an additional or other secondary copy of the data objects. Instead the association between the two data structures allows stubs to point to or refer to the previously created secondary copy of the data objects. Accordingly the existence of the previously created secondary copy of the data objects allows the system to forego creating an additional or other secondary copy of the data objects thereby saving resources.

The system may also perform a process to reclaim space used to store secondary copies. To do so the system scans or analyzes the primary copy data to identify the data objects that exist in the primary copy data and stores the results of the scan or analysis in a third data structure. The system then compares the first and third data structures e.g. the system performs a difference of the first and third data structures to determine which data objects in the primary copy data have been deleted. For each deleted data object the system updates the corresponding entry in the first data structure. Then the system accesses the first data structure and determines 1 which data objects in the primary copy data have not been deleted and 2 which have been deleted but whose deletion occurred less than a predetermined period of time ago. For each data object determined in this fashion the system then creates from the first secondary copy of the data object a second secondary copy of the data object. The system can then create a new first data structure or update the existing first data structure to reflect the second secondary copies of the data objects.

Various examples of the invention will now be described. The following description provides specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant art will understand however that the invention may be practiced without many of these details. Likewise one skilled in the relevant art will also understand that the invention may include many other obvious features not described in detail herein. Additionally some well known structures or functions may not be shown or described in detail below so as to avoid unnecessarily obscuring the relevant description.

The terminology used below is to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

The clients as part of their functioning utilize data which includes files directories metadata e.g. ACLs descriptive metadata and any other streams associated with the data and other data objects which may be stored in the primary data store . The data of a client is generally a primary copy e.g. a production copy . Although described as a client of the secondary storage computing device a client may in fact be a production server such as a file server or Exchange server which provides live production data to multiple user workstations as part of its function. Each client includes a data agent described in more detail with reference to . During a copy backup archive or other storage operation the data agents send a copy of data objects in a primary data store to the secondary storage computing device .

The secondary storage computing device includes a memory . The memory includes software incorporating components and data typically used by the system. The components include a secondary copy component that performs secondary copy operations and a pruning component that performs space reclamation or pruning operations. The data includes secondary copy data structure stubs data structure and primary copy data structure . The system uses the data to among other things track data objects copied during archive and other secondary copy operations and to track data objects in primary copy data.

While items and are illustrated as stored in memory those skilled in the art will appreciate that these items or portions of them may be transferred between memory and a persistent storage device for example a magnetic hard drive a tape of a tape library etc. for purposes of memory management data integrity and or other purposes.

The secondary storage computing device further includes one or more central processing units CPU for executing software and a computer readable media drive for reading information or installing software from tangible computer readable storage media such as a floppy disk a CD ROM a DVD a USB flash drive and or other tangible computer readable storage media. The secondary storage computing device also includes one or more of the following a network connection device for connecting to a network an information input device for example a mouse a keyboard etc. and an information output device for example a display .

At step the system adds entries to the secondary copy data structure . is a data structure diagram illustrating the secondary copy data structure . The secondary copy data structure contains rows such as rows and each divided into the following columns an ID column containing an identifier of a data object e.g. a globally unique identifier GUID a primary copy location column containing the location of the primary copy of the data object a secondary copy location column containing the location of the secondary copy of the data object and a deletion time column containing a time stamp of when the primary copy of the data object was deleted. The secondary copy data structure may also include other columns that may contain additional data about data objects.

Although absolute locations for the primary copy and the secondary copy are shown in the system may additionally or alternatively use relative locations to indicate the locations of data objects in the secondary copy data structure . For example the system may store secondary copies of data objects using a logical archive file and specify a relative location within the logical archive file for a secondary copy location. As another example the system may store secondary copies of data objects on tape and specify a tape and an offset within the tape for a secondary copy location. Those of skill in the art will understand that secondary copies can be stored using varied techniques and that the system is not limited to the techniques expressly illustrated or described in this disclosure.

Moreover although illustrates entries corresponding to files in the secondary copy data structure the disclosed techniques may also be used with other types of data objects such as emails and email attachments database or spreadsheet objects data blocks and other data objects stored in other data repositories. Accordingly the disclosure is not to be construed as limited solely to files.

The system may utilize a single secondary copy data structure for each client or subclient thereof or for each set of data subject to data protection operations which may be the data of a single client or the data of multiple clients . Additionally or alternatively the system may use a single secondary copy data structure for multiple clients or for multiple sets of data subject to data protection operations which may be the data of a single client or the data of multiple clients . In such a case the secondary copy data structure may contain additional columns containing data that allows for differentiation of data associated with different clients or different sets of data.

In adding entries for each new copy of a data object the system adds a new row to the secondary copy data structure . The system may generate the identifier for each secondary copy of a data object created and in the new row add the identifier to column add the primary copy location of the data object to column and add the secondary copy location to column . The system may also store additional data as part of step such as in other columns of the secondary copy data structure or in other data structures.

Returning to at step the system identifies data objects in the primary copy data that are to be archived. For example the system may apply one or more rules or criteria based on any combination of data object type data object age data object size percentage of disk quota remaining storage metadata e.g. a flag or tag indicating importance and or other factors. At step the system verifies that a secondary copy of each data object has been made. To do so the system may access the secondary copy data structure to determine that secondary copies of the identified data objects exist. Also at step the system obtains a token for each identified data object. The token represents confirmation or verification that a secondary copy of a data object was previously created and is typically unique for each data object. At step the system replaces each of the identified data objects in the primary copy data with a stub containing the token. The stub is typically a small data object that indicates points to or refers to the location of the secondary copy of the data object and facilitates recovery of the data object. More details as to archiving operations may be found in the commonly assigned currently pending U.S. Patent Application Number 2008 0229037 the entirety of which is incorporated by reference herein.

At step the system copies the stubs in the primary copy data to the storage device . At step the system adds entries to the stubs data structure . is a data structure diagram illustrating the stubs data structure . The stubs data structure contains rows such as rows and each divided into the following columns an ID column containing the identifier of a data object e.g. the GUID and a token column containing the token previously created or generated for the data object. The stubs data structure may also include other columns that may contain additional data about data objects. The system may utilize a single stubs data structure for a single data objects data structure a single stubs data structure for multiple data objects data structures and or multiple stubs data structures for multiple data objects data structures .

In adding entries the system adds a new row to the stubs data structure . In the new row the system adds the identifier that corresponds to the data object associated with the stub to column and the token obtained in step to column . The system may also store additional data as part of step such as in other columns of the stubs data structure or in other data structures. The entries in rows and indicate that the system archived the data objects identified in rows and respectively of the secondary copy data structure . Also in step the system adds entries to the secondary copy data structure for the stubs. In rows and correspond to the entries for the stubs.

Returning to at step the system determines which data objects in the primary copy data have been deleted. The system may use various techniques to determine which data objects in the primary copy data have been deleted. For example the system may scan or analyze the primary copy data on a periodic or ad hoc basis and populate a data structure that contains entries for each of the data objects in the primary copy data. is a data structure diagram illustrating the primary copy data structure . The primary copy data structure alternatively referred to as an image map is generally similar to the secondary copy data structure but contains entries only for data objects existing in the primary copy data as of the most recent scan or analysis of the primary copy data. To determine the data objects that have been deleted the system can compare the secondary copy data structure with the primary copy data structure . The data objects that are in the secondary copy data structure but not in the primary copy data structure are the data objects that have been deleted. Additionally or alternatively the system can use other techniques to determine when a data object in the primary copy data has been deleted such as by receiving information from a driver or file system filter on the client that detects such deletions. Additionally or alternatively the system can predict if and when a data object in primary copy data has been deleted based upon information available to the system such as heuristics or historical data.

Returning to at step the system updates the entries in the secondary copy data structure corresponding to the deleted data objects to include their deletion times. The system may use the time of the last scan or analysis as the deletion times or may use the actual deletion times of the data objects. After step the process concludes.

Those of skill in the art will understand that the process may be varied while still coming within the general scope of the process . For example if the system cannot verify that a secondary copy of the data object was previously created the system may not archive the data object in the primary copy data. Alternatively in such a case the system may create a secondary copy of the data object and add an entry to the secondary copy data structure before archiving the data object. Alternatively the system may flag the data object for later archiving after the system has created a secondary copy of the data object at a later time. The system may perform other variations of the process .

If the system determines that the data object in the primary copy data has been deleted the process continues to step where the system determines whether the deletion time of the data object is longer ago than a predetermined configurable period of time e.g. longer than one year ago . For example the data object identified in row because it has a deletion time has been deleted. If not e.g. the data object was deleted less than a year ago the process continues to step described above. If the deletion time of the data object is longer ago than the predetermined period of time the process skips step skips the step of creating a second secondary copy of the data object . Additionally the system may delete the secondary copy of the long deleted data object either immediately or at a later time e.g. at the conclusion of the process . For example if the system is performing the process on Sep. 30 2010 and the predetermined period of time is 90 days then the system would not create a second secondary copy of the data object identified in row because it was deleted on Jun. 25 2010. However the system would create a second secondary copy of the data object identified in row because it was deleted on Jul. 10 2010 which is less than 90 days before Sep. 30 2010.

The predetermined period of time acts as a timer that starts when a data object in primary copy data has been deleted or when the system detects the deletion . After the timer has expired the system no longer needs to store the secondary copy of the data object. Storing the secondary copy of the data object for a period of time past the deletion time of the data object in primary copy data allows the secondary copy of the data object to be retrieved or recalled if for example the data object needed to be recovered to satisfy an e discovery or legal hold request. The predetermined period of time can be set according to archival rules or storage policies e.g. to comply with e discovery or other requirements . The predetermined period may vary based on the type of data object. For example certain types of data objects e.g. financial data may have a longer predetermined period of time than other types of data e.g. personal emails . The system may determine the data type by content indexing the data objects or by accessing data classifications of the data objects.

Moreover the predetermined period of time allows for data objects to be recovered in the case of accidental or unintended deletion or in case data objects appear to have been deleted. For example if a user accidentally or unintentionally deletes a data object in primary copy data the user has until at least the expiration of the predetermined period of time to discover the accidental or unintended deletion and request that the deleted data object be recovered. As another example if a volume containing a set of data objects becomes unmounted upon scanning or analyzing the primary copy data the system would determine that the data objects have been deleted and accordingly update the corresponding entries in the secondary copy data structure . As long as the volume is remounted prior to the predetermined periods of time the system will not delete the secondary copies of the data objects. When the volume is remounted the system can recognize that the data objects are already tracked in the secondary copy data structure and remove the deletion times from the corresponding entries in the secondary copy data structure .

At step the system moves to the next entry in the secondary copy data structure and performs the above steps with respect to the data object identified in the next entry. After the system has iterated through all of the entries in the secondary copy data structure the process continues at step where the system generates a new secondary copy data structure that includes entries corresponding to only the data objects for which the system created second secondary copies. The new secondary copy data structure also includes the locations of the second secondary copies of the data objects. At step the system may also delete the old secondary copy data structure. After step the process concludes.

Those of skill in the art will understand that the process may be varied while still coming within the general scope of the process . For example to prune data instead of creating second secondary copies of data objects from the first secondary copies of data objects the system may instead delete certain first secondary copies of data objects e.g. those data objects having a deletion time longer ago than a predetermined configurable period of time. Instead of or in addition to creating a new secondary copy data structure the system may delete rows from the existing secondary copy data structure corresponding to the data objects having a deletion time longer ago than a predetermined configurable period of time for which the system did not create second secondary copies. The system may also update the secondary copy locations of the rows corresponding to the data objects for which the system did create second secondary copies. As another example instead of pruning a secondary copy of a data object in response to the deletion of the data object in the primary copy data the system may additionally or alternatively prune a secondary copy of a data object when other criteria are met such as criteria relating to the creation time modification time size file type or other characteristics of the data object in the primary copy data. The system may perform other variations of the process .

One advantage of the techniques described herein is that the system can avoid creating additional secondary copies of data objects in primary copy data when archiving the data objects. Instead the system can use the associations between the secondary copy data structure and the stubs data structure to point or refer stubs to the previously created secondary copy of the data objects. Accordingly the existence of the previously created secondary copy of the data objects allows the system to forego creating another secondary copy of the data objects when archiving the data objects thereby saving resources. Since the system only transfers a data object from primary storage to secondary storage once instead of twice e.g. once for backup once for archive it may save network bandwidth and processing capacity. Moreover since the system often transfers a set of data objects from primary storage to secondary storage during the course of several incremental secondary copy operations e.g. during several incremental backup operations the system may avoid a single large data transfer when it later archives the same set of data objects. Instead the set of data objects in primary storage may simply be replaced with stubs when the time comes to archive them. As another example since the system only stores a single copy of each data object in secondary storage instead of two copies the total secondary storage capacity needed by the system may be reduced.

Yet another advantage of the techniques described herein is that the system can use a common set of data structures to track both archive operations and other secondary copy operations thereby potentially simplifying the tracking of both types of operations. Another advantage is that since only one secondary copy of a data object needs to be created other ancillary processes such as content indexing encryption compression data classification and or deduplication or single instancing of the secondary copy need only be performed once on the single secondary copy instead of multiple times on each secondary copy.

Another advantage of the techniques described herein is that the secondary copy data structure can be updated to account for moved or transferred secondary copies e.g. data objects moved to another tier of secondary storage . Accordingly the stub of a data object whose secondary copy was moved or transferred can still be used to locate and recall the moved or transferred data object.

Still another advantage of the techniques described herein is that by pruning data e.g. in response to the deletion of corresponding primary data the secondary storage capacity requirements are reduced.

The system may generally include combinations of hardware and software components associated with performing storage operations on electronic data. Storage operations include copying backing up creating storing retrieving and or migrating primary storage data e.g. data stores and or and secondary storage data which may include for example snapshot copies backup copies hierarchical storage management HSM copies archive copies and other types of copies of electronic data stored on storage devices . The system may provide one or more integrated management consoles for users or system processes to interface with in order to perform certain storage operations on electronic data as further described herein. Such integrated management consoles may be displayed at a central control system or several similar consoles distributed throughout multiple network locations to provide global or geographically specific network data storage information.

In one example storage operations may be performed according to various storage preferences for example as expressed by a user preference a storage policy a schedule policy and or a retention policy. A storage policy is generally a data structure or other information source that includes a set of preferences and other storage criteria associated with performing a storage operation. The preferences and storage criteria may include but are not limited to a storage location relationships between system components network pathways to utilize in a storage operation data characteristics compression or encryption requirements preferred system components to utilize in a storage operation a deduplication single instancing or variable instancing policy to apply to the data and or other criteria relating to a storage operation. For example a storage policy may indicate that certain data is to be stored in the storage device retained for a specified period of time before being aged to another tier of secondary storage copied to the storage device using a specified number of data streams etc.

A schedule policy may specify a frequency with which to perform storage operations and a window of time within which to perform them. For example a schedule policy may specify that a storage operation is to be performed every Saturday morning from 2 00 a.m. to 4 00 a.m. In some cases the storage policy includes information generally specified by the schedule policy. Put another way the storage policy includes the schedule policy. A retention policy may specify how long data is to be retained at specific tiers of storage or what criteria must be met before data may be pruned or moved from one tier of storage to another tier of storage. Storage policies schedule policies and or retention policies may be stored in a database of the storage manager to archive media as metadata for use in restore operations or other storage operations or to other locations or components of the system .

The system may comprise a storage operation cell that is one of multiple storage operation cells arranged in a hierarchy or other organization. Storage operation cells may be related to backup cells and provide some or all of the functionality of backup cells as described in the assignee s U.S. patent application Ser. No. 09 354 058 now U.S. Pat. No. 7 395 282 which is incorporated herein by reference in its entirety. However storage operation cells may also perform additional types of storage operations and other types of storage management functions that are not generally offered by backup cells.

Storage operation cells may contain not only physical devices but also may represent logical concepts organizations and hierarchies. For example a first storage operation cell may be configured to perform a first type of storage operations such as HSM operations which may include backup or other types of data migration and may include a variety of physical components including a storage manager or management agent a secondary storage computing device a client and other components as described herein. A second storage operation cell may contain the same or similar physical components however it may be configured to perform a second type of storage operations such as storage resource management SRM operations and may include monitoring a primary data copy or performing other known SRM operations.

Thus as can be seen from the above although the first and second storage operation cells are logically distinct entities configured to perform different management functions i.e. HSM and SRM respectively each storage operation cell may contain the same or similar physical devices. Alternatively different storage operation cells may contain some of the same physical devices and not others. For example a storage operation cell configured to perform SRM tasks may contain a secondary storage computing device client or other network device connected to a primary storage volume while a storage operation cell configured to perform HSM tasks may instead include a secondary storage computing device client or other network device connected to a secondary storage volume and not contain the elements or components associated with and including the primary storage volume. The term connected as used herein does not necessarily require a physical connection rather it could refer to two devices that are operably coupled to each other communicably coupled to each other in communication with each other or more generally refer to the capability of two devices to communicate with each other. These two storage operation cells however may each include a different storage manager that coordinates storage operations via the same secondary storage computing devices and storage devices . This overlapping configuration allows storage resources to be accessed by more than one storage manager such that multiple paths exist to each storage device facilitating failover load balancing and promoting robust data access via alternative routes.

Alternatively or additionally the same storage manager may control two or more storage operation cells whether or not each storage operation cell has its own dedicated storage manager . Moreover in certain embodiments the extent or type of overlap may be user defined through a control console or may be automatically configured to optimize data storage and or retrieval.

Data agent may be a software module or part of a software module that is generally responsible for performing storage operations on the data of the client stored in data store or other memory location. Each client may have at least one data agent and the system can support multiple clients . Data agent may be distributed between client and storage manager and any other intermediate components or it may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent .

The overall system may employ multiple data agents each of which may perform storage operations on data associated with a different application. For example different individual data agents may be designed to handle Microsoft Exchange data UNIX data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data and other types of data known in the art. Other embodiments may employ one or more generic data agents that can handle and process multiple data types rather than using the specialized data agents described above.

If a client has two or more types of data one data agent may be required for each data type to perform storage operations on the data of the client . For example to back up migrate and restore all the data on a Microsoft Exchange server the client may use one Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes one Microsoft Exchange 2000 Database data agent to back up the Exchange databases one Microsoft Exchange 2000 Public Folder data agent to back up the Exchange 2000 Public Folders and one Microsoft Windows File System data agent to back up the file system of the client . These data agents would be treated as four separate data agents by the system even though they reside on the same client .

Alternatively the overall system may use one or more generic data agents each of which may be capable of handling two or more data types. For example one generic data agent may be used to back up migrate and restore Microsoft Exchange 2000 Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data etc.

Data agents may be responsible for arranging or packing data to be copied or migrated into a certain format such as an archive file. Nonetheless it will be understood that this represents only one example and any suitable packing or containerization technique or transfer methodology may be used if desired. Such an archive file may include metadata a list of files or data objects copied the file and data objects themselves. Moreover any data moved by the data agents may be tracked within the system by updating indexes associated with appropriate storage managers or secondary storage computing devices . As used herein a file or a data object refers to any collection or grouping of bytes of data that can be viewed as one or more logical units.

Generally speaking storage manager may be a software module or other application that coordinates and controls storage operations performed by the system . Storage manager may communicate with some or all elements of the system including clients data agents secondary storage computing devices and storage devices to initiate and manage storage operations e.g. backups migrations data recovery operations etc. .

Storage manager may include a jobs agent that monitors the status of some or all storage operations previously performed currently being performed or scheduled to be performed by the system . One or more storage operations are alternatively referred to herein as a job or jobs. Jobs agent may be communicatively coupled to an interface agent e.g. a software module or application . Interface agent may include information processing and display software such as a graphical user interface GUI an application programming interface API or other interactive interface through which users and system processes can retrieve information about the status of storage operations. For example in an arrangement of multiple storage operations cell through interface agent users may optionally issue instructions to various storage operation cells regarding performance of the storage operations as described and contemplated herein. For example a user may modify a schedule concerning the number of pending snapshot copies or other types of copies scheduled as needed to suit particular needs or requirements. As another example a user may employ the GUI to view the status of pending storage operations in some or all of the storage operation cells in a given network or to monitor the status of certain components in a particular storage operation cell e.g. the amount of storage capacity left in a particular storage device .

Storage manager may also include a management agent that is typically implemented as a software module or application program. In general management agent provides an interface that allows various management agents in other storage operation cells to communicate with one another. For example assume a certain network configuration includes multiple storage operation cells hierarchically arranged or otherwise logically related in a WAN or LAN configuration. With this arrangement each storage operation cell may be connected to the other through each respective interface agent . This allows each storage operation cell to send and receive certain pertinent information from other storage operation cells including status information routing information information regarding capacity and utilization etc. These communications paths may also be used to convey information and instructions regarding storage operations.

For example a management agent in a first storage operation cell may communicate with a management agent in a second storage operation cell regarding the status of storage operations in the second storage operation cell. Another illustrative example includes the case where a management agent in a first storage operation cell communicates with a management agent in a second storage operation cell to control storage manager and other components of the second storage operation cell via management agent contained in storage manager .

Another illustrative example is the case where management agent in a first storage operation cell communicates directly with and controls the components in a second storage operation cell and bypasses the storage manager in the second storage operation cell. If desired storage operation cells can also be organized hierarchically such that hierarchically superior cells control or pass information to hierarchically subordinate cells or vice versa.

Storage manager may also maintain an index a database or other data structure . The data stored in database may be used to indicate logical associations between components of the system user preferences management tasks media containerization and data storage information or other useful data. For example the storage manager may use data from database to track logical associations between secondary storage computing device and storage devices or movement of data as containerized from primary to secondary storage .

Generally speaking the secondary storage computing device which may also be referred to as a media agent may be implemented as a software module that conveys data as directed by storage manager between a client and one or more storage devices such as a tape library a magnetic media storage device an optical media storage device or any other suitable storage device. In one embodiment secondary storage computing device may be communicatively coupled to and control a storage device . A secondary storage computing device may be considered to be associated with a particular storage device if that secondary storage computing device is capable of routing and storing data to that particular storage device .

In operation a secondary storage computing device associated with a particular storage device may instruct the storage device to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or restore data to or from that media. Secondary storage computing device may communicate with a storage device via a suitable communications path such as a SCSI or Fibre Channel communications link. In some embodiments the storage device may be communicatively coupled to the storage manager via a SAN.

Each secondary storage computing device may maintain an index a database or other data structure that may store index data generated during storage operations for secondary storage SS as described herein including creating a metabase MB . For example performing storage operations on Microsoft Exchange data may generate index data. Such index data provides a secondary storage computing device or other external device with a fast and efficient mechanism for locating data stored or backed up. Thus a secondary storage computing device index or a database of a storage manager may store data associating a client with a particular secondary storage computing device or storage device for example as specified in a storage policy while a database or other data structure in secondary storage computing device may indicate where specifically the data of the client is stored in storage device what specific files were stored and other information associated with storage of the data of the client . In some embodiments such index data may be stored along with the data backed up in a storage device with an additional copy of the index data written to index cache in a secondary storage device. Thus the data is readily available for use in storage operations and other activities without having to be first retrieved from the storage device .

Generally speaking information stored in cache is typically recent information that reflects certain particulars about operations that have recently occurred. After a certain period of time this information is sent to secondary storage and tracked. This information may need to be retrieved and uploaded back into a cache or other memory in a secondary computing device before data can be retrieved from storage device . In some embodiments the cached information may include information regarding format or containerization of archives or other files stored on storage device .

One or more of the secondary storage computing devices may also maintain one or more single instance databases . Single instancing alternatively called data deduplication generally refers to storing in secondary storage only a single instance of each data object or data block in a set of data e.g. primary data . More details as to single instancing may be found in one or more of the following commonly assigned U.S. patent applications 1 U.S. patent application Ser. No. 11 269 512 entitled SYSTEM AND METHOD TO SUPPORT SINGLE INSTANCE STORAGE OPERATIONS 2 U.S. patent application Ser. No. 12 145 347 entitled APPLICATION AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT or 3 U.S. patent application Ser. No. 12 145 342 entitled APPLICATION AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT 4 U.S. patent application Ser. No. 11 963 623 entitled SYSTEM AND METHOD FOR STORING REDUNDANT INFORMATION 5 U.S. patent application Ser. No. 11 950 376 entitled SYSTEMS AND METHODS FOR CREATING COPIES OF DATA SUCH AS ARCHIVE COPIES or 6 U.S. Pat App. No. 61 100 686 entitled SYSTEMS AND METHODS FOR MANAGING SINGLE INSTANCING DATA each of which is incorporated by reference herein in its entirety.

In some examples the secondary storage computing devices maintain one or more variable instance databases. Variable instancing generally refers to storing in secondary storage one or more instances but fewer than the total number of instances of each data block or data object in a set of data e.g. primary data . More details as to variable instancing may be found in the commonly assigned U.S. Pat. App. No. 61 164 803 entitled STORING A VARIABLE NUMBER OF INSTANCES OF DATA OBJECTS .

In some embodiments certain components may reside and execute on the same computer. For example in some embodiments a client such as a data agent or a storage manager coordinates and directs local archiving migration and retrieval application functions as further described in the previously referenced U.S. patent application Ser. No. 09 610 738. This client can function independently or together with other similar clients .

As shown in each secondary storage computing devices has its own associated metabase . Each client may also have its own associated metabase . However in some embodiments each tier of storage such as primary storage secondary storage tertiary storage etc. may have multiple metabases or a centralized metabase as described herein. For example rather than a separate metabase or index associated with each client in the metabases on this storage tier may be centralized. Similarly second and other tiers of storage may have either centralized or distributed metabases. Moreover mixed architecture systems may be used if desired that may include a first tier centralized metabase system coupled to a second tier storage system having distributed metabases and vice versa etc.

Moreover in operation a storage manager or other management module may keep track of certain information that allows the storage manager to select designate or otherwise identify metabases to be searched in response to certain queries as further described herein. Movement of data between primary and secondary storage may also involve movement of associated metadata and other tracking information as further described herein.

In some examples primary data may be organized into one or more sub clients. A sub client is a portion of the data of one or more clients and can contain either all of the data of the clients or a designated subset thereof. As depicted in the data store includes two sub clients. For example an administrator or other user with the appropriate permissions the term administrator is used herein for brevity may find it preferable to separate email data from financial data using two different sub clients having different storage preferences retention criteria etc.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs smart phones and other devices suitable for the purposes described herein. Modules described herein may be executed by a general purpose computer e.g. a server computer wireless device or personal computer. Those skilled in the relevant art will appreciate that aspects of the invention can be practiced with other communications data processing or computer system configurations including Internet appliances hand held devices including personal digital assistants PDAs wearable computers all manner of cellular or mobile phones multi processor systems microprocessor based or programmable consumer electronics set top boxes network PCs mini computers mainframe computers and the like. Indeed the terms computer server host host system and the like are generally used interchangeably herein and refer to any of the above devices and systems as well as any data processor. Furthermore aspects of the invention can be embodied in a special purpose computer or data processor that is specifically programmed configured or constructed to perform one or more of the computer executable instructions explained in detail herein.

Software and other modules may be accessible via local memory a network a browser or other application in an ASP context or via another means suitable for the purposes described herein. Examples of the technology can also be practiced in distributed computing environments where tasks or modules are performed by remote processing devices which are linked through a communications network such as a Local Area Network LAN Wide Area Network WAN or the Internet. In a distributed computing environment program modules may be located in both local and remote memory storage devices. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other interfaces suitable for the purposes described herein.

Examples of the technology may be stored or distributed on computer readable media including magnetically or optically readable computer disks hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory biological memory or other data storage media. Indeed computer implemented instructions data structures screen displays and other data under aspects of the invention may be distributed over the Internet or over other networks including wireless networks on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme .

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above Detailed Description is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific examples for the invention are described above for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative implementations may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or subcombinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed or implemented in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the invention provided herein can be applied to other systems not necessarily the systems described herein. The elements and acts of the various examples described above can be combined to provide further implementations of the invention.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

While certain examples are presented below in certain forms the applicant contemplates the various aspects of the invention in any number of claim forms. Accordingly the applicant reserves the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the invention.

