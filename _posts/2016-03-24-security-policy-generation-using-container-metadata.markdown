---

title: Security policy generation using container metadata
abstract: Methods, systems, and media for producing a firewall rule set are provided herein. Exemplary methods may include: receiving metadata about a deployed container from a container orchestration layer; determining an application or service associated with the container from the received metadata; retrieving at least one model using the determined application or service, the at least one model identifying expected network communications behavior of the container; and generating a high-level declarative security policy associated with the container using the at least one model, the high-level declarative security policy indicating at least an application or service with which the container can communicate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521115&OS=09521115&RS=09521115
owner: vArmour Networks, Inc.
number: 09521115
owner_city: Mountain View
owner_country: US
publication_date: 20160324
---
The present technology pertains to computer security and more specifically to computer network security.

A hardware firewall is a network security system that controls incoming and outgoing network traffic. A hardware firewall generally creates a barrier between an internal network assumed to be trusted and secure and another network e.g. the Internet that is assumed not to be trusted and secure.

Attackers breach internal networks to steal critical data. For example attackers target low profile assets to enter the internal network. Inside the internal network and behind the hardware firewall attackers move laterally across the internal network exploiting East West traffic flows to critical enterprise assets. Once there attackers siphon off valuable company and customer data.

Some embodiments of the present technology include computer implemented methods for security in a container based virtualization environment which may include receiving metadata about a deployed container from a container orchestration layer determining an application or service associated with the container from the received metadata retrieving at least one model using the determined application or service the at least one model identifying expected network communications behavior of the container and generating a high level declarative security policy associated with the container using the at least one model the high level declarative security policy indicating at least an application or service with which the container can communicate.

Various embodiments of the present technology include systems for producing a firewall rule set comprising a processor and a memory communicatively coupled to the processor the memory storing instructions executable by the processor to perform a method comprising receiving metadata about a deployed container from a container orchestration layer determining an application or service associated with the container from the received metadata retrieving at least one model using the determined application or service the at least one model identifying expected network communications behavior of the container and generating a high level declarative security policy associated with the container using the at least one model the high level declarative security policy indicating at least an application or service with which the container can communicate

In some embodiments the present technology includes non transitory computer readable storage media having embodied thereon a program the program being executable by a processor to perform a method for producing a firewall rule set the method comprising receiving metadata about a deployed container from a container orchestration layer determining an application or service associated with the container from the received metadata retrieving at least one model using the determined application or service the at least one model identifying expected network communications behavior of the container and generating a high level declarative security policy associated with the container using the at least one model the high level declarative security policy indicating at least an application or service with which the container can communicate.

While this technology is susceptible of embodiment in many different forms there is shown in the drawings and will herein be described in detail several specific embodiments with the understanding that the present disclosure is to be considered as an exemplification of the principles of the technology and is not intended to limit the technology to the embodiments illustrated. The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the technology. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof. It will be understood that like or analogous elements and or components referred to herein may be identified throughout the drawings with like reference characters. It will be further understood that several of the figures are merely schematic representations of the present technology. As such some of the components may have been distorted from their actual scale for pictorial clarity.

Information technology IT organizations face cyber threats and advanced attacks. Firewalls are an important part of network security. Firewalls control incoming and outgoing network traffic using a rule set. A rule for example allows a connection to a specific Internet Protocol IP address allows a connection to a specific IP address if the connection is secured e.g. using Internet Protocol security IPsec blocks a connection to a specific IP address redirects a connection from one IP address to another IP address logs communications to and or from a specific IP address and the like. A firewall rule at a low level of abstraction may indicate a specific IP address and protocol to which connections are allowed and or not allowed.

Managing a set of firewall rules is a difficult challenge. Some IT security organizations have a large staff e.g. dozens of staff members dedicated to maintaining firewall policy e.g. a firewall rule set . A firewall rule set can have tens of thousands or even hundreds of thousands of rules. Some embodiments of the present technology may autonomically generate a reliable declarative security policy at a high level of abstraction. Abstraction is a technique for managing complexity by establishing a level of complexity which suppresses the more complex details below the current level. The high level declarative policy may be compiled to produce a firewall rule set at a low level of abstraction.

Network also referred to as a computer network or data network is a telecommunications network that allows computers to exchange data. For example in network networked computing devices pass data to each other along data connections e.g. network links . Data is transferred in the form of packets. The connections between nodes are established using either cable media or wireless media. For example network includes at least one of a local area network LAN wireless local area network WLAN wide area network WAN metropolitan area network MAN and the like. In some embodiments network includes the Internet.

Data center is a facility used to house computer systems and associated components. Data center for example comprises computing resources for cloud computing services or operated for the benefit of a particular organization. Data center equipment for example is generally mounted in rack cabinets which are usually placed in single rows forming corridors e.g. aisles between them. Firewall creates a barrier between data center and network by controlling incoming and outgoing network traffic based on a rule set.

Optional core switch router is a high capacity switch router that serves as a gateway to network and provides communications between ToR switches and and between ToR switches and and network . ToR switches and connect physical hosts and respectively together and to network optionally through core switch router . For example ToR switches use a form of packet switching to forward data to a destination physical host of physical hosts and only transmit a received message to the physical host for which the message was intended.

Physical hosts are computing devices that act as computing servers such as blade servers. Computing devices are described further in relation to .

Environment includes hardware host operating system container engine and containers . In some embodiments hardware is implemented in at least one of physical hosts . Host operating system runs on hardware and can also be referred to as the host kernel. By way of non limiting example host operating system can be at least one of Linux Red Hat Atomic Host CoreOS Ubuntu Snappy Pivotal Cloud Foundry Oracle Solaris and the like. Host operating system allows for multiple instead of just one isolated user space instances e.g. containers to run in host operating system e.g. a single operating system instance .

Host operating system can include a container engine . Container engine can create and manage containers for example using an high level application programming interface API . By way of non limiting example container engine is at least one of Docker Rocket rkt Solaris Containers and the like. For example container engine may create a container e.g. one of containers using an image. An image can be a read only template comprising multiple layers and can be built from a base image e.g. for host operating system using instructions e.g. run a command add a file or directory create an environment variable indicate what process e.g. application or service to run etc. . Each image may be identified or referred to by an image type. In some embodiments images e.g. different image types are stored and delivered by a system e.g. server side application referred to as a registry or hub not shown in .

Container engine can allocate a filesystem of host operating system to the container and add a read write layer to the image. Container engine can create a network interface that allows the container to communicate with hardware e.g. talk to a local host . Container engine can set up an Internet Protocol IP address for the container e.g. find and attach an available IP address from a pool . Container engine can launch a process e.g. application or service specified by the image e.g. run an application such as one of APP described further below . Container engine can capture and provide application output for the container e.g. connect and log standard input outputs and errors . The above examples are only for illustrative purposes and are not intended to be limiting.

Containers can be created by container engine . In some embodiments containers are each an environment as close as possible to an installation of host operating system but without the need for a separate kernel. For example containers share the same operating system kernel with each other and with host operating system . Each container of containers can run as an isolated process in user space on host operating system . Shared parts of host operating system can be read only while each container of containers can have its own mount for writing.

Containers can include one or more applications APP and all of their respective dependencies . APP can be any application or service. By way of non limiting example APP can be a database e.g. Microsoft SQL Server MongoDB HTFS etc. email server e.g. Sendmail Postfix qmail Microsoft Exchange Server etc. message queue e.g. Apache Qpid RabbitMQ etc. web server e.g. Apache HTTP Server Microsoft Internet Information Services IIS Nginx etc. Session Initiation Protocol SIP server e.g. Kamailio SIP Server Avaya Aura Application Server 5300 etc. other media server e.g. video and or audio streaming live broadcast etc. file server e.g. Linux server Microsoft Windows Server etc. service oriented architecture SOA and or microservices process object based storage e.g. Lustre EMC Centera Scality RING etc. directory service e.g. Microsoft Active Directory Domain Name System DNS hosting service etc. and the like.

In contrast to hypervisor based virtualization using conventional virtual machines VMs not depicted in containers may be an abstraction performed at the operating system OS level whereas VMs are an abstraction of physical hardware. Since VMs virtualize hardware each VM instantiation has a full server hardware stack from virtualized Basic Input Output System BIOS to virtualized network adapters storage and central processing unit CPU . The entire hardware stack means that each VM needs its own complete OS instantiation and each VM must boot the full OS. Accordingly VMs are generally slower and consume more system resources e.g. memory and processor resources than containers . Each of VMs and containers can be referred to as workloads.

Orchestration layer can manage and deploy containers across one or more environments in one or more data centers of data center . In some embodiments to manage and deploy containers orchestration layer receives one or more image types e.g. named images from a data storage and content delivery system referred to as a registry not shown in . By way of non limiting example the registry can be the Google Container Registry. In various embodiments orchestration layer determines which environment of environments should receive each container of containers e.g. based on the environments current workload and a given redundancy target . Orchestration layer can provide means of discovery and communication between containers . According to some embodiments orchestration layer runs virtually e.g. in one or more containers orchestrated by a different one of orchestration layer and or physically e.g. in one or more physical hosts of physical hosts in one or more of data center . By way of non limiting example orchestration layer is at least one of Docker Swarm Kubernetes Cloud Foundry Diego Apache Mesos and the like.

Orchestration layer can maintain e.g. create and update metadata . Metadata can include reliable and authoritative metadata concerning containers e.g. containers . illustrates metadata example A a non limiting example of metadata . By way of illustration metadata example A indicates for a container at least one of an image name e.g. file name including at least one of a network device such as a host node or server that contains the file hardware device or drive directory tree such as a directory or path base name of the file type such as format or extension indicating the content type of the file and version such as revision or generation number of the file an image type e.g. including name of an application or service running the machine with which the container is communicating e.g. IP address host name etc. a respective port through which the container is communicating and other tag and or label e.g. a user configurable tag or label such as a Kubernetes tag Docker label etc. and the like. In various embodiments metadata is generated by orchestration layer which manages and deploys containers and can be very timely e.g. metadata is available soon after an associated container is created and highly reliable e.g. accurate . In addition or alternative to metadata example A other metadata may comprise metadata . For example other elements e.g. service name user configurable tag and or label and the like associated with models are used. By way of further non limiting example metadata includes an application determination using application identification AppID . AppID can process data packets at a byte level and can employ signature analysis protocol analysis heuristics and or behavioral analysis to identify an application and or service. In some embodiments AppID selectively inspects only a part of a data payload e.g. only parts of some of the data packets . By way of non limiting example AppID is at least one of Cisco Systems OpenAppID Qosmos ixEngine Palo Alto Networks APP ID and the like.

Referring back to security can receive metadata for example through application programming interface API . Other interfaces can be used to receive metadata . In some embodiments security can include models . Models can include a model of expected network communications behavior for an image type. For example expected network communications behaviors can include at least one of protocols and or ports that should be used by a container and who the container should talk to e.g. relationships between containers such as other applications and or services the container should talk to and the like. In various embodiments models are modifiable by an operator such that security policy is adapted to the evolving security challenges confronting the IT organization.

By way of additional non limiting example file server B e.g. HTTP File Server or HFS can be expected to communicate using HTTP and common secure management applications. For example file server B can be expected to communicate with application servers and infrastructure management devices. In various embodiments if file server B were to communicate with a user device using Hypertext Transfer Protocol HTTP then such a deviation from expected behavior could be used at least in part to detect a security breach.

Many other deviations from expected behavior are possible. Additionally other different combinations and or permutations of services protocols e.g. Advanced Message Queuing Protocol AMQP DNS Dynamic Host Configuration Protocol DHCP Network File System NFS Server Message Block SMB User Datagram Protocol UDP and the like and common ports communication partners direction and application payload and or message semantics e.g. Secure Shell SSH Internet Control Message Protocol ICMP Structured Query Language SQL and the like including ones not depicted in may be used.

In some embodiments using metadata and models security applies heuristics to generate a high level declarative security policy associated with a container e.g. of containers . A high level security policy can comprise one or more high level security statements where there is one high level security statement per allowed protocol port and or relationship combination. In some embodiments security determines an image type using metadata and matches the image type with one or more models associated with the image type. For example if when the image type corresponds to a certain database application then one or more models associated with that database are determined. A list of at least one of allowed protocols ports and relationships for the database may be determined using the matched model s .

In various embodiments security produces a high level declarative security policy for the container using the list of at least one of allowed protocols ports and relationships. The high level declarative security policy can be at least one of a statement of protocols and or ports the container is allowed to use indicate applications services that the container is allowed to communicate with and indicate a direction e.g. incoming and or outgoing of permitted communications. According to some embodiments single application service is subsequently used to identify several different machines associated with the single application service. The high level declarative security policy is at a high level of abstraction in contrast with low level firewall rules which are at a low level of abstraction and only identify specific machines by IP address and or hostname. Accordingly one high level declarative security statement can be compiled to produce hundreds or more of low level firewall rules.

The high level security policy can be compiled by security or other machine to produce a low level firewall rule set. Compilation is described further in related U.S. patent application Conditional Declarative Policies application Ser. No. 14 673 640 filed Mar. 30 2015 which is hereby incorporated by reference for all purposes.

According to some embodiments a low level firewall rule set is used by security to determine when the high level security policy is possibly violated. For example a database e.g. in a container of containers serving web pages using the Hypertext Transfer Protocol HTTP and or communicating with external networks e.g. network of could violate a high level declarative security policy for that database container. In various embodiments security is an enforcement point e.g. in a container of containers . Enforcement points are described further in related U.S. patent application Methods and Systems for Orchestrating Physical and Virtual Switches to Enforce Security Boundaries application Ser. No. 14 677 827 filed Apr. 2 2015 which is hereby incorporated by reference for all purposes. Detection of a potential violation of the high level security policy and violation handling are described further in related U.S. patent application System and Method for Threat Driven Security Policy Controls application Ser. No. 14 673 679 filed Mar. 30 2015 which is hereby incorporated by reference for all purposes. For example when a potential violation of the high level security policy is detected security or other machine such as an enforcement point issues an alert and or drops forwards network traffic that violates the high level declarative security policy.

In addition or alternative to image type another tag and or label e.g. user configurable name can be used to indicate application grouping. For example an operator using a tag and or label may introduce more granularity into the service definition e.g. differentiating between internal and external facing Web servers and customize default heuristics based upon their specific application architectures. In this way heuristics can be modifiable and extensible.

At step models associated with the image type and or the application service running may be acquired. At step a high level declarative security policy can be generated for the container using the model. At step the high level declarative security policy can be compiled or provided to another machine for compiling. After step method can optionally proceed back to step .

Alternatively method can optionally continue at step where an indication of a possible violation of the high level declarative security policy may be received for example in response to a determination e.g. by security or another machine such as an enforcement point that the compiled security policy is potentially violated. Optionally method can continue to step where an alert is provided and or violating network communications are dropped e.g. blocked or redirected. After step method can optionally proceed back to step .

In some embodiments method is performed autonomically without intervention by an operator. Operator intervention may not be needed since timely and authoritative metadata is accurate reducing the likelihood an incorrect high level descriptive security policy will be produced.

The components shown in are depicted as being connected via a single bus . The components may be connected through one or more data transport means. Processor unit s and main memory are connected via a local microprocessor bus and the mass data storage peripheral device s portable storage device and graphics display system are connected via one or more input output I O buses.

Mass data storage which can be implemented with a magnetic disk drive solid state drive or an optical disk drive is a non volatile storage device for storing data and instructions for use by processor unit s . Mass data storage stores the system software for implementing embodiments of the present disclosure for purposes of loading that software into main memory .

Portable storage device operates in conjunction with a portable non volatile storage medium such as a flash drive floppy disk compact disk digital video disc or Universal Serial Bus USB storage device to input and output data and code to and from the computer system in . The system software for implementing embodiments of the present disclosure is stored on such a portable medium and input to the computer system via the portable storage device .

User input devices can provide a portion of a user interface. User input devices may include one or more microphones an alphanumeric keypad such as a keyboard for inputting alphanumeric and other information or a pointing device such as a mouse a trackball stylus or cursor direction keys. User input devices can also include a touchscreen. Additionally the computer system as shown in includes output devices . Suitable output devices include speakers printers network interfaces and monitors.

Graphics display system include a liquid crystal display LCD or other suitable display device. Graphics display system is configurable to receive textual and graphical information and processes the information for output to the display device.

Peripheral device s may include any type of computer support device to add additional functionality to the computer system.

The components provided in the computer system in are those typically found in computer systems that may be suitable for use with embodiments of the present disclosure and are intended to represent a broad category of such computer components that are well known in the art. Thus the computer system in can be a personal computer PC hand held computer system telephone mobile computer system workstation tablet phablet mobile phone server minicomputer mainframe computer wearable or any other computer system. The computer may also include different bus configurations networked platforms multi processor platforms and the like. Various operating systems may be used including UNIX LINUX WINDOWS MAC OS PALM OS QNX ANDROID IOS CHROME and other suitable operating systems.

Some of the above described functions may be composed of instructions that are stored on storage media e.g. computer readable medium . The instructions may be retrieved and executed by the processor. Some examples of storage media are memory devices tapes disks and the like. The instructions are operational when executed by the processor to direct the processor to operate in accord with the technology. Those skilled in the art are familiar with instructions processor s and storage media.

In some embodiments the computing system may be implemented as a cloud based computing environment such as a virtual machine operating within a computing cloud. In other embodiments the computing system may itself include a cloud based computing environment where the functionalities of the computing system are executed in a distributed fashion. Thus the computing system when configured as a computing cloud may include pluralities of computing devices in various forms as will be described in greater detail below.

In general a cloud based computing environment is a resource that typically combines the computational power of a large grouping of processors such as within web servers and or that combines the storage capacity of a large grouping of computer memories or storage devices. Systems that provide cloud based resources may be utilized exclusively by their owners or such systems may be accessible to outside users who deploy applications within the computing infrastructure to obtain the benefit of large computational or storage resources.

The cloud is formed for example by a network of web servers that comprise a plurality of computing devices such as the computing system with each server or at least a plurality thereof providing processor and or storage resources. These servers manage workloads provided by multiple users e.g. cloud resource customers or other users . Typically each user places workload demands upon the cloud that vary in real time sometimes dramatically. The nature and extent of these variations typically depends on the type of business associated with the user.

It is noteworthy that any hardware platform suitable for performing the processing described herein is suitable for use with the technology. The terms computer readable storage medium and computer readable storage media as used herein refer to any medium or media that participate in providing instructions to a CPU for execution. Such media can take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media include for example optical magnetic and solid state disks such as a fixed disk. Volatile media include dynamic memory such as system random access memory RAM . Transmission media include coaxial cables copper wire and fiber optics among others including the wires that comprise one embodiment of a bus. Transmission media can also take the form of acoustic or light waves such as those generated during radio frequency RF and infrared IR data communications. Common forms of computer readable media include for example a floppy disk a flexible disk a hard disk magnetic tape any other magnetic medium a CD ROM disk digital video disk DVD any other optical medium any other physical medium with patterns of marks or holes a RAM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM a Flash memory any other memory chip or data exchange adapter a carrier wave or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to a CPU for execution. A bus carries the data to system RAM from which a CPU retrieves and executes the instructions. The instructions received by system RAM can optionally be stored on a fixed disk either before or after execution by a CPU.

Computer program code for carrying out operations for aspects of the present technology may be written in any combination of one or more programming languages including an object oriented programming language such as JAVA SMALLTALK C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present technology has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. Exemplary embodiments were chosen and described in order to best explain the principles of the present technology and its practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Aspects of the present technology are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present technology. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The description of the present technology has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. Exemplary embodiments were chosen and described in order to best explain the principles of the present technology and its practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

