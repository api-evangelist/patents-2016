---

title: Dynamic master data management
abstract: A computer-implemented method includes, in a master data management system, receiving a persistent modification request affecting a master data attribute, determining that no preexisting master record exists in the master data management system for the master data attribute, and, responsive to determining that no preexisting master record exists for the master data attribute, adding a new master data attribute and associated new ownership information for the master data attribute to the master data management system, based on the persistent modification request. A corresponding computer program product and computer system are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582660&OS=09582660&RS=09582660
owner: International Business Machines Corporation
number: 09582660
owner_city: Armonk
owner_country: US
publication_date: 20160620
---
The present invention relates generally to the field of master data management and more particularly to managing ownership of attributes in master data management systems.

Master data management MDM systems provide a platform for ensuring consistency of data across multiple systems and databases deployed by an enterprise user. For example a bank may have multiple source systems for interacting with customers in different ways such as deposit accounts investment accounts loans payment card management etc. all of which may need to interact with the customer s contact information. The bank may deploy an MDM system to ensure that the customer contact information is managed consistently.

Generally MDM systems may be characterized as physical virtual or hybrid. In a virtual MDM implementation data remains fragmented across various source systems in a distributed manner with a central indexing service. By contrast in a physical MDM implementation master data is stored and or created in a centralized system which is accessed by or pushed to the various source systems.

Hybrid MDM implementations blend the virtual and physical styles of management by allowing source systems to manage of some attributes and the central management of other attributes. In hybrid MDM implementations several capabilities are exposed that allow for seamless movement of master data entities between their virtual and physical representations. Enterprises continue to face challenges in managing the ownership of various attributes in MDM systems particularly hybrid MDM systems.

A computer implemented method includes in a master data management system receiving a persistent modification request affecting a master data attribute determining that no preexisting master record exists in the master data management system for the master data attribute and responsive to determining that no preexisting master record exists for the master data attribute adding a new master data attribute and associated new ownership information for the master data attribute to the master data management system based on the persistent modification request. A corresponding computer program product and computer system are also disclosed.

Referring now to the invention in more detail is a block diagram illustrating an exemplary operational environment incorporating various logical components for at least one embodiment of the present invention. Broadly an enterprise deploys a hybrid master data management MDM system for managing data consistency across multiple source systems . Source systems may include any data management system deployed by the enterprise for example a bank deploying MDM may operate different source systems for checking and savings accounts investment accounts loan accounts payment cards etc. The hybrid MDM system may be understood as deployed on any standalone or distributed computer or computing environment such as the exemplary computer of . The hybrid MDM system maintains a profile which may include various master data attributes including supplemental attributes and non supplemental attributes and corresponding ownership information . The profile may be understood to refer to a collection of attributes and not any specific system hardware unit or user. Ownership of any master data attribute in the context of the present invention means the right to modify the value of the attribute and the ownership information stores whether each master data attribute is centrally or virtually i.e. source system owned. In various embodiments the non supplemental attributes may be understood as owned by various source systems while supplemental attributes may be understood as centrally owned and thus supplemental to the data maintained by the source systems .

In various embodiments of hybrid MDM hybrid MDM is deployed by an enterprise as part of a transition strategy from virtual MDM to physical MDM wherein disparate preexisting source systems are harmonized via MDM but not all are immediately upgraded to take advantage of profile and its central control of data. To support this the hybrid MDM system is accessible at least through a physical application programming interface API and a virtual application programming interface API . Embodiments of the present invention may exist as an MDM request program which may receive a persistent modification request via the physical API . Various source systems may access the master data attributes via the physical API by sending a persistent modification request to change various affected attributes or directly via the virtual API with the understanding that as the enterprise continues to develop update or replace its source systems over time the virtual API will be disfavored and the physical API preferred until all systems use the physical API and the system may be described as physical MDM.

The inventors have observed and or recognized that existing implementations of hybrid MDM require the ownership information to be defined in. The definitions typically include all of the master data attributes . For the externally managed non supplemental attributes this includes defining survivorship rules for when various source systems present updates through the virtual API . For the centrally managed supplemental attributes the definition includes which supplemental attributes will exist and which source systems will be permitted to change them. The inventors have observed and or recognized that allowing the supplemental attributes to be dynamically created and owned would reduce the design time burden on the enterprise MDM user. While various embodiments of the present invention may address this and other problems and or offer this or other advantages it will be understood that the presence of such benefits are not essential to the practice of the invention and accordingly the invention is not to be understood as limited with respect to any problem recognized or advantaged discovered by the inventors.

Referring now to is a flowchart diagram depicting various operational steps for the MDM request program in accordance with various embodiments of the present invention. At step the MDM request program identifies a profile . In accordance with at least one MDM model specifically a hybrid MDM model though physical and virtual MDM models may be adapted for the present invention as well the profile may be administered updated and or accessed by the MDM request program via the physical API . At step the MDM request program receives the persistent modification request from one of the source systems . The persistent modification request is directed to the profile which includes a plurality of master data attributes . The persistent modification request may include any type of insert update delete or other database modification statement or action that if permitted would persistently modify the contents of the profile . The persistent modification request may affect one or more master data attributes those that are affected are termed one or more affected attributes .

At decision block the MDM request program iterates over the affected attributes affected by the persistent modification request . For each affected attribute of the one or more affected attributes at decision block the MDM request program determines whether there is a preexisting master record for the affected attribute. A preexisting master record is a previously set value for the variable designated by affected attribute in the profile . Specifically the MDM request program either identifies a preexisting master record associated with preexisting ownership information for the affected attribute or determines that no preexisting master record exists.

Referring still to if there is no preexisting master record for the affected attribute decision block NO branch then responsive to determining that no preexisting master record exists the MDM request program at step adds a new master data attribute and new ownership information to the profile based on the persistent modification request . Specifically the persistent modification request includes the values of the affected attributes and the associated source ownership data from which the new master data attribute is created. In the hybrid MDM system the ownership data may specify for each master data attribute ownership selected from the group consisting of a virtual ownership and b central ownership. When adding a new master data attribute central ownership may be intended in the interest of migrating the MDM system away from the virtual API and toward the physical API .

Referring still to if there is a preexisting master record for the affected attribute decision block YES branch then at decision block responsive to identifying the preexisting master record for the affected attribute the MDM request program selectively permits or denies the persistent modification request as to the affected attribute. Permitting or denying the persistent modification request may be based on various rules including the particular source system the ownership information and other bases. In some embodiments selectively permitting or denying the persistent modification request as to the affected attribute includes denying the persistent modification request as to the affected attribute if the preexisting ownership information indicates virtual ownership of the affected attribute and the persistent modification request is received via the physical application programming interface . In such embodiments changes to supplemental attributes may be generally allowed or selectively allowed subject to enterprise specific business rules. At step responsive to permitting the persistent modification request as to the affected attribute the MDM request program updates the preexisting master record for the affected attribute based on the persistent modification request .

In some embodiments the MDM request program may detect a conflict between the persistent modification request and one or more master records for the affected attributes and resolve the conflict by a stewardship event. A conflict condition may arise when a source system attempts to create a new supplemental attribute where a non supplemental attribute already exists or where an update to an existing supplemental attribute is suspect due to the application of one or more entity specific business rules to the persistent modification request . More formally in such embodiments the MDM request program may for each affected attribute of the one or more affected attributes detect a conflict between the persistent modification request as to the affected attribute and any of the plurality of master data attributes that has central ownership by contrast to the herein described steps a conflict with a master data attribute that has virtual ownership may be simply denied . In such embodiments selectively permitting or denying the persistent modification request as to the affected attribute includes generating a stewardship event.

Generating a stewardship event may include at least one stewardship action selected from the group consisting of a sending a task notification to a stewardship entity and b reconciling the conflict according to one or more business rules. A stewardship entity may be a computer service business unit or one or more individual users or some combination thereof that is authorized to modify the content of supplemental attributes within the profile . The stewardship entity may be tasked with responding investigating and or resolving the conflict. Alternatively some embodiments may incorporate automatic conflict resolution according to business rules. For example a bank entity user may treat a changed customer address as a conflict if it comes from a third party source such as a credit report but allow it if it comes from a privileged source such as the customer updating his or her address via a web interface.

In some embodiments the MDM system may implement a transaction system supports multi step operations that can be rolled back in case of a failure at any step or continued until all steps complete successfully and then committed. The persistent modification request may be part of a transaction on the MDM system as one step of several steps that may comprise the transaction. Steps of the transaction may include persistent modification requests such as the persistent modification request but may also include non modifying data access and or query operations directed to the profile or operations that are unrelated to the profile . In such embodiments responsive to allowing the persistent modification request for all of the one or more affected attributes the MDM request program may continue with the transaction by proceeding to the next step or committing the transaction if all steps are completed. Responsive to denying the persistent modification request for any of the one or more affected attributes the MDM request program may roll back and or abort the transaction.

As depicted the computer operates over a communications fabric which provides communications between the cache the computer processor s the memory the persistent storage the communications unit and the input output I O interface s . The communications fabric may be implemented with any architecture suitable for passing data and or control information between the processors e.g. microprocessors communications processors and network processors etc. the memory the external devices and any other hardware components within a system. For example the communications fabric may be implemented with one or more buses or a crossbar switch.

The memory and persistent storage are computer readable storage media. In the depicted embodiment the memory includes a random access memory RAM . In general the memory may include any suitable volatile or non volatile implementations of one or more computer readable storage media. The cache is a fast memory that enhances the performance of computer processor s by holding recently accessed data and data near accessed data from memory .

Program instructions for the MDM request program may be stored in the persistent storage or in memory or more generally any computer readable storage media for execution by one or more of the respective computer processors via the cache . The persistent storage may include a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive the persistent storage may include a solid state hard disk drive a semiconductor storage device read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by the persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of the persistent storage .

The communications unit in these examples provides for communications with other data processing systems or devices. In these examples the communications unit may include one or more network interface cards. The communications unit may provide communications through the use of either or both physical and wireless communications links. MDM request program may be downloaded to the persistent storage through the communications unit . In the context of some embodiments of the present invention the source of the various input data may be physically remote to the computer such that the input data may be received and the output similarly transmitted via the communications unit .

The I O interface s allows for input and output of data with other devices that may operate in conjunction with the computer . For example the I O interface may provide a connection to the external devices which may include a keyboard keypad a touch screen and or some other suitable input devices. External devices may also include portable computer readable storage media for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention may be stored on such portable computer readable storage media and may be loaded onto the persistent storage via the I O interface s . The I O interface s may similarly connect to a display . The display provides a mechanism to display data to a user and may be for example a computer monitor.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The present invention may be a system a method and or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data configuration data for integrated circuitry or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the blocks may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

