---

title: Periodic database search manager for multiple data sources
abstract: Systems and techniques for searching multiple data sources are described herein. Users may specify searches of multiple data sources to occur on a periodic basis. The searches may be configured to search time or date ranges that have not previously been searched. A user may select the data sources of interest and specify search terms, review and edit previously created searches, and review results of searches. The system automatically performs the specified searches, and notifies the user and/or a team of the user each time new results are found. The system may efficiently search the data sources by storing previous search results and comparing the previous results to current search results to identify new search results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547693&OS=09547693&RS=09547693
owner: PALANTIR TECHNOLOGIES INC.
number: 09547693
owner_city: Palo Alto
owner_country: US
publication_date: 20160511
---
Any and all applications for which a foreign or domestic priority claim is identified in the Application Data Sheet as filed with the present application are hereby incorporated by reference under 37 CFR 1.57.

This application claims benefit of U.S. Provisional Patent Application Ser. No. 62 249 088 entitled Periodic Database Search Manager for Multiple Data Sources filed Oct. 30 2015 which is hereby incorporated by reference in its entirety.

This application claims benefit of U.S. Provisional Patent Application Ser. No. 62 330 465 entitled Periodic Database Search Manager for Multiple Data Sources filed May 2 2016 which is hereby incorporated by reference in its entirety.

This application hereby incorporates by reference in their entireties and for all purposes each of the following 

U.S. Pat. No. 8 799 240 entitled System and Method for Investigating Large Amounts of Data which issued from U.S. patent application Ser. No. 13 167 680 filed Jun. 23 2011 the 240 patent .

U.S. Pat. No. 9 092 482 entitled Fair Scheduling for Mixed Query Loads which issued from U.S. patent application Ser. No. 13 826 228 filed Mar. 14 2013 the 482 patent .

U.S. patent application Ser. No. 14 859 882 entitled Systems and Interactive User Interfaces For Dynamic Retrieval Analysis and Triage of Data Items filed Sep. 21 2015 the 882 application .

The systems methods and devices described herein each have several aspects no single one of which is solely responsible for its desirable attributes. Without limiting the scope of this disclosure several non limiting features will now be discussed briefly.

One embodiment includes a computer implemented method for scheduling recurrent searches of multiple disparate electronic logs and for distributing results of the recurrent searches the computer implemented method comprising storing a first plurality of search results in a non transitory computer storage medium accessing a search object the search object comprising one or more search terms first and second data source identifiers and a frequency wherein the first data source identifiers corresponds to a first data source and the second data source identifier corresponds to a second data source and wherein each data source of the first and second data sources comprises an electronic log determining to query the first and second data sources based at least in part on the frequency querying the first and second data sources wherein each electronic log of the first and second data sources comprises electronic log entries wherein said querying determines a second plurality of search results comparing the first plurality of search results to the second plurality of search results in response to said comparison determining a new search result wherein the new search result is present in the second plurality of search results and not present in the first plurality of search results and transmitting a first alert wherein the first alert corresponds to the new search result.

In some embodiments the computer implemented method of the preceding paragraph can include a combination or sub combination of features. The first alert can include an electronic communication to a recipient. The computer implemented method can further include serializing the first plurality of search results to first data wherein storing the first plurality of search results comprises storing the first data in the non transitory computer storage medium accessing the first data from the non transitory computer storage medium and deserializing the first data to a first plurality of objects wherein comparing the first plurality of search results to the second plurality of search results comprises comparing the first plurality of objects to the second plurality of search results. The computer implemented method can further include serializing the second plurality of search results to second data and replacing in the non transitory computer storage medium the first data with the second data. The computer implemented method can further include querying the first data source at a first time wherein said querying of the first data source determines the first plurality of search results wherein the new search result corresponds to a log entry in the first data source the log entry comprising a timestamp the timestamp predating the first time and wherein the log entry was added to the first data source after the first time. The computer implemented method can further include receiving from a user interface user input corresponding to data properties of the search object and generating the first search object from the user input. The first plurality of search results can correspond to a first set of data objects and the second plurality of search results can correspond to a second set of data objects and wherein comparing the first plurality of search results to the second plurality of search results comprises using a set comparison operation on the first set of data objects and the second set of data objects. The search object can further include an event condition and determining to query the first and second data sources is further based at least in part on an event condition. The computer implemented method can further include receiving an event and wherein determining to query the first and second data sources is further based at least in part on the event condition indicating that the event has occurred. The event can correspond to a data sync of at least one of the first data source or the second data source.

Another embodiment includes a non transitory computer storage medium for storing computer executable instructions that when executed by a computer hardware processor perform operations comprising accessing a search object the search object comprising one or more search terms a data source identifier and a frequency wherein the data source identifier corresponds to a first data source querying the first data source at a first time wherein said querying at the first time determines a first plurality of search results determining to query the first data source again based at least in part on the frequency querying the first data source at a second time wherein said querying at the second time determines a second plurality of search results comparing the first plurality of search results to the second plurality of search results in response to said comparison determine a new search result wherein the new search result is present in the second plurality of search results and not present in the first plurality of search results and transmitting a first alert wherein the first alert corresponds to the new search result.

In some embodiments the non transitory computer storage medium of the preceding paragraph can include a combination or sub combination of features. The first alert can include an electronic communication to a recipient. The operations can further include serializing the first plurality of search results to first data storing the first data in a second non transitory computer storage medium accessing the first data from the second non transitory computer storage medium and deserializing the first data to a first plurality of objects wherein comparing the first plurality of search results to the second plurality of search results comprises comparing the first plurality of objects to the second plurality of search results. The operations can further include serializing the second plurality of search results to second data and replacing in the second non transitory computer storage medium the first data with the second data. The new search result can correspond to a log entry in the first data source the log entry can include a timestamp the timestamp predates the first time and wherein the log entry was added to the first data source between the first time and the second time. The operations can further include receiving from a user interface user input corresponding to data properties of the search object and generating the first search object from the user input. The first plurality of search results can correspond to a first set of data objects and the second plurality of search results can correspond to a second set of data objects and wherein comparing the first plurality of search results to the second plurality of search results comprises using a set comparison operation on the first set of data objects and the second set of data objects. The search object can further include an event condition and determining to query the first data source at the first time is further based at least in part on an event condition. The operations can further include receiving an event and wherein determining to query the first data source at the first time is further based at least in part on the event condition indicating that the event has occurred. The event can correspond to a data sync of at least the first data source.

Another embodiment includes a system for scheduling recurrent searches of multiple disparate data sources and for distributing results of the recurrent searches the system comprising a non transitory computer storage medium configured to store a first plurality of search results a search system the search system configured to search a plurality of data sources wherein each data source of the plurality of data sources comprises an electronic log an alert system and one or more hardware computer processors programmed via executable code instructions to access a search object the search object comprising one or more search terms a plurality of data source identifiers and an execution condition wherein the plurality of data source identifiers corresponds to first and second data sources of the plurality of data sources determine to query the first and second data sources based at least in part on the execution condition query via the search system the first and second data sources wherein each electronic log of the first and second data sources comprises electronic log entries wherein said querying determines a second plurality of search results compare the first plurality of search results to the second plurality of search results in response to said comparison determine a new search result wherein the new search result is present in the second plurality of search results and not present in the first plurality of search results transmit a first alert to the alert system wherein the first alert corresponds to the new search result.

In some embodiments the computing system of the preceding paragraph can include a combination or sub combination of features. The execution condition can include at least one of a frequency or an event condition. The one or more hardware processors can be further programmed to receive an event and wherein determining to query the first and second data sources is further based at least in part on the execution condition indicating that the event has occurred. The event can correspond to a data sync of at least one of the first data source or the second data source. The one or more hardware processors can be further programmed to serialize the first plurality of search results to first data wherein the non transitory computer storage medium is configured to store the first plurality of search results as the first data access the first data from the non transitory computer storage medium and deserialize the first data to a first plurality of objects wherein comparing the first plurality of search results to the second plurality of search results comprises comparing the first plurality of objects to the second plurality of search results. The one or more hardware processors can be further programmed to serialize the second plurality of search results to second data and replace in the non transitory computer storage medium the first data with the second data. The one or more hardware processors can be further programmed to query via the search system the first data source at a first time wherein said querying of the first data source determines the first plurality of search results wherein the new search result corresponds to a log entry in the first data source the log entry comprises a timestamp the timestamp predates the first time and wherein the log entry was added to the first data source after the first time. The first plurality of search results can correspond to a first set of data objects and the second plurality of search results can correspond to a second set of data objects and wherein comparing the first plurality of search results to the second plurality of search results comprises using a set comparison operation on the first set of data objects and the second set of data objects.

Although certain preferred embodiments and examples are disclosed below inventive subject matter extends beyond the specifically disclosed embodiments to other alternative embodiments and or uses and to modifications and equivalents thereof. Thus the scope of the claims appended hereto is not limited by any of the particular embodiments described below. For example in any method or process disclosed herein the acts or operations of the method or process may be performed in any suitable sequence and are not necessarily limited to any particular disclosed sequence. Various operations may be described as multiple discrete operations in turn in a manner that may be helpful in understanding certain embodiments however the order of description should not be construed to imply that these operations are order dependent. Additionally the structures systems and or devices described herein may be embodied as integrated components or as separate components. For purposes of comparing various embodiments certain aspects and advantages of these embodiments are described. Not necessarily all such aspects or advantages are achieved by any particular embodiment. Thus for example various embodiments may be carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other aspects or advantages as may also be taught or suggested herein.

In order to facilitate an understanding of the systems and methods discussed herein a number of terms are defined below. The terms defined below as well as other terms used herein should be construed to include the provided definitions the ordinary and customary meaning of the terms and or any other implied meaning for the respective terms. Thus the definitions below do not limit the meaning of these terms but only provide example definitions.

Ontology Stored information that provides a data model for storage of data in one or more databases. For example the stored data may comprise definitions for object types and property types for data in a database and how objects and properties may be related.

Database Any data structure and or combinations of multiple data structures for storing and or organizing data including but not limited to relational databases e.g. Oracle databases mySQL databases etc. non relational databases e.g. NoSQL databases etc. in memory databases spreadsheets as comma separated values CSV files eXtendible markup language XML files TeXT TXT files flat files spreadsheet files and or any other widely used or proprietary format for data storage. Databases are typically stored in one or more data stores. Accordingly each database referred to herein e.g. in the description herein and or the figures of the present application is to be understood as being stored in one or more data stores. The terms database and data source may be used interchangeably in the present disclosure.

Data Store Any computer readable storage medium and or device or collection of data storage mediums and or devices . Examples of data stores include but are not limited to optical disks e.g. CD ROM DVD ROM etc. magnetic disks e.g. hard disks floppy disks etc. memory circuits e.g. solid state drives random access memory RAM etc. and or the like. Another example of a data store is a hosted storage environment that includes a collection of physical data storage devices that may be remotely accessible and may be rapidly provisioned as needed commonly referred to as cloud storage .

Data Object Object Data Item Item or Data Entity Entity A data container for information. A data object may be associated with a number of definable properties as described herein . As described herein a search object is an example data object for conducting recurrent searches. A data object may represent a specific thing or a group of things in the world. For example a data object may represent an item such as a person a place an organization an account a computer an activity or other noun. A data item may represent an event that happens at a point in time or for a duration. A data item may represent a document or other unstructured data source such as an e mail message a news report or a written paper or article. Each data item may be associated with a unique identifier that uniquely identifies the data item. The terms data object data item data entity item object and entity may be used interchangeably and or synonymously in the present disclosure.

Item or Entity or Object Type Type of a data item for example Person Event or Document . Data item types may be defined by an ontology and may be modified or updated to include additional data item types. An data item definition for example in an ontology may include how the data item is related to other data items such as being a sub data item type of another data item type for example an agent may be a sub data item of a person data item type and the properties the data item type may have.

Properties Also referred to herein as attributes or metadata of data items. A property of a data item may include any item of information associated with and or relevant to the data item. At a minimum each property of a data item has a property type and a value or values. For example properties associated with a person data item may include a name for example John Doe an address for example 123 S. Orange Street and or a phone number for example 800 0000 among other properties. In another example properties associated with a computer data item may include a list of users for example user1 user 2 and the like and or an IP internet protocol address among other properties.

Property Type The type of data a property is such as a string an integer or a double. Property types may include complex property types such as a series data values associated with timed ticks for example a time series and the like.

Property Value The value associated with a property which is of the type indicated in the property type associated with the property. A property may have multiple values.

Recurrent or Recurring Search Refers to a search of a data source that is scheduled and or occurs one or more times. A non limiting example recurrent search is a periodic search such as a search occurring and or being initiated every 15 minutes 30 minutes hourly daily weekly any other periodic pattern and or some combination thereof. In some embodiments a recurrent search may be based on some other schedule that is non periodic. For example a recurrent search may be triggered by an event and or may be based on evaluation of data coming into the system. For example the system may be configured to initiate a search when new data is added to a data source which may occur on an ad hoc basis. Accordingly the event and or data driven searches may occur in real time or substantially in real time.

Analysts may be interested in searching enormous data sets on a recurring and or automatic basis. The data sets may be from multiple disparate data sources that include gigabytes terabytes or even petabytes of data. Non limiting example data sources include electronic logs such as proxy logs virtual private network VPN logs malware lists email logs phone call logs vehicle logs geographic logs or other electronic logs discussed herein. Example searches include partial text string matching for known uniform resource locators URLs or names of malware within the electronic logs. Accordingly the systems and techniques discussed herein may be used to automatically identify potential threats that may be intrinsically tied to network and or computer technology such as proxy logs network security malware phishing and or other computer related areas. Those analysts may also be interested in receiving alerts via electronic communications and or via an alert system to review search results.

Disclosed herein are systems and methods for enabling a user to specify searches of multiple data sources to automatically occur on a periodic basis. For example a user may create a search object that specifies the data sources of interest search terms and a frequency for the search to occur. The user may configure new and or edit recurrent searches on an ad hoc basis through the user interface of the system. Example frequencies for recurrent searches include every fifteen minutes thirty minutes hourly daily weekly any other periodic pattern and or some combination thereof. In some embodiments queries are sent to a search system that efficiently searches multiple disparate data sources. For example the search system may be optimized to efficiently search the data sources based on the last search timestamp to only search data source entries after the last search timestamp. The user may also review and edit previously created searches and review results of searches. The system automatically performs the specified searches and notifies the user and or a team of the user each time new results are found. For example an email electronic communication alert such as email may be sent to one or more users and or teams. In some embodiments alerts may be sent to an alert system that enables a user and or users of one or more permissioned groups to view the search results.

Embodiments of the present disclosure relate to an efficient and or optimized alerting system. For example search results may be viewed in more detail in an optimized alert graphical user interface. In an embodiment data related to search results is transmitted from a search management system to an alert system. In this embodiment the alert system may use the received data to generate the alert and or to enhance the received data with additional information that may be useful to an analyst in reviewing the search result. Additionally or alternatively the alert system may send an electronic communication alert that optionally includes a link to view the alert in the alert system.

Embodiments of the present disclosure relate to a search management system that may automatically search multiple data sources in a memory efficient and or resource efficient manner. For example the recurrent searches of the search management system may repeatedly search the multiple data sources such that the searching is targeted towards recently added data and or avoids recurrent searches of previously searched data which may be from data sources of terabytes or petabytes of data. Accordingly the systems and methods described herein may provide early notification associated with one or multiple data sources when there has been an update to those respective data sources that correspond to user specified criteria.

The example search management system includes a search process manager a user interface server an alert manager and search storage . In this embodiment a user may perform operations via the user interface server such as selecting data sources of interest specifying one or more search terms reviewing and or editing previously created searches and or reviewing results of searches as described in further detail herein. As illustrated user created recurrent searches may be stored in search storage as search objects . Search process manager may access the search objects to automatically query the data sources via the search system . The search process manager may store the search results from the search system in the search storage cause presentation of the results in the user interface server and or distribute results via the alert system each of which is as described in further detail herein. Additionally or alternatively the search process manager may store the search results from the search system in the data sources of the search system .

In this embodiment the search management system communicates with the search system and the alert system . For example the search system may be configured to query disparate data sources in an efficient manner. The example alert system may provide a user interface that enables users to view alerts and or search results. In other embodiments the search system and or the alert system are optional and the search management system may query the data sources and or present the user interfaces described herein.

Beginning at block the search process manager accesses a search object. A search object may be created and or edited via the user interface server which is described in greater detail with respect to . The example search object A of may illustrate various properties of a search object. For example a search object may include a status property that indicates whether the search object is enabled or disabled. The search object may specify one or more search terms such as an IP address domain name phone number and or any other strings one more data sources a frequency such as a time frequency of thirty minutes or one hour a parameter for when the search should expire such as automatically becoming disabled an event that may cause a search to run a permissions group and or a last execution timestamp that indicates the last time a search was run. As will be described with respect to process the search process manager may continually poll the search storage to access the search objects on a recurring basis.

At block the search process manager determines whether to initiate a search based on the accessed search object at block . For example the search process manager checks the status property and determines to initiate a search based on the search object if the status is enabled. If the status is disabled the search process manager exits the process loop and returns to block process other search objects and or this same search object at a later time for example the status of the search object may be changed from disabled to enabled. The search process manager may also determine whether to initiate a search from the search object based on the current timestamp and the frequency and the last execution timestamp properties of the search object. For example the search object contains a frequency property for recurrent searches every fifteen minutes and a last execution timestamp of 2015 10 21 12 45 13 GMT. The search process manager accesses the current timestamp. If the current timestamp is 2015 10 21 12 50 30 GMT then the search process manager does not initiate a search because the fifteen minute periodic time has not elapsed and the search process manager exits the loop and returns to block . However if the current timestamp is 2015 10 21 13 01 10 GMT then the search process manager determines that a search should be initiated and proceeds to the next block.

Additionally or alternatively the search process manager determines whether to initiate a search based on an event. For example the accessed search object may include an event condition that may cause a search to run. Example events include a data sync event or a scheduled user downtime event. Example user downtime events include when a computing system for users is unavailable and or a beginning time for when there is low usage by users of the computing system e.g. after work hours late at night and or early in the morning. Continuing with the example the search process manager may receive an indication or event and or determine that the event has occurred and then initiate a search based on the received indication or event and or determination that the event has occurred. In some embodiments it may be advantageous to initiate searches based on events. For example initiating a search after a data sync may advantageously search the recently updated data. As another example initiating a search after user downtime may advantageously avoid interfering and or adversely affecting the user experience since searching the data sources may adversely affect the user experience due to performance impacts from the searching.

At block the search process manager uses the search object to query the one or more data sources via the search system. In some embodiments the search system includes an Application Programming Interface to receive the one or search terms the one or more data sources and other inputs. As discussed herein the one or more data sources may include electronic logs. Further the search system may efficiently search the data source s to only search those data source entries that have a corresponding timestamp after the last execution timestamp of the search object. Accordingly previously found search results are not included in the search results from the current periodic search. In other words in some embodiments the search process manager searches the date ranges that it has not searched before. For example if the search process manager initiated a search at 10 00 and then initiated another search again at 10 15 the search process manager would search the search system for the specific search terms in the 10 00 10 15 time range. The most recently searched time or the last execution timestamp is tracked in the search object. Searching by the search system may include textual partial textual searching geographic searching searching using regular expressions and or searching using wildcards. For example if the search string is www.evil.com the search system may search the one or more data sources for entries that match www.evil.com or a partial match such as evil.com. Additional information regarding searching via indexes and other techniques is described in the 240 patent e.g. see Col. 151.41 Col. 221.34.

In some embodiments the search system searches one or more disparate data sources in an efficient manner. The data sources may be from numerous devices from one or more entities such as proxy logs VPN logs malware lists badge logs phone call logs blacklists whitelists email logs process logs intrusion detection system logs credit card transaction data etc. The search system may be agnostic to the type of data sources and may be capable of supporting searches for any types of data sources. The search system may efficiently search a subset of a particular electronic log and not the entire electronic log. For example the search system may identify a subset of the electronic log entries that have corresponding timestamps after a particular time. Additionally or alternatively the search system may use indexes and or checkpoints within the electronic logs and or data structures corresponding to the electronic logs to efficiently search the electronic logs. As discussed herein in other embodiments the search management system searches the data sources directly.

Additional information regarding searching large amounts of data multiple data sources and the search system is found in U.S. Pat. No. 8 799 240 and U.S. Pat. No. 9 092 482. For example the 240 patent describes searching large amounts of data in Col. 31.6 Col. 221.34 and in particular describes using key values to efficiently search multiple large data sources each of which may be used by the search system . As another example the 482 patent describes a efficiently scheduling queries of databases in Col. 31.21 Col. 121.34 which may be used by the search system .

In some embodiments the search object supports complex logic for performing searches. For example in addition to one or more search terms the search object may include Boolean instructions for conducting searches. An example Boolean instruction includes Boolean algebra such as evil.com musicevil.com which would match results with evil.com but excludes the domain name of musicevil.com. Another example Boolean instruction would be to match a particular search term with another condition. In some embodiments the complex logic may include conditional instructions based on data types. For example in the same search object different search terms may be specified for different data types and or data sources. Continuing with the example the search object may include the search instruction if type IP address then 101.12.19.11 if type domain then evil.com which would instruct the system to search for 101.12.19.11 among IP address data types and or data sources and to search for evil.com among domain data types and or data sources.

At block the search process manager receives the search results from the search system . The example search result A of may illustrate various properties of a search result. In some embodiments the properties of a search result may be customized for a particular data type and or data source. For example as illustrated example search result A includes properties such as the data source computer name IP address and a timestamp from the respective electronic log and or data source. Other example properties for search results include a person s name and or identifier a malware name and or identifier or any other property that may be associated with an electronic log.

At block the alert manager and or alert system generates and transmits an electronic communication alert. For example an email alert may be transmitted to one or more email addresses corresponding to particular users and or list serves. In some embodiments the email alert contains information identifying the particular search object for which search results were found. Additionally or alternatively the email alert includes the search results and or excerpts from the electronic log corresponding to the search results. Additional information regarding electronic communication alerts are described in further detail with respect to . Other example electronic communication alerts include chat message notifications and or text message alerts.

At block the alert manager generates and transmits an alert to the alert system . For example the alert may include the search results and or other information associated with the respective search object for the search result. The alert system may include user interfaces for presenting the alert information. Additional information regarding alerts user interfaces and the alert system are described in further detail with respect to . Further additional information regarding alerts user interfaces and the alert system is found in U.S. patent application Ser. No. 14 579 752 entitled Systems and User Interfaces For Dynamic And Interactive Investigation Of Bad Actor Behavior Based On Automatic Clustering Of Related Data In Various Data Structures filed Dec. 22 2014 the 752 application which is hereby incorporated by reference in its entirety and for all purposes. For example the 752 application describes example user interfaces for an alert system in paragraphs 0214 0228 among others. As another example the alert system and or the search management system may perform the clustering methods and techniques described in paragraphs 0149 0160 among others of the 752 application. For example the alert system may use the search result and or properties from the search result such as computer name user name IP address etc. as a seed for clustering which is described in further detail in the 752 application.

In some embodiments the alert manager generates other forms of alerts other than those described up blocks and . For example the alert manager generates textual alerts and or other data object alerts for use by the search management system . For example the search management system may present the generated alerts via the user interface server and or may store the alerts in the search storage which is described in further detail below. As discussed herein at blocks and and or during other alert distribution the alert manager uses the properties of the search objects such as the recipients and or the permissions of the respective search objects to determine the recipients of the alerts.

At block the alert manager stores the search results and or alerts in the search storage . In some embodiments the search results and or alerts may be viewed in a user interface. Additionally or alternatively the search management system may distribute the search results and or alerts to users and or to other systems. In some embodiments some of blocks and or are optional. For example the alert manager may send one alert instead of multiple alerts via different systems. Accordingly following the sending of one or more alerts process returns to block to continue checking and conducting recurrent searches. For example the search object with a frequency property of 15 minutes will cause a search to be executed by the search process manager approximately every 15 minutes. In some embodiments if there are no search results based on a particular search then no alerts will be sent.

Example access control item includes group and permission . Example group identifies a set of users and or teams. Example permission identifies an operation that a user in the set can perform on search data . Additionally or alternatively example permission further identifies an operation the user in the set can perform on access control list . Non limiting examples of permission include read write owner create delete read only and or some combination thereof.

In some embodiments if access control list has a classification then a user must be authorized for the classification . Thus classification may override permission granted to the entity and or user. For example one possible set of classification markings as part of classification include Top Secret Secret Confidential Restricted For Official Use Only among others while another example classification scheme may use the markings Public and Restricted among others. For example the permissions of an access control list may indicate that a particular data object should not be shared with particular users.

In other embodiments the search management system may send electronic communication alert that includes the search results and or excerpts from a log file. For example elements of the example electronic communication alert may be similar to electronic communication alert such as similarities between links A A and A of alert and links A A and A of alert respectively. Alert may include search results that displays portions of the electronic log where there was a positive match based on the search object. In some embodiments search results may include a portion of the search results. For example search results may include a predefined and or configurable number of search results such as the 100 most recent entries from the electronic log. The search results of the electronic communication may be configurable. For example an administrator may configure the electronic communication to omit particular columns from the search results . As illustrated in the body of the communication alert the communication alert may report new results as compared to a previous search which may correspond to the example process as described in further detail with respect to .

The example search results illustrate another example table that may be included in the communication alert . For example instead of listing IP addresses as shown in the search results the search results may list license plate identifiers corresponding to geographic coordinates such as latitudinal and longitudinal coordinates. As described herein the search management system may be capable of scheduling recurrent searches to identify data entries that correspond to a geographic location and or area.

In some embodiments the electronic communication alerts may be configurable. For example the search management system may allow users and or administrators to configure the electronic communication alerts. Continuing with the example a user and or administrator may specify the information and or links in the electronic communication alerts such as any of the information and or features in the user interfaces described herein.

In some embodiments user interfaces and or may be configured via the alert system to display search results and or alerts based on permissions. For example a search object may be configured to not only particular user however the permissions associated with the search object may enable the user to view the search results and or alerts and user interfaces and or because the user may belong to the permissioned group. A permissioned group may be based on the access control list as described herein with respect to .

Embodiments of the present disclosure relate to a search management system that may automatically search multiple data sources and may be capable of detecting retrospective changes to a data source. For example data may be backfilled in a data source and the recurrent searches of the search management system may be capable of detecting a matching search result within the backfilled data. The search management system may be able to determine search results in a memory efficient and or resource efficient manner. In some embodiments the capability to identify search results retrospectively such as in the case of backfilled data may occur alternatively or additionally to the processes of avoiding recurrent searches of previously searched data as described herein.

As illustrated user created recurrent searches may be stored in search storage as search objects . For example the search object B D may represent various properties of a search object. In the example the search object B D may be stored and or accessed in a JavaScript Object Notation JSON data format. The example search object B D includes one or more queries. An example query may specify a data source to be queried and one or more matching criteria which may include one or more comparison operators. For example various matching criteria may correspond to textual matching partial textual matching geographic matching at one or more coordinates and or within a geographic area matching using regular expressions and or matching using wildcards. The search object B D may specify one or more indices of a data source a frequency a parameter for the oldest search results to look for a parameter for when the search should begin a parameter for when the search should expire expiryDate such as automatically becoming disabled a predetermined and or maximum number of results to return one or more recipients an event that may cause a search to run and or a permissions group. Search process manager may access the search objects to automatically query the data sources via the search system .

As described herein the search process manager may store the search results from the search system in the search storage . For example for a current search the search results may be stored and or serialized to the search storage . In some embodiments the most recent search results may replace previous search results to conserve memory resources. The search process manager may cause presentation of the results in the user interface server and or distribute results via the alert system each of which is as described in further detail herein. In some embodiments the user interface server and or the search management system enables a user the capability of row by row deletion of data entries in the data sources .

In some embodiments the search management system enables a user to search using a tag. A tag may be a data structure identifying multiple related indices from multiple data types and or data sources. For example IP or domain name indices may be found in multiple discrete data types and or data sources. Thus a tag for IP indices in multiple data types and or data sources may enable searching of multiple data types and or data sources at once for the same search term and or parameter. A recurring search may also be configured with a search object that includes one or more search terms and or parameters for one or more tags.

Beginning at block the search process manager accesses a search object. A search object may be created and or edited via the user interface server which is described in greater detail with respect to . The example search object A of and or the example search object B D of may illustrate various properties of a search object. For example a search object may include a status property that indicates whether the search object is enabled or disabled. The search object may specify one or more search terms such as an IP address domain name phone number and or any other strings one or more queries one or more indices of the data source one or more match criterion one or more comparators one more data sources a frequency such as a time frequency of thirty minutes or one hour a parameter for the oldest search results to look for a parameter for when the search should begin a parameter for when the search should expire such as automatically becoming disabled a predetermined and or maximum number of results to return one or more recipients an event that may cause a search to run and or a permissions group. In some embodiments the search object includes an execution condition that indicates when the search process manager should execute one or more queries of the search object. As described herein the execution condition may specify a frequency or an event that causes the query execute. As will be described with respect to process the search process manager may continually poll the search storage to access the search objects on a recurring basis.

At block the search process manager determines whether to initiate a search based on the accessed search object at block . For example the search process manager checks the status property and determines to initiate a search based on the search object if the status is enabled. If the status is disabled the search process manager exits the process loop and returns to block process other search objects and or this same search object at a later time for example the status of the search object may be changed from disabled to enabled. The search process manager may also determine whether to initiate a search from the search object based on a current timestamp the start and or expiration dates of the search object the frequency the search object an event and or a last execution timestamp associated with the search object. In one example the example search object contains a frequency property for recurrent searches every fifteen minutes and there is an associated last execution timestamp of 2015 10 21 12 45 13 GMT. The search process manager accesses the current timestamp. If the current timestamp is 2015 10 09 12 50 30 GMT and the start and expiration dates are 2015 09 01 00 00 00 and 2015 10 01 00 00 00 respectively then the search process manager does not initiate a search because the fifteen minute periodic time has not elapsed and the search process manager exits the loop and returns to block . However if the current timestamp is 2015 10 21 13 01 10 GMT then the search process manager determines that a search should be initiated and proceeds to the next block. As described herein the search process manager may evaluate an execution condition of the search object to determine whether to initiate a search. For example initiating a search after receiving and or determining an event has occurred which is described in further detail with respect to block of .

At block the search process manager uses the search object to query the one or more data sources via the search system. In some embodiments the search system includes an Application Programming Interface to receive the one or search terms the one or more data sources and other inputs. As discussed herein the one or more data sources may include electronic logs. The search system may search the entire data sources such as electronic logs for the one or more search terms. Additionally or alternatively to block of block may identify search results that precede the last execution timestamp. For example by retrieving all matching results regardless of a time property associated with data in the data sources data may be back filled into the data source and the search process manager may identify new search results even though the data source may contain entries with timestamps before the last execution timestamp but that were inserted into the data source after the most recent search execution and or out of order. Accordingly previously found search results could be included in the present search results from the current periodic search. In some embodiments a configurable threshold of maximum and or predefined results may be used by the search process manager and or system . For example the maximum number of results may be set to 100. In the example the search system may query the data sources for the first matching results. Alternatively the search system may retrieve all matching results and the maximum number of results may be determined at a later block such as block as described herein. Searching by the search process manager and or the search system may include textual partial textual searching geographic searching searching using regular expressions and or searching using wildcards. For example if the search string is www.evil.com the search system may search the one or more data sources for entries that match www.evil.com or a partial match such as evil.com. Additional information regarding searching via indexes and other techniques is described in the 240 patent e.g. see Col. 151.41 Col. 221.34 or in the 882 application e.g. see paragraphs 0058 0135 .

At block the search process manager receives the search results from the search system . In the first search results at blocks and may refer to the current search results. The example search result A of and or may illustrate various properties of a search result. In some embodiments the properties of a search result may be customized for a particular data type and or data source. For example as illustrated example search result A includes properties such as the data source computer name IP address and a timestamp from the respective electronic log and or data source. Other example properties for search results include a person s name and or identifier a malware name and or identifier or any other property that may be associated with an electronic log. In some embodiments since the search system may identify results from any time period the example search result A may be identified from a current search such as a search occurring on 2015 10 25 even though the example search result A has a timestamp that precedes the current time such as a timestamp of 2015 10 21 13 13 56 GMT . Moreover in some embodiments the particular data entry corresponding to the example search result A may have been backfilled to the data source such as the data being added on 2015 10 24 and the current search such as occurring on 2015 10 25 may identify a new search result corresponding to the recently added data. In the example the backfilled data entry which corresponds to the search result A may predate a previous search such as a previous search occurring on 2015 10 23 for example however since subsequent searches can search retrospectively and can detect new data entries regardless of those new entries timestamps the backfilled data entry may be detected in the current search. As discussed herein the search process manager may limit the number of results to a predetermined maximum number of results. For example the maximum number of results may be limited to a configurable number of 100 1000 10000 or 100000 results. Accordingly example process may efficiently determine a sliding window of a predefined number of results based on each time the search process manager initiates a new search.

At block the search process manager compares the current search results with previous search results where applicable. For example the search results may be in a data object format. Example data object formats include Java or C data objects. As described herein previous search results may be accessed in a data object format. Accordingly the search process manager may compare the current search results and the previous search results. An example comparison may be a Set comparison such as a Java Set comparison operation. If this is the first time that a recurrent search detects results than no comparison is necessary and the current search results would be new results and the search process manager would proceed to block . As described herein in some embodiments the search results may be serialized and or stored in a serialized data format in the search storage . Accordingly the previous search results may be deserialized from the search storage into data objects for comparison in block .

At block based on the comparison at block the search process manager determines if there any new results and or any change in results. For example the comparison at block such as a Set comparison determines that there any new data objects in the current search results as compared to the previous search results. If there are no new search results the search process manager returns to block . Returning to block after block may efficiently process the search results because blocks and or may be skipped which may conserve resources and or reduce processor usage. If there are new search results the search process manager proceeds to block .

At block the alert manager generates and transmits an electronic communication alert. For example an email alert may be transmitted to one or more email addresses corresponding to particular users and or list serves. In some embodiments the email alert contains information identifying the particular search object for which search results were found. Additionally or alternatively the email alert includes the search results and or excerpts from the data source s corresponding to the search results. Additional information regarding electronic communication alerts are described in further detail with respect to . Other example electronic communication alerts include chat message notifications and or text message alerts.

At block the alert manager and or alert system generates and transmits an alert to the alert system . For example the alert may include the search results and or other information associated with the respective search object for the search result. The alert system may include user interfaces for presenting the alert information. Additional information regarding alerts user interfaces and the alert system are described in further detail with respect to . Further additional information regarding alerts user interfaces and the alert system is found in U.S. patent application Ser. No. 14 579 752. For example the 752 application describes example user interfaces for an alert system in paragraphs 0214 0228 among others. As another example the alert system and or the search management system may perform the clustering methods and techniques described in paragraphs 0149 0160 among others of the 752 application. For example the alert system may use the search result and or properties from the search result such as computer name user name IP address etc. as a seed for clustering which is described in further detail in the 752 application. In some embodiments the alert system may be capable of sending electronic communication alerts.

At block the alert manager stores the search results and or alerts in the search storage . For example the current search results may be stored in the search storage . An example method for storing search results that are in a data object format may be serializing the objects and storing the serialized objects in the search storage . In some embodiments the serialized search results may replace the previous search results in the search storage to conserve memory resources in the search storage . Accordingly the next time the current search runs the search process manager may retrieve the previous results from the search storage at block such as by converting the serialized results into data objects also known as deserialization. In some embodiments block may be executed any time search results are retrieved thereby storing search results after any run instead of being stored when there are new results as illustrated in the example method . In some embodiments search results in the search storage may not be discarded and or replaced. For example the search results for each recurrent search may be stored for a period of time. Block may be similar to block of .

The various computing device s discussed herein such as the search management system search process manager alert manager user interface server and or user computing device are generally controlled and coordinated by operating system software such as but not limited to iOS Android Chrome OS Windows XP Windows Vista Windows 7 Windows 8 Windows Server Windows CE Unix Linux SunOS Solaris Macintosh OS X VxWorks or other compatible operating systems. In other embodiments the computing devices may be controlled by a proprietary operating system. Conventional operating systems control and schedule computer processes for execution perform memory management provide file system networking I O services and provide a user interface functionality such as a graphical user interface GUI among other things. The search management system may be hosted and or executed on one or more computing devices with one or more hardware processors and with any of the previously mentioned operating system software.

The search management system may execute software e.g. standalone software applications applications within browsers network applications etc. whether by the particular application the operating system or otherwise. Any of the systems discussed herein may be performed by the search management system and or a similar computing system having some or all of the components discussed with reference to .

The search management system includes a bus or other communication mechanism for communicating information and a hardware processor or multiple processors coupled with bus for processing information.

The search management system also includes a main memory such as a random access memory RAM cache and or other dynamic storage devices coupled to bus for storing information and instructions to be executed by processor s . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor s . Such instructions when stored in storage media accessible to processor s render the search management system into a special purpose machine that is customized to perform the operations specified in the instructions. Such instructions as executed by hardware processors may implement the methods and systems described herein for scheduling recurrent searches from multiple data sources and or for providing the search results to one or more users.

The search management system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor s . A storage device such as a magnetic disk optical disk or USB thumb drive Flash drive etc. is provided and coupled to bus for storing information and instructions. The search process manager and or the alert manager of may be stored on the main memory and or the storage device .

In some embodiments each of the search storage and or the data sources of may correspond to a distributed database management system such as but not limited to Apache Cassandra an Elastisearch system a file system relational database such as but not limited to MySql Oracle Sybase or DB2 and or a distributed in memory caching system such as but not limited to Memcache Memcached or Java Caching System.

The search management system and or user computing device may be coupled via bus to a display such as a cathode ray tube CRT or LCD display or touch screen for displaying information to a computer user. An input device is coupled to bus for communicating information and command selections to processor . One type of input device is a keyboard including alphanumeric and other keys. Another type of input device is a touch screen. Another type of user input device is cursor control such as a mouse a trackball a touch screen or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device may have two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane. In some embodiments the same direction information and command selections as cursor control may be implemented via receiving touches on a touch screen without a cursor.

The search management system may include a presentation module to implement a GUI for example which may be stored in a mass storage device as executable software codes that are executed by the computing device s . This and other units may include by way of example components such as software components object oriented software components class components and task components processes functions attributes procedures subroutines segments of program code drivers firmware microcode circuitry data databases data structures tables arrays and variables.

In general the word instructions as used herein refers to logic embodied in hardware or firmware or to a collection of software units possibly having entry and exit points written in a programming language such as but not limited to Java Lua C C or C . A software unit may be compiled and linked into an executable program installed in a dynamic link library or may be written in an interpreted programming language such as but not limited to BASIC Perl or Python. It will be appreciated that software units may be callable from other units or from themselves and or may be invoked in response to detected events or interrupts. Software units configured for execution on computing devices by their hardware processor s may be provided on a computer readable medium such as a compact disc digital video disc flash drive magnetic disc or any other tangible medium or as a digital download and may be originally stored in a compressed or installable format that requires installation decompression or decryption prior to execution . Such software code may be stored partially or fully on a memory device of the executing computing device for execution by the computing device. Software instructions may be embedded in firmware such as an EPROM. It will be further appreciated that hardware modules may be comprised of connected logic units such as gates and flip flops and or may be comprised of programmable units such as programmable gate arrays or processors. Generally the instructions described herein refer to logical modules that may be combined with other modules or divided into sub modules despite their physical organization or storage.

The search management system or components of it such as the search process manager the alert manager user interface server of may be programmed via executable code instructions in a programming language.

The term non transitory media and similar terms as used herein refers to any media that store data and or instructions that cause a machine to operate in a specific fashion. Such non transitory media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of non transitory media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge and networked versions of the same.

Non transitory media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between non transitory media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor s for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer may load the instructions into its dynamic memory and send the instructions over a telephone or cable line using a modem. A modem local to the search management system may receive the data on the telephone or cable line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which the processor s retrieves and executes the instructions. The instructions received by main memory may retrieve and execute the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor s .

The search management system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN or WAN component to be communicated with a WAN . Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from the search management system are example forms of transmission media.

A network such as the network of may comprise but is not limited to one or more local area networks wide area network wireless local area network wireless wide area network the Internet or any combination thereof.

The search management system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor s as it is received and or stored in storage device or other non volatile storage for later execution.

In some embodiments the search management system may operate in a distributed computing environment including several computer systems that are interconnected using one or more computer networks. The search management system could also operate within a computing environment having a fewer or greater number of devices than are illustrated in and or . Thus the depiction of search management system in and or should be taken as illustrative and not limiting to the present disclosure. For example the search management system could implement various Web services components and or peer to peer network configurations to implement at least a portion of the processes described herein. For example multiple servers and or processes may schedule queries query data sources and or generate alerts in a distributed manner to expedite the querying of data sources.

It will be appreciated that while the present disclosure typically discusses searching of malware and or proxy logs the systems and methods described herein may be agnostic to the types of data being searched and or may search any type of data source such as credit card logs phone logs etc. for example.

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code instructions executed by one or more computer systems or computer processors comprising computer hardware. The processes and algorithms may be implemented partially or wholly in application specific circuitry.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

The term a as used herein should be given an inclusive rather than exclusive interpretation. For example unless specifically noted the term a should not be understood to mean exactly one or one and only one instead the term a means one or more or at least one whether used in the claims or elsewhere in the specification and regardless of uses of quantifiers such as at least one one or more or a plurality elsewhere in the claims or specification.

The term comprising as used herein should be given an inclusive rather than exclusive interpretation. For example a general purpose computer comprising one or more processors should not be interpreted as excluding other computer components and may possibly include such components as memory input output devices and or network interfaces among others.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing units segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure. The foregoing description details certain embodiments of the invention. It will be appreciated however that no matter how detailed the foregoing appears in text the invention can be practiced in many ways. As is also stated above it should be noted that the use of particular terminology when describing certain features or aspects of the invention should not be taken to imply that the terminology is being re defined herein to be restricted to including any specific characteristics of the features or aspects of the invention with which that terminology is associated. The scope of the invention should therefore be construed in accordance with the appended claims and any equivalents thereof.

