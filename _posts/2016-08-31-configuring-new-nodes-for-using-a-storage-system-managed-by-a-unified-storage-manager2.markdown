---

title: Configuring new nodes for using a storage system managed by a unified storage manager
abstract: Systems and methods for configuring new nodes for using a storage system managed by a unified storage manager (USM) are disclosed. An example method may comprise detecting, by a processing device executing a unified storage manager (USM), a connection of a machine to the USM, invoking a provisioning component of the USM to initiate a provisioning process for the machine, utilizing, via the provisioning process, an external provisioning service to cause a bootstrapping process to execute on the machine, the bootstrapping process to install an operating system (OS) on the machine and to execute a kickstart file on the machine, responsive to execution of the kickstart file, performing a handshake process with the machine to establish a communication channel between the USM and the machine, and receiving, via the established communication channel, an availability status of the machine as a storage node for storage services managed by the USM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596135&OS=09596135&RS=09596135
owner: Red Hat, Inc.
number: 09596135
owner_city: Raleigh
owner_country: US
publication_date: 20160831
---
The disclosure is generally related to data storage management and is more specifically related to configuring new nodes for using a storage system managed by a unified storage manager.

Computing environments often include storage management functionality for managing storage solutions. Growth of data in many industries is overwhelming hardware based storage. Software defined storage platforms provide a solution for scaling storage across physical virtual and cloud resources. There are various storage providers that can be used for software based storage services. These storage providers have different features and properties. Currently configuring machines to work within particular storage environments can be a complicated and error prone task entailing knowledge of the specific features of the underlying storage service.

Described herein are methods and systems for configuring new nodes for using a storage system managed by a unified storage manager USM . The USM is a storage management application that provisions manages and monitors multiple disparate storage providers. A storage provider may also be referred to herein as a storage service and may include a scalable file system such as Gluster file system Ceph file system or any other scalable distributed software based storage service. The USM is designed so that the underlying machines used as storage nodes for the storage services may be automatically configured for use by the USM s storage services with little to no user intervention.

In one implementation a provisioning layer of the USM enables the configuration of new storage nodes for use by the storage systems managed by the USM. The USM may include a USM provisioning layer that is responsible for provisioning storage nodes for use by storage services managed by the USM. The provisioning layer may include a provisioning component that handles providing new storage nodes with an operating system file system and storage software packages to implement storage services of a storage provider. In one implementation USM provision layer enables provisioning a storage node through external provisioning systems. The USM provisioning layer provides a loosely coupled pluggable architecture so that external provisioning systems can be easily added or removed without affecting the core functionality of the USM. The USM is designed so that the external provisioning system implements the business logic specific to the provisioning technology areas. Each external provisioning system may communicate with the USM provision layer via plugins corresponding to the external provision system.

Conventional storage system solutions rely on manual configuration of storage nodes for addition to or removal from the storage management system. In addition as part of the conventional storage system solutions a system administrator should be knowledgeable of the provisioning process features of the underlying storage provider systems and how adding or removing a storage node affects the entire storage management system. This is a complicated and error prone task. Implementations of the disclosure provide a provisioning component of a USM that automatically configures a new storage node for use by storage systems managed by the USM with little to no user intervention.

USM may be communicably coupled to storage services N and their underlying storage nodes N as well as to other external providers e.g. external provisioning systems external identity providers etc. via a communication interface such as a bus or a network. The network may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet .

The USM provides a pluggable framework to allow for interaction with each of the storage services N. A pluggable framework refers to the USM providing plugin components N that communicate e.g. via remote procedure calls RPC application programming interfaces APIs with the corresponding storage services N. A plugin refers to a component that adds a specific feature to an existing computer program. The USM provides services that the plug in N can use including a way for the plugin N to register itself with the USM and a protocol for the exchange of data with the plugin N. In some implementations plugin component N is referred to as an adaptor component that generally refers to a device which may be implemented as executable code hardware etc. that enables normally incompatible components to work together.

USM exposes application programming interfaces APIs such as Representational State Transfer REST APIs which are consumed via USM user interface UI and by other USM customers such as cloud computing platforms and other management platforms . One example cloud computing platform may include Red Hat OpenStack . An example management platform may include Red Hat CloudForms . USM implements all framework level functionalities such as authentication authorization logging and so on.

USM includes a USM core that manages storage services N and the use of the storage nodes N by the storage services N. For example USM core manages configuration of storage nodes N through providers of storage services N. Generic APIs such as host management authentication and authorization are implemented in the USM core . However provider specific API requests are routed to the respective providers of storage services N via the corresponding storage service plugins N for those storage services N.

USM also includes a USM authentication layer that is responsible for identifying individuals in a system and controlling their access to resources within or across enterprise boundaries by associating user rights and restrictions with the established individual. The USM authentication layer enables identity management through external identity providers such as IPA OpenLDAP Directory Server and AD to name a few examples. The USM authentication layer and the external identity providers may communicate via APIs. USM provides a pluggable framework through which any external identity provider can be integrated.

In one implementation USM includes a USM provisioning layer that is responsible for provisioning storage nodes N for use by the storage services N. The provisioning layer handles providing new storage nodes being added to the USM system with operating system file system and storage software packages to implement storage services of a storage provider. USM provision layer enables provisioning a storage node N through external provisioning systems . External provisioning systems may include but are not limited to Satellite provisioning system Puppet provisioning system Mariner provisioning system and Foreman provisioning system to name a few examples.

In one implementation USM provisioning layer enables the addition and or removal of provisioning systems to the USM . The USM provides a loosely coupled pluggable architecture so that provisioning system can be easily added or removed without affecting the core functionality of the USM . The USM is designed so that the external provisioning system implements the business logic specific to the provisioning technology areas. Each external provisioning system may communicate with the USM provision layer via plugins corresponding to the external provision system .

The USM may detect when a new machine is connected to the USM system . In some implementations an indication e.g. via USM UI may be received that a user intends to add a new machine as a storage node N to the USM system . The indication may include identification of the new machine such as a communication address to communicate files to the machine. In other implementations the new machine may be detected when a network connection is made between the new machine and the USM system .

When a new machine is detected the USM core may invoke the USM provisioning layer to manage the process for configuring the new machine for use as a storage node N of the USM system . USM provisioning layer may utilize an external provisioning system to manage a provisioning process for the new machine. The USM provisioning layer and the external provision systems may communicate via APIs provided by plugins or in some cases drivers installed in the USM .

The new machine typically may arrive in a bare metal state. A bare metal state refers to a computing device connected to a network without an operating system installed or other repository configurations provided. When a new machine is provided in a bare metal state the USM provisioning layer via external provisioning system may cause an operating system OS to be installed on the new machine. This OS may be a bare OS that provides minimal options and configurations. As part of installation of the OS a kickstart file is launched on the machine. The kickstart file contains instructions which when executed cause a handshake to occur with the USM to enable communication between the USM and the new machine. A handshake refers to an automated process of negotiation that dynamically sets parameters of a communications channel established between two entities before normal communication over the channel begins. Once the communication channel is established between the new machine and the USM the new machine can present itself as an available node for the USM to utilize as part of the managed storage services N of the USM .

When the USM core determines to accept an available node the new machine may communicate its capabilities e.g. disk space memory size processing speed CPU networking configurations etc. to the USM core . This information is stored by the USM as infrastructure information in a data store maintained by the USM . The new machine may then be considered a storage node N that can be utilized by USM for storage service N purposes. The USM may then select the storage node N for use with an underlying storage service N. For example the storage node N may be used as part of a cluster creation process for a storage service N.

As part of creating a new cluster the USM provisioning layer may determine a type of cluster that the storage node N is place in. Based on the cluster type the USM provisioning layer may cause one or more file system packages corresponding to the storage service N to be installed on the storage node N. The installed file system packages enable the storage node N to provide services for the storage services N according to the assigned cluster type of the storage node N. Further description of the USM provisioning layer and the configuration of storage nodes N by the USM provisioning layer is provided below with respect to

In one implementation the components within USM and USM provisioning component may be communicably coupled directly or via a network. Similarly USM may be communicably coupled to external provisioning services and or storage nodes N directly or via a network. In one implementation the network may include a public network e.g. the Internet a private network e.g. a local area network LAN or wide area network WAN a wired network e.g. Ethernet network a wireless network e.g. an 802.11 network or a Wi Fi network a cellular network e.g. a Long Term Evolution LTE network routers hubs switches server computers and or a combination thereof.

In one implementation USM provisioning component includes a bootstrapping component an inventory component a file installation component and one or more provisioning service plugins . As discussed above the USM provisioning component manages the configuration of new storage nodes N for use by storage services managed by USM . USM provision component enables provisioning a storage node N through one or more external provisioning systems . In one implementation external provisioning system may be the same as provisioning systems described with respect to .

USM provisioning component enables the addition and or removal of external provisioning systems to the USM via a loosely coupled pluggable architecture. The provisioning component may execute provisioning service plugins that each correspond to an external provisioning system . A plugin refers to a component that adds a specific feature to an existing host application. Plugins provide a protocol for the exchange of data with a service associated with the plugin. The provisioning service plugins includes an API interface that enables communication between the provisioning component and the external provisioning server . The use of provisioning service plugins allow external provisioning systems to be easily added or removed without affecting the core functionality of the USM . The USM and provisioning component are designed so that the external provisioning system implements the business logic specific to the provisioning technology areas.

The provisioning component handles providing new storage nodes being added to the USM system with an operating system a file system and storage software packages to implement storage services of a storage provider. The USM may detect when a new machine e.g. storage node N is connected to the USM system. In some implementations an indication may be received that a user intends to add a new machine as a storage node N to the USM system. The indication may include identification of the new machine such as a communication address to transmit files to the machine. In other implementations the new machine may be detected when a network connection is made between the new machine and the USM system.

When a new machine is detected the USM provisioning component is invoked by USM to manage the process for configuring the new machine for use as a storage node N of the USM system. In one implementation provisioning component utilizes an external provisioning system to manage a provisioning process for the new machine. If more than one external provisioning system is associated with the provision component via provisioning service plugins then configuration parameters of the provisioning component and or a system administrator indication may determine which external provisioning system to utilize.

The USM provisioning component via external provisioning system may cause an operating system OS to be installed on the new machine. This OS may be a bare OS that provides minimal options and configurations. The bootstrapping component of USM provisioning component may communicate with external provisioning service via provisioning service API methods of provisioning service plugins to cause the OS to be installed on the new machine i.e. storage nod N . In one implementation bootstrapping refers to a self starting process that proceeds without external input. For example bootstrapping may refers to the process of loading basic software into memory of a computer after power on or general reset which then takes care of loading other applications as needed.

As part of the installation of the OS bootstrapping component provides a kickstart file to the new machine via the external provisioning service N. The kickstart file may be provided as part of the OS files provided to the new machine. The kickstart file is then executed on the machine as part of the OS installation process. The kickstart file causes a handshake to occur with the USM to enable communication between the USM and the new machine. Handshake component may perform the process of a handshake for bootstrapping component . A handshake refers to an automated process of negotiation that dynamically sets parameters of a communications channel established between two entities before normal communication over the channel begins. As part of the handshake process the handshake component and the storage node N exchange keys to provide a security element for the USM provisioning component and storage node N. Keys may include a piece of information parameter that determines the functional output of a cryptographic algorithm. Keys may specific transformations in cryptographic algorithms such as digital signature schemes and message authentication codes.

Once the communication channel is established between the new machine and the USM the new machine can present itself as an available node for the USM to utilize as part of the managed storage services N of the USM . When the USM core determines to accept an available node the new machine may communicate its capabilities e.g. disk space memory size processing speed etc. to the inventory component . In one implementation the inventor component may request capability information from the storage node N. The inventory component causes the received capability information to be as infrastructure data in USM data store .

When the new machine is included as part of the USM inventory in USM data store the new machine may then be regarded as a storage node N that can be utilized by USM for storage service purposes. The USM may then select the storage node N for use with an underlying storage service managed by USM . For example the storage node N may be used as part of a cluster creation process for a storage service.

The USM may notify the provisioning component that a storage node N is to be provisioned as part of a storage service cluster. In one implementation the USM communicates configuration information such as the storage node N identifier ID the storage service type or ID a cluster type and so on. As part of creating a new cluster the file installation component may determine a type of cluster that the storage node N is to be provisioned in e.g. utilizing configuration information provided by the USM to the provisioning component .

Based on the identified cluster type the file installation component may cause one or more storage service packages N to be installed on the identified storage node N. The storage service packages N may be maintained by the provisioning component and enable the storage node N to provide services specific to the storage services. The file installation component uses the storage service packages N to start the storage service and initialize configurations for the storage service on the storage node N. The storage service packages N for each storage service contains basic information about the storage service and the technology specific routes i.e. endpoints it supports. Example storage service package are shown below as data models. Data models represent the structure of the resources i.e. storage nodes N managed by USM . The common data models for unified APIs are listed below. For the technology specific APIs it is the responsibility of the implementer to define the data models. As shown below JavaScript Object Notation JSON format is used for the data modeling. Implementers may convert JSON format modeling into specific data structures.

Methods and and each of their individual functions routines subroutines or operations may be performed by one or more processors of the computer device executing the method. In certain implementations methods and may each be performed by a single processing thread. Alternatively methods and may be performed by two or more processing threads each thread executing one or more individual functions routines subroutines or operations of the method.

For simplicity of explanation the methods of this disclosure are depicted and described as a series of acts. However acts in accordance with this disclosure can occur in various orders and or concurrently and with other acts not presented and described herein. Furthermore not all illustrated acts may be needed to implement the methods in accordance with the disclosed subject matter. In addition those skilled in the art understand and appreciate that the methods could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally it should be appreciated that the methods disclosed in this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methods to computing devices. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or storage media. In one implementation methods and may be performed by computing devices implementing USM and specifically USM provisioning component as shown in .

Referring to method may be performed by processing devices of a computing device and may begin at block . At block a processing device may detect a connection of a machine to the USM system. The connection may be detected via identification of a network connection request from the machine and or from receipt of a manual request to add the machine to the USM. At block a provisioning component of the USM is invoked to initiate a provisioning process for the machine. At block an external provisioning service is utilized to cause a bootstrapping process to execute on the machine. The bootstrapping process is to install an OS on the machine and to execute a kickstart file on the machine. The kick start file includes instructions that when executed by the machine cause a handshake process to occur with the USM to enable communication between the USM and the machine.

At block a handshake process is performed responsive to execution of the kickstart file on the machine. In one implementation the handshake process comprises an automated process of negotiation that dynamically sets parameters of the communication channel. The handshake process establishes a communication channel between the USM and the machine. Lastly at block an availability status of the machine is received via the communication channel. The availability status indicates that the machine is available as a storage node for one or more storage services that are managed by the USM.

Referring to method may be performed by processing devices of a computing device and may begin at block . At block a processing device may receive an indication of a selection of an available storage node. In one implementation the available storage node has been provisioned as a USM storage node by a provisioning component of the USM. At block an inventory process is initiated to determine capabilities of the selected storage node. The capabilities may include but are not limited to CPU of the machine disk space data of the machine memory space data of the machine or networking configuration data of the machine.

At block the capabilities are received from the selected storage node responsive to the inventory process. At block the received capabilities are stored in a data store of the USM. Subsequently at block identification of a cluster type to apply to the selected storage node is received. In one implementation the identification of the cluster type may be received from a core of the USM. The identified cluster type of the selected storage node may be based on the received and stored capabilities of the selected storage node. Lastly at block storage service packages are provided via an external provisioning service of the provisioning component to the selected storage node. In one implementation the storage service packages are for installation on the selected storage node. Once installed on the selected storage node the storage service packages enable the selected storage node to provide services for one of the storage service managed by the USM.

In certain implementations computer system may be connected e.g. via a network such as a Local Area Network LAN an intranet an extranet or the Internet to other computer systems. Computer system may operate in the capacity of a server or a client computer in a client server environment or as a peer computer in a peer to peer or distributed network environment. Computer system may be provided by a personal computer PC a tablet PC a set top box STB a Personal Digital Assistant PDA a cellular telephone a web appliance a server a network router switch or bridge or any device capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that device. Further the term computer shall include any collection of computers that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methods described herein.

In a further aspect the computer system may include a processing device a volatile memory e.g. random access memory RAM a non volatile memory e.g. read only memory ROM or electrically erasable programmable ROM EEPROM and a data storage device which may communicate with each other via a bus .

Processing device may be provided by one or more processors such as a general purpose processor such as for example a complex instruction set computing CISC microprocessor a reduced instruction set computing RISC microprocessor a very long instruction word VLIW microprocessor a microprocessor implementing other types of instruction sets or a microprocessor implementing a combination of types of instruction sets or a specialized processor such as for example an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP or a network processor .

Computer system may further include a network interface device . Computer system also may include a video display unit e.g. an LCD an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device .

Data storage device may include a non transitory computer readable storage medium on which may store instructions encoding any one or more of the methods or functions described herein including instructions for a provisioning component bootstrapping component and handshake component of for implementing methods or .

Instructions may also reside completely or partially within volatile memory and or within processing device during execution thereof by computer system hence volatile memory and processing device may also constitute machine readable storage media.

While computer readable storage medium is shown in the illustrative examples as a single medium the term computer readable storage medium shall include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of executable instructions. The term computer readable storage medium shall also include any tangible medium that is capable of storing or encoding a set of instructions for execution by a computer that cause the computer to perform any one or more of the methods described herein. The term computer readable storage medium shall include but not be limited to solid state memories optical media and magnetic media.

The methods components and features described herein may be implemented by discrete hardware components or may be integrated in the functionality of other hardware components such as ASICS FPGAs DSPs or similar devices. In addition the methods components and features may be implemented by firmware modules or functional circuitry within hardware devices. Further the methods components and features may be implemented in any combination of hardware devices and computer program components or in computer programs.

Unless specifically stated otherwise terms such as receiving invoking associating providing storing performing utilizing deleting initiating marking generating recovering completing or the like refer to actions and processes performed or implemented by computer systems that manipulates and transforms data represented as physical electronic quantities within the computer system registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices. Also the terms first second third fourth etc. as used herein are meant as labels to distinguish among different elements and may not have an ordinal meaning according to their numerical designation.

Examples described herein also relate to an apparatus for performing the methods described herein. This apparatus may be specially constructed for performing the methods described herein or it may comprise a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable tangible storage medium.

The methods and illustrative examples described herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used in accordance with the teachings described herein or it may prove convenient to construct more specialized apparatus to perform methods and and or each of its individual functions routines subroutines or operations. Examples of the structure for a variety of these systems are set forth in the description above.

The above description is intended to be illustrative and not restrictive. Although the disclosure has been described with references to specific illustrative examples and implementations it should be recognized that the disclosure is not limited to the examples and implementations described. The scope of the disclosure should be determined with reference to the following claims along with the full scope of equivalents to which the claims are entitled.

