---

title: Idempotentcy of application state data
abstract: Disclosed are various embodiments for synchronizing application state information across devices. More specifically, embodiments of the disclosure are related to facilitating idempotency of application state information. Idempotency is maintained by using a timestamp embedded within application state information and/or by determining that the application state information is associated with an accumulating value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589042&OS=09589042&RS=09589042
owner: Amazon Technologies, Inc.
number: 09589042
owner_city: Seattle
owner_country: US
publication_date: 20160125
---
This application is a division of and claims the benefit of U.S. patent application Ser. No. 13 921 735 entitled IDEMPOTENCY OF APPLICATION STATE DATA and filed Jun. 19 2013 which is hereby incorporated by reference in its entirety.

Applications that are distributed via an application marketplace are often installed on multiple devices by a user. A developer of an application may wish to synchronize state information across the multiple installations across various devices of a particular application. The state information generated by various devices associated with the user may create synchronization conflicts. Therefore idempotency of operations that update a repository of saved state data may be desirable.

The present disclosure relates to synchronizing data associated with the state of an application between multiple devices that may be associated with a user. Applications that are distributed via an application marketplace are often installed on multiple devices associated with a user account. For example a user may own a tablet device as well as a smartphone and install an application distributed by the application marketplace on both devices. Accordingly embodiments of the disclosure can facilitate synchronization of data relating to the application across the various devices associated with the user by employing an application synchronization service to which applications report application state information which can in turn facilitate synchronization of application state information across multiple devices.

When an application is a game application application state information can comprise for example information that is related to game applications such as scoring data game progress game achievements game timing information time stamps and any other information relating to execution of a game. Application state information can also related to media such as books movies music etc. that are rendered or consumed via a media player application. In this scenario the application state information can relate to a page number and or time code within media that a user last viewed and or consumed. Application state information can also include information related to an accumulating value such as a report indicating the user s accumulation and or usage or spending of coins or points during a gameplay session. Therefore embodiments of the present disclosure provide mechanisms to provide for the idem potency of operations that synchronize certain application state information by an application synchronization service. In the context of the present disclosure idem potent operations are operations that may be applied multiple times without corrupting the value of data stored or synchronized into a data store by the application synchronization service.

With reference to shown is an example scenario in which an application is executed by client devices and . In the scenario shown in the application can be distributed by an application marketplace. In the example of the client devices and are associated with a particular user account. In other words the user has installed the same application on multiple devices. An application synchronization service can be associated with the application marketplace and or independent from an application marketplace and facilitates synchronization of game state data.

As shown in the example of an application instance is executed by the client device can incorporate functionality in which a user may utilize an account held with a third party service for the purpose of tracking accumulation of coins or points tracking achievements game progress game scores or any other data related to the state of an application that can be saved. Accordingly an application can be bundled with a software library and or code fragments that facilitate the creation of application state information in a data structure that can be transmitted to a synchronization service. As shown in the client device that is also associated with the user another application instance corresponding to the same application may be executed by another device associated with the user.

Accordingly each application instance may report for example scoring information corresponding to an accumulated coin balance or of the user. Such an accumulating value for example comprise a running total of coins or points earned by and assigned to the user across all instances of execution of the application that are associated with a particular user account. Accordingly as shown in the scenario of the user may earn coins in a gameplay session on a first device as well as on a second device with the accumulating value or the number of earned coins being synchronized across the devices of the user being facilitated by embodiments of the disclosure. To facilitate such synchronization applications executed by the client devices can be instrumented to report a contribution to an accumulated total that is attributable the particular client device on which the application is executed.

Embodiments of the disclosure can also facilitate idempotence of reporting of such data by client devices with respect to synchronization and storage of the data in a data store. Embodiments of the disclosure can also facilitate idempotence of reporting of such data by client devices with respect to synchronization and storage of the data in a data store. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more client devices in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system application synchronization service and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system may communicate with the client device using various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network .

The application marketplace system is executed to provide functionality relating to an application marketplace in which a multitude of applications may be submitted by developers and made available for purchase and or download by users. The application marketplace system may include functionality relating to electronic commerce e.g. shopping cart ordering and payment systems. The application marketplace system may support searching and categorization functionality so that users may easily locate applications that are of interest. The application marketplace system may include functionality relating to verification of compatibility of applications with various client devices .

The application synchronization service is executed to synchronize application state information associated with instances of applications executed by various client devices that are associated with a user account. Application state information can include information relating to application usage that is associated with an application instance executed by a client device . For example application state information can include a score or achievement achieved by a user in an application instance. Application state information can also include saved game data or a score level or other state information from which a user may resume gameplay at a later point in time on the same client device or another client device .

The data stored in the data store includes for example applications saved state data relating to applications that are executed by client devices application marketplace data and potentially other data. The applications correspond to those applications that have been submitted by developers and or others for example for inclusion in the application marketplace. The application may correspond for example to a game or other types of applications. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games.

The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications. Where game applications are mentioned in the following text it is understood that game applications are merely examples of the many different types of applications .

The application when executed by a client device may expect to access one or more resources of the client device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources. Each application may include for example object code binary code source code metadata and or other data. The object code corresponds to code that is executable by client devices either natively by a processor or by way of a virtual machine executed by the processor.

The saved state data that is maintained by the application marketplace system includes various data relating to execution of applications by client devices . For example the saved state data may include one or more accumulated totals such as a coin balance or point balance information about progress of a user within execution of an application by users such as a level at which a user has progressed within a game scoring information achievement information relating to a game etc. Saved state data can be organized into various keys and corresponding values which can also be associated with a timestamp . Accordingly a key can represent an event name or an event type of an event occurring in an application executed by a client device that an application developer may wish to synchronize across the various devices of a user. The key can also take the form of an event name or event identifier that is combined with a synchronization rule. The value can represent the value associated with the event such as a coin balance point balance score lap time level page number or any other data about application state that a developer wishes to synchronize across the various devices of a user.

In the case of a value that corresponds to an accumulated total that is synchronized across the various devices associated with a user account the saved state data can also include data relating to a contribution to the accumulated total of one or more devices that are linked with the user account. In other words in the case of a coin balance associated with a particular game application the saved state data can include for each device linked to the user s account a number of coins that are attributable to gameplay sessions occurring on a particular device. In other words an application can be instrumented to track its total contribution over time to an accumulating value and report the contribution to the application synchronization service on a periodic basis or upon the occurrence of an event during execution of the application . In this scenario the application can also report an identifier associated with the client device on which it is executed. Accordingly the application synchronization service can store the device identifier in association with a particular device s contribution to a total accumulating value. In turn the application synchronization service can determine a corresponding value for the accumulated total by summing the contributions of each device linked with a user s account.

In some scenarios one or more contributions to a particular accumulated total may not necessarily be associated with a particular device. For example a user may accumulate towards an accumulated total in ways that are device independent. For example a contribution to an accumulated total may be assigned by an administrative user and or a customer service agent on behalf of the user. A contribution to an accumulated total may be purchased by the user and may therefore be a device independent contribution. An accumulated total may also be associated with a non zero starting value or a seed value. In this scenario the application synchronization service may determine a corresponding value of the accumulated total by summing the contributions of each device while also taking into account contributions to the accumulated total that are not associated with a particular client device .

In the case of a value that corresponds to another type of value other than an accumulated total that is synchronized across the various devices associated with a user account the saved state data can also include a timestamp associated with a particular key and or value so that the application synchronization service can determine whether given application state information received from a client device has already been received and stored within the data store . The timestamp can be generated by the application when the event occurs during execution of the application that corresponds to the key and or value . In other words the timestamp corresponds to a moment at which a given event occurs within the application and not when the key and or value are stored in the data store by the application synchronization service . In this scenario the application synchronization service can determine that data received from a client device is duplicate application state information if a timestamp that is embedded within the application state information is a duplicate of a timestamp that has already been previously stored in the data store by the application synchronization service .

The data associated with the application marketplace data includes for example download information categories application usage data and or other data. The download information indicates the popularity either in terms of absolute number of downloads or in terms of relative popularity of the applications offered by the application marketplace data . The download information can also identify users either individually by a user account and or on an aggregate basis according to demographic category who have downloaded a particular application . The categories correspond to groupings of applications that may indicate similar applications and may be employed by users to more easily navigate the offerings of the application marketplace data . Non limiting examples of categories may include social networking applications mapping applications movie information applications shopping applications music recognition applications and so on. The application marketplace data can also include information about users such as user profile data user authentication information usage data of users with regard to application e.g. game progress high scores achievements .

The client device is representative of a plurality of client devices that may be coupled to the network . The client devices may be geographically diverse. The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client device may include a display device. The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client device may include one or more input devices. The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user.

The client device may be configured to execute various applications that are distributed via the application marketplace system . An application executed by a client device as is noted above can be configured to generate application state information that is reported to the application synchronization service and saved by the application synchronization service as saved state data . The application state information can comprise a data structure that includes data associated with an event occurring during execution of an instance of the application . For example application state information can include data related to an accumulating value such as a coin balance of a user associated with execution of the application by a client device .

Various techniques relating to synchronization of application state information are described in U.S. patent application Ser. No. 13 850 119 entitled RESOLVING CONFLICTS WITHIN SAVED STATE DATA and filed Mar. 25 2013 and U.S. patent application Ser. No. 13 921 503 entitled MANAGEMENT OF APPLICATION STATE DATA both of which are incorporated herein by reference in their entireties.

Next a general description of the operation of the various components of the networked environment is provided. To begin an application executing on a client device can be instrumented upon the occurrence of an event within execution of an application instance to generate application state information containing information about the event. For example when a certain level and or achievement within a game application is reached the application can generate application state information which can be cached within the application state cache which can be stored on the client device . As a user reaches certain milestones or accomplishes tasks within an application the application can be configured to award coins points or any other reward balance. Additionally the user may spend these rewards to unlock portions of an application and or obtain other rewards or items which cause a decrease in the accumulated total associated with the user. As yet another example the user s progress within a game application can also be tracked and application state information identifying scores times e.g. lap times time to complete levels time to reach milestones etc. or other state information associated with the application can be generated.

The application can generate application state information by utilizing a software library having an application programming interface API provided by and or associated with the application synchronization service so that the application state information can be created in a standardized data format. In other embodiments the application can be instrumented to generate application state information in a standardized data format.

The data format corresponding to application state information can be implemented as a text based data interchange format such as JavaScript Object Notation JSON or any other standardized or proprietary data interchange format that can allow for the exchange of structured data. Accordingly the application executed by a client device can generate and transmit application state information to the application synchronization service which can extract and store the application state information as saved state data .

Application state information may be transmitted by the application to the application synchronization service asynchronously from multiple client devices as and when a particular client device has the capability to transmit data via the network . For example the application can cache application state information in the application state cache on the client device transmit the application state information upon the occurrence of an event such as termination of the application network accessibility the reaching of a level and or achievement within an application when a local contribution corresponding to an accumulated total reaches a certain size a size of the application state cache reaching a threshold size in real time as and when events are generated within an application instance corresponding to the application or upon the occurrence of other events.

In one scenario an event occurring within an application causes an accumulating value e.g. user s coin balance etc. associated with a user account to change. Accordingly the application state information generated by the application executed by the client device includes data relating to the accumulating value. Accordingly the application is instrumented via code fragments embedded within the application and or a software library or other code utilized by the application to track a contribution to the accumulated total that is attributable to the client device on which the application is executing. In other words the application is configured to track and store within storage accessible to the client device a total contribution to a particular accumulating value that is attributable to the various executions of the application by the client device .

The application is also instrumented to periodically report its contribution to the accumulating value in the form of application state information . The application is also configured to embed a device identifier within the application state information so that the application synchronization service can store the contribution along with the device identifier in the data store . Accordingly the application synchronization service is configured to calculate an accumulating value that corresponds to a particular key e.g. an event name based at least in part upon the various contributions to the accumulating value that are obtained from the various client devices associated with a user account and that are stored within the data store . For example the application synchronization service can sum the contributions associated with the various client devices that are registered with a particular user account to calculate the accumulating value.

Because each client device that is registered to a user account reports its total contribution to an accumulating value rather than each incremental change to an accumulating value that is attributable to execution of an application by the client device the application synchronization service achieves idempotency of the operations that report updates the accumulating value. Because the total contribution of a particular client device is reported instead of incremental changes the execution of duplicate operations the processing of duplicate application state information updates does not jeopardize the correctness of the accumulating value that is calculated by the application synchronization service .

Upon receiving an application state information containing a contribution of a particular client device towards an accumulating value corresponding to a key and value from a client device the application synchronization service can generate and transmit a response to the client device . The response can comprise an application state update that includes a numeric value associated with the accumulating value corresponding to the key and value that are synchronized by the application synchronization service among the various client devices that are associated with or registered to a user account. In this way the application executed by the client device can obtain an updated numeric value corresponding to the accumulating value that is stored as a value in the data store .

In some scenarios a client device associated with a particular device identifier may undergo a data loss event such as a factory reset in which data stored on the client device such as a contribution corresponding to the client device as well as a particular accumulating value or a local contribution is lost and or deleted from the device. Accordingly the application and or code fragments employed by the application to synchronize an accumulating value are configured to check a status flag that is stored in storage accessible to the client device that indicates whether the client device has previously synchronized the key and value corresponding to the accumulating value with the application synchronization service . If according to the status flag the client device has not previously synchronized its contribution to the accumulating value with the application synchronization service then the application can transmit a request to retrieve its contribution to the accumulating value from the application synchronization service where the request includes a device identifier corresponding the client device .

In response the application synchronization service can generate and transmit an application state update that includes a numeric value corresponding to the accumulating value as well as a numeric value corresponding to the contribution to the accumulating value of the requesting client device . In this way a device whose data storage has been wiped can learn its contribution to the accumulating value that is stored as a key and value in the data store . Additionally in this scenario when an application is used immediately after the client device has been wiped but before the application is able to synchronize data with the application synchronization service the application can track a local contribution to the accumulating value that is stored in the client device until the application can request a numeric value corresponding to the contribution of the client device to an accumulating value from the application synchronization service .

Upon receiving its contribution to the accumulating value from the application synchronization service the client device can then add the local contribution to the contribution received from the application synchronization service and store the result as the new contribution of the client device to the accumulating value.

In scenarios other than occurrence of an event within an application that causes an accumulating value e.g. user s coin balance etc. associated with a user account to change the application can be instrumented to generate application state information that includes a timestamp. The application synchronization service can then be configured to store the timestamp in association with a key and or value that is embedded within the application state information and stored in the data store .

In such a scenario idempotency is achieved when application state information is reported to the application synchronization service by comparison of the timestamp extracted from the application state information against the timestamp that is stored in association with the key and or value in the data store . If the timestamp extracted from the application state information is already stored within the data store in association with the same key and or value that is extracted from the application state information then the application synchronization service can determine that the application state information is a duplicate application state information and discard the duplicate. In some embodiments the application synchronization service can respond to the client device submitting a duplicate with an error message or with the same message that was previously transmitted to the client device as a response when the application state information was initially reported to the application synchronization service .

Turning now to shown is an example of application state information and that can be generated by various instances of an application according to various embodiments of the disclosure. In the application state information shown in a text based data interchange data structure is generated by the application that contains an indication that a field within the data structure corresponds to an accumulating value that is stored as a key and value within the data store as well as an event name . The event name in some embodiments can correspond to the key that is stored within the data store in association with a particular user account of a user.

The application state information also includes a device identifier so that the application synchronization service may identify a client device to which the application state information corresponds. In some embodiments the application marketplace data can identify the various devices by a device identifier that are registered to a particular user account. The application state information can also include a contribution to an accumulating value that is stored in the data store and synchronized across the various client devices that are registered to a user account within an application marketplace. Accordingly the application synchronization service can store the contribution in association with the device identifier in the data store . In some embodiments a timestamp is also included within the application state information . In the depicted example application state information a JSON data structure is employed. However it should be appreciated that other data interchange formats can be employed for the application state information

In the application state information which can be generated by another instance of the application that is executed by another client device a differing device identifier corresponds to the other client device . Additionally a contribution to an accumulating value that is stored on the data store is also included in the application state information . Accordingly the application synchronization service obtains the application state information and the application synchronization service can calculate an accumulating value based upon the various contributions that are associated with the client devices registered with a particular user account. For example the application synchronization service can sum the contributions associated with the various client devices to calculate the accumulating value corresponding to a particular key in the data store .

Moving on to shown is an example of an application state update that can be generated by the application synchronization service in response to receiving a request for a contribution of a client device to an accumulating value associated with a particular event and a particular user account. The depicted application state update can also be generated in response to receiving application state information from a client device . The application state update can also be generated in response to receiving a request to synchronize data relating to the state of application from a client device .

In the depicted example the application state update can include a data structure that includes an indication that a field of the data structure corresponds to an accumulating value that is synchronized across multiple client devices by the application synchronization service . Additionally the data structure includes an event name which can correspond to a key that identifies the accumulating value. The data structure can also include a device identifier that corresponds to the requesting client device or the client device to which the application state update is transmitted by the application synchronization service . The data structure can also include a numeric value that corresponds to a contribution to an accumulating value by the device associated with the device identifier . The data structure further includes a numeric value corresponding to the accumulating value as calculated by the application synchronization service .

Moving on to shown is an example of application state information that can be generated by an application and transmitted to the application synchronization service . In the depicted example the application state information includes for example an event value corresponding to an event occurring within an application . Additionally the application state information can also include a timestamp generated by an application when an event corresponding to an event value occurs within the application . The application synchronization service can utilize the timestamp to facilitate idempotency of data included within the depicted data structure as described above.

Referring next to shown is a flowchart that provides one example of execution of an application executed by a client device to generate application state information or a portion of application state information that includes an accumulating value according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client device that reports application state information to the application synchronization service for synchronization of state information across multiple devices of a user according to one or more embodiments.

First in box the application executes functionality associated with the application in a client device . As described above the application has been instrumented by a developer to generate application state information corresponding to events that the developer wishes to synchronize across multiple devices associated with a user account. In box the application determines whether an event corresponding to an accumulating value that is synchronized between various devices associated with a user account occurs within the client device . If so then in box the application determines whether a locally stored or local contribution associated with the application executed on the client device has been previously reported to the application synchronization service . If not then at box the application obtains a numerical value associated with a contribution of the client device that may be stored in the data store by the application synchronization service . Next at box the application sums the local contribution with the contribution value obtained from the application synchronization service to calculate a contribution to be reported within a data structure incorporated within application state information . Thereafter the application proceeds to box .

If the application determines at box that the local contribution has been previously reported to the application synchronization service then at box the application generates application state information that includes a data structure associated with the accumulating value. At box the application transmits the application state information to the application synchronization service . Thereafter the process shown in proceeds to completion.

Referring next to shown is a flowchart that provides one example of execution of the application synchronization service executed by a computing environment according to various embodiments to process application state information that includes data related to an accumulating value. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application synchronization service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application synchronization service obtains application state information via a network . The application state information is formatted according to a data format as described herein. At box the application synchronization service determines whether the application state information includes data relating to an accumulating value that is synchronized by the application synchronization service across multiple client devices that are associated with a user account.

At box the application synchronization service extracts a numeric value corresponding to a contribution to the accumulating value that is associated with the client device . At box the application synchronization service extracts a device identifier corresponding to the client device from which the application state information was received. At box the application synchronization service stores the contribution and device identifier in association with a key corresponding to the accumulating value in the data store .

At box the application synchronization service calculates the accumulating value based upon the contributions of the various client devices that are linked with the user account associated with the client device from which the application state information was received. For example the application synchronization service can sum the various contributions associated with the various client devices that are stored in association with a particular key that is in turn associated with a particular user account. At box the application synchronization service can send an application state update that includes the accumulating value to the requesting client device . Thereafter the process ends.

Referring next to shown is a flowchart that provides one example of execution of an application executed by a client device to generate application state information or a portion of application state information according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client device that reports application state information to the application synchronization service for synchronization of state information across multiple devices of a user according to one or more embodiments.

First in box the application executes functionality associated with the application in a client device . As noted above the application has been instrumented by a developer to generate application state information corresponding to events that the developer wishes to synchronize across multiple devices associated with a user account. At box the application determines whether an event corresponding to data that is synchronized across multiple client devices associated with a user account has occurred. At box the application generates application state information that incorporates data associated with the event such as an event name and or event value. The application state information also includes a timestamp that is generated by the client device in which the application is executed. At box the application transmits the application state information to the application synchronization service .

Referring next to shown is a flowchart that provides one example of execution of the application synchronization service executed by a computing environment according to various embodiments to process application state information . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application synchronization service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application synchronization service obtains application state information via a network . The application state information is formatted according to a data format as described herein. At box the application synchronization service extracts a timestamp from the application state information . At box the application synchronization service extracts an event name from the application state information within a data structure within the application state information . At box the application synchronization service extracts an event value from the application state information . At box the application synchronization service determines whether the application state information is a duplicate based upon the timestamp. If the application state information is a duplicate then at box the application synchronization service discards the application state information . If the application state information is not a duplicate then at box the application synchronization service stores the event value as a value in the data store as well as the timestamp in association with the event value in the data store so that the application synchronization service can determine whether subsequent application state information data structures received from client devices are duplicates.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the application marketplace system application synchronization service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are an application and potentially other applications and or software. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the application marketplace system application synchronization service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application synchronization service and or application executed by a client device . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in flowcharts of may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in flowcharts of may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the application synchronization service application or any other application or service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

