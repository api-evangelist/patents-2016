---

title: System and method for domain password reset in a secured distributed network environment
abstract: Embodiments of systems and method as presented herein allow a user's locally stored authentication credentials to be reset without needing either to contact the domain controller over a network or authenticating a user at the device. Credentials being reset by the user are obtained at the device and encrypted in the same manner as the original locally stored domain credentials such that the new credentials can be used to overwrite the previously stored authentication credentials for the user at the device without contacting the domain controller over the network. The user can then access his device without contacting the domain controller using these new locally stored authentication credentials. Additionally, the user's credentials may be independently reset with respect to the domain controller. Thus, once the user is locally authenticated to the device using the new credentials, the user may be permitted access to the domain with the new credentials through the domain controller as the new credentials have been also been reset at the domain controller.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600656&OS=09600656&RS=09600656
owner: Sailpoint Technologies, Inc.
number: 09600656
owner_city: Wilmington
owner_country: US
publication_date: 20160309
---
This disclosure relates generally to systems and methods for security in a distributed networked computer environment. More particularly this disclosure relates to systems and methods for the management of authentication information in such an environment. Even more particularly this disclosure relates to the resetting of authentication information in a distributed networked environment.

Increasingly in the computing world functionality is distributed. Such distribution is achieved through the separation of the devices functionality or data collectively resources and the physical or logical decoupling of such resources. Components implementing various functionality of computer systems may therefore reside in different domains. A domain may include a logical grouping of network objects such as an internetworked set of computers or applications associated with a particular entity address etc. Domains may also encompass a sub domain which itself may be a domain contained in the parent domain etc. Thus companies or other entities may establish domains for use by their employee or others. In such instances when a user associated with the entity is provisioned with a computer a domain administrator may configure the computer or domain such that access to the domain by the computer is accomplished using a set of authentication credentials such as user name and password. When the user s computer has been authenticated with these credentials the user s computer is considered a member of the domain network.

In particular when a user s computer is a member of a domain these authentication credentials are managed by a computer within the domain. For example in a Windows domain the computer system that manages such authentication credentials is referred to as a domain controller. This domain controller may only be accessible from a user s computer when the computer has been authenticated by the domain controller and is considered a member of the domain s network. In many cases however users travel away from the network and forget their passwords or they expire. If the user is not actively connected to the domain network they may however be effectively locked out of their computer until they can gain access to the domain network again. This creates a catch 22 situation. The user needs to access the domain controller to reset their credentials for the domain using the domain controller however the user can only access the domain controller if the computer has been authenticated by the domain controller using the proper authentication credentials.

Current solutions to this problem rely on the user physically providing their computer or device back to the network of origin e.g. by mail or courier in the case where the user is located remotely from an administrator or entity . A network administrator for the domain then integrates the computer back into the domain resets the credentials and physically provides the computer back to the user. This solution is clearly unacceptable as it is inconvenient for both the user and the administrator and may result in additional security risks when the computer is in transit.

What is desired then are systems and methods that provide a secure way to reset domain based authentication credentials in a distributed network environment.

To address these desires among others embodiments as disclosed herein may allow a user s locally stored authentication credentials to be reset without needing either to contact the domain controller over a network or authenticate a user at the device. A user s device may include locally stored authentication credentials that may be used to access a domain. In the event of a connectivity loss or other inability to access the domain controller or be authenticated to the domain network these locally stored credentials may be used by the user to access the device. Mien a user resets his credentials the credentials being reset by the user are obtained at the device and encrypted in the same manner as the original locally stored domain credentials such that the new credentials can be used to overwrite the previously stored authentication credentials for the user at the device without contacting the domain controller over the network. The user can then access his device without contacting the domain controller using these new locally stored authentication credentials. Additionally the user s credentials may be independently reset with respect to the domain controller. Thus once the user is locally authenticated using the new credentials the user may be permitted access to the domain with the new credentials through the domain controller as the new credentials have been also been reset at the domain controller.

In one embodiment a computer device for a user may include a processor and a data store. The data store has locally stored authentication credentials comprising one or more entries created in association with a domain controller communicating with the computer device over a network. When a user resets his credentials the user credentials may be obtained at the device. The locally stored authentication credentials can be accessed to determine a current entry in the locally stored authentication credentials associated with the user credential. A new entry associated with the user credential and including the received user credential is created. The current entry in the locally stored authentication credentials is then overwritten with the new entry without contacting the domain controller over the network. By overwriting the current entry with the new entry a user can be authenticated at the device using the user credential in the new entry of the locally stored authentication credentials without contacting the domain controller over the network. This obtaining accessing creating and overwriting may be done in certain embodiment without allowing the user to access the computer device.

In particular in one embodiment the user credential is in an encrypted format in the current entry and the user credential is in the encrypted format in the new entry.

In one embodiment a request to update the user s credentials at the domain controller may be sent with the user credential and the user credential is obtained from this request to update the user s credentials at the domain controller.

In another embodiment one or more keys are used to encrypt the user credential in the new entry. These same keys may be the keys used to decrypt entries of the locally stored authentication credentials to determine if an entry is associated with the user.

Accordingly embodiments as disclosed herein may have numerous advantages. In particular they may allow a user to access his device without internet connectivity or contacting a domain controller even in cases where he has forgotten his credentials or the credentials have expired. The user may thus be prevented from giving up their device or having the device otherwise inaccessible for a period of time. Additionally because in certain embodiments no operating system interfaces are utilized to accomplish the reset of the local credentials are used the solution can be used across many operating systems or versions of a particular operating system.

These and other aspects of the disclosure will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood however that the following description while indicating various embodiments of the disclosure and numerous specific details thereof is given by way of illustration and not of limitation. Many substitutions modifications additions and or rearrangements may be made within the scope of the disclosure without departing from the spirit thereof and the disclosure includes all such substitutions modifications additions and or rearrangements.

The invention and the various features and advantageous details thereof are explained more fully with reference to the non limiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known starting materials processing techniques components and equipment are omitted so as not to unnecessarily obscure the invention in detail. It should be understood however that the detailed description and the specific examples while indicating some embodiments of the invention are given by way of illustration only and not by way of limitation. Various substitutions modifications additions and or rearrangements within the spirit and or scope of the underlying inventive concept will become apparent to those skilled in the art from this disclosure.

Before delving into more detail regarding the specific embodiments disclosed herein some context may be helpful. As discussed above in many cases companies or other entities establish a logical grouping of network objects called a domain for the use of people or devices affiliated with the entity. When a user associated with the entity is provisioned with a device a domain administrator may configure the device or domain such that access to the domain by the device is accomplished using a set of authentication credentials such as a user or account name or password. These authentication credentials are managed by a computer system within the domain known as a domain controller it will be understood herein that the term domain controller as used herein refers generally to any computer system that manages authentication credentials and not specifically to a domain controller in a Windows environment . This domain controller may only be accessible from a user s device when the computer has been authenticated by the domain controller and is considered a member of the domain s network.

Provisions may however be made to allow a user to access his device in cases where the device is not coupled to the domain network by locally storing authentication credentials on the user s device. In many cases however users travel away from the network and forget their credentials or they expire. While certain password reset functionality may allow a user to reset his credentials remotely this reset functionality only serves to reset the credentials with respect to the domain controller. Thus while the user s credentials may be reset with respect to the domain controller the user is still locked out of their computer until they can gain access to the domain network again as the locally stored credentials on the user s device have not been updated.

Attention is thus directed to the systems and method as presented herein that allow a user s locally stored authentication credentials to be reset without needing either to contact the domain controller over a network or authenticating a user at the device. Credentials being reset by the user are obtained at the device and encrypted in the same manner as the original locally stored domain credentials such that the new credentials can be used to overwrite the previously stored authentication credentials for the user at the device without contacting the domain controller over the network. The user can then access his device without contacting the domain controller using these new locally stored authentication credentials. Additionally the user s credentials may be independently reset with respect to the domain controller. Thus once the user is locally authenticated to the device using the new credentials the user may be permitted access to the domain with the new credentials through the domain controller as the new credentials have been also been reset at the domain controller.

When the device is on a network associated with the domain such as a local area network LAN or Wide Area Network WAN the user may provide the authentication credentials to a local authenticator component associated for example with operating system on the device . The local authenticator component provides these credentials to the domain controller which authenticates the credentials to determine if they are valid. If the credentials are valid the device is made a member of the domain and allowed to access the domain resources .

In the example depicted here in if the user on the computing device forgets his authentication credentials or the credentials are otherwise no longer valid the computing device on network associated with the domain can contact the domain controller in order to reset the user s authentication credentials and obtain access to the domain . In particular domain may include domain identity manager IDM while the device is provisioned with a local identity management component . The domain identity manager may for example be the IdentityIQ product by SailPoint Technologies Inc. of Austin Tex. The local identity management component may include self service password reset functionality and be configured to interoperate with the domain identity manager . For example the local identity management component may be a plug in configured to utilize interact with or replace in whole or in part a Graphical Identification and Authentication GINA dynamic link library DLL .

Thus in cases where a user has forgotten his credentials or the credential is otherwise not valid the local identity management component may allow the user to access the domain identity manager through the network using an interface. Such an interface may be presented for example using a limited functionality browser. Specifically the local identity management component may contact the domain identity manager and request a credential reset for the user of the device . The domain identity manager may reply with a challenge or other verification mechanism. Such a verification mechanism may also be sent to the user through an out of band channel such as text message email phone call etc. The user can enter the challenge response and a new credential through the presented interface. The local identity management component sends the challenge response and the new credential to the local identity management component . If the challenge response can be validated domain identity manager may reset the user s credentials using the domain controller . The user can then log into the device using the new credential and be validated by the domain controller accessed over the domain network .

Moving now to in many cases a user may travel with his computing device and not be on network associated with domain . For such instances domain controller in conjunction with local authentication component may provide local cache of authentication credentials for the domain . These locally stored credentials are sometimes referred to as domain cached credentials or DCC. This local cache may be in the registry maintained by the operating system of the device . Thus when a user at the device authenticates with the domain controller the domain controller may call one or more procedures provided by operating system of the device to create update or otherwise synchronize the local authentication credentials associated with users of the device in the local cache with the authentication credentials for the user as stored by domain controller .

The procedures provided by the operating system to create update or synchronize these locally stored authentication credentials may be what are referred to as private interfaces. In other words the operating system or makers thereof may not expose or published the interfaces for these procedures e.g. may not expose an application programming interface API or other type of interface such that other programs can be made to use these procedures.

To avoid compromising the security of the locally stored authentication credentials and thus the security of the entire domain the authentication credentials in the cache may be hashed encrypted or otherwise obfuscated using security component which may be provided by the operating system . For example Microsoft provides the MSCache or MSCache v.2 MSCache2 function that may be used to hash a credential of a user such as a password. In many instances the authentication credentials are stored in a blob that is a set of bits including a set of associated information stored in particular byte ranges of the set of bits. This information may include for example the user s name a domain name certain paths or directories associated with the user or the domain various checksums etc. In many cases this blob may have a proprietary format depending on the type or version of operating system . Additionally the blob may be of varying lengths depending on the format utilized for the authentication credentials .

In this manner even when the user cannot access the domain controller the user may access the device using the cache of locally stored authentication credentials . Specifically when the local authentication component receives authentication credentials from the user of the device the local authentication component may determine that it cannot access the domain controller as the domain controller may not be accessible through a public network such as the Internet a public WAN or LAN or another public wired or wireless network etc. The local authentication component may then access the locally stored authentication credentials in the local cache associated with the user and validate the user entered authentication credentials against the authentication credentials stored in the local cache .

In particular the local authentication component may obtain the local authentication credentials associated with the user if they exist process the blob to obtain a credential for the user e.g. the password and compare the locally stored credentials to the credentials received from the user. It will be noted that what is obtained from the local authentication credentials and compared may be the credential after processing by the security component . Thus the local authentication component may process the credentials received from the user using security component e.g. MSCache2 and compare the created value e.g. a hash of the credential received from the user to the value for the credential obtained from the local authentication credential e.g. the hashed value of the credential as stored in or determined from the cache .

If the credentials match the user may be granted local access to the device . A virtual private network VPN can then be established over public network between device and domain controller and an attempt can be made to authenticate with the domain controller using the user s credentials. If the user s credentials are authenticated by the domain controller the device may be made a member of the domain through the established VPN and the user can access the domain resources in the domain . Additionally the domain controller may synchronize the locally stored credentials for that user at the device .

Now suppose that in such a scenario a user of device forgets his credentials the credentials have an expiration time associated with them in the local cache such that user s locally stored credentials have expired or a synchronization between the domain controller and the device has failed or been corrupted. In these circumstances the user may not be able to access his device as the user may not be able to provide credentials that match the locally stored credentials or the locally stored credentials may not be acceptable as valid to the local authentication component . As the user cannot access the device there is likewise no ability to access domain controller to reset the user s credentials. The user may be locked out of his device with no recourse except to return the device to a network administrator of domain .

Moreover as the domain identity manager may also be a member of domain a similar problem may present itself with respect to accessing the domain identity manager to change the user s credentials. Even in the case where the domain identity manager is available from the local identity management component the user may not be able to access his device . This situation exists because while the user s credentials may be reset with respect to the domain controller there is no ability for the local credentials to be synchronized as the domain controller cannot access or be accessed to reset the local credentials on the device .

This situation may be better illustrated with respect to which depicts a distributed computer environment including domain having domain controller for managing authentication credentials for the domain . In this example a remote identity manager may be established outside the domain . The remote identity manager may be deployed in a standalone computer system or may be deployed in cloud based computer environment. In cloud computing a cloud refers to a computing platform implemented by a network of distributed servers or the like. Examples of a cloud based computing platform may include for example Microsoft Windows Azure Amazon Elastic Compute Cloud etc. The remote identity manager may for example be the IdentityNow product by SailPoint Technologies Inc. of Austin Tex.

The remote identity manager may provide one or more interfaces accessible through network by local identity manager to accomplish identity management or access functionality. The domain identity manager and the remote identity manager may communicate over network to accomplish the functionality offered through the interfaces of the remote identity manager with respect to the domain controller or other components of the domain . The communications between local identity manager remote identity manager and domain identity manager may be accomplished according to one or more protocols such as for example Hypertext Transfer Protocol HTTP Representational State Transfer REST Simple Object Access Protocol SOAP etc. and in one or more formats such as for example Extensible Markup Language XML Hypertext Markup Language HTML JavaScript Object Notation JSON etc.

Thus in cases where a user has forgotten his credentials the credentials have an expiration time associated with them in the local cache such that user s locally stored credentials have expired or a synchronization between the domain controller and the device has failed or been corrupted. In these circumstances the user may not be able to access his device as the user may not be able to provide credentials that match the locally stored credentials or the locally stored credentials may not be acceptable as valid to the local authentication component . Here the user may utilize local identity management component that includes self service password reset functionality that is configured to communicate with remote identity manager to request a reset of the user credentials.

Specifically the local identity management component may present an interface to allow the user to request a reset of his credentials. Such an interface may be presented for example using a limited functionality browser. The local identity management component may contact the remote identity manager over network using an interface offered by the remote identity manager and request a credential reset for the user of the device . The remote identity manager may reply with a challenge or other verification mechanism. Such a verification mechanism may also be sent to the user through an out of band channel such as text message email phone call etc. The user can enter the challenge response and a new credential through the presented interface at the device . The local identity management component sends the challenge response and the new credential to the remote identity manager . If the challenge response can be validated remote identity manager may reset the user s credentials by communicating with the domain identity manager . The domain identity manager then effectuates the resetting of the user s credentials by communicating with the domain controller .

The user s credentials have thus been reset with respect to the domain controller . As the domain controller does not present an interface accessible outside the domain however this may not alleviate the user s access problem with respect to device . The device still remains unavailable to the user because the local credentials of the user on the device have not been similarly reset. Thus when the local authentication component receives authentication credentials from the user of the device the local authentication component may determine that it cannot access the domain controller as the domain controller may not be accessible through a public network . The local authentication component may then access the locally stored authentication credentials in the local cache associated with the user and attempt to validate the user entered authentication credentials against the authentication credentials stored in the local cache . Because the domain controller cannot communicate over the public network to synchronize the local authentication credentials stored in the device with the new credentials as reset by the user on the domain controller the attempted validation of the user entered credentials e.g. the user s new credentials against the local stored authentication credentials will fail and the user denied access to the device .

It is thus desirable to allow a user to gain access to his device in cases when the user is located outside a domain without valid credentials. Embodiments as disclosed herein may provide an agent or other component residing on the user s device that obtain new credentials for the user access the locally stored authentication credentials for the user on the device modify the authentication credentials with the new and replace the locally stored authentication credentials for the user with the new credentials. The component may integrate with the domain credential reset functionality present on the device such that the locally stored authentication credentials are updated at the same time the user s authentication credentials are updated at the domain controller. When the user next attempts to access the device using the new authentication credentials the user may be validated against the updated locally stored authentication credentials and allowed to access the device on that basis.

Turning now to one embodiment of a distributed computer network environment including domain having domain controller for managing authentication credentials for the domain is depicted. Domain may utilize an identity management system comprising a local identity manager on a user s device domain identity manager inside domain and remote identity manager outside the domain .

The domain identity manager may have access to or credentials for domain controller and be configured to request that functionality be performed by the domain controller through one or more interfaces offered by the domain controller . The domain identity manager may be for example the IdentitylQ product by SailPoint Technologies Inc. of Austin Tex.

Remote identity manager may be deployed in a standalone computer system or may be deployed in cloud based computer environment such as for example Microsoft Windows Azure Amazon Elastic Compute Cloud or the like. Remote identity manager may provide one or more interfaces accessible through network to accomplish identity management or access functionality. The remote identity manager may for example be the IdentityNow product by SailPoint Technologies Inc. of Austin Tex.

The domain identity manager and the remote identity manager may communicate over network to accomplish the functionality offered through the interfaces of the remote identity manager with respect to the domain controller or other components of the domain . In particular remote identity manager may receive requests associated with offered functionality through one or more interfaces provided by the remote identity manager . In one embodiment as domain identity manager may be within domain it may not be configured to accept requests or other communications originating from outside domain . Therefore to effect communication with the domain identity manager the remote identity manager may place items or jobs on a work queue maintained by the remote identity manager . At some interval the domain identity manager may send a request for work items to the remote identity manager . The remote identity manager may respond to the request for work items from the domain identity manager with one or more work items from the work queue if any work items exist on the queue. As the response from remote identity manager has been sent in response to a request initiated by the domain identity manager it may be allowed into domain and received at domain identity manager . The domain identity manager may then perform each of the work items received from the remote identity manager utilizing the domain controller when needed to accomplish a received work item.

Local identity manager on the user s device may have been installed or otherwise provisioned on the user s device by a network administrator of the domain . The local identity manager may have been given SYSTEM or administrator level access to the device such that the local identity manger may access the registry of the operating system on the device . The local identity management component may include self service password reset functionality and be configured to send requests associated with this self service password reset functionality to the remote identity manager according to the interfaces provided by the remote identity manager . For example the local identity management component may be a plug in configured to utilize interact with or replace in whole or in part a Graphical Identification and Authentication GINA dynamic link library DLL .

The communications between local identity manager remote identity manager and domain identity manager may be accomplished according to one or more protocols such as for example Hypertext Transfer Protocol HTTP Representational State Transfer REST Simple Object Access Protocol SOAP or the like and in one or more formats such as for example Extensible Markup Language XML Hypertext Markup Language HTML JavaScript Object Notation JSON or the like. Accordingly certain security measures such as encryption or the like may be taken with respect to communications occurring between local identity manager remote identity manager or domain identity manager . Embodiments of such authentication and communications are for example described in U.S. patent application Ser. No. 14 318 133 filed on Jun. 27 2014 by Forster et al. entitled System and Method For Securing Authentication Information In A Networked Environment which is fully incorporated herein for all purposes.

When a user affiliated with the domain such as an employee of a company who established the domain or the like is given computing device a set of authentication credentials e.g. username or password are provisioned by a network administrator of the domain for the user or device . In most cases the user is not given a local account or administrative privileges on the device as it is desirable to restrict the access or control that a user may have on device . A set of identity verification data e.g. a challenge and response for use in verifying a user may also be obtained from the user and stored at one or more of domain controller domain identity manager or remote identity manager .

In a normal authentication procedure a user may authenticate with domain controller using local authenticator component or local identity manager and remote identity manager . For example when the device is on a network associated with the domain the user may provide his authentication credentials to a local authenticator component associated for example with operating system on the device . The local authenticator component provides these credentials to the domain controller which determines if these credentials are valid. If the credentials are valid the device is made a member of the domain and allowed to access the domain resources .

For a variety of reasons it is desirable to allow the user to access the device when he is outside of domain . Accordingly when the user is authenticated with the domain controller the domain controller may call one or more procedures provided by operating system of the device to create update or otherwise synchronize local authentication credentials associated with users of the device in the local cache with the authentication credentials for the user as stored by domain controller . The local cache may be for example the registry for the operating system of the device . The procedures provided by the operating system to create update or synchronize these locally stored authentication credentials may be what are referred to as private interfaces. In other words the operating system or makers thereof may not expose or published the interfaces for these procedures e.g. may not expose an application programming interface API or other type of interface such that other programs can be made to use these procedures.

To avoid compromising the security of the locally stored authentication credentials and thus the security of the entire domain the authentication credentials in the cache may be hashed encrypted or otherwise obfuscated using security component which may be provided by the operating system . For example Microsoft provides the MSCache or MSCache v.2 MSCache2 function which may be used to hash a credential of a user such as a password. In many instances the authentication credentials are stored in an entry or blob that is a set of bits having a set of associated information stored in particular byte ranges of the set of bits. This information may include for example the user s password in a hashed or encrypted form the user s or account name a domain name certain paths or directories associated with the user or the domain various checksums etc. In many cases this blob may have a proprietary format depending on the type or version of operating system . Additionally the blob may be of varying lengths depending on the format utilized for the authentication credentials .

In this manner even when the user cannot access the domain controller the user may access the device using the cache of locally stored authentication credentials . Specifically when the local authentication component receives authentication credentials from the user of the device the local authentication component may determine that it cannot access the domain controller as the domain controller may not be accessible through a public network . The local authentication component may then access the locally stored authentication credentials in the local cache associated with the user and validate the user entered authentication credentials against the authentication credentials stored in the local cache .

In particular the local authentication component may obtain the local authentication credentials associated with the user if they exist process the entry associated with the user to obtain a credential for the user e.g. the password and compare the credential for the user to the credential received from the user. It will be noted that what is obtained from the local authentication credentials and compared may be the credential after processing by the security component . Thus the local authentication component may process the credential received from the user using security component e.g. MSCache2 and compare the created value e.g. a hash of the credential received from the user to the value for the credential obtained from the local authentication credential e.g. the hashed value of the credential as stored in or determined from the entry in local authentication credentials associated with the user .

If the credentials match the user may be granted local access to the device . A virtual private network VPN can then be established over public network between device and domain controller and an attempt can be made to authenticate with the domain controller using the user s credentials. If the user s credentials are authenticated by the domain controller the device may be made a member of the domain through the established VPN and the user can access the domain resources in the domain . Additionally the domain controller may synchronize the locally stored credentials for that user at the device .

Now suppose that a user of device forgets his credentials the user s credentials have an expiration time associated with them in the local cache such that the user s locally stored credentials have expired or a synchronization between the domain controller and the device has failed or been corrupted such the local authentication credentials for the user have become invalid. In these circumstances the user may not be able to access his device as the user may not be able to provide credentials that match the locally stored credentials or the locally stored credentials may not be acceptable as valid to the local authentication component . As the user cannot access the device there is likewise no ability to access domain controller to reset the user s credentials.

In cases where a user has forgotten his credentials or the credential is otherwise not valid the local identity management component may allow the user to access the remote identity manager to reset his credentials through the network using an interface. Such an interface may be presented by local identity management component using for example a secure browser which may have a restricted set of functionality compared to a typical web browser or the like when a user requests credential reset functionality from a login screen or the like. The local identity management component may contact the remote identity manager over network using an interface offered by the remote identity manager and request a credential reset for the user of the device . The remote identity manager may reply with a challenge or other verification mechanism which can be presented to the user through the interface. Such a verification mechanism may also be sent to the user through an out of band channel such as text message email phone call etc. The user can enter a challenge response and a new credential e.g. user or account name or password through the presented interface at the device . The local identity management component sends the challenge response and the new credential to the remote identity manager . If the challenge response can be validated remote identity manager may reset the user s credentials by communicating the new user credentials and a request to reset the user s credentials to the domain identity manager . The domain identity manager then effectuates the resetting of the user s credentials on the domain controller by communicating with the domain controller . The user s credentials may thus be reset with respect to the domain controller .

Local identity manager may also contain local cache writer module . The local cache writer module may be configured to overwrite the user s local credentials as stored in the cache with the user s new credentials without access to the domain or domain controller allowing a user to access the device using these new credentials without these local credentials being reset by the domain controller identify manager or remote identity manager .

In particular the local cache writer can also obtain the user s new credentials. These new user credentials may be passed to the local cache writer by local identity manager . In one embodiment local cache writer may be integrated with the browser provided by the local identity manager and may observe the communications for resetting the credentials between the local identity manager and the remote identity manager to obtain the new user credentials from these communications. In another embodiment during the credential reset process that occurs between the local identity manager and the remote identity manager the remote identity manager may set a cookie with the new user s credentials on the device using the browser functionality provided by the local identity manager . Local cache writer may obtain the new user credentials by reading such a cookie. Subsequently to obtaining the new credentials the local cache writer may remove the cookie.

Once the user s new credentials are obtained the local cache writer may obtain the user s locally cached authentication credentials stored in the local cache as stored by the operating system . For example the Windows operating system stores cached domain credential information in the HKLM Security Cache registry. This data may only be visible to processes running with SYSTEM level credentials. The local authentication credentials may contain multiple entries e.g. for example 10 in certain cases where each entry may pertain to a different user who has accessed the domain using their credentials from the device . AS discussed in some instances the authentication credentials are stored in an entry or blob.

In particular each blob may contain an encrypted version of a user s credential e.g. password after processing by security component . For example the blob for a user may contain an encrypted version of the 16 byte hash value created by the MSCache2 procedure in a Windows environment. In one particular embodiment the blob may take the following format where information in brackets comprises a number describing the byte index or range of the blob followed by a description of the data contained in those bytes 0 userNameLength 2 domainNameLength 4 effectiveNameLength 6 fullNameLength 8 logonScriptLength 10 profilePathLength 12 homeDirectoryLength 14 homeDirectoryDriveLength 16 . . . 23 last login unknown 24 . . . 27 groupCount 28 logonDomainNameLength 29 . . . 59 unknown 60 dnsDomainNameLength 62 upnLength 64 . . . 79 AES CBC IV 80 . . . 95 Checksum 96 . . . 111 encrypted 16 byte MSCache2 password hash 112 . . . n rest of encrypted domain data with positions derived from header values .

In the above embodiment of a blob bytes 96 through the length of the blob are the encrypted data that contain the user s password and other account information such as the domain data or other account credentials such as the user or account name. The data may be encrypted with Advanced Encryption Standard AES Cipher Block Chaining CBC cipher where the Initialization Vector IV is from the header and the key is the first 16 bytes of an cache key such as NL KM in Windows. The first 16 bytes of the decrypted data is the hash of a user s password as created by the MSCache2 security component. The rest of the information can be derived using the offsets described in the blob header starting from position 72 in the byte array of the blob.

To overwrite the entry in the local authentication credentials associated with the user then in certain embodiments the local cache writer obtains the cache key used to encrypt the data contained in the blob. These keys may be or may be derived from a system e.g. operating system key or a local security related key. For example in one embodiment a Windows System key e.g. syskey used by the Windows operating system to protect secure information stored locally on the device may be obtained. This key may be a 128 bit Rivest Cipher 4 RC4 encryption key. This system key may be derived by using key metadata from the following keys SYSTEM CurrentControlSet Control Lsa JD SYSTEM CurrentControlSet Control Lsa Skew1 SYSTEM CurrentControlSet Control Lsa GBG and SYSTEM CurrentControlSet Control Lsa Data .

The local cache writer may also obtain a local security authority key. This key may be a key used to protect a process for domain authentication such as local authenticator . For example in one embodiment with respect to the Windows operating system a Local Security Authority LSA key used to protect the Isass.exe process may be obtained. In one embodiment the LSA key may be obtained by reading the SECURITY Policy PolEKList registry value. Bytes 60 through total length 60 of this registry value can be read to obtain ciphered data. Bytes 28 through total length 28 of this ciphered data can be read to obtain a ciphered hash. A cipher key can be generated by generating a Secure Hash Algorithm SHA 256 bit hash using the obtained system key as an initialization value and applying one or more iterations of the SHA 256 transform. The ciphered data can be decrypted with AES Electronic Code Book ECB using the generated cipher key. The 32 bytes starting from the 68byte of the array resulting from this decryption is the LSA key.

The cache key used to encrypt the user credentials in the local authentication credentials can then be derived using the system key and the local security authority key. In one embodiment the cache key e.g. NL KM may be obtained by reading the SECURITY Policy Secrets NL KM CurrVal registry value. Bytes 60 through total length 60 of this registry value can be read to obtain ciphered data. Bytes 28 through total length 28 of this ciphered data can be read to obtain a ciphered hash. A cipher key can be generated by generating a Secure Hash Algorithm SHA 256 bit hash using the obtained local security authority key as an initialization value and applying one or more iterations of the SHA 256 transform. The ciphered data can be decrypted with AES Electronic Code Book ECB using the generated cipher key. The 64 bytes starting from the 16byte of the array resulting from this decryption is the NL KM key.

Once the cache key is determined it can be used to decrypt each of the entries e.g. blobs or portions thereof such as the encrypted password hash or encrypted domain or account data. In one embodiment for example bytes 96 onward of an entry in local credentials of cache may be decrypted to obtain domain or account data for that entry. Each of the entries in the local authentication credentials can then be iterated through to determine the account and domain data associated with that entry. The account e.g. user name or account name or domain data can be compared to the account or domain data for the user resetting his credentials to determine if there is a stored entry corresponding to that user in the local credentials stored in the cache .

If an entry e.g. blob associated with the user resetting his credentials is determined it can then be overwritten with a new entry containing the new user credentials as obtained by the local cache writer . In one embodiment a current version of the entry for the user may be placed in memory e.g. volatile or non volatile memory at the device as a working entry for the user. Portions of the working version of the entry may be replaced or altered by local cache writer to create an updated or new version of the entry for the user. Local cache writer can then overwrite the current entry in the local credentials with the new entry such that the update credentials for the user are stored in an entry associated with that user in the local credentials in the cache .

Specifically in the case where the entry takes the form of a blob as described above new user credentials may include a user or account name and a user password. The password may be hashed using the security component and encrypted using the same encryption function utilized to create the encrypted version of the password stored in the blob e.g. bytes 96 111 . The encrypted version of the old password in the blob for the user can be overwritten with the encrypted version of the new password to create an entry for the user that includes an encrypted version of the new password.

In one embodiment the new password can then be hashed using security component which may be for example MSCache2 or the like. Alternatively the steps of hashing the new password may be performed by the local cache writer . In one embodiment to accomplish this hashing the new user name and password are converted to Unicode. The MD 4 hash can be run on the Unicode password to produce a password byte array. This password byte array is then concatenated with the Unicode user name and the MD 4 hash run on the concatenated set of bits. The Password Based Key Derivation Function 2 PBKDF2 can then be run on the hash resulting from the application of the MD 4 to the concatenated set of bits for a number of iterations using the Unicode user name as a salt. The first 16 bytes of the byte array resulting from the application of PBKDF2 is the new hashed password.

Once the hashed new password is obtained it can be used to overwrite the old password in the new entry for the user e.g. the working entry in memory associated with the user . Specifically in one embodiment bytes 96 through 111 of the blob for the user are overwritten with the new password. The entry or portion thereof may then be encrypted using the encryption algorithm utilized to encrypt the original entry for the user. For example in one embodiment bytes 96 through 111 of the blob for the user are encrypted using AES CBC using the NL KM key and the IV used to decode the original entry.

Once the entry for that user in the local credentials has been overwritten with the new entry containing the user s new credentials the user may be able to access the device using his newly stored credentials in cache . Specifically the user may attempt to access the device using local authentication component and provide his new credentials in order to attempt such an access. When the local authentication component receives these authentication credentials from the user of the device the local authentication component may determine that it cannot access the domain controller as the domain controller may not be accessible through a public network . The local authentication component may then access the locally stored authentication credentials in the local cache associated with the user and validate the user entered authentication credentials against the authentication credentials stored in the local cache for the user.

In particular the local authentication component may obtain the local authentication credentials associated with the user process the blob associated with the user to obtain a credential for the user e.g. the password and compare the credential for the user to the credential received from the user. As the credential obtained from the entry in the local authentication credentials associated with the user may be the new credential provided by the user during his secure password reset the user provided credential may match the credential in the entry in the local authentication credentials . Accordingly the user may be granted local access to the device . A virtual private network VPN can then be established over public network between device and domain controller and an attempt can be made to authenticate with the domain controller using the user s credentials. As the user s credentials have also been reset on the domain controller e.g. using remote identity manager and domain identity manager the user may be authenticated by the domain controller the device made a member of the domain through the established VPN and the user allowed to access the domain resources in the domain . Additionally the domain controller may synchronize the locally stored credentials for that user at the device if needed.

Referring now to one embodiment of a method that may be employed to reset a user s domain credentials on a device without communicating with a domain controller is depicted. When a user affiliated with a domain is given a computing device a set of authentication credentials e.g. username or password are provisioned by a network administrator of the domain for the user or device. A set of identity verification data e.g. a challenge and response for use in verifying a user may also be obtained for the user. Additionally a local identity manager may be installed on the user s device. This local identity manager may have been given SYSTEM or administrator level access to the device such that the local identity manger may access the registry of the operating system on the device. The local identity management component may include self service password reset functionality and be configured to send requests associated with the self service password reset functionality such that the user s credentials may be reset with respect to the domain controller. For example the local identity management component may be a plug in configured to utilize interact with or replace in whole or in part a Graphical Identification and Authentication GINA dynamic link library DLL .

In cases where a user has forgotten his credentials or the credential is otherwise not valid the local identity management component may allow the user to access an interface to reset his credentials. Such an interface may be presented using for example a secure browser which may have a restricted set of functionality compared to a typical web browser when a user requests credential reset functionality from a login screen or the like at step . Accordingly at step the user s new credentials may be received. One or more requests to reset the user s credentials with respect to the domain controller may be sent at step . For example a remote identity manager may be contacted over a network and a credential reset for the user of the device requested. The new credentials can be sent to the remote identity manager which may effectuate the reset of the user s credentials on the domain controller.

The user s new credentials can be obtained orthogonally to the credential reset functionality with respect to the domain controller via an integration e.g. as a plug in with the browser provided to accomplish credential functionality with respect to the domain controller. Thus communications for resetting the user credentials between the device the domain controller credential reset interface may be observed to obtain the new user credentials from these communications. In another embodiment during the credential reset process a cookie with the new user s credentials may be set on the user s device using the provided browser functionality. This cookie may be read to obtain the new user credentials.

At step the authentication credentials stored locally on the device are obtained. These authentication credentials may be stored in a local cache such as the registry of the operating system of the device and include a set of entries corresponding to users of the device. Each entry may be associated with a user and a domain. For example the Windows operating system stores cached domain credential information in the HKLM Security Cache registry. These locally stored authentication credentials may only be visible to processes running with SYSTEM level credentials. The local authentication credentials may contain multiple entries e.g. for example 10 in certain cases where each entry may pertain to a different user who has accessed a domain using their credentials from the device. As discussed in some instances the authentication credentials are stored in an entry or blob.

In particular each blob may contain an encrypted version of a user s credential e.g. password after processing by a security component. For example the blob for a user may contain an encrypted version of a 16 byte hash value created by the MSCache2 procedure as applied to the user s password in a Windows environment. In one particular embodiment the blob may take the following format where information in brackets comprises a number describing the byte index or range of the blob followed by a description of the data contained in those bytes 0 userNameLength 2 domainNameLength 4 effectiveNameLength 6 fullNameLength 8 logonScriptLength 10 profilePathLength 12 homeDirectoryLength 14 homeDirectoryDriveLength 16 . . . 23 last login unknown 24 . . . 27 groupCount 28 logonDomainNameLength 29 . . . 59 unknown 60 dnsDomainNameLength 62 upnLength 64 . . . 79 AES CBC IV 80 . . . 95 Checksum 96 . . . 111 encrypted 16 byte MSCache2 password hash 112 . . . n rest of encrypted domain data with positions derived from header values .

In the above embodiment of a blob bytes 96 through the length of the blob are the encrypted data that contain the user s password and other account information such as the domain data or other account credentials such as the user or account name. The data may be encrypted with Advanced Encryption Standard AES Cipher Block Chaining CBC cipher where the Initialization Vector IV is from the header and the key is the first 16 bytes of a cache key such as NL KM in Windows. The first 16 bytes of the decrypted data is the hash of a user s password as created by the MSCache2 security component. The rest of the information can be derived using the offsets described in the blob header starting from position 72 in the byte array of the blob.

The entries in the cache of locally stored authentication credentials can then be iterated through at step until an entry associated with the user is determined if one exists at step . In order to determine an entry of the locally stored credentials associated with a user a cache key used to encrypt the data contained in the entry may be determined. This key may be or may be derived from a system e.g. operating system key or a local security related key. For example in one embodiment a Windows System key e.g. syskey used by the Windows operating system to protect secure information stored locally on the device may be obtained. This key may be a 128 bit Rivest Cipher 4 RC4 encryption key. This system key may be derived by using key metadata from the following keys SYSTEM CurrentControlSet Control Lsa JD SYSTEM CurrentControlSet Control Lsa Skew1 SYSTEM CurrentControlSet Control Lsa GBG and SYSTEM CurrentControlSet Control Lsa Data .

A local security authority key may also be obtained. This key may be a key used to protect a process for domain authentication. For example in one embodiment with respect to the Windows operating system a Local Security Authority LSA key used to protect the Isass.exe process may be obtained. In one embodiment the LSA key may be obtained by reading the SECURITY Policy PolEKList registry value. Bytes 60 through total length 60 of this registry value can be read to obtain ciphered data. Bytes 28 through total length 28 of this ciphered data can be read to obtain a ciphered hash. A cipher key can be generated by generating a Secure Hash Algorithm SHA 256 bit hash using the obtained system key as an initialization value and applying one or more iterations of the SHA 256 transform. The ciphered data can be decrypted with AES Electronic Code Book ECB using the generated cipher key. The 32 bytes starting from the 68byte of the array resulting from this decryption is the LSA key.

The cache key used to encrypt the user credentials in the entries in the local authentication credentials can then be derived using the system key and the local security authority key. In one embodiment the cache key e.g. NL KM may be obtained by reading the SECURITY Policy Secrets NL KM CurrVal registry value. Bytes 60 through total length 60 of this registry value can be read to obtain ciphered data. Bytes 28 through total length 28 of this ciphered data can be read to obtain a ciphered hash. A cipher key can be generated by generating a Secure Hash Algorithm SHA 256 bit hash using the obtained local security authority key as an initialization value and applying one or more iterations of the SHA 256 transform. The ciphered data can be decrypted with AES Electronic Code Book ECB using the generated cipher key. The 64 bytes starting from the 16byte of the array resulting from this decryption is the NL KM key.

Once the cache key is determined it can be used to decrypt the entries e.g. blobs or portions thereof such as the encrypted password hash or encrypted domain or account data. In one embodiment for example bytes 96 onward of an entry in local credentials of the cache may be decrypted to obtain domain or account data for that entry. The account e.g. user name or account name or domain data of the entry can be compared to the account or domain data for the user resetting his credentials to determine if that entry is associated with the user at step .

If an entry e.g. blob associated with the user resetting his credentials is determined at step a new entry containing the new user credentials may be created for the user at step . Specifically in one embodiment a current version of the entry for the user may be placed in memory e.g. volatile or non volatile memory at the device as the new entry for the user. Portions of this new entry may be replaced or altered to create the new entry for the user. The current entry in the local credentials for the user can then be overwritten with the new entry at step such that the update credentials for the user are stored in an entry associated with that user in the local credentials in the cache.

Specifically in the case where the entry takes the form of a blob as described above the new user credentials may include a user or account name and a user password. The password may be hashed using a security component or encrypted using the same encryption function utilized to create the encrypted version of the password stored in the blob e.g. bytes 96 111 . The encrypted version of the old password in the blob for the user e.g. the new version as stored in memory can be overwritten with the encrypted version of the new password to create the new entry for the user that includes an encrypted version of the new password.

In one embodiment the new password can then be hashed using a security component which may be for example MSCache2 or the like. In one embodiment to accomplish this hashing the new user name and password are converted to Unicode. The MD 4 hash can be run on the Unicode password to produce a password byte array. This password byte array is then concatenated with the Unicode user name and the MD 4 hash run on the concatenated set of bits. The Password Based Key Derivation Function 2 PBKDF2 can then be run on the hash resulting from the application of the MD 4 to the concatenated set of bits for a number of iterations using the Unicode user name as a salt. The first 16 bytes of the byte array resulting from the application of PBKDF2 is the new hashed password.

Once the hashed new password is obtained it can be used to overwrite the old password in the new entry for the user. Specifically in one embodiment bytes 96 through 111 of the blob for the user are overwritten with the new password. The entry or portion thereof may then be encrypted using the encryption algorithm utilized to encrypt the original entry for the user. For example in one embodiment bytes 96 through 111 of the blob for the user are encrypted using AES CBC using the NL KM key and the IV used to decode the original entry.

Once the entry for that user in the local credentials in the cache has been overwritten with the new entry containing the user s new credentials the user may be able to access the device using the entry in the cache. Specifically the user may attempt to access the device using a local authentication component and provide his new credentials in order to attempt such an access. When the local authentication component receives these authentication credentials from the user of the device the local authentication component may determine that it cannot access the domain controller as the domain controller may not be accessible through a public network. The local authentication component may then access the locally stored authentication credentials in the local cache associated with the user and validate the user entered authentication credentials against the authentication credentials stored in the local cache for the user.

In particular the local authentication component may obtain the local authentication credentials associated with the user process the blob associated with the user to obtain a credential for the user e.g. the password and compare the credential for the user to the credential received from the user. As the credential obtained from the entry in the local authentication credentials associated with the user may be the new credential provided by the user during his secure password reset the user provided credential may match the credential in the entry in the local authentication credentials. Accordingly the user may be granted local access to the device. A virtual private network VPN can then be established over a public network between the device and the domain controller and an attempt can be made to authenticate with the domain controller using the user s credentials. As the user s credentials have also been reset on the domain controller e.g. via a request sent to an identity manager or other service provider the user may be authenticated by the domain controller the device made a member of the domain through the established VPN and the user allowed to access the domain resources in the domain. Additionally the domain controller may synchronize the locally stored credentials for that user at the device if needed.

Reference throughout this specification to one embodiment an embodiment or a specific embodiment or similar terminology means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment and may not necessarily be present in all embodiments. Thus respective appearances of the phrases in one embodiment in an embodiment or in a specific embodiment or similar terminology in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics of any particular embodiment may be combined in any suitable manner with one or more other embodiments. It is to be understood that other variations and modifications of the embodiments described and illustrated herein are possible in light of the teachings herein and are to be considered as part of the spirit and scope of the invention.

In the description herein numerous specific details are provided such as examples of components and or methods to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that an embodiment may be able to be practiced without one or more of the specific details or with other apparatus systems assemblies methods components materials parts and or the like. In other instances well known structures components systems materials or operations are not specifically shown or described in detail to avoid obscuring aspects of embodiments of the invention. While the invention may be illustrated by using a particular embodiment this is not and does not limit the invention to any particular embodiment and a person of ordinary skill in the art will recognize that additional embodiments are readily understandable and are a part of this invention.

Read Only Memories ROMs Random Access Memories RAMs and Hard Drives HDs are computer memories for storing computer executable instructions executable by a central processing unit CPU or capable of being compiled or interpreted to be executable by the CPU. Suitable computer executable instructions may reside on a computer readable medium e.g. a ROM a RAM and or a HD hardware circuitry or the like or any combination thereof. Within this disclosure the term computer readable medium is not limited to ROMs RAMs and HDs and can include any type of data storage medium that can be read by a processor. For example a computer readable medium may refer to a data cartridge a data backup magnetic tape a floppy diskette a flash memory drive an optical data storage drive a CD ROM ROM RAM HD or the like. The processes described herein may be implemented in suitable computer executable instructions that may reside on a computer readable medium for example a disk CD ROM a memory etc. . Alternatively the computer executable instructions may be stored as software code components on a direct access storage device array magnetic tape floppy diskette optical storage device or other appropriate computer readable medium or storage device.

Any suitable programming language can be used to implement the routines methods or programs of embodiments of the invention described herein including C C Java JavaScript HTML or any other programming or scripting code etc. Other software hardware network architectures may be used. For example the functions of the disclosed embodiments may be implemented on one computer or shared distributed among two or more computers in or across a network. Communications between computers implementing embodiments can be accomplished using any electronic optical radio frequency signals or other suitable methods and tools of communication in compliance with known network protocols.

Different programming techniques can be employed such as procedural or object oriented. Any particular routine can execute on a single computer processing device or multiple computer processing devices a single computer processor or multiple computer processors. Data may be stored in a single storage medium or distributed through multiple storage mediums and may reside in a single database or multiple databases or other data storage techniques . Although the steps operations or computations may be presented in a specific order this order may be changed in different embodiments. In some embodiments to the extent multiple steps are shown as sequential in this specification some combination of such steps in alternative embodiments may be performed at the same time. The sequence of operations described herein can be interrupted suspended or otherwise controlled by another process such as an operating system kernel etc. The routines can operate in an operating system environment or as stand alone routines. Functions routines methods steps and operations described herein can be performed in hardware software firmware or any combination thereof.

Embodiments described herein can be implemented in the form of control logic in software or hardware or a combination of both. The control logic may be stored in an information storage medium such as a computer readable medium as a plurality of instructions adapted to direct an information processing device to perform a set of steps disclosed in the various embodiments. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the invention.

It is also within the spirit and scope of the invention to implement in software programming or code an of the steps operations methods routines or portions thereof described herein where such software programming or code can be stored in a computer readable medium and can be operated on by a processor to permit a computer to perform any of the steps operations methods routines or portions thereof described herein. The invention may be implemented by using software programming or code in one or more general purpose digital computers by using application specific integrated circuits programmable logic devices field programmable gate arrays optical chemical biological quantum or nanoengineered systems components and mechanisms may be used. In general the functions of the invention can be achieved by any means as is known in the art. For example distributed or networked systems components and circuits can be used. In another example communication or transfer or otherwise moving from one place to another of data may be wired wireless or by any other means.

A computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus system or device. The computer readable medium can be by way of example only but not by limitation an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus system device propagation medium or computer memory. Such computer readable medium shall generally be machine readable and include software programming or code that can be human readable e.g. source code or machine readable e.g. object code . Examples of non transitory computer readable media can include random access memories read only memories hard drives data cartridges magnetic tapes floppy diskettes flash memory drives optical data storage devices compact disc read only memories and other appropriate computer memories and data storage devices. In an illustrative embodiment some or all of the software components may reside on a single server computer or on any combination of separate server computers. As one skilled in the art can appreciate a computer program product implementing an embodiment disclosed herein may comprise one or more non transitory computer readable media storing computer instructions translatable by one or more processors in a computing environment.

A processor includes any hardware system mechanism or component that processes data signals or other information. A processor can include a system with a general purpose central processing unit multiple processing units dedicated circuitry for achieving functionality or other systems. Processing need not be limited to a geographic location or have temporal limitations. For example a processor can perform its functions in real time offline in a batch mode etc. Portions of processing can be performed at different times and at different locations by different or the same processing systems.

It will also be appreciated that one or more of the elements depicted in the drawings figures can also be implemented in a more separated or integrated manner or even removed or rendered as inoperable in certain cases as is useful in accordance with a particular application. Additionally any signal arrows in the drawings figures should be considered only as exemplary and not limiting unless otherwise specifically noted.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process product article or apparatus that comprises a list of elements is not necessarily limited only those elements but may include other elements not expressly listed or inherent to such a process product article or apparatus.

Furthermore the term or as used herein is generally intended to mean and or unless otherwise indicated. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present . As used herein including the claims that follow a term preceded by a or an and the when antecedent basis is a or an includes both singular and plural of such term unless clearly indicated within the claim otherwise i.e. that the reference a or an clearly indicates only the singular or only the plural . Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise.

The scope of the present disclosure should be determined by the following claims and their legal equivalents.

