---

title: Tracking changes within Javascript object notation
abstract: The method includes adjusting, by one or more computer processors, a JAVASCRIPT object notation structure to comprise a tag on at least one object and a tag on at least one array. The method further includes receiving, by one or more computer processors, data indicating a first set of at least one change to the JAVASCRIPT object notation structure. The method further includes adjusting, by one or more computer processors, the tags in the JAVASCRIPT object notation structure to include the first set of the at least one change in the JAVASCRIPT object notation structure. The method further includes receiving, by one or more computer processor, data indicating the first set of the at least one change to the JAVASCRIPT object notation structure is complete. The method further includes displaying the first set of the at least one change to the JAVASCRIPT object notation structure based upon the adjusted tags.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535691&OS=09535691&RS=09535691
owner: International Business Machines Corporation
number: 09535691
owner_city: Armonk
owner_country: US
publication_date: 20160328
---
The present invention relates generally to JAVASCRIPT Object Notation and more particularly to tracking changes within JAVASCRIPT Object Notation.

JAVASCRIPT Object Notation JSON is an open standard format that uses human readable text to store or transmit data objects consisting of attribute value pairs and ordered list of values. It is used primarily to transmit data between a server and web application as an alternative to eXtensible Markup Language XML . Although originally derived from the JAVASCRIPT scripting language JSON is a language independent data format. Code for parsing and generating JSON data is readily available in many programming languages.

JSON generally ignores any whitespace around or between syntactic elements e.g. values and punctuation but not within a string value . However JSON only recognizes four specific whitespace characters the space horizontal tab line feed and carriage return. JSON does not provide or allow any sort of comment syntax.

Embodiments of the present invention disclose a method computer program product and system for tracking changes in a JAVASCRIPT object notation structure. In one embodiment in accordance with the present invention the computer implemented method includes adjusting by one or more computer processors a JAVASCRIPT object notation structure to comprise a tag on at least one object and a tag on at least one array. The method further includes receiving by one or more computer processors data indicating a first set of at least one change to the JAVASCRIPT object notation structure. The method further includes adjusting by one or more computer processors the tags in the JAVASCRIPT object notation structure to include the first set of the at least one change in the JAVASCRIPT object notation structure. The method further includes receiving by one or more computer processor data indicating the first set of the at least one change to the JAVASCRIPT object notation structure is complete. The method further includes displaying by one or more computer processors the first set of the at least one change to the JAVASCRIPT object notation structure based upon the adjusted tags.

Embodiments of the current invention create a concise representation of changes in JSON format. Embodiments of the invention recognize that JSON is considered a concise format when compared to other relatively verbose prior formats like XML. Embodiments of the invention recognize that string representation of a JSON structure is very compact and hence easily transferable and sharable and storable. Embodiments of the invention recognize that use of JSON for change representation is advantageous. Embodiments of the invention utilize JAVASCRIPT Object Notation JSON and capturing the changes using JAVASCRIPT Object Notation. As and when changes happen the changes are tracked using JSON and then after all changes have been made the changes that have been made so far are captured using JSON as well. For the purposes of the application a collection of attribute value pairs is referred to as JSON object and ordered list of values is referred to as JSON array .

Implementation of embodiments of the invention may take a variety of forms and exemplary implementation details are discussed subsequently with reference to the Figures.

Distributed data processing environment includes server connected to network . Network represents for example a telecommunications network a local area network LAN a wide area network WAN such as the Internet or a combination of the three and includes wired wireless and or fiber optic connections. Network includes one or more wired and or wireless networks that are capable of receiving and transmitting data voice and or video signals including multimedia signals that include voice data and video information.

In the depicted environment server is one or more of a management server a web server or any other electronic device or computing system capable of receiving analyzing and sending data. In this embodiment server tracks changes to JAVASCRIPT Object Notation JSON format. In other embodiments server represents a server computing system utilizing multiple computers as a server system such as in a cloud computing environment. In another embodiment server represents a laptop computer a tablet computer a netbook computer a personal computer PC a desktop computer a personal digital assistant PDA a smart phone or any programmable electronic device capable of communicating with network . In another embodiment server represents a computing system utilizing clustered computers and components to act as a single pool of seamless resources. Server may include components as depicted and described in further detail with respect to in accordance with embodiments of the present invention. Server includes tracking program application programming interface API and database .

In depicted distributed data processing environment tracking program resides on server and tracks changes to JSON files. In various embodiments tracking program prepares a JSON structure for tracking changes and tracks changes made to the JSON structure. In some embodiments tracking program may monitor changes to a JSON on server or changes to a JSON on another computing device not depicted via network . In an example another computing device not depicted may have a JSON which is monitored by tracking program . In another embodiment tracking program may monitor databases and or storage devices located on server or another computing device to enable tracking program to monitor changes to the JSON file located in the database and or storage devices. In some embodiments tracking program monitors multiple JSON files. Tracking program is depicted and described in further detail with respect to .

In depicted distributed data processing environment API resides on server . API is a set of routines protocols and tools for building software applications. API specifies how software components should interact and API may be utilized when programming graphical user interface GUI components between a user and tracking program . In various embodiments API may contain functions that can be called upon to prepare a JSON for tracking changes e.g. startChangeTracking and stopChangeTracking as well as functions that can be utilized for tracking the changes e.g. setNameValuePair insertValueAtIndex . In some embodiments API may represent multiple APIs or work in conjunction with APIs not depicted.

In the depicted embodiment database resides on server . In another embodiment database may reside elsewhere in distributed data processing environment such as within one or more additional server s or devices not shown or independently as a standalone database that is capable of communicating with server via network . A database is an organized collection of data. Database is implemented with any type of storage device capable of storing data that is accessed and utilized by server such as a database server a hard disk drive or a flash memory. In other embodiments database represents multiple storage devices within server . Database stores information such as JSON files containing tracked changes various versions of JSON files etc. In an example database stores information generated by tracking program .

Program prepares the JSON structure for tracking changes step . In some embodiments an API may invoke the prepare operation e.g. API named startChangeTracking JSON . In various embodiments program tags the objects i.e. collection of attribute value pairs and arrays i.e. ordered list of values in the JSON structure to enable recording of the future changes to the JSON structure. In some embodiments program recursively traverses objects and arrays inside the JSON structure s hierarchy and adds a change tracker JSON object to each object and array. In an example a special name value pair e.g. named JSON CHANGE TRACKER is used to track changes inside a JSON object. The value corresponding to the name e.g. JSON CHANGE TRACKER is a JSON object e.g. a change tracker object that is used for storing the information as described in paragraph 0022 . In an example a language specific JSON implementation may hide such a name value pair stored in JSON object by ignoring the JSON CHANGE TRACKER name value pair in an application programming interface API e.g. object.getAllNames or object.toString . In some embodiments changes inside a JSON array are tracked using a special JSON object e.g. change tracker object that is used for storing the information as described in paragraph 0023 stored in the last array index. In an embodiment the last array index is used so the element does not affect the index that needs to be specified during insert remove move operations on the array elements. In an example a language specific JSON implementation may hide such an element stored in the last array index by ignoring the element in an array application programming interface API e.g. array.length or array.toString .

Program may also add an identifier name value pair e.g. named JSON ID to each object and array in the hierarchy of the JSON structure whose changes are to be tracked. In an example the identifier may reside in the change tracker object mentioned in the previous paragraph. The JSON ID enables program to identify preexisting objects and arrays as opposed to newly added objects and arrays after changes to a JSON structure have been made. In the example JSON ID enables program to identify original initial positions of objects or arrays in the JSON structure. In some embodiments the value corresponding to the JSON ID e.g. named JSON ID is a string that indicates the path in a JSON structure that must be traversed to reach an object or array. In an example a value starts with the string JSON ROOT and has separated elements that must be traversed to reach an element whose JSON ID is being created.

In another example name in a name value pair in an object and array index in an array are used to compose the JSON ID. In the previous example JSON ID may be assigned to elements in the JSON a 1 b 2 x 30 y 32 35 38 4 c 5 6 as follows The topmost object a 1 . . . gets the JSON ID JSON ROOT the array 2 x 30 . . . gets the JSON ID JSON ROOT b the object x 30 . . . gets the JSON ID JSON ROOT b 1 assuming zero based array indexes index of 2 in the array is 0 whereas the index of object x 30 . . . is 1 . Similarly array 32 35 . . . gets the JSON ID JSON ROOT b 1 y and so on. In some examples a file may not be in JSON format and program converts the file into a JSON file before adjusting the JSON structure for the file.

In step program creates the change tracker for each JSON object and JSON array in the JSON structure to enable recording of future changes to the JSON structure. In some embodiments the created change tracker for a JSON object may be a special name value pair e.g. named JSON CHANGE TRACKER . The value corresponding to the name e.g. JSON CHANGE TRACKER is a JSON object. In an example program utilizes a name value pair named INITIAL VALUES that resides in the change tracker for recording initial values for the JSON object whose changes are to be tracked by the change tracker. Value corresponding to the name INITIAL VALUES is a JSON object which has name value pairs for each name and its initial value in the JSON object whose changes are to be tracked. Program stores the initial value as is if the value is of a simple type such as string number boolean etc. whereas JSON ID of the initial value is stored if the initial value is a non simple type such as a JSON object or a JSON array. In some embodiments program utilizes an initial value as a function of program such as a change generator to determine whether a change should be captured. For example if the value in a name value pair is initially 15 then the value is changed to 20 and then changed to 15 again the value is not picked up by program because no real change occurs. Program may also use the initial values to determine whether a pre existing name value pair has been removed.

In some embodiments the change tracker for a JSON array may be a special JSON object stored in the last array index. During step for a JSON array a name value pair named INITIAL VALUES may be added to the change tracker for recording initial values of array elements. Value corresponding to the name INITIAL VALUES is a JSON array equal to the size of the JSON array for which changes are being tracked. Program stores the initial value as is if the value is of a simple type such as string number boolean etc. whereas JSON ID of the initial value is stored if the initial value is a non simple type such as a JSON object or a JSON array.

In various embodiments the change tracker for a JSON array may also have name value pair having the name POSITION CHANGES wherein the value is a JSON array which contains JSON arrays that indicate which index has been changed. In an example program adds a new element to the POSITION CHANGES array for every array change that involves a change in position of one or more array elements e.g. insert remove swap etc. operations . If a new element is inserted at index 2 then a JSON array I 2 is added to the POSITION CHANGES JSON array where I indicates insert operation. If an element at index 4 is removed then a JSON array R 4 is added to the POSITION CHANGES JSON array where R indicates remove operation. Similarly if elements at positions 3 and 6 are interchanged then JSON array S 3 6 is added to POSITION CHANGES JSON array where S indicates swap operation. When the JSON structure is prepared for tracking changes step an empty POSITION CHANGES array is initialized in the change tracker object.

Program receives data changing a JSON structure step . In various embodiments program may receive data changing a JSON structure via API . For example setNameValuePair JSON object name value removeNameValuePair JSON object name insertValueAtIndex JSON array index value etc. In some embodiments program may actively receive from an API e.g. API and make changes to a JSON after receiving data from a user interface UI indicating a user is changing the JSON file. In another embodiment program may monitor a JSON for changes occurring to the structure. In some embodiments program may proceed to step after each change to a JSON file that is detected by program via an API e.g. API . In other embodiments program may proceed to step after receiving an indication from a user of program via API e.g. API that all changes have been completed.

Program may record additional details inside the change tracker object when program receives data changing a JSON structure through an API e.g. API . For example if changes to a JSON array involve position changes then such changes may be captured in the POSITION CHANGES array inside the change tracker. Also such position changes may be made to the INITIAL VALUES array as well to keep INITIAL VALUES array in sync with the array whose changes are being tracked. In an example if program receives data changing a JSON structure by inserting an array element program inserts an array e.g. I where I indicates insert operation at index 2 to POSITION CHANGES array in change tracker. In another example program also inserts a special string such as JSON NEWLY INSERTED ARRAY ENTRY at the corresponding index e.g. index 2 in INITIAL VALUES array in change tracker. In another example if program receives data changing a JSON structure by removing an array element program inserts an array e.g. R 4 where R indicates remove operation at index 4 to POSITION CHANGES array in change tracker and program also removes the entry at the corresponding index e.g. index 4 in INITIAL VALUES array in change tracker. In yet another example if program receives data changing a JSON structure by swapping values at two indexes in the array program inserts an array e.g. S 3 6 where S indicates swapping of values at indexes 3 and 6 to POSITION CHANGES array in change tracker and program also swaps values at corresponding indexes e.g. indexes 3 and 6 in INITIAL VALUES array in change tracker.

Program captures change information in a JSON structure step . In an embodiment the JSON structure that represents changes that have been made to the JSON structure whose changes are being tracked is referred to as change JSON. In various embodiments program utilizes change information that has been recorded within tags e.g. change tracker objects previously added to the JSON structure during steps and . Step may be initiated when a user indicates via an API e.g. API for program to capture change information in the JSON structure. In some examples a user may make multiple changes to the same object or array in a JSON structure but program only captures the iteration in existence when a user initiates step . In an example if there is a first change to code and then a subsequent change to a portion of common code program only captures the most recent change of the common code. Where the changes overlap the most recent change is recorded.

In an embodiment program only captures the final changed version of the JSON structure. In an example a user may indicate via API e.g. captureChanges to capture changes made to the JSON so far then program captures changes made to the JSON step beginning when tracking changes was turned on e.g. step start in . In some examples changes inside a JSON object are represented using a JSON object. In a JSON object example such as in with lines removed name value pairs are represented using a name value pair named REMOVED NAMES on line where the value is a JSON array containing the removed names in lines to . In an example the change generator function of program determines the removed name value pairs using the INITIAL VALUES recorded in the change tracker during the prepare step . If a name value pair is in the INITIAL VALUES JSON object but the name value pair is not currently in the JSON object whose changes are being tracked then program adds the name to REMOVED NAMES array. Program may also compare current name value pairs in the JSON object whose changes are being tracked with the name value pairs in the INITIAL VALUES JSON object and only capture the changed name value pairs. As an example in the change JSON does not have the name value pair named d because value 4 of that name value pair was not changed. As previously stated The initial value may be stored as is if the value is of a simple type such as string number boolean etc. whereas JSON ID of the initial value may be stored if the initial value is a non simple type such as a JSON object or a JSON array. In the example program may use JSON ID of a current value in the JSON object for which changes are being tracked for comparison with the initial value stored in the INITIAL VALUES object if the value is a non simple type i.e. a JSON object or JSON array .

In some embodiments program may use a hierarchical structure to represent captured changes. Program may use a special name value pair named JSON CHANGES IN THIS OBJECT e.g. lines in to differentiate between the name value pairs to be changed in an object and the name value pairs that have to be traversed to go deeper in the hierarchy where other changed objects or arrays reside. In an example in e has to be traversed to go deeper in the hierarchy where the change for name value pair named x resides. In an example of capturing changes program may capture removed name value pairs which are represented using a name value pair named REMOVED NAMES where the value is a JSON array containing the removed names. In another example program may only capture the changed name value pairs e.g. a change JSON does not have the name value pair named e.g. d because a value e.g. 4 of that name value pair was not changed. In yet another example program may use a hierarchical structure to capture changes. In the example program may use a special name value pair named JSON CHANGES IN THIS OBJECT to differentiate between the name value pairs to be changed in an object and the name value pairs that have to be traversed to go deeper in the hierarchy where other changed objects or arrays reside e.g. e has to be traversed to go deeper in the hierarchy where the change for name value pair named x resides .

In some examples changes inside a JSON array are represented using a JSON object. In the example object two types of changes are captured position changes are captured using a name value pair named POSITION CHANGES and value changes are captured using a name value pair named VALUE CHANGES . In an example within containing lines lines to did not have a change in element positions in the outerArray so the JSON object does not have POSITION CHANGES array. The value for names POSITION CHANGES and VALUE CHANGES is of type JSON array. In an example position changes are already captured inside the change tracker object using a JSON array named POSITION CHANGES as previously stated. Program may directly use and copy the POSITION CHANGES array created by program . In an example in lines to reflect the same POSITION CHANGES array created by program as lines to in . Program may use the INITIAL VALUES array to determine the value changes to be captured using the VALUE CHANGES array. In an example one JSON array is used for each changed index such as line and lines in . Program captures a value change using a JSON array of size 2 where the first element is the array index to be changed and the second element is the value to be assigned to the index. The VALUE CHANGES array may contain a number of such arrays one array for each changed index. As described before if a new element is added to the array program may put a special string such as JSON NEWLY INSERTED ARRAY ENTRY in the INITIAL VALUES array at the index where the new element is added. In an example if the value in INITIAL VALUES array is JSON NEWLY INSERTED ARRAY ENTRY then program captures the value at corresponding index in the JSON array whose changes are being tracked. In another example program may compare current values in JSON array whose changes are being tracked with the initial values stored in the INITIAL VALUES array and only capture the changed values.

As previously stated The initial value may be stored as is if the value is of a simple type such as string number boolean etc. whereas JSON ID of the initial value may be stored if the initial value is a non simple type such as a JSON object or a JSON array. In an embodiments program may use JSON ID of the value at an index in the JSON array whose changes are being tracked for comparison with the value stored in the INITIAL VALUES array if the value is a non simple type i.e. a JSON object or JSON array .

In an embodiment program may use a hierarchical structure to represent captured changes. If program utilizes a hierarchical structure to represent captured changes program may differentiate between changes to be made to elements of an array and the elements that have to be traversed to go deeper in the hierarchy where other changed objects or arrays reside. In an example changes inside a JSON array are represented using a JSON object. In the example object two types of changes are captured position changes are captured using a name value pair named POSITION CHANGES and value changes are captured using a name value pair named VALUE CHANGES . In an example no change occurs to element positions in the outerArray so the JSON object does not have POSITION CHANGES array. In an example no change occurs to element values in the outerArray so the JSON object does not have VALUE CHANGES array. n another example program may directly use and copy the POSITION CHANGES array created by program if the exact same POSITION CHANGES array was created by program when recording changes in step . In yet another example program may utilize the INITIAL VALUES array to determine the value changes to be captured using the VALUE CHANGES array. The VALUE CHANGES array may contain a number of such arrays one array for each changed index. e.g. multiple lines at different locations . In a further example program may use a hierarchical structure to represent captured changes. In the example program may differentiate between changes to be made to elements of an array and the elements that have to be traversed to go deeper in the hierarchy where other changed objects or arrays reside.

In an example from hierarchical changes are represented using an example array between lines and . In the example array lines to is the first element which is a JSON object that has details about changes to the outerArray. Lines to is the second element which is a JSON array of size 2 that has details about deeper changes. First element in this array of size 2 is 1 line which is the index inside which the deeper changes reside second element has details about the deeper changes. In this example the second element indicates that deeper changes represented by POSITION CHANGES and VALUE CHANGES arrays are inside an array named y .

If program identifies a JSON object that does not have a change tracker then program captures all name value pairs in the object because the object did not exist as part of the original JSON hierarchy whose changes are being tracked. Similarly program captures all elements in a JSON array that does not have a change tracker.

Program applies changes step . In various embodiments program applies changes from a first copy of the JSON structure to a second copy of the JSON structure. In some embodiments multiple changes to the JSON structure may occur before program applies changes from a first copy of the JSON structure to a second copy of the JSON structure. In an embodiment when applying change JSON to a copy of original JSON structure whose changes were tracked and captured program may traverse the JSON structure to identify which changes are to be applied and apply the changes to JSON objects and JSON arrays in the JSON structure. If the change JSON also has hierarchical structure similar to the JSON structure to which the changes are to be applied then program may simultaneously traverse both JSON structures. Program may first apply the changes captured in the JSON CHANGES IN THIS OBJECT name value pair when applying changes in a JSON object. Program may remove the name value pairs listed in the REMOVED NAMES array and change other name value pairs listed in the JSON CHANGES IN THIS OBJECT object. Program may then traverse deeper inside the name value pairs in the JSON object to apply changes to other nested JSON objects and JSON arrays. Program may first apply changes described in the POSITION CHANGES array when applying changes in a JSON array. Then program may make changes described in the VALUE CHANGES array. Program may then traverse deeper inside the elements of the JSON array to apply changes to other nested JSON objects and arrays.

In some embodiments JSON ID may be used in the change JSON when representing changes inside preexisting objects and arrays that have been moved or copied to some other location in the JSON structure. In various embodiments program may add a JSON ID in the change JSON. In an example in if the value assigned is a pre existing object the value is represented by program using JSON ID e.g. JSON ROOT b in line of . In an example containing lines is the change JSON created by program for changes shown in example containing lines . Program also captures the deeper changes to be made to the pre existing object. In an example in containing lines program captures the deeper changes to be made to q in lines . In some examples before program starts making changes to the JSON structure program creates a copy of the original JSON structure. Program uses this copy when processing the JSON IDs in the change JSON. When program encounters a JSON ID program copies that object array as is from the copy of the original JSON structure. An example from containing lines depicts program assigns u 5 v 6 to q .

In some embodiments a user may invoke an API via a user interface not depicted which displays the captured changes on a first JSON structure before or after applying the changes to a second JSON structure. In some embodiments program may not apply the changes to the second copy of the JSON structure but rather store the captured changes in a database e.g. database . In an example the JSON structure captured multiple changes to the structure via in memory programmatic representations in the JSON structure which are displayed in a string representation to a user via a user interface. The user may then either select to apply the changes to the JSON structure to store the changes as a string representation store the changed JSON or not apply the changes.

Computer includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media. Software and data are stored in persistent storage for access and or execution by processor s via one or more memories of memory . With respect to server software and data represents tracking program and database .

In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device a read only memory ROM an erasable programmable read only memory EPROM a flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Software and data may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to computer . For example I O interface s may provide a connection to external device s such as a keyboard a keypad a touch screen and or some other suitable input device. External device s can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The present invention may be a system a method and or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data configuration data for integrated circuitry or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the blocks may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

