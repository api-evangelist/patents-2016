---

title: User notifications for interaction information
abstract: A content management system creates and modifies user notification queues for shared content items synchronized between a content management system and multiple devices. A user notification queue includes interactions with a shared content item that may be presented to a user to indicate recent interactions with the shared content item by other sharing users. The content management system sends the user notification queue corresponding to a user to the user's device when the user accesses the content item. The client device displays a content item in a window associated with a process on the device. A client application displays an interaction indicator that presents user notification queue content to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596276&OS=09596276&RS=09596276
owner: Dropbox, Inc.
number: 09596276
owner_city: San Francisco
owner_country: US
publication_date: 20160602
---
The present application is a continuation of co pending U.S. application Ser. No. 14 985 552 filed on Dec. 31 2015 and entitled User Notifications for Interaction Information the content of which is incorporated herein by reference in its entirety for all purposes.

This disclosure relates generally to sharing information among devices and particularly to interactions between native software applications and shared content.

Content management systems permit devices to synchronize content items with the content management system and other devices. A device stores a local copy of content items. When content items are added deleted and edited on a device these modifications are sent to the content management system for storage and synchronization with other devices. To interact with a content item users typically execute a native application on the device to view and modify the content item. When multiple users interact with a content item they often communicate about the content item using other applications such as email. This type of communication provides an incomplete picture of interactions with the content item and relies on users to log and track interactions with the content item. Users lack a convenient way to communicate about a content item and view interactions with the content item which adds inconvenience and complexity to situations in which multiple users are interacting with a content item.

Described embodiments enable device users sharing content items via a content management system to view and modify content items within native applications on their client devices. In various embodiments user notification queues are created modified and sent to client devices and graphical and textual information is provided to users on their respective devices indicating interactions with a shared content item on one or more other devices.

A device in accordance with various embodiments stores a local copy of a shared content item which is maintained and synchronized between devices by a content management system. The device includes a native application that can be used to access the content item such as a word processor media viewer media editor and so forth. The native application displays the content item in a user interface element such as a window. The device also includes a client application in addition to the native application which monitors interactions with the content item and communicates information about those interactions to other devices sharing the content item either directly or via the content management system.

Interaction information includes interactions by users with the client application and interactions by users with the native application. Interaction information may be determined from interaction events such as messages notes collaboration requests and presence events. Presence events are programmatic events that occur in the native application. Presence events include opening a content item editing a content item saving a content item renaming a content item moving a content item and deleting a content item. Presence events also include interactions with the user interface elements of the native application such as the user interface element gaining or losing focus. A focused user interface element is the user interface element that receives user inputs at the device. For example if a user interface element has focus presence information may be generated indicating that a user is viewing the content item via that user interface element. In one embodiment the presence events are gathered by the client application which is separate from the native application interacting with the content item. That is in this embodiment the presence events are gathered by another application or process that is not integrated into the native application accessing the content item or the presence information.

Additional types of interaction information that may be received by the client application include notes messages notification requests and collaboration requests related to the content item. Messages may include chat messages to other devices and messages indicating a user s intent to interact with e.g. to edit a content item. Interaction information also includes metadata modifications such as versioning notes or requests for further information stored at the content management system about the content item such as a request to view versioning information or prior content item versions. The interaction information is exchanged by the devices to provide users with information regarding others interactions with the content item.

The client application monitors events on the device to determine when a user is using a native application to interact with a content item. In one method of monitoring events the client application registers with a process controlling a user interface element or the operating system to receive events related to the user interface element. The client application may monitor all such events or only certain user interface elements associated with opening a content item. When a presence event occurs the client application receives the presence event from the native application or from an operating system. The client application identifies a user interface element associated with the event and determines presence information associated with the event. The client application notifies the content management system that synchronized content items are being or have been interacted with and sends the presence information to the content management system. The presence information or other interaction information may be sent directly to other devices.

The content management system receives interaction information and creates modifies and sends user notification queues for content items to devices of sharing users. A user notification queue is a group of one or more interactions with a shared content item that may be presented to a user to indicate recent interactions with the shared content item by sharing users. In one embodiment each sharing user associated with a content item has a user notification queue corresponding to that content item. Types of interactions added to a user notification queue may include content item views content item edits content item collaborations content item comments and content item messages. In one embodiment interactions have an associated interaction priority. An interaction priority specifies a relative priority of an interaction type to other interaction types. A notification queue module determines the interaction types and interaction priorities for candidate interactions and interactions in user notification queues. In various embodiments the notification queue module selects higher priority interactions to add to user notification queues and lower priority interactions to remove from user notification queues.

When a user views a content item in a native application of a device the content management system receives a notification and sends the appropriate user notification queue to the device. The client application displays interaction information about the content item. In one embodiment the client application provides one or more interaction indicators in a user interface of the device. An interaction indicator displays interaction information to users. This permits users to view in essentially real or near real time the activity of other users with respect to a content item. In addition presenting interfaces to communicate with the content management system alongside the native application user interface permits users to conveniently exchange chat information and retrieve data about a content item while the content item is being displayed.

The client application or the content management system may determine whether a user has been provided with a notification about interaction information or has viewed interaction information displayed in the user interface and may send this information to the content management system and other devices associated with the user so that the interaction information that has been viewed by a user is tracked across multiple devices. Using this information the client application can avoid duplicating notifications so that users are not notified about the same interactions on several devices.

In one embodiment the interaction indicator includes a badge element indicating unviewed interaction information including notification queue content. The user may select the interaction indicator to view more interaction information. The client application may further display an interaction element for a user to view and enter interaction information. Interaction information may be displayed in a notification channel style along with metadata and other information such as event times and user information. The interaction element may further include chat functionality including a text input element or other chat interface. This permits users to chat directly about a content item even if the native application provides no chat functionality.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Device may be any suitable computing device for locally storing and viewing content items and synchronizing the content items with content management system . Examples of devices include desktop and laptop computers hand held mobile devices tablet computers and other computing devices. The operation of device in various embodiments is further described below.

Each device communicates with content management system through network . Network is any suitable network and may include local networks corporate networks global networks and any combination of these. In typical configurations devices communicate via a wired or wireless communication network to a local network service provider and communicate with content management system through the Internet. In certain configurations devices A B and C communicate directly with one another without network as indicated in by dashed lines. For example devices may communicate via a wired or wireless connection such as wirelessly via a Bluetooth connection or a wired connection via a Universal Serial Bus USB .

Content management system provides content sharing and synchronization services for users of devices . These services allow users to share content with users of other devices . In addition to content sharing content management system updates shared content responsive to changes and enables synchronized changes to content items across multiple devices . A user may synchronize content across multiple devices owned by the user and associated with the user s account and the user may share content that is synchronized with devices associated with other users accounts. Content stored by content management system can include any type of data such as digital data documents media e.g. images photos videos audio streaming content data files and databases source and object code recordings and any other type of data or file collectively referred to here as content items. Content items stored by content management system may also be used to organize other content items such as folders tables collections albums playlists or in other database structures e.g. object oriented key value etc. . In practice various devices may be synchronizing different groups of content items based on user associations permissions content sharing permissions and so forth. The operation of content management system in various embodiments is further described below with respect to .

Software modules include operating system and one or more native applications . Native applications vary based on the client device and may include various applications for creating viewing consuming and modifying content stored on content management system such as word processors spreadsheets database management systems code editors image and video editors e book readers audio and video players and the like. Operating system on each device provides a local file management system and executes the various software modules such as content management system client application and native application . A contact directory stores information about the user s contacts such as name picture telephone numbers company email addresses physical address website URLs and the like. Further operation of native applications operating system and content management system client application are described below.

In certain embodiments device includes additional components such as camera and location module . Camera may be used to capture images or video for upload to the online content management system . Location module determines the location of device using for example a global positioning satellite signal cellular tower triangulation or other methods. Location module may be used by client application to obtain location data and add the location data to metadata about a content item such as an image captured by camera .

Client device accesses content management system in a variety of ways. Client application can be a dedicated application or module that provides access to the services of content management system providing both user access to shared files through a user interface as well as programmatic access for other applications. Client device may also access content management system through web browser . As an alternative client application may integrate access to content management system with the local file management system provided by operating system . When access to content management system is integrated in the local file management system a file organization scheme maintained at content management system is represented as a local file structure by operating system in conjunction with client application . Client application may take various forms such as a stand alone application an application plug in or a browser extension. Client application includes user interface module interaction management module content access module local content data store monitored presence data store and collaboration module .

In addition to handling other device tasks operating system displays information from applications executing on device to a user via display which may include one or more user interface elements. Such user interface elements may vary based on the particular device and configuration. User interface elements include windows on a desktop interface as well as interface elements on a mobile device. Examples of operating systems that employ user interface elements such as windows are Microsoft Windows 8 by Microsoft Corporation of Redmond Wash. and OS X by Apple Inc. of Cupertino Calif. In addition operating system manages control of multiple native applications which may be executing simultaneously. The user interface elements may be layered such that one layer overlaps another layer. In some operating systems and configurations only a single user interface element is displayed at a given time. One user interface element is typically the active user interface element meaning that it is the user interface element to which the operating system routes user inputs such as keyboard entry cursor movement touch sensors touch gestures and so forth. As understood by those of skill in the art a window or other user interface element that is active at a particular time is often said to have focus. Users may select another user interface element to change the focus from one user interface element to another and in some instances operating system may change the focus without user input.

Typically the user interface elements e.g. windows associated with native applications are managed by operating system which maintains an association between process identifiers of executing native applications and user interface element identifiers of the user interface elements. For example a particular application may be associated with process id 2587 which may be managing multiple user interface elements with user interface element identifiers 4 8 and 10. Each user interface element identifier may be separately associated with a particular content item opened by that native application and multiple user interface element identifiers and process identifiers may be associated with the same content item.

Operating system also handles and recognizes various events. Such events include a request from native applications to close or open a content item a request from native applications to close a window or other user interface element and requests to change a user interface element focus among many others. As described below these events may be used by interaction management module to recognize a change in presence related to a content item.

Client application identifies interactions that take place with respect to a content item such as when a user opens closes or edits the content item on the device. These interactions are identified by client application to generate interaction information describing the interaction with the content item. Interaction information includes interactions with client application and interactions with native application . Interaction information determined from actions performed within native applications is termed presence information. An application such as client application that determines interaction information and presence information is termed a presence application. Additional types of interaction information in addition to presence information include notes messages and notification requests related to the content item which may be received by client application . Messages may include chat messages to other devices messages indicating a user s intent to interact with e.g. to edit a content item and messages indicating a user s intent to begin a collaboration session. Notification requests may include a request to be notified when another user s interaction information changes. Interaction information also includes metadata modifications such as versioning notes event timestamps or requests for further information stored at content management system about the content item such as a request to view versioning information or prior content item versions. Further examples of interaction information are described below. Client application may receive chat or intent information from a user. In various embodiments device identifies a user s presence in a content item i.e. that the user has the content item open or is editing the content item using the native application through interaction with operating system as described further below. Interaction information is transmitted to other devices that are synchronized with respect to the content item.

Device receives content items from content management system and permits users to view modify and interact with the content items using various native applications stored on the device . For example device may include a photo editing application that manipulates image content items a word processing application that permits modification of text content items or a computer aided design CAD application that permits modification of drawing content items. As described further below interaction information is determined by device via user interactions applications and the interaction information is sent to other devices . In addition when device receives interaction information relating to other devices the device displays that interaction information.

In one embodiment an application detecting interaction information relating to content items is distinct from the applications viewing or manipulating the content items. For example the client application detecting interaction information is distinct from a photo editing application manipulating or displaying the image content items. In various embodiments the application detecting interaction information is also responsible for synchronizing the content items with content management system . Since the application detecting presence information may be distinct from the applications about which presence is detected presence may be monitored for many applications and content items at once and without requiring integration of the presence monitoring into each type of content item viewer. That is no special presence monitoring add on or application modification is required for example for each of a photo editing application a word processing application and a playlist editing application.

Referring again to to open a content item native application requests the content item from operating system and receives a handle to the content item from operating system for the content item. In some cases application does not maintain the handle and may load the content item data into memory and subsequently close the content item handle even if native application continues to use data from the content item or if the user enters edits to the content item. Accordingly open content item handles are often not a reliable way to determine whether an application is interacting with a particular content item. As such in certain embodiments further behaviors exhibited by the native applications are used to determine whether an application is editing a content item.

Native applications also perform various behaviors when a user modifies a content item and prior to the user saving the content item. These behaviors vary based on the application and operating system . For example some native applications create a temporary content item with a filename that differs from the open content item for example leading the temporary content item s filename with a tilde or other recognizable mark. In other examples the native applications changes the title of a user interface element associated with the content item which may or may not be directly viewable by a user. In still further examples native application sets a flag indicating the content item has been modified. Native application may also provide information regarding content item modification in response to a request from another application or the operating system. For example the Accessibility API in the OS X operating system as described above provides information regarding content items associated with a user interface element. Since an open content item handle may not reliably determine whether a content item is being edited by a native application these behaviors are used by presence management module to determine presence relating to editing or modifying a content item as described further below.

Native applications may typically be executed on device independently from one another and may permit communication between the applications and other applications or processes executing on device . Native applications typically provide information to processes using application programming interfaces APIs which permit applications to request information from the executing process. For example native applications may present an API permitting a request for user interface elements controlled by the application or to indicate the title of a user interface element or to request a path in a file system associated with a content item opened by the native application . Similarly operating system may provide similar APIs to requesting processes such as requesting information about a process that controls a particular user interface element.

Client application manages access to content management system . Client application includes user interface module that generates an interface to the content accessed by client application as variously illustrated herein and is one means for performing this function. The generated interface is provided to the user by display . Client application may store content accessed from a content storage at content management system in local content data store . While represented here as within client application local content data store may be stored with other data for client device in non volatile storage. When local content data store is stored this way the content is available to the user and other applications or modules such as native application when client application is not in communication with content management system . Content access module manages updates to local content data store and uses synchronization logic to communicate with content management system to synchronize content modified by client device with content maintained on content management system . One example of such synchronization is provided in U.S. Pat. No. 9 053 165 filed Sep. 27 2013 and is hereby incorporated by reference in its entirety. Client application may take various forms such as a stand alone application an application plug in or a browser extension.

Content management system may provide additional data for synchronizing content items such as information designating that a content item has been deleted or that the device may be viewing or editing an outdated version of a content item.

Interaction management module obtains and manages interaction information relating to a user s synchronized content items. As described above the interaction management module is typically a distinct module from the native applications being monitored by interaction management module for presence information and executes as a separate process. Interaction management module detects interaction events occurring on device for synchronized content items. Interaction management module may detect interaction events by monitoring presence events or by monitoring received user inputs such as comments and messages. Interaction events indicate that a user has interacted with a content item. Interactions include viewing the content item editing the content item commenting on the comment item sending a message related to the content item and collaborating in the content item. Interaction management module sends notifications about interaction events and other interaction information to content management system . Interaction management module also receives interaction information including user notification queues relating to other users interactions with content items from content management system for display to the user. In one embodiment the interaction management module displays interaction information from user notification queues by attaching an interaction indicator to a user interface element associated with a synchronized content item. In various embodiments the interaction indicator and associated user interface elements display real time interaction information such as presence information and interaction information relating to past activities. This allows users to view the content item and associated interaction information simultaneously which provides a more holistic view of a content item users associated with the content item and changes made to the content item.

In one embodiment the interaction management module provides received notification queue content and other interaction information for display in chronological order so that users may view a sequence of interactions with the content item. Displayed interaction information may include metadata such as timestamps user identifiers user photos and other data. In another embodiment the interaction module displays interaction information as it is received in a notification channel style. When a new piece of interaction information is received via the user interface from another device or from the content management system it is added to the channel and users may be notified by the interaction indicator another user interface element or by some other method. Displaying interaction information including notifications is discussed in more detail below with respect to .

In one embodiment the interaction management module detects when a user has been provided with a notification about interaction information or has viewed interaction information displayed in the user interface. The interaction management module may send this information to the content management system and or other devices associated with the user and the content management system so that the interaction information that has been viewed by a user is tracked across multiple devices . Using this information the interaction management module or the content management system can determine whether a user has viewed interaction information or been provided with a notification about the interaction information and avoid duplicating notifications so that users are not notified about the same interactions on several devices.

To determine many types of interaction information interaction management module receives interaction information through user interface elements as further described below. To determine presence information related to a synchronized content item interaction management module monitors user interface elements associated with native applications . Interaction management module can monitor all user interface elements or alternatively monitor just certain user interface elements after the user interface element is associated with a content item. Monitored presence data store includes information maintained by interaction management module to indicate that particular user interface elements are monitored to determine actions relating to a synchronized content item.

While shown here as a part of client application in various implementations content access module and interaction management module are separated into distinct modules for performing their respective functions. Similarly various modules and data stores are described separately throughout this disclosure for convenience and in various implementations may be combined or further separated into separate components as desired.

User account database can also include account management information such as account type e.g. free or paid usage information for each user e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . Account management module can be configured to interact with any number of other modules in content management system .

An account can be associated with multiple devices and content items can be stored in association with an account. The stored content can also include folders of various types with different behaviors or other content item grouping methods. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photo folder that is intended for photo content items and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio file content items and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder. In one embodiment the account is a namespace that may be associated with several users each of whom may be associated with permissions to interact with the namespace.

In one embodiment the content is stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. In one configuration content management system stores the content items in the same organizational structure as they appear on the device. However content management system can store the content items in its own order arrangement or hierarchy.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one configuration each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate content items or duplicate segments of content items. In one embodiment for example a content item may be shared among different users by including identifiers of the users within ownership metadata of the content item e.g. an ownership list while storing only a single copy of the content item and using pointers or other mechanisms to link duplicates with the single copy. Similarly content storage stores content items using a version control mechanism that tracks changes to content items different versions of content items such as a diverging version tree and a change history. The change history includes a set of changes that when applied to the original content item version produces the changed content item version.

In one embodiment content management system automatically synchronizes content items from one or more devices using synchronization module . The synchronization is platform agnostic. That is the content items are synchronized across multiple devices of varying type capabilities operating systems etc. For example client application synchronizes via synchronization module at content management system content in the file system of device with the content items in an associated user account on system . Client application synchronizes any changes to content items in a designated folder and its sub folders with the synchronization module . Such changes include new deleted modified copied or moved files or folders. Synchronization module also provides any changes to content associated with device to client application . This synchronizes the local content at device with the content items at content management system .

Conflict management module determines whether there are any discrepancies between versions of a content item located at different devices . For example when a content item is modified at one device and a second device differing versions of the content item may exist at each device. Synchronization module determines such versioning conflicts for example by identifying the modification time of the content item modifications. Conflict management module resolves the conflict between versions by any suitable means such as by merging the versions or by notifying the device of the later submitted version.

A user can also view or manipulate content via a web interface generated by user interface module . For example the user can navigate in web browser to a web address provided by content management system . Changes or updates to content in content storage made through the web interface such as uploading a new version of a file are synchronized back to other devices associated with the user s account. Multiple devices may be associated with a single account and files in the account are synchronized between each of the multiple devices .

Content management system includes communications interface for interfacing with various devices and with other content and or service providers via an Application Programming Interface API which is one means for performing this function. Certain software applications access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which verifies user credentials security tokens API calls specific devices etc. to determine whether access to requested content items is authorized and is one means for performing this function. Authenticator module can generate one time use authentication tokens for a user account. Authenticator module assigns an expiration period or date to each authentication token. In addition to sending the authentication tokens to requesting devices authenticator module can store generated authentication tokens in authentication token database . Upon receiving a request to validate an authentication token authenticator module checks authentication token database for a matching authentication token assigned to the user. Once the authenticator module identifies a matching authentication token authenticator module determines if the matching authentication token is still valid. For example authenticator module verifies that the authentication token has not expired or was not marked as used or invalid. After validating an authentication token authenticator module may invalidate the matching authentication token such as a single use token. For example authenticator module can mark the matching authentication token as used or invalid or delete the matching authentication token from authentication token database .

Content management system includes a sharing module for sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The content can also be shared across varying types of user accounts.

In some embodiments content management system includes a content management module for maintaining a content directory that identifies the location of each content item in content storage and allows client applications to request access to content items in the storage and which is one means for performing this function. A content entry in the content directory can also include a content pointer that identifies the location of the content item in content storage . For example the content entry can include a content pointer designating the storage address of the content item in memory. In some embodiments the content entry includes multiple content pointers that point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry in some configurations also includes a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module adds a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module generates a custom network address such as a URL which allows any web browser to access the content in content management system without any authentication. The sharing module includes content identification data in the generated URL which can later be used by content management system to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. The content identification data included in the URL can be transmitted to content management system by a device to access the content item. In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created.

Interaction synchronization module receives presence information from a device stores it as part of a presence record in interaction data store and determines a user presence with respect to a content item. Each user may be associated with a user presence describing presence records associated with that user with respect to a content item which may be without reference to any particular user device process or user interface element. While presence information may describe presence with respect to a particular user interface element or process this presence associated with a user is termed a user presence. Example user presence includes collaborating editing viewing open and not present. In this example a collaborating user presence indicates the content item is associated with a user interface element that is presented for viewing and modification on two or more devices an editing user presence indicates the content item is associated with a user interface element that has modified the content item a viewing user presence indicates the content item is associated with an active user interface element on a device while an open user presence indicates a user interface element is associated with the content item and has opened the content item but has not yet closed the content item. Various embodiments may use more or fewer user presences. For example one embodiment includes only editing viewing and not present in which case user interface elements that have opened the content item but are not the active user interface element may be treated as viewing or not presence according to the configuration of the system. Obtaining and tracking presence information is also further described in U.S. patent application Ser. No. 14 635 192 incorporated by reference herein.

Interaction synchronization module manages synchronization of interaction information across devices . Devices provide interaction information to interaction synchronization module . Interaction synchronization module stores interaction information in interaction data store . Interaction synchronization module sends interaction information about synchronized content items to synchronized devices for display to users. Interaction synchronization module may further send instructions to notify users of new or unviewed interaction information. In one embodiment devices send viewing information to interaction synchronization module indicating whether and when users have viewed interaction information. Viewing information is stored in interaction data store . In another embodiment viewing information indicates whether and when users have interacted with interaction information. Interaction synchronization module may use this information to avoid duplicate notifications on multiple devices associated with the same user. For example if a user is notified of new interaction information on a first device and views the interaction information this event will be stored such that the user will not be notified about the same interaction information on a second device .

In one embodiment content management system includes collaboration module . Collaboration module can be configured to facilitate collaboration between devices . For instance collaboration module may initiate a device handshake by sharing a device s address with another device so that collaboration may occur. Further collaboration module may be configured to perform any of the tasks that are performed by collaboration module of a device or by any other module of client application .

Notification queue module creates and manages user notification queues for shared content items. User notification queues are stored at content management system and sent to devices . A user notification queue is a group of one or more interactions with a shared content item that may be presented to a user to indicate recent interactions with the shared content item by sharing users. In one embodiment each sharing user associated with a content item has a user notification queue corresponding to that content item. Different users user notification queues for a particular content item may differ.

In one embodiment notification queue module receives a notification of an interaction event and determines interactions that are candidates to be added to user notification queues . The notification queue module modifies user notification queues corresponding to a shared content item. Modifying user notification queues may include adding candidate interactions to the notification queue and removing interactions already present in the notification queue. When an interaction event corresponding to a shared content item is received by the content management system the notification queue module determines whether to add interactions to and or remove interactions from the sharing users user notification queues . Types of interactions added to a user notification queue may include content item views content item edits content item collaborations content item comments and content item messages.

In one embodiment interactions have an associated interaction priority. An interaction priority specifies a relative priority of an interaction type to other interaction types. For example a content item edit may have a higher priority than a content item view. Interaction priorities may be specified by an implementer of the content management system or by a user of the content management system . The notification queue module determines the interaction types and interaction priorities for candidate interactions and interactions in user notification queues . In various embodiments the notification queue module selects higher priority interactions to add to user notification queues and lower priority interactions to remove from user notification queues . For example the notification queue module may compare the priority of a candidate interaction by a user A to the priority of interactions by user A already present in a notification queue . If the candidate interaction is a lower priority interaction than an interaction in the user notification queue the candidate interaction is not added to the queue. If the candidate interaction is a higher priority interaction than an interaction in the user notification queue the candidate interaction is added to the queue and the interaction already in the queue may be removed from the queue. This allows users to be presented other users higher priority interactions with a content item which provides important information for the users without also providing less important information that may confuse the user or waste space in a user interface element.

Notification queue module may send user notification queues to devices . In one embodiment notification queue module sends a user notification queue responsive to receiving a notification that a user has accessed a content item. The access notification may come directly from device or from interaction synchronization module . The access notification may be generated responsive to detecting a presence event consistent with access of the content item such as opening a content item for viewing or editing. In one embodiment notification queue module clears a user notification queue responsive to receiving a notification that the associated user viewed the notification queue. This way the user will not be presented with notifications that the user has already viewed.

Content management system may be implemented using a single computer or a network of computers including cloud based computer implementations. For the purposes of this disclosure a computer is device having one or more processors memory storage devices and networking resources. The computers are preferably server class computers including one or more high performance CPUs and 1 G or more of main memory as well as 500 Gb to 2 Tb of computer readable persistent storage and running an operating system such as LINUX or variants thereof. The operations of content management system as described herein can be controlled through either hardware or through computer programs installed in computer storage and executed by the processors of such server to perform the functions described herein. These systems include other hardware elements necessary for the operations described here including network interfaces and protocols input devices for data entry and output devices for display printing or other presentations of data but which are not described herein. Similarly conventional elements such as firewalls load balancers failover servers network management tools and so forth are not shown so as not to obscure the features of the system. Finally the functions and operations of content management system are sufficiently complex as to require implementation on a computer system and cannot be performed in the human mind simply by mental steps.

In one configuration components described below with reference to content management system are incorporated into devices that share and synchronize content items without management by content management system . These devices may synchronize content and share interaction information over network or via a direct connection as described above. In this configuration devices may incorporate functionality of synchronization module conflict management module interaction synchronization module and other modules and data stores for incorporating functionality described below as provided by content management system . Accordingly devices in this configuration operate in a peer to peer configuration and may do so without content management system or network .

If enabled by operating system the interaction management module may register with operating system to receive monitoring events for specific applications. In these embodiments operating system notifies interaction management module when a request to open or save a content item is received by operating system . In this embodiment interaction management module receives a monitoring event that indicates a window or other user interface element is interacting with a content item which may be a synchronized content item i.e. the process is interacting with the content item in a particular user interface element . The monitoring event designates at least a user interface element that triggered the monitoring event. In other embodiments interaction management module monitors events associated with user interface elements from time to time e.g. five minute intervals and queries whether the user interface elements are associated with any open content items. According to operating system and native application configuration this query may be directed to operating system or native application . When a user interface element is associated with a newly opened content item that newly opened content item is treated as a monitoring event to determine whether the newly opened content item is a content item synchronized with content management system and that presence information should be determined for the newly opened content item.

When the monitoring event is received interaction management module determines which process is responsible for the user interface element associated with the monitoring event. Interaction management module typically determines the process by requesting the process ID associated with the user interface element from operating system . In some embodiments the interaction management module identifies a process by requesting an identification of the process from the user interface element itself.

To confirm that the process and user interface element are correctly associated with one another and that the user interface element is still active interaction management module may also request from the process the identity of the currently active user interface element. The interaction management module confirms that the currently active user interface element received from the process matches the user interface element associated with the monitoring event.

Using the process identifier interaction management module requests any open content item from the process to obtain an associated directory path for the content item. The interaction management module may designate the user interface element associated with the monitoring event with the request for the open content item s path. The interaction management module requests the open item from the process or operating system using an interface available interface to the process or operating system. As one example in the OS X operating system the accessibility API may be used to access information relating to a content item and content item path for a user interface element as known in the art. Using the content item path provided by the process the interaction management module determines whether the opened content item path corresponds to any synchronized content items. If so interaction management module determines that the content item accessed by the process is a content item synchronized to content management system and associates that process and user interface element with the content item. In other embodiments other methods may be used to determine whether a content item accessed by the process is a synchronized content item.

If the content item is synchronized to content management system interaction management module stores information relating to the content item process and user interface element to monitor the user interface element for events. When the content item associated with the monitoring event is not synchronized the process may end or may continue by displaying a synchronization interface to a user. Monitoring information is stored in monitored presence data store . To monitor and subsequently receive presence events related to the user interface element interaction management module registers to receive events associated with the user interface element. The registration process by the interaction management module varies according to the configuration of device . Typically the interaction management module registers a request to receive presence events from operating system or from the applicable process or user interface element. While the monitoring events determine whether a user interface element or process is associated with a synchronized content item presence events are events that may indicate a change in state of a user s presence relating to the user interface element or process associated with a content item. Example presence events include a change in focus of a user interface element closing a user interface element closing a content item opening a content item and so forth based on the types of presence recognized by the interaction management module . In various configurations the presence events used by interaction management module depend on the events operating system and native application make available for receipt by interaction management module .

The presence events are used to determine presence information associated with the content item to which the presence event relates. For example a presence event indicating that a user interface element that is associated with a content item has the focus will indicate that the user is viewing the content item and hence the presence information for that content item indicates that state. Likewise a presence event indicating that a user interface element unrelated to a content item has gained focus indicates that the content item associated with a previously focused user interface element has lost focus and thus indicates that user is no longer be viewing the content item. Thus presence information provides a level of semantic interpretation of the underlying presence event itself.

In addition to receiving presence events that the interaction management module registered for presence events may also be initiated by interaction management module to confirm that presence information has not changed for a monitored user interface element. These presence events may be initiated if a threshold amount of time passed since the last presence event for a particular user interface element or process or at particular intervals e.g. every five minutes.

In addition to registering for presence events interaction management module may receive interaction events in other ways. In one embodiment users may expressly indicate interaction information through a user interface element. The user interface element can be configured to allow the user to indicate for example that a user intends to revise a content item to indicate that intent to other users who are editing or viewing the content item for example by selection of a menu item or icon that represents the particular intent. The user interface element can also be configured to allow a user to indicate other intentions of the user such as a user s intention to no longer view a content item or to expressly indicate that a user is not or will not be present for a content item. Other users may use such not present intention to know that the content item is free for editing. User input interaction events may also include messages or chat features to be disseminated to other users associated with the content item for example to transmit a message to other users currently viewing the content item on other devices.

When a presence event is received interaction management module determines whether any presence information has changed since the last presence event related to a monitored user interface element. For user initiated interaction information the interaction information may be the information provided by the user for example the user s selection of a user interface element indicating that the user intends to modify a content item or a user s chat message. For presence events the interaction management module queries the monitored process to determine the status of the monitored user interface element. In particular the interaction management module queries the process to determine if the monitored user interface element is the active user interface element. When the monitored user interface element is the active user interface element the content item is being viewed by the user.

In some embodiments in addition to detecting user presence with respect to a content item interaction management module also determines whether the content item is being or has been modified by the user. This further aspect enables presence information to be reported more granularly for example with an indication that a user has a presence with respect to the content item as an editor rather than as a viewer. As the particular actions performed by applications when a content item is being modified may vary as described above detecting one of these actions by interaction management module indicates that the process has edited the content item. For example according to the type of actions expected by the process when the content item is edited interaction management module may query the process to determine if the process indicates the content item has been flagged as modified if the title information of the user interface element has changed if a temporary file has been saved or cached or any other data that suggests the content item has been modified. Interaction management module may also query the operating system to determine if a content item has been saved that matches a temporary content item format for example a content item with a filename similar to the content item but with a tilde or other specialized variation of the filename. Such modifications indicate that the presence information associated with the content item should reflect that the user is editing the content item.

After determining the presence information any new presence information for a user interface element may be stored as monitored presence data store . This presence information in one embodiment is stored on a user interface element by user interface element basis such that multiple user interface elements by one process may be associated with the same content item and have presence information individually managed. In one embodiment presence information may change based on the current presence status. For example when the presence information for a content item reflects that the content item is being edited in one embodiment the presence for the content item in a user interface element is not changed when a user changes focus to another user interface element. Instead the edited status is maintained with respect to that user interface element until a presence event indicates the user interface element is closed. In another embodiment since editing has the potential to introduce modifications to the content item in one embodiment the presence information for an edited document is not changed until the interaction management module receives a notification that modifications to the content item are either committed or the modifications are discarded.

A content item with presence information indicating it is being viewed may have that status change when the user interface element loses focus or within a threshold period of time of losing focus. This may be the case even if the user interface element associated with the content item is still open. In one embodiment viewed presence information indicates whether a content item is associated with an active user interface element. In one embodiment viewed presence information is retained until the user interface element is not active or has lost focus for longer than a threshold amount of time. In one embodiment the content item is considered viewed while the content item is open by an application.

When there is a change to the interaction information interaction management module sends the presence information to content management system . In one embodiment the sent presence information includes an identifier of the content item the process id the user interface element id and the presence status. The presence information may further include metadata such as versioning notes and presence event timestamps.

In one embodiment the content management system maintains received interaction information for the synchronized content item for example in a data store of the content management system . The content management system may provide received interaction information to other devices that are synchronized with respect to the content item for display to users.

Interaction indicator is displayed along with the window associated with the content item and in one embodiment interaction management module tracks the location of the window and displays interaction indicator adjacent to or near the window for example alongside a border or boundary of the window. The interaction indicator may be located on any convenient area of display . In one embodiment the interaction indicator is displayed proximal the associated user interface element of the content item so as to visually indicate to the user the relationship between the interaction indicator and the specific content item. In addition the display of the interaction indicator along a boundary or border of the window increases the likelihood that the user will notice interaction indicator . In one embodiment the interaction indicators are displayed on or alongside a vertical edge of the window containing the content item e.g. right edge as shown . Alternatively interaction indicator may be shown in a separate area of the display such as a taskbar or tray icon or may be a separate user interface element that does not interact with the user interface element of the content item. Though shown here as a single interaction indicator any number of interaction indicators may be shown related to the content item.

In the interaction indicator includes a badge element . Badge element may include a number of other visual elements to provide more information about interaction information. For example the badge element may have a number representing a number of unviewed interaction events as illustrated in . In other embodiments the badge element may be a visual element such as an icon to indicate unviewed interaction events to a user.

Turning to supplemental interaction indicator may appear when a user selects or hovers over interaction indicator to provide further information or interfaces for the user. In the example shown in supplemental interaction indicator describes a recent interaction with the content item specifically that Andrew edited content item 6. Supplemental interaction indicator may also appear without action by the user for example when a presence changes to indicate a new user is viewing or editing the document.

The interaction element includes content item information section which displays the content item name as well as the time of a last interaction event such as a save action. In the example of the content item information section indicates that Content Item 6 was last saved 3 minutes ago. The interface also includes sharing element that allows users to share the content item with other users either via synchronization or other methods known in the art.

The example interface of includes interaction viewing section which displays interaction information and associated information to users. Associated information may include times that interactions occurred and user information associated with interactions. In the example of interaction viewing section contains messages A B and presence information A B. For each item of displayed interaction information interaction viewing section contains interaction times A D. In one embodiment as shown in interaction times A D are expressed as a time that the interaction occurred. In another embodiment interaction times may be expressed as a relative time for example how much time has elapsed since the interaction occurred.

The interaction viewing section contains user images A B for messages and other interaction information associated with users. User images A B may be received from the content management system . The interaction viewing section contains user identifiers A B which may be user IDs names or other identifiers. The interaction viewing section may include other icons or graphics for interaction information. For example icons A B may correspond to displayed presence information. Icon A is an eye to represent viewing and icon B is a pencil to represent editing or saving a new version.

In one embodiment users may interact with e.g. click hover over etc. various elements within the interaction viewing section to view additional information. For example selecting or hovering over name elements A B or user images A B may allow the user to view additional user information related to that user.

This interface also provides a chat interface for users to communicate with other users associated with the content item. The chat interface permits users to enter and receive messages to other users. A text input element allows users to enter messages to other users and interaction viewing element allows users to view messages. The chat interface may permit users to specifically discuss information relating to that content item such as when a user expects to finish editing the item. These messages are received by interaction management module as interaction information and sent to other clients synchronized to the content item. This permits users to chat directly about a content item even if the native application provides no chat functionality.

In one embodiment content management system determines whether users are collaborating in the content item that is whether more than one user currently has the document open for viewing or editing. If users are collaborating in the content item the process ends and the notification is not added to the users notification queues. If users are not currently collaborating in the content item the content management system proceeds with updating the notification queues for the content item for each sharing user.

Content management system determines the interaction type and the priority of the new interaction. Content management system uses the interaction type and the priority of the new interaction to determine whether to add the interaction to each user s notification queue for the content item. For each sharing user content management system determines whether the notification queue already includes an interaction by the sharing user A with a higher priority than the priority of the new interaction. If the notification queue does already include a higher priority interaction by the sharing user A the notification queue is not updated and the process proceeds from step with the next user. If the notification queue does not already include a higher priority interaction by the sharing user A content management system adds the new interaction to the notification queue. In one embodiment content management system removes lower priority interactions by the sharing user A from the notification queue.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory tangible computer readable storage medium or any type of media suitable for storing electronic instructions which may be coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Embodiments of the invention may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process where the information is stored on a non transitory tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

