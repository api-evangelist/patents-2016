---

title: Methods and devices for a DDR memory driver using a voltage translation capacitor
abstract: Embodiments relate to systems, methods and computer readable media to enable design and creation of memory driver circuitry using a voltage translation capacitor. One embodiment is high speed level translation memory driver apparatus comprising a plurality of field effect transistors (FETs), complementary metal oxide semiconductor (CMOS) logic gates to drive the FETs, and a voltage translation capacitor with a first terminal of the voltage translation capacitor connected to an output of a second CMOS logic gate and a second terminal of the voltage translation capacitor connected to a gate terminal of a first P-type FET. Additional embodiments including other circuitry, associated methods, and media comprising instructions associated with generation of circuit design files are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589627&OS=09589627&RS=09589627
owner: Cadence Design Systems, Inc.
number: 09589627
owner_city: San Jose
owner_country: US
publication_date: 20160531
---
Embodiments described herein relate to electronic circuits and design automation EDA and to associated systems methods devices and instructions for generation of circuit design files. Some embodiments pertain to microprocessor interface circuits with memory devices for example double data rate DDR synchronous dynamic random access memory SDRAM such as DDR DDR DDR and low power double data rate LPDDR SDRAM used in portable electronic devices. Some embodiments particularly relate to driving these memory devices from microprocessors with a low core voltage.

A typical computing machine is implemented with a microprocessor memory and a number of other modules depending on the function to be performed by the computing machine. Double data rate DDR random access memory RAM is a particular type of RAM commonly used in current technology that performs two read accesses or two write accesses per clock cycle. Both microprocessors and DDR RAM operate on various different power supply voltages. Driver interface circuits can be used to allow for compatible communication between different microprocessors and DDR RAM chips.

Electronic design automation EDA is a category of systems for assisting with the design of electronic systems and devices. Large integrated circuit designs are often assembled from previously designed blocks. This enables reduced turnaround times for generation of an integrated circuit. Schematic and layout information for such block portions of a design may be exchanged or licensed as intellectual property.

Embodiments described herein relate to microprocessor interface circuits with memory devices particularly memory devices such as double data rate DDR synchronous dynamic random access memory SDRAM such as DDR DDR DDR and low power double data rate LPDDR SDRAM used in portable electronic devices. Some embodiments particularly relate to driving these memory devices from microprocessors with a low core voltage. The following description and the drawings illustrate specific embodiments to enable those skilled in the art to practice them. Other embodiments can incorporate structural logical electrical process and other changes. Portions and features of some embodiments can be included in or substituted for those of other embodiments and are intended to cover all available equivalents of the elements described.

Some embodiments described herein relate to circuits designed in complementary metal oxide semiconductor field effect transistors CMOS . These transistors are used in some digital integrated circuits for their simplicity low cost high density and also for their low power dissipation. Specifically CMOS transistors only dissipate power while dynamically switching and exhibit no static power dissipation. The CMOS transistors are either of an N type or a P type which indicates the doping content of the channel of the transistor. For example an N channel CMOS transistor produces an N channel when the gate voltage exceeds a threshold. The N type or N channel transistors will be referred to as N channel metal oxide semiconductor NMOS field effect transistors FET and the P type or P channel transistors will be referred to as P channel metal oxide semiconductor PMOS FETs. Common voltages used to describe these transistors are the gate to source voltage V drain to source voltage V and threshold voltage V . The current through the transistors is the drain to source current I . For NMOS transistors all these values in some embodiments are positive and for PMOS transistors in some embodiments all these values are negative. In various embodiments described herein the PMOS voltages and current will be described in terms of absolute values. Specifically when referring to PMOS transistors the gate to source voltage will mean V the drain to source voltage will mean V the threshold voltage will mean V and the drain current will mean I . Anywhere herein where particular values are used including specific values e.g. 0 volts 0.7 volts etc. it is to be understood that this is referring to a target value which operates within a variation tolerance around or approximate to the described value where the variation is within tolerances set by the specific implementation e.g. 0.05 volts etc. 

Non volatile memory is memory that retains the stored information even when powered off. Examples of non volatile memory are hard disks memory tapes and flash RAM. Volatile RAM is memory that loses the information when power is disconnected. Examples of volatile ram are static RAM SRAM and dynamic RAM DRAM . SRAM uses more transistors in a feedback latch up configuration which does not include refreshing operations. DRAM may be implemented with a small capacitor which will slowly leak charge and consequently needs to be periodically refreshed. SRAM is faster and more expensive and used sparingly in devices such as a high speed cache. DRAM is one method for the bulk volatile memory access. DRAM may be controlled on a system clock and therefore referred to as synchronous dynamic random access memory SDRAM .

Single data rate SDR SDRAM was originally built to execute one memory read access or one write access per clock cycle. On each clock cycle an n bit word may be transferred to or from the memory. The word length is in some embodiments configured in multiples of eight and in more recent computer machines it is common to transfer 64 bit words per clock cycle. Double data rate DDR SDRAM was implemented as an improvement over SDR SDRAM capable of performing two read accesses or two write accesses per clock cycle. This was accomplished by performing one access on the rising edge of the clock and one access on the falling edge of the clock. In this manner the data transfer rate is doubled by transferring two 64 bit words per clock cycle.

The operation of the microprocessor involves the execution of programs that are loaded into the memory module so as to create edit and delete data that is also stored in the memory module or other devices. Specifically each microprocessor operation involves a fetch and execute cycle where an instruction is read from the memory module decoded by the microprocessor and executed. Also the execution of the instruction often involves a data read or a data write to the memory module . Each of these instruction cycles is performed synchronously to a system clock with the duration of the instruction cycle lasting between one and three clock cycles.

The memory access interface traditionally involves bi directional data bus with a bus width of n bits to provide the transfer to and from the memory module in the form of n bit words. The location in the memory module which the data word is being written to or read from is indicated by the address bus . The memory module is selected by the CE signal which allows the data bus to be used by other devices not shown in . The R W signal indicates to the memory module whether the data access is a read operation or a write operation. This also determines the directional operation of the data bus . A clock signal is used to synchronize the microprocessor and the memory module during memory access and is not shown in .

During a write operation the microprocessor indicates the address location on the address bus and places the data on the data bus . It also asserts the CE signal and the R W signal for a write operation. Then the DDR SDRAM writes the data on the data bus into the memory at the address location indicated by the address bus and the write operation is complete. During a read operation the microprocessor indicates the address location on the address bus and floats the data bus high Z or high impedance state . It also asserts the CE signal and the R W signal for a read operation. Then the DDR SDRAM places the data at the memory location indicated by the address bus onto the data bus . The microprocessor then reads the data from the data bus and the read operation is complete. All these functions are synchronized to the system clock which is provided to both the microprocessor and the memory module . This a description of a microprocessor with a very simple implementation. Many implementations are significantly more complicated involving memory caches direct memory access transfers and a plethora of other devices connected to the microprocessor system bus.

The frequency with which the microprocessors access memory impacts performance. Since every instruction cycle involves at least one memory access the speed of a computer machine is greatly limited by the memory access speed. Therefore improving the method and speed of the memory access plays a continuing role in the evolution of computer machines. There are several related factors. The interface circuits that are controlling the bus are configured to have sufficient drive capability to quickly switch under the loading conditions as presented by the bus lines and the chips connected to them. The signals propagate fast enough along the bus lines that transmission effects become significant. Therefore the bus lines along with the source and load impedances are controlled so as to reduce reflections. Additionally the memory module and the microprocessor module may operate at different power supply voltages. Therefore memory access may involve the use of a level translator.

Memory types such as DDR DDR LPDDR and LPDDR typically operate between a V 1.6 Volt supply voltage down to a V 1.0 Volt supply voltage while current microprocessor cores operate with a power supply voltage as low as low as V 0.65 Volts. Therefore translator interface circuits are needed that can drive a memory module operating on a higher supply voltage from a microprocessor with a lower core voltage. And specifically it is useful that the translator interface driver circuits are capable of driving different voltage levels so that the microprocessor can be used with different types of memory operating on different supply voltages. The microprocessor supply voltage core supply voltage or signal supply voltage will be referred to as Vwhile the memory supply voltage or input output I O supply voltage will be referred to as V.

Integrated circuit IC technologies offer different types of transistor devices depending on their intended application. Specifically there are signal devices and input output I O devices. The microprocessor uses signal devices operating on the lower microprocessor core supply voltage for computation and program execution. The microprocessor uses I O devices that can withstand larger voltage levels and higher power levels to interface with external circuits and chips. The signal devices such as a signal metal oxide semiconductor field effect transistors MOSFET are built for low power consumption and switching speed. A MOSFET transistor is typically built with a metal or polysilicon gate material constructed over the channel of the transistor. When the voltage applied to the gate terminal exceeds a certain threshold threshold voltageV a conductive channel forms underneath the gate allowing current to flow from the source to the drain. A thin oxide layer separates and insulates the gate from the channel. The oxide layer is deliberately designed to be very thin to improve transistor characteristics such as the unity gain frequency and threshold voltage. If the gate to drain or gate to source voltage across the oxide layer exceeds a certain level the transistor will be damaged. The larger I O transistors are built with a greater power handling capability and with a thicker oxide layer. This allows the I O transistor to operate with I O voltage levels without causing damage to the transistor. In some embodiments such signal transistors consume less power occupy less chip area and switch faster.

Assume that the core supply voltage is V 0.7 Volts and the DDR memory supply voltage or I O supply voltage is V 1.5 Volts. When D IN is low 0 volts the output of NOT gates and is high at V 0.7 Volts This is because the NOT gates and are running on the core voltage supply V . Since the voltage translation capacitor is charged to V V the gate voltage of PMOS is roughly equal to V. Therefore the gate to source voltage of the PMOS FET is 0 Volts and PMOS FET will turn off. NMOS FET has a gate to source voltage of V 0.7 Volts. Assuming this is greater than the threshold voltage NMOS will turn on and pull D OUT to 0 Volts. Then when D IN switches high to V 0.7 Volts and the output of NOT gates and will be low at 0 Volts. Therefore the gate voltage of PMOS will be equal to the voltage across the voltage translation capacitor V V 0.8 Volts . The magnitude of the gate to source voltage of PMOS is then V 0.7 Volts. If this is greater than the magnitude of the threshold voltage V of the PMOS FET then PMOS FET will turn on and pull D OUT up to V. In both cases the gate to source voltage produced across either the PMOS transistor or the NMOS transistor when the transistors are turned on is Vregardless of V. Therefore as long as the core supply voltage Vexceeds the threshold voltage V of the I O devices the I O devices will successfully switch the output.

The voltage translation capacitor enables the logic devices running on the core supply to drive the gate of the PMOS transistor well above the core voltage. The voltage translation capacitor maintains the voltage difference between the microprocessor core voltage and the DRR memory voltage while switching. First to maintain the voltage difference while switching the voltage translation capacitor should be chosen with significantly lamer capacitance than the gate to source capacitance C and the gate to drain capacitance C of PMOS FET . During switching a portion of the charge on the voltage translation capacitors is transferred or pumped onto the gate of PMOS FET . Ensuring that the voltage translation capacitor is comparatively large the voltage variation of the voltage translation capacitor due to this charge transfer will be negligible. Second the voltage translation capacitor should be charged and periodically refreshed to replenish any charge leakage during operation. The switched capacitor along with reload switches and and charge switches and are implemented to perform this charge replenishment or refresh function. During a reload cycle the reload switches and are closed while the charge switches and are open. This charges the switched capacitor to V V. Then during a charge cycle the reload switches and are opened and the charge switches and are closed. At this point any charge leakage from the voltage translation capacitor is replenished by the switched capacitor . The reload and charge cycle or refresh cycle occurs frequently enough to negate the rate of charge leakage. This determines the reload charge cycle time and the size of the switched capacitor . If the reload switches and the charge switches are closed at the same time the output of inverter would be shorted to Vand the gate of PMOS would be shorted to V. Therefore while the output of the driver circuit is being used to transmit data the reload switches and and the charge switches and cannot be simultaneously closed. Therefore the reload switches and the charge switches are controlled with non overlapping clocks. To this end the memory driver circuit can seamlessly operate with the charge refresh continuously operating in the background.

The charge switches and the reload switches may be implemented with transmission gates or possibly with PMOS transistors. Since they are connected to the memory voltage supply they are implemented using I O transistors to sustain the higher supply voltage levels at which they are operated. The switches can be implemented with CMOS transmission gates or possibly with individual PMOS transistors.

The memory driver circuit illustrated in can be implemented with parallel segments to form an array of memory driver segments that drive a single line. By activating or deactivating one or more of the segments the source impedance and drive strength can be controlled. Also since the driver circuits may be used on a bidirectional bus the entire array is deactivated into a high impedance state when the I O line is used for receiving. The segment enable control signal switches the segment between active drive and the high impedance state. The active drive mode was described above with the segment enabled SEG EN 1 . When the segment is disabled SEG EN 0 the OR gate output is high. This forces the output of inverter high to V 0.7 Volts and the output of inverter to 0 Volts. With capacitor charged to V V the gate voltage of PMOS will be at Vand the gate voltage of NMOS will be at 0 Volts. Therefore both I O output transistors will be off leaving the I O output in a high impedance state.

The last mode to be discussed is the park mode. When the I O memory driver is not being used for some time the circuit can be parked with both of the reload switches and both of the charge switches closed. This will short the voltage translation capacitor to the core supply voltage and the I O supply voltage. In this mode the charge on the voltage translation capacitor is set and maintained without the non overlapping clocks running. The park control signal is set high in this mode forcing the segment into the high impedance mode not only because the driver is inoperable in this state but also because the output of NOT gate is high. In the parked mode if the output of NOT gate was driven low then a shorting condition would exist from the core supply V through the closed switches and through the NOT gate to ground. The park enable control is operated through the OR gate with the segment enable control and prevents this shorting condition from occurring. The park mode is useful for power up to quickly charge the voltage translation capacitor and to leave the driver circuit ready to immediately operate after being awakened from a period of inactivity.

The key to the non overlapping clock generator is illustrated with the transitional groupings and . In this transitional grouping the clock signal transitions high at the reset outputs QB QB and QB transition second in and the set outputs Q Q and Q transition last in . This is because the set NAND gate does not transition until after the reset ripple until after QB switches high . When the clock signal transitions low at the set outputs Q Q and Q transition second in and the reset outputs QB QB and QB transition last in . This is because the reset NAND gate does not transition until after the set ripple until after Q switches high . This ordering of the reset outputs transitioning first when the clock transitions high versus the set outputs transitioning first when the clock transitions low is what creates the non overlapping clock signals. In this manner within transition groups and QB switches low before Q switches high. And within transition groups and Q switches low before QB switches high.

The other difference in this embodiment shown in is the logic gate combination comprised of the inverter and the NOR gate . This is logically equivalent to the NAND gate and inverters and as seen by De Morgan s theorem. Specifically when the segment is active and not in park mode the inverter and the OR gate provide an output low to the NOR gates and causing them to behave transparently with inversion . Since both signal paths are comprised of inverters and the outputs of inverter and the NOR gate move together. This logical construction may be superior to that shown in because both the PMOS and the NMOS driver paths contain the same elements one inverter and one NOR gate improving the match particularly the match in propagation delay and switching characteristics. The voltage translation capacitor behaves like a battery maintaining a constant voltage as described with and allowing the inverter built on the core supply voltage to turn PMOS on and off. The charge switches and along with the reload switches and are used to replenish the charge on the voltage translation capacitor using the switched capacitor as was described with .

There are numerous ways to implement the signal logic comprised of the NOR gates and the inverters and and the OR gate . Functionally however the signal logic provides a PMOS drive output and an NMOS drive output that switch together in the same direction when driving output data but that switch in opposite directions when setting high impedance mode. Specifically for high impedance mode the PMOS drive from the output of inverter switches to the positive rail while the NMOS drive from the output of the NOR gate switches to the negative rail. This turns off the output stage transistors and provides a high impedance output which allows the bus lines to be used for receiving.

Previously voltage level translation has been performed by a differential NMOS circuit driving a PMOS load with cross coupled gates. This is followed by SR latches for duty cycle conditioning and a number of buffer stages to drive the final I O stage. Such circuit elements were run at I O supply voltage levels using I O devices. In the proposed embodiments the pre drive circuits are not run at I O voltage levels. In various embodiments the entire process implemented by differentially level shifting duty cycle conditioning and re buffering is circumvented by the use of a voltage translation capacitor . This allows for the use of signal transistors that operate on the core supply voltage all the way up to the PMOS NMOS driver stage. Since the signal transistors have shorter channels and thinner gate oxide the trans conductance to gate capacitance ratio f is substantially better. This allows for faster switching with smaller devices consuming less power. In some embodiments the power and chip area are greatly reduced by the fact that the proposed embodiments do not use a differential level translator circuit a duty cycle conditioning circuit and numerous buffer stages all of which were previously implemented with I O devices. Also without the single ended to differential conversion the differential level translation the duty cycle conditioning and additional buffering there is less jitter and skew between data signals that would otherwise result from mismatched devices and power supply noise. And finally since the drivers consume less power less power supply decoupling capacitance is needed which results in additional savings in terms of chip area.

The example embodiment is estimated to consume approximately 24 less power from the I O supply while switching twice as fast. Other embodiments may provide similar benefits. In some embodiments the latency from data input to output driver is reduced from approximately 500 ps to less than 150 ps the jitter is improved by 40 and the chip area is reduced by 30 .

In operation a voltage translation capacitor is charged to a voltage equal to the difference between the I O supply voltage and the core supply voltage. This charging process is performed with a switched capacitor and a set of CMOS transmission gate switches. The switched capacitor is first charged to the voltage difference between the I O supply voltage and the core supply voltage using a first pair of reload transmission gate switches. Then the reload switches are opened and a pair of Charge switches are closed. Closing the charge switches connects the switched capacitor to the voltage translation capacitor and transfers charge between the capacitors. In this way any charge that bleeds off the voltage translation capacitor is replenished by the switched capacitor . The switches are controlled by a pair of non overlapping clock signals to ensure that the reload switches are not closed at the same time as the charge switches. In this way the voltage translation capacitor can continue to operate translating the core logic voltage level to the I O drive voltage level while the charge operation or refresh operation is performed in the background.

In operation the first NMOS ITT is switched on or off using an output of the first CMOS logic gate. This is possible because the threshold voltage of the NMOS FET is less than the core supply voltage. Switching the first NMOS FET on pulls the I O line to a low voltage.

In operation the first PMOS FET is switched on or off using an output of the second CMOS logic gate. The second CMOS logic gate can perform this function through the level translation capacitor. This allows the second CMOS logic gate to push the gate voltage of the first PMOS FET high enough to turn it off despite its source connection to the I O supply voltage. The voltage translation capacitor maintains a voltage during this switching process that is sufficient to turn the first PMOS FET on and off Switching the first PMOS FET on pulls the I O output voltage up. The gate terminal of the first PMOS FET is electrically floating e.g. there is no DC conductive path to around . The circuit relies on the voltage translation capacitor to control the gate voltage. In this way the voltage translation capacitor may be referred to as a flying capacitor. The gate voltage of the PMOS FET is controlled by maintaining the charge on the voltage translation capacitor . This involves a periodic refresh of the voltage translation capacitor as described in operation above.

The remaining points to be made about the operation of the high speed voltage translation driver apparatus are with regard to the high impedance mode and the output drive level. Circuit can be set into a high impedance mode by driving the first and second CMOS logic gate outputs in opposite directions. The first CMOS logic gate switches low which turns the first NMOS FET off. The second CMOS logic gate switches high which turns the first PMOS FET off. At this point the I O line is floating in a high impedance state which allows the I O line to be used for receiving data.

Second a bank of segments of the high speed level translator apparatus can be constructed to control the drive level applied to the I O line. The segments operate in parallel with each other and can be individually switched on or off. If the drive level needs to be increased more of the parallel segments can be activated. If the drive level needs to be decreased some of the parallel segments can be set to high impedance mode so as not to the affect the I O line. The last mode of operation is called park which places all of the segments of the high speed driver apparatus into a high impedance state. It also connects the voltage translation capacitor from the core supply voltage across to the I O supply voltage. This way it can be quickly initialized on power up and is ready for operation anytime the circuit is removed from the park mode for active I O transmitting.

In some embodiments following an initial selection of design values in design input operation timing analysis and optimization according to various embodiments occurs in an optimization operation along with any other automated design processes. One such process may be the automated design of control circuitry to switch a DDR programmable level translator device depending on the type of DDR memory being accessed. As described below design constraints for blocks of a circuit design generated with design inputs in design input operation may be analyzed using hierarchical timing analysis according to various embodiments. While design flow shows such optimization occurring prior to layout instance such hierarchical timing analysis and optimization may be performed at any time to verify operation of a circuit design. For example in various embodiments constraints for blocks in a circuit design may be generated prior to routing of connections in a circuit design after routing during register transfer level RTL operations or as part of a final signoff optimization or verification prior to a device fabrication operation .

After design inputs are used in design input operation to generate a circuit layout and any optimization operations are performed a layout is generated in layout instance . The layout describes the physical layout dimensions of the device that match the design inputs. This layout may then be used in a fabrication operation to generate a device or additional testing and design updates may be performed using designer inputs or automated updates based on the design simulation operations or 3D modeling and analysis operations. Once the device is generated the device can be tested as part of device test operations and layout modifications generated based on actual device performance.

As described in more detail below design updates from design simulation design updates from device test or 3D modeling and analysis operations or direct design input operation may occur after an initial layout instance is generated. In various embodiments whenever design inputs are used to update or change an aspect of a circuit design a timing analysis and optimization operation may be performed.

For example in various embodiments a user may provide an input to an EDA computing device indicating placement of an instance of a design block within a first portion of a circuit design. Once a design is ready another input to the EDA computing device may be used to generate constraints for each instance of the design block and a timing analysis may be performed using the constraints. An output to a display of the EDA computing device may show results of the timing analysis or may show optimizations recommended or automatically performed adjustments in the circuit design based on the timing analysis. Further inputs to the EDA computing device may involve adjustments as user design inputs with additional timing analysis and optimization initiated via user operation of the EDA computing device.

Example computer system machine includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via an interconnect e.g. a link a bus etc. . The computer system machine can further include a display device an alphanumeric input device e.g. a keyboard and a user interface UI navigation device e.g. a mouse . In one embodiment the display device input device and UI navigation device are a touch screen display. The computer system machine can additionally include a storage device e.g. a drive unit a signal generation device e.g. a speaker an output controller a power management controller and a network interface device which can include or operably communicate with one or more antennas transceivers or other wireless communications hardware and one or more sensors such as a Global Positioning Sensor GPS sensor compass location sensor accelerometer or other sensor.

The storage device includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The instructions can also reside completely or at least partially within the main memory static memory and or within the processor during execution thereof by the computer system machine with the main memory static memory and the processor also constituting machine readable media .

While the machine readable medium is illustrated in an example embodiment to be a single medium the term machine readable medium can include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more instructions . The term machine readable medium shall also be taken to include any tangible medium that is capable of storing encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure or that is capable of storing encoding or carrying data structures utilized by or associated with such instructions .

Various techniques or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives non transitory computer readable storage medium or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the various techniques. In the case of program code execution on programmable computers the computing device may include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. The volatile and non volatile memory and or storage elements may be a random access memory RAM erasable programmable read only memory EPROM flash drive optical drive magnetic hard drive or other medium for storing electronic data. The base station and mobile station may also include a transceiver module a counter module a processing module and or a clock module or timer module. One or more programs that may implement or utilize the various techniques described herein may use an application programming interface API reusable controls and the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system However the program s may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The embodiments described above can be implemented in one or a combination of hardware firmware and software. Various methods or techniques or certain aspects or portions thereof can take the form of program code i.e. instructions embodied in tangible media such as flash memory hard drives portable storage devices read only memory ROM random access memory RAM semiconductor memory devices e.g. electrically programmable read only memory EPROM electrically erasable programmable read only memory EEPROM magnetic disk storage media optical storage media and any other machine readable storage medium or storage device wherein when the program code is loaded into and executed by a machine such as a computer or networking device the machine becomes an apparatus for practicing the various techniques.

A machine readable storage medium or other storage device can include any non transitory mechanism for storing information in a form readable by a machine e.g. a computer . In the case of program code executing on programmable computers the computing device can include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device One or more programs that can implement or utilize the various techniques described herein can use an application programming interface API reusable controls and the like. Such programs can be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language can be a compiled or interpreted language and combined with hardware implementations.

It should be understood that the functional units or capabilities described in this specification can have been referred to or labeled as components or modules in order to more particularly emphasize their implementation independence. For example a component or module can be implemented as a hardware circuit comprising custom very large scale integration VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A component or module can also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like. Components or modules can also be implemented in software for execution by various types of processors. An identified component or module of executable code can for instance comprise one or more physical or logical blocks of computer instructions which can for instance be organized as an object procedure or function. Nevertheless the executables of an identified component or module need not be physically located together but can comprise disparate instructions stored in different locations which when joined logically together comprise the component or module and achieve the stated purpose for the component or module.

Indeed a component or module of executable code can be a single instruction or many instructions and can even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data can be identified and illustrated herein within components or modules and can be embodied in any suitable form and organized within any suitable type of data structure. The operational data can be collected as a single data set or can be distributed over different locations including over different storage devices and can exist at least partially merely as electronic signals on a system or network. The components or modules can be passive or active including agents operable to perform desired functions.

