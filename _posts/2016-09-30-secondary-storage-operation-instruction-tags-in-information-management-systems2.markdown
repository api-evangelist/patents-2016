---

title: Secondary storage operation instruction tags in information management systems
abstract: According to certain aspects, a system can include a client computing device configured to: in response to user interaction, store an identifier associated with a first tag in association with a first file; and in response to instructions to perform a secondary copy operation, forward the first file, a second file, and the identifier associated with the first tag. The system may also include a secondary storage controller computer(s) configured to: based on a review of the identifier associated with the first tag, identify the first file as having been tagged with the first tag; electronically obtain rules associated with the first tag; perform on the first file at least a first secondary storage operation specified by the rules associated with the first tag; and perform on the second file at least a second secondary storage operation, wherein the first and second secondary storage operations are different.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652166&OS=09652166&RS=09652166
owner: COMMVAULT SYSTEMS, INC.
number: 09652166
owner_city: Tinton Falls
owner_country: US
publication_date: 20160930
---
Any and all applications for which a foreign or domestic priority claim is identified in the Application Data Sheet as filed with the present application are hereby incorporated by reference under 37 CFR 1.57.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks while minimizing impact on productivity. Protecting information is often part of a routine process that is performed within an organization. A company might back up critical computing systems such as databases file servers web servers and so on as part of a daily weekly or monthly maintenance schedule. The company may similarly protect computing systems used by each of its employees such as those used by an accounting department marketing department engineering department and so forth.

Given the rapidly expanding volume of data under management companies also continue to seek innovative techniques for managing data growth in addition to protecting data. For instance companies often implement migration techniques for moving data to lower cost storage over time and data reduction techniques for reducing redundant data pruning lower priority data etc. Enterprises also increasingly view their stored data as a valuable asset. Along these lines customers are looking for solutions that not only protect and manage but also leverage their data. For instance solutions providing data analysis capabilities information management improved data presentation and access features and the like are in increasing demand.

An organization may back up or archive data according to one or more storage policies. For example an organization may maintain an information management system having one or more pre defined storage policies and apply those storage policies to files that meet the criteria defined in the storage policy. The system may process files associated with the policy in a generally uniform manner where each file receives similar treatment according to the storage policy criteria. However in some cases the user may have certain insight into how certain files should be treated. For example the user can recognize that certain types of files e.g. accounting related emails or documents should be kept for at least a specific period of time. In such cases it can be useful for the user to have a straightforward mechanism to indicate to the system how to process certain files. For instance it could be useful to allow users to specify how certain files should be handled when performing secondary storage operations including backup or archiving operations.

In order to address these and other challenges an information management system according to certain aspects may provide secondary storage operation instruction tags that define rules for processing files or other data associated with the tags. For instance the rules may specify secondary storage operations or other information processing operations which should be performed with respect to the tagged data. These secondary storage operation instruction tags may be referred to as smart tags or tags. The users can tag files in primary storage with appropriate smart tags and the system can process the files according to the smart tags during secondary storage operations.

The user can manage the tags through a user interface of a native interface of an application. In one example smart tags are provided for tagging Microsoft Outlook data and a user applies one or more tags to an email while browsing in Outlook. Or smart tags may be available in Windows Explorer and the user can apply one or more tags to a file by right clicking on the file and selecting a menu item.

As explained above a smart tag can have corresponding rules that specify which storage operation s are to be performed on data tagged by the smart tag. For example rules associated with a smart tag can specify how long data should be retained how long data should be archived for whether data should be pruned from primary storage whether to make an additional copy of data in secondary storage whether data is eligible to be copied to a different type of media e.g. tape within secondary storage etc. The system can provide different types or categories of smart tags such as long term retention tags archiving tags sharing tags etc. Smart tags may be stored with metadata associated with the tagged data. At the time of backup the tags can be forwarded to secondary storage for processing. For instance the tags can be forwarded along with the corresponding files to media agents residing on secondary storage controller computers and the media agents can access the rules associated with the tags and perform the storage operation s specified by the rules. In this way the smart tags can override storage policies that apply to the files.

In this manner the system can provide more granular control over backup of data in primary storage through the use of the smart tags. The user can determine the importance of certain data and instruct the system how to store the data in secondary storage by selecting smart tag s for the data. Instead of applying a uniform storage policy to all data that meets specific criteria the user may override the default storage policy as appropriate. In this way the system can provide more flexibility in secondary storage operations. Moreover by providing a user interface for applying tags to files that is integrated with the native interface of the source applications e.g. Microsoft Outlook Microsoft Explorer used to generate the files the system can provide smart tags in a seamless manner and without having to build a separate interface for tagging.

In some embodiments a system configured to apply granular secondary storage operation management is provided. The system may include one or more secondary storage controller computers including computer hardware configured to copy data from a primary storage subsystem to a secondary storage subsystem. The system may also include a client computing device residing in the primary storage subsystem and comprising computer hardware. The client computing device may be configured to in response to user interaction with a graphical user interface to associate a first tag of one or more tags with a first file store an identifier associated with the first tag in association with the first file. The client computing device may be further configured to in response to receiving instructions to perform according to a storage policy a secondary copy operation on a data set in the primary storage subsystem including at least the first file and a second file forward the first file the second file and the identifier associated with the first tag to the one or more secondary storage controller computers. The one or more secondary storage controller computers may be configured to based on a review of the identifier associated with the first tag identify the first file as having been tagged with the first tag. The one or more secondary storage controller computers can be configured to electronically obtain rules associated with the first tag. The one or more secondary storage controller computers may be further configured to perform on the first file at least a first secondary storage operation specified by the rules associated with the first tag. The one or more secondary storage controller computers can additionally be configured to perform on the second file at least a second secondary storage operation specified by the storage policy. The first and second secondary storage operations may be different.

According to certain aspects the one or more tags include a tag defined by a system administrator. The one or more tags can include a tag defined by a user associated with the client computing device and rules associated with the tag can be stored in an index associated with one of the one or more secondary storage controller computers. The client computing device can store the identifier associated with the first tag with metadata of the first file. The first file may be generated by an application executing on the client computing device and the graphical user interface may be associated with the application the client computing device may be further configured to provide access to the one or more tags in the graphical user interface of the application receive user selection of a tag from the graphical user interface the user selection of the tag being associated with at least the first file and store an identifier associated with the tag in association with at least the first file. In one embodiment a data agent executing on the client computing devices provides the one or more tags to the application. The one or more secondary storage controller computers can be configured to override the storage policy to perform on the first file the at least a first storage operation specified by the rules associated with the first tag. The client computing device can be further configured to create rules for applying the first tag to files residing in the primary storage subsystem execute the rules for applying the first tag at a specified time and store the identifier associated with the first tag in association with one or more files that meet the rules. In some embodiments the one or more files that meet the rules include the first file. The client computing device may be configured to forward the first file and the first tag by extracting the first tag from metadata of the first file. The at least a first secondary storage operation specified by the rules associated with the first tag can include one or more of a backup operation an archiving operation a migration operation and a replication operation.

In other embodiments a method of applying granular secondary storage operation management is provided. The method may include using a computing device residing in a primary storage subsystem in response to user interaction with a graphical user interface to associate a first tag of one or more tags with a first file storing an identifier associated with the first tag in association with the first file and in response to receiving instructions to perform according to a storage policy a secondary copy operation on a data set in the primary storage subsystem including at least the first file and a second file forwarding the first file the second file and the identifier associated with the first tag to one or more secondary storage controller computers including computer hardware configured to copy data from the primary storage subsystem to a secondary storage subsystem. The method may also include using the one or more secondary storage controller computers based on a review of the identifier associated with the first tag identifying the first file as having been tagged with the first tag electronically obtaining rules associated with the first tag performing on the first file at least a first secondary storage operation specified by the rules associated with the first tag and performing on the second file at least a second secondary storage operation specified by the storage policy wherein the first and second secondary storage operations are different.

According to certain aspects the one or more tags include a tag defined by a system administrator. The one or more tags can include a tag defined by a user associated with the computing device and rules associated with the tag can be stored in an index associated with one of the one or more secondary storage controller computers. The computing device may store the identifier associated with the first tag with metadata of the first file. The first file may be generated by an application executing on the computing device and the graphical user interface may be associated with the application the method may further include using the computing device providing access to the one or more tags in the graphical user interface of the application receiving user selection of a tag from the graphical user interface the user selection of the tag being associated with at least the first file and storing an identifier associated with the tag in association with at least the first file. In one embodiment a data agent executing on the computing devices provides the one or more tags to the application. The one or more secondary storage controller computers may override the storage policy to perform on the first file the at least a first storage operation specified by the rules associated with the first tag. The method can further include using the computing device creating rules for applying the first tag to files residing in the primary storage subsystem executing the rules for applying the first tag at a specified time and storing the identifier associated with the first tag in association with one or more files that meet the rules. The method can additionally include using the computing device forwarding the first file and the first tag by extracting the first tag from metadata of the first file.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Systems and methods are disclosed for implementing secondary storage operation instruction tags. Detailed descriptions and examples of systems and methods according to one or more illustrative embodiments may be found for example in the section entitled An Exemplary System for Implementing Secondary Storage Operation Instruction Tags and with reference to . Components and functionality for secondary storage operation instruction tags may be configured and or incorporated into information management systems such as those described herein in .

Various embodiments described herein are intimately tied to enabled by and would not exist except for computer technology. For example the secondary storage operation instruction tag technology described herein in reference to various embodiments cannot reasonably be performed by humans alone without the computer technology upon which they are implemented.

With the increasing importance of protecting and leveraging data organizations simply cannot risk losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data increasingly difficult. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data. Depending on the size of the organization there may be many data production sources which are under the purview of tens hundreds or even thousands of individuals. In the past individuals were sometimes responsible for managing and protecting their own data and a patchwork of hardware and software point solutions may have been used in any given organization. These solutions were often provided by different vendors and had limited or no interoperability. Certain embodiments described herein address these and other shortcomings of prior approaches by implementing scalable unified organization wide information management including data storage management.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to Commvault Systems Inc. each of which is hereby incorporated by reference in its entirety herein 

Information management system can include a variety of computing devices and computing technologies. For instance system can include one or more client computing devices and secondary storage computing devices as well as storage manager or a host computing device for it. Computing devices can include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers servers and minicomputers. The secondary storage computing devices and or the computer that implements the storage manager can be referred to as secondary storage controller computers. Other computing devices can include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc. Servers can include mail servers file servers database servers and web servers. Computing devices may comprise one or more processors e.g. CPU and or single core or multi core processors as well as non transitory computer readable memory e.g. random access memory RAM for storing computer programs to be executed by the one or more processors. Other computer readable memory for mass storage of data may be packaged configured with the computing device e.g. an internal hard disk and or may be external and accessible by the computing device e.g. network attached storage .

In some cases a computing device includes cloud computing resources which may be virtual machines. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. In some embodiments computing devices can include one or more virtual machine s running on a physical host computing device or host machine operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual machine as a mail server both virtual machines operating on the same host machine.

A virtual machine includes an operating system and associated virtual resources and is hosted simultaneously with another operating system on a physical host computer or host machine . A hypervisor typically software and also known in the art as a virtual machine monitor or a virtual machine manager or VMM sits between the virtual machine and the hardware of the physical host machine. Examples of hypervisors as virtualization software include ESX Server by VMware Inc. of Palo Alto Calif. Microsoft Virtual Server and Microsoft Windows Server Hyper V both by Microsoft Corporation of Redmond Wash. and Sun xVM by Oracle America Inc. of Santa Clara Calif. In some embodiments the hypervisor may be firmware or hardware or a combination of software and or firmware and or hardware. The hypervisor provides resources to each virtual operating system such as a virtual processor virtual memory a virtual network device and a virtual disk. Each virtual machine has one or more virtual disks. The hypervisor typically stores the data of virtual disks in files on the file system of the physical host machine called virtual machine disk files in VMware lingo or virtual hard disk image files in Microsoft lingo . For example VMware s ESX Server provides the Virtual Machine File System VMFS for the storage of virtual machine disk files. A virtual machine reads data from and writes data to its virtual disk much the e way that a physical machine reads data from and writes data to a physical disk. Examples of techniques for implementing information management in a cloud computing environment are described in U.S. Pat. No. 8 285 681. Examples of techniques for implementing information management in a virtualized computing environment are described in U.S. Pat. No. 8 307 177.

Information management system can also include a variety of electronic data storage devices generally used for mass storage of data including e.g. primary storage devices and secondary storage devices . Storage devices can generally be of any suitable type including without limitation disk drives storage arrays e.g. storage area network SAN and or network attached storage NAS technology semiconductor memory e.g. solid state storage devices network attached storage NAS devices tape libraries or other magnetic non tape storage devices optical media storage devices DNA RNA based memory technology combinations of the same etc. In some embodiments storage devices can form part of a distributed file system. In some cases storage devices are provided in a cloud storage environment e.g. a private cloud or one operated by a third party vendor whether for primary data or secondary copies or both.

Depending on context the term information management system can refer to generally all of the illustrated hardware and software components in or the term may refer to only a subset of the illustrated components. For instance in some cases system generally refers to a combination of specialized components used to protect move manage manipulate analyze and or process data and metadata generated by client computing devices . However system in some cases does not include the underlying components that generate and or store primary data such as the client computing devices themselves and the primary storage devices . Likewise secondary storage devices e.g. a third party provided cloud storage environment may not be part of system . As an example information management system may sometimes refer to one or more of the following components which will be described in further detail below storage manager data agent and media agent.

Information management system includes one or more client computing devices having an operating system and at least one application executing thereon and one or more primary storage devices storing primary data . Client computing device s and primary storage devices may generally be referred to in some cases as primary storage subsystem .

Typically a variety of sources in an organization produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server a database server a transaction server or the like. In system data generation sources include one or more client computing devices . A computing device that has a data agent installed and operating on it is generally referred to as a client computing device and may include any type of computing device without limitation. A client computing device may be associated with one or more users and or user accounts.

A client is a logical component of information management system which may represent a logical grouping of one or more agents installed on a client computing device . Storage manager recognizes a client as a component of system and in some embodiments may automatically create a client component the first time a data agent is installed on a client computing device . Because data generated by executable component s is tracked by the associated data agent so that it may be properly protected in system a client may be said to generate data and to store the generated data to primary storage such as primary storage device . However the terms client and client computing device as used herein do not imply that a client computing device is necessarily configured in the client server sense relative to another computing device such as a mail server or that a client computing device cannot be a server in its own right. As just a few examples a client computing device can be and or include mail servers file servers database servers and web servers.

Each client computing device may have application s executing thereon which generate and manipulate the data that is to be protected from loss and managed in system . Applications generally facilitate the operations of an organization and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications or database management systems e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications graphics and or video applications browser applications mobile applications entertainment applications and so on. Each application may be accompanied by an application specific data agent . A file system e.g. Microsoft Windows Explorer may be considered an application and may be accompanied by its own data agent . Client computing devices can have at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. installed thereon which may support or host one or more file systems and other applications . In some embodiments a virtual machine that executes on a host client computing device may be considered an application and may be accompanied by a specific data agent e.g. virtual server data agent .

Client computing devices and other components in system can be connected to one another via one or more electronic communication pathways . For example a first communication pathway may communicatively couple client computing device and secondary storage computing device a second communication pathway may communicatively couple storage manager and client computing device and a third communication pathway may communicatively couple storage manager and secondary storage computing device etc. see e.g. and . A communication pathway can include one or more networks or other connection types including one or more of the following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel FC connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network a neural network a mesh network an ad hoc network other appropriate computer or telecommunications networks combinations of the same or the like. Communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs. The underlying infrastructure of communication pathways may be wired and or wireless analog and or digital or any combination thereof and the facilities used may be private public third party provided or any combination thereof without limitation.

A subclient is a logical grouping of all or part of a client s primary data . In general a subclient may be defined according to how the subclient data is to be protected as a unit in system . For example a subclient may be associated with a certain storage policy. A given client may thus comprise several subclients each subclient associated with a different storage policy. For example some files may form a first subclient that requires compression and deduplication and is associated with a first storage policy. Other files of the client may form a second subclient that requires a different retention schedule as well as encryption and may be associated with a different second storage policy. As a result though the primary data may be generated by the same application and may belong to one given client portions of the data may be assigned to different subclients for distinct treatment by the information management system. More detail on subclients is given in regard to storage policies below.

Primary data is generally production data or other live data generated by the operating system and or applications executing on client computing device . Primary data is generally stored on primary storage device s and is organized via a file system operating on the client computing device . Thus client computing device s and corresponding applications may create access modify write delete and otherwise use primary data . Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first stored body of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source application .

Primary storage devices storing primary data may be relatively fast and or expensive technology e.g. a disk drive a hard disk storage array solid state memory etc. typically because they must support high performance live production environments. Primary data may be highly changeable and or may be intended for relatively short term retention e.g. hours days or weeks . According to some embodiments client computing device can access primary data stored in primary storage device by making conventional file system calls via the operating system. Primary data may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. See e.g. .

It can be useful in performing certain tasks to organize primary data into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other hierarchies or organizations of data objects. As used herein a data object can refer to i any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and ii a subset of such a file e.g. a data block an extent etc. .

It can also be useful in performing certain functions of system to access and modify metadata within primary data . Metadata generally includes information about data objects and or characteristics associated with the data objects. For simplicity herein it is to be understood that unless expressly stated otherwise any reference to primary data generally also includes its associated metadata but references to metadata generally do not include the primary data. Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term user supplied tags to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object geographic location e.g. GPS coordinates frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLs system metadata e.g. registry information combinations of the same or other similar information related to the data object. In addition to metadata generated by or related to file systems and operating systems some applications and or other components of system maintain indices of metadata for data objects e.g. metadata associated with individual email messages. The use of metadata to perform classification and other functions is described in greater detail below.

Each client computing device is generally associated with and or in communication with one or more primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of routing and or storing data e.g. primary data to the particular primary storage device coordinating the routing and or storing of data to the particular primary storage device retrieving data from the particular primary storage device coordinating the retrieval of data from the particular primary storage device and modifying and or deleting data in the particular primary storage device . A client computing device may be said to access data stored in an associated storage device .

Primary storage device may be dedicated or shared. In some cases each primary storage device is dedicated to an associated client computing device e.g. a local disk drive. In other cases one or more primary storage devices can be shared by multiple client computing devices e.g. via a local network in a cloud storage implementation etc. As one example primary storage device can be a storage array shared by a group of client computing devices such as EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

Information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of system . For instance the hosted services may be provided by online service providers. Such service providers can provide social networking services hosted email services or hosted productivity applications or other hosted applications such as software as a service SaaS platform as a service PaaS application service providers ASPs cloud services or other mechanisms for delivering functionality via a network. As it services users each hosted service may generate additional data and metadata which may be managed by system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device .

Primary data stored on primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data . Or primary storage devices can be damaged lost or otherwise corrupted. For recovery and or regulatory compliance purposes it is therefore useful to generate and maintain copies of primary data . Accordingly system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of primary data including its associated metadata. The secondary storage computing devices and the secondary storage devices may be referred to as secondary storage subsystem .

Creation of secondary copies can help in search and analysis efforts and meet other information management goals as well such as restoring data and or metadata if an original version is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity in the production system and or in secondary storage facilitating organization and search of data improving user access to data files across multiple computing devices and or hosted services and implementing data retention policies.

A secondary copy can comprise a separate stored copy of data that is derived from one or more earlier created stored copies e.g. derived from primary data or from another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention before some or all of the data is moved to other storage or discarded. In some cases a secondary copy may be in a different storage device than other previously stored copies and or may be remote from other previously stored copies. Secondary copies can be stored in the same storage device as primary data . For example a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies . Secondary copies may be stored in relatively slow and or lower cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different from the native source application format or other format of primary data .

Secondary storage computing devices may index secondary copies e.g. using a media agent so that users can browse and restore at a later time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on secondary storage device s of a particular secondary copy .

Since an instance of a data object or metadata in primary data may change over time as it is modified by application or hosted service or the operating system system may create and manage multiple secondary copies of a particular data object or metadata each copy representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from primary storage device and the file system system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtual machines the operating system and other applications of client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. System may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data . First secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by applications or client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by system which may be referred to as restore operations. Secondary copies may have been processed by data agent and or media agent in the course of being created e.g. compression deduplication encryption integrity markers indexing formatting etc. and thus secondary copy may represent source primary data without necessarily being exactly identical to the source.

Second secondary copies may be stored on a secondary storage device that is inaccessible to application running on client computing device and or hosted service. Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the system can access only with some human intervention e.g. tapes located at an offsite storage site .

Creating secondary copies can be challenging. For instance hundreds or thousands of client computing devices may be continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and devices that write to read from or otherwise interact with secondary storage devices such as secondary storage computing devices and corresponding media agents may require specialized programmed intelligence and or hardware capability. Client computing devices may interact directly with a secondary storage device to create secondary copies however in view of the factors described above this approach can negatively impact the ability of client computing device to serve service application and produce primary data . Further any given client computing device may not be optimized for interaction with certain secondary storage devices .

Thus information management system may include one or more software and or hardware components which generally act as intermediaries between client computing devices that generate primary data and secondary storage devices that store secondary copies . In addition to off loading certain responsibilities from client computing devices these intermediate components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability and improve system performance. For instance using specialized secondary storage computing devices and media agents for interfacing with secondary storage devices and or for performing certain data processing operations can greatly improve the speed with which system performs information management operations and can also improve the capacity of the system to handle large numbers of such operations while reducing the computational load on the production environment of client computing devices . The intermediate components can include one or more secondary storage computing devices as shown in and or one or more media agents . Media agents are discussed further below e.g. with respect to .

Secondary storage computing device s can comprise any of the computing devices described above without limitation. In some cases secondary storage computing device s also include specialized hardware and or software componentry for interacting with certain secondary storage device s with which they may be specially associated.

To create a secondary copy involving the copying of data from primary storage subsystem to secondary storage subsystem client computing device may communicate the primary data to be copied or a processed version thereof to the designated secondary storage computing device via a communication pathway . Secondary storage computing device in turn may perform further processing and may convey the data or a processed version thereof to secondary storage device . One or more secondary copies may be created from existing secondary copies such as in the case of an auxiliary copy operation described further below.

Secondary copy data objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively and accompanied by corresponding metadata Meta11 Meta3 and Meta8 respectively . Moreover as indicated by the prime mark secondary storage computing devices or other components in secondary storage subsystem may process the data received from primary storage subsystem and store a secondary copy including a transformed and or supplemented representation of a primary data object and or metadata that is different from the original format e.g. in a compressed encrypted deduplicated or other modified format. For instance secondary storage computing devices can generate new metadata or other information based on said processing and store the newly generated information along with the secondary copies. Secondary copy data object B represents primary data objects B and A as B and A respectively accompanied by corresponding metadata Meta2 Meta10 and Meta1 respectively. Also secondary copy data object C represents primary data objects A B and A as A B and A respectively accompanied by corresponding metadata Meta9 Meta5 and Meta6 respectively.

Information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in system . Such design choices can impact performance as well as the adaptability of system to data growth and other changing circumstances.

Storage manager is a centralized storage and or information manager that is configured to perform certain control functions and also to store certain critical information about system . As noted the number of components in system and the amount of data under management can be large. Managing the components and data is therefore a significant task which can grow unpredictably as the number of components and data scale to meet the needs of the organization. For these and other reasons according to certain embodiments responsibility for controlling system or at least a significant portion of that responsibility is allocated to storage manager . Storage manager can be adapted independently according to changing circumstances without having to replace or re design the remainder of the system. Moreover a computing device for hosting and or operating as storage manager can be selected to best suit the functions and networking needs of storage manager . These and other advantages are described in further detail below and with respect to .

Storage manager may be a software module or other application which in some embodiments operates in conjunction with one or more associated data structures such as a dedicated database e.g. management database . In some embodiments storage manager is itself a computing device that performs the functions described herein. The storage manager generally initiates performs coordinates and or controls storage and other information management operations performed by the system e.g. to protect and control primary data and secondary copies . In general storage manager may be said to manage information management system which includes managing constituent components such as data agents and media agents etc.

As shown by the dashed arrowed lines in storage manager may communicate with and or control some or all elements of the information management system such as data agents and media agents . In this manner storage manager may control the operation of various hardware and software components in system . In certain embodiments control information originates from storage manager and status as well as index reporting is transmitted to storage manager by the managed components whereas payload data and metadata are generally communicated between data agents and media agents or otherwise between client computing device s and secondary storage computing device s e.g. at the direction of and under the management of storage manager . Control information can generally include parameters and instructions for carrying out information management operations such as without limitation instructions to perform a task associated with an operation timing information specifying when to initiate a task data path information specifying what components to communicate with or access in carrying out an operation and the like. In other embodiments some information management operations are controlled or initiated by other components of system e.g. by media agents or data agents instead of or in combination with storage manager .

Storage manager may maintain an associated database or storage manager database or management database of management related data and information management policies . Database can be stored in computer memory accessible by storage manager . Database may include a management index or index or other data structure s that may store logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary data or secondary copies preferences regarding the scheduling type or other aspects of secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example storage manager may use index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices . For instance index may store data associating a client computing device with a particular media agent and or secondary storage device as specified in an information management policy .

Administrators and others may configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other infrequent tasks it is often not workable for implementing on going organization wide data protection and management. Thus system may utilize information management policies for specifying and executing information management operations on an automated basis. Generally an information management policy can include a stored data structure or other information source that specifies parameters e.g. criteria and rules associated with storage management or other information management operations. Storage manager can process an information management policy and or index and based on the results identify an information management operation to perform identify the appropriate components in system to be involved in the operation e.g. client computing devices and corresponding data agents secondary storage computing devices and corresponding media agents etc. establish connections to those components and or between those components and or instruct and control those components to carry out the operation. In this manner system can translate stored information into coordinated activity among the various computing devices in system .

Management database may maintain information management policies and associated data although information management policies can be stored in computer memory at any appropriate location outside management database . For instance an information management policy such as a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore or other information management operations depending on the embodiment. Information management policies are described further below. According to certain embodiments management database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding subclient data were protected and where the secondary copies are stored and which media agent performed the secondary storage . This and other metadata may additionally be stored in other locations such as at secondary storage computing device or on the secondary storage device allowing data recovery without the use of storage manager in some cases. Thus management database may comprise data needed to kick off secondary copy operations e.g. storage policies status and reporting information about completed jobs e.g. status on yesterday s backup jobs and additional information sufficient to enable restore and disaster recovery operations e.g. media agent associations location indexing content indexing etc. 

Storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs. These are described further below.

Jobs agent in some embodiments initiates controls and or monitors the status of some or all information management operations previously performed currently being performed or scheduled to be performed by system . A job may be a logical grouping of information management operations such as generating backup copies of a primary data subclient at a certain time every day. Thus jobs agent may access information management policies e.g. in management database to determine when and how to initiate control jobs in system .

User interface may include information processing and display software such as a graphical user interface GUI an application program interface API and or other interactive interface s through which users and system processes can retrieve information about the status of information management operations or issue instructions to system and or its constituent components. Via user interface users may issue instructions to the components in system regarding performance of secondary copy and recovery operations. For example a user may modify a schedule concerning the number of pending secondary copy operations. As another example a user may employ the GUI to view the status of pending secondary copy jobs or to monitor the status of certain components in system e.g. the amount of capacity left in a storage device . Storage manager may track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user by interacting with user interface .

Various embodiments of information management system may be configured and or designed to generate user interface data useable for rendering the various interactive user interfaces described. The user interface data may be used by system and or by another system device and or software program for example a browser program to render the interactive user interfaces. The interactive user interfaces may be displayed on for example electronic displays including for example touch enabled displays consoles etc. whether direct connected to storage manager or communicatively coupled remotely e.g. via an internet connection. The present disclosure describes various embodiments of interactive and dynamic user interfaces some of which may be generated by user interface agent and which are the result of significant technological development. The user interfaces described herein may provide improved human computer interactions allowing for significant cognitive and ergonomic efficiencies and advantages over previous systems including reduced mental workloads improved decision making and the like. User interface may operate in a single integrated view or console not shown . The console may support a reporting capability for generating a variety of reports which may be tailored to a particular aspect of information management.

User interfaces are not exclusive to storage manager and in some embodiments a user may access information locally from a computing device component of system . For example some information pertaining to installed data agents and associated data streams may be available from client computing device . Likewise some information pertaining to media agents and associated data streams may be available from secondary storage computing device .

Management agent can provide storage manager with the ability to communicate with other components within information management system and or with other information management cells via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs.

Management agent also allows multiple information management cells to communicate with one another. For example system in some cases may be one information management cell in a network of multiple cells adjacent to one another or otherwise logically related e.g. in a WAN or LAN. With this arrangement the cells may communicate with one another through respective management agents . Inter cell communication and hierarchy is described in greater detail in e.g. U.S. Pat. No. 7 343 453.

An information management cell or storage operation cell or cell may generally include a logical and or physical grouping of a combination of hardware and software components associated with performing information management operations on electronic data typically one storage manager and at least one data agent executing on a client computing device and at least one media agent executing on a secondary storage computing device . For instance the components shown in may together form an information management cell. Thus in some configurations a system may be referred to as an information management cell. A given cell may be identified by the identity of its storage manager which is generally responsible for managing the cell.

Multiple cells may be organized hierarchically so that cells may inherit properties from hierarchically superior cells or be controlled by other cells in the hierarchy automatically or otherwise . Alternatively in some embodiments cells may inherit or otherwise be associated with information management policies preferences information management operational parameters or other properties or characteristics according to their relative position in a hierarchy of cells. Cells may also be organized hierarchically according to function geography architectural considerations or other factors useful or desirable in performing information management operations. For example a first cell may represent a geographic segment of an enterprise such as a Chicago office and a second cell may represent a different geographic segment such as a New York City office. Other cells may represent departments within a particular office e.g. human resources finance engineering etc. Where delineated by function a first cell may perform one or more first types of information management operations e.g. one or more first types of secondary copies at a certain frequency and a second cell may perform one or more second types of information management operations e.g. one or more second types of secondary copies at a different frequency and under different retention rules . In general the hierarchical information is maintained by one or more storage managers that manage the respective cells e.g. in corresponding management database s .

A variety of different applications can operate on a given client computing device including operating systems file systems database applications e mail applications and virtual machines just to name a few. And as part of the process of creating and restoring secondary copies the client computing device may be tasked with processing and preparing the primary data generated by these various applications . Moreover the nature of the processing preparation can differ across application types e.g. due to inherent structural state and formatting differences among applications and or the operating system of client computing device . Each data agent is therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

Data agent is a component of information system and is generally directed by storage manager in creating or restoring secondary copies . Data agent may be a software program e.g. a set of executable binary files that executes on the same client computing device as the associated application that data agent is configured to protect. Data agent is generally responsible for managing initiating or otherwise assisting in the performance of information management operations in reference to its associated application s and corresponding primary data which is generated accessed by the particular application s . For instance data agent may take part in copying archiving migrating and or replicating of primary data stored in the primary storage device s . Data agent may receive control information from storage manager such as commands to transfer copies of data objects and or metadata to one or more media agents . Data agent also may compress deduplicate and encrypt primary data before transmitting it to media agent . Data agent also may receive instructions from storage manager to restore or assist in restoring a secondary copy from secondary storage device to primary storage such that the restored data may be accessed by application .

Each data agent may be specialized for a particular application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data. A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data a specialized data agent may be used for each data type. For example to backup migrate and or restore all of the data on a Microsoft Exchange server the client computing device may use a Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes a Microsoft Exchange Database data agent to back up the Exchange databases a Microsoft Exchange Public Folder data agent to back up the Exchange Public Folders and a Microsoft Windows File System data agent to back up the file system of client computing device . In such embodiments these specialized data agents may be treated as four separate data agents even though they operate on the same client computing device . Other examples may include archive management data agents such as a migration archiver or a compliance archiver Quick Recovery agents and continuous data replication agents. Application specific data agents can provide improved performance as compared to generic agents. For instance because application specific data agents may only handle data for a single software application the design of the data agent can be streamlined. The data agent may therefore execute faster and consume less persistent storage and or operating memory than data agents designed to generically accommodate multiple different software applications .

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with data agent and its host client computing device and process the data appropriately. For example during a secondary copy operation data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata.

In some embodiments a data agent may be distributed between client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by media agent . Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

As noted off loading certain responsibilities from client computing devices to intermediate components such as secondary storage computing device s and corresponding media agent s can provide a number of benefits including improved performance of client computing device faster information management operations and enhanced scalability. In one example which will be discussed further below media agent can act as a local cache of recently copied data and or metadata that it stored to secondary storage device s thus improving restore capabilities and performance.

Media agent is a component of information system and is generally directed by storage manager in creating or restoring secondary copies . Whereas storage manager generally manages information management system media agent provides a portal to secondary storage devices . Media agent may be a software program e.g. a set of executable binary files that executes on a secondary storage computing device . Media agent generally manages coordinates and facilitates the transmission of data between a client computing device executing a data agent and secondary storage device s . For instance other components in the system may interact with media agent to gain access to data stored on secondary storage device s e.g. to browse read write modify delete or restore data . Moreover media agents can generate and store information relating to characteristics of the stored data and or metadata or can generate and store other types of information that generally provides insight into the contents of the secondary storage devices generally referred to as indexing of the stored secondary copies .

Media agents can comprise separate nodes of system e.g. nodes that are separate from client computing devices storage manager and or secondary storage devices . In general a node can be a logically and or physically separate component and in some cases is a component that is individually addressable or otherwise identifiable. In addition each media agent may operate on a dedicated secondary storage computing device while in other embodiments a plurality of media agents may operate on the same secondary storage computing device .

A media agent may be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device coordinating the retrieval of data from the particular secondary storage device and modifying and or deleting data retrieved from the particular secondary storage device . Media agent in certain embodiments is physically separate from the associated secondary storage device . For instance a media agent may operate on a secondary storage computing device in a distinct housing package and or location from the associated secondary storage device . In one example a media agent operates on a first server computer and is in communication with a secondary storage device s operating in a separate rack mounted RAID based system.

A media agent associated with a particular secondary storage device may instruct secondary storage device to perform an information management task. For instance a media agent may instruct a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring data to a client computing device . As another example a secondary storage device may include an array of hard disk drives or solid state drives organized in a RAID configuration and media agent may forward a logical unit number LUN and other appropriate information to the array which uses the received information to execute the desired secondary copy operation. Media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

Each media agent may maintain an associated media agent database . Media agent database may be stored to a disk or other storage device not shown that is local to the secondary storage computing device on which media agent operates. In other cases media agent database is stored separately from the host secondary storage computing device . Media agent database can include among other things a media agent index see e.g. . In some cases media agent index does not form a part of and is instead separate from media agent database .

Media agent index or index may be a data structure associated with the particular media agent that includes information about the stored data associated with the particular media agent and which may be generated in the course of performing a secondary copy operation or a restore. Index provides a fast and efficient mechanism for locating browsing secondary copies or other data stored in secondary storage devices without having to access secondary storage device to retrieve the information from there. For instance for each secondary copy index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a logical path to the secondary copy on the corresponding secondary storage device location information e.g. offsets indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus index includes metadata associated with the secondary copies that is readily available for use from media agent . In some embodiments some or all of the information in index may instead or additionally be stored along with secondary copies in secondary storage device . In some embodiments a secondary storage device can include sufficient information to enable a bare metal restore where the operating system and or software applications of a failed client computing device or another target may be automatically restored without manually reinstalling individual software packages including operating systems .

Because index may operate as a cache it can also be referred to as an index cache. In such cases information stored in index cache typically comprises data that reflects certain particulars about relatively recent secondary copy operations. After some triggering event such as after some time elapses or index cache reaches a particular size certain portions of index cache may be copied or migrated to secondary storage device e.g. on a least recently used basis. This information may be retrieved and uploaded back into index cache or otherwise restored to media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on storage device s .

In some alternative embodiments media agent generally acts as a coordinator or facilitator of secondary copy operations between client computing devices and secondary storage devices but does not actually write the data to secondary storage device . For instance storage manager or media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case client computing device transmits data directly or via one or more intermediary components to secondary storage device according to the received instructions and vice versa. Media agent may still receive process and or maintain metadata related to the secondary copy operations i.e. may continue to build and maintain index . In these embodiments payload data can flow through media agent for the purposes of populating index but not for writing to secondary storage device .

Media agent and or other components such as storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of system can be distributed amongst various physical and or logical components. For instance one or more of storage manager data agents and media agents may operate on computing devices that are physically separate from one another. This architecture can provide a number of benefits. For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which media agents operate can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly client computing device s can be selected to effectively service applications in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components of information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in management database is relatively large database may be migrated to or may otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of storage manager . This distributed configuration can provide added protection because database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of storage manager . Database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss at the primary site. Or database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host computing device can no longer service the needs of a growing system .

The distributed architecture also provides scalability and efficient component utilization. shows an embodiment of information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents . Additional components can be added or subtracted based on the evolving needs of system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage computing devices and or secondary storage devices . Moreover where multiple fungible components are available load balancing can be implemented to dynamically address identified bottlenecks. As an example storage manager may dynamically select which media agents and or secondary storage devices to use for storage operations based on a processing load analysis of media agents and or secondary storage devices respectively.

Where system includes multiple media agents see e.g. a first media agent may provide failover functionality for a second failed media agent . In addition media agents can be dynamically selected to provide load balancing. Each client computing device can communicate with among other components any of the media agents e.g. as directed by storage manager . And each media agent may communicate with among other components any of secondary storage devices e.g. as directed by storage manager . Thus operations can be routed to secondary storage devices in a dynamic and highly flexible manner to provide load balancing failover etc. Further examples of scalable systems capable of dynamic storage operations load balancing and failover are provided in U.S. Pat. No. 7 246 207.

While distributing functionality amongst multiple computing devices can have certain advantages in other contexts it can be beneficial to consolidate functionality on the same computing device. In alternative configurations certain components may reside and execute on the same computing device. As such in other embodiments one or more of the components shown in may be implemented on the same computing device. In one configuration a storage manager one or more data agents and or one or more media agents are all implemented on the same computing device. In other embodiments one or more data agents and one or more media agents are implemented on the same computing device while storage manager is implemented on a separate computing device etc. without limitation.

In order to protect and leverage stored data system can be configured to perform a variety of information management operations which may also be referred to in some cases as storage management operations or storage operations. These operations can generally include i data movement operations ii processing and data manipulation operations and iii analysis reporting and management operations.

Data movement operations are generally operations that involve the copying or migration of data between different locations in system . For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from one or more first storage devices to one or more second storage devices such as from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s from secondary storage devices to primary storage devices or from primary storage device s to different primary storage device s or in some cases within the same primary storage device such as within a storage array.

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication snapshot operations deduplication or single instancing operations auxiliary copy operations disaster recovery copy operations and the like. As will be discussed some of these operations do not necessarily create distinct copies. Nonetheless some or all of these operations are generally referred to as secondary copy operations for simplicity. Data movement also comprises restoring secondary copies.

A backup operation creates a copy of a version of primary data at a particular point in time e.g. one or more files or other data units . Each subsequent backup copy which is a form of secondary copy may be maintained independently of the first. A backup generally involves maintaining a version of the copied primary data as well as backup copies . Further a backup copy in some embodiments is generally stored in a form that is different from the native format e.g. a backup format. This contrasts to the version in primary data which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original native application format. For example a backup copy may be stored in a compressed backup format that facilitates efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data which is generally highly changeable. Backup copies may be stored on media with slower retrieval times than primary storage device . Some backup copies may have shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may be stored at an offsite location.

Backup operations can include full backups differential backups incremental backups synthetic full backups and or creating a reference copy. A full backup or standard full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

A differential backup operation or cumulative incremental backup operation tracks and stores changes that occurred since the last full backup. Differential backups can grow quickly in size but can restore relatively efficiently because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restoring can be lengthy compared to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Synthetic full backups generally consolidate data without directly backing up data from the client computing device. A synthetic full backup is created from the most recent full backup i.e. standard or synthetic and subsequent incremental and or differential backups. The resulting synthetic full backup is identical to what would have been created had the last backup for the subclient been a standard full backup. Unlike standard full incremental and differential backups however a synthetic full backup does not actually transfer data from primary storage to the backup media because it operates as a backup consolidator. A synthetic full backup extracts the index data of each participating subclient. Using this index data and the previously backed up user data images it builds new full backup images e.g. bitmaps one for each subclient. The new backup images consolidate the index and user data stored in the related incremental differential and previous full backups into a synthetic backup file that fully represents the subclient e.g. via pointers but does not comprise all its constituent data.

Any of the above types of backup operations can be at the volume level file level or block level. Volume level backup operations generally involve copying of a data volume e.g. a logical disk or partition as a whole. In a file level backup information management system generally tracks changes to individual files and includes copies of files in the backup copy. For block level backups files are broken into constituent blocks and changes are tracked at the block level. Upon restore system reassembles the blocks into files in a transparent fashion. Far less data may actually be transferred and copied to secondary storage devices during a file level copy than a volume level copy. Likewise a block level copy may transfer less data than a file level copy resulting in faster execution. However restoring a relatively higher granularity copy can result in longer restore times. For instance when restoring a block level copy the process of locating constituent blocks can sometimes take longer than restoring file level backups.

A reference copy may comprise copy ies of selected objects from backed up data typically to help organize data by keeping contextual information from multiple sources together and or help retain specific data for a longer period of time such as for legal hold needs. A reference copy generally maintains data integrity and when the data is restored it may be viewed in the same format as the source data. In some embodiments a reference copy is based on a specialized client individual subclient and associated information management policies e.g. storage policy retention policy etc. that are administered within system .

Because backup operations generally involve maintaining a version of the copied primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To reduce storage consumption an archive operation according to certain embodiments creates an archive copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size may be removed from source storage. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the format of the original application or source copy. In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Archiving can also serve the purpose of freeing up space in primary storage device s and easing the demand on computational resources on client computing device . Similarly when a secondary copy is archived the archive copy can therefore serve the purpose of freeing up space in the source secondary storage device s . Examples of data archiving operations are provided in U.S. Pat. No. 7 107 298.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of primary data at a given point in time and may include state and or status information relative to an application that creates manages primary data . In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A hardware snapshot or hardware based snapshot operation can be a snapshot operation where a target storage device e.g. a primary storage device or a secondary storage device performs the snapshot operation in a self contained fashion substantially independently using hardware firmware and or software operating on the storage device itself. For instance the storage device may perform snapshot operations generally without intervention or oversight from any of the other components of the system e.g. a storage array may generate an array created hardware snapshot and may also manage its storage integrity versioning etc. In this manner hardware snapshots can off load other components of system from processing involved in creating and managing snapshots.

A software snapshot or software based snapshot operation on the other hand can be a snapshot operation in which one or more other components in information management system e.g. client computing devices data agents etc. implement a software layer that manages the snapshot operation via interaction with the target storage device. For instance the component executing the snapshot management software layer may derive a set of pointers and or data that represents the snapshot. The snapshot management software layer may then transmit the same to the target storage device along with appropriate instructions for writing the snapshot. One example of a software snapshot product may be Microsoft Volume Snapshot Service VSS which is part of the Microsoft Windows operating system.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. to specific disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or from an application. In some other cases the snapshot may be created at the block level such that creation of the snapshot occurs without awareness of the file system. Each pointer points to a respective stored data block so that collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at the particular point in time when the snapshot copy was created.

An initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories change later on. Furthermore when files change typically only the pointers which map to blocks are copied not the blocks themselves. For example for copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage and the pointer to that block is changed to reflect the new location of that block. The snapshot mapping of file system data may also be updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored or substantially immediately copied to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments secondary copy operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data were the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits. Based on known good state information system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262.

Deduplication or single instance storage is useful to reduce the amount of non primary data. For instance some or all of the above described secondary copy operations can involve deduplication in some fashion. New data is read broken down into data portions of a selected granularity e.g. sub file level blocks files etc. compared with corresponding portions that are already in secondary storage and only new portions are stored. Portions that already exist are represented as pointers to the already stored data. Thus a deduplicated secondary copy may comprise actual data portions copied from primary data and may further comprise pointers to already stored data which is generally more storage efficient than a full copy.

In order to streamline the comparison process information management system may calculate and or store signatures e.g. hashes or cryptographically unique IDs corresponding to the individual data portions in the source data and compare the signatures instead of comparing entire data portions. In some cases only a single instance of each data portion is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication operations can store more than one instance of certain data portions but nonetheless significantly reduce stored data redundancy. Depending on the embodiment deduplication portions such as data blocks can be of fixed or variable length. Using variable length blocks can enhance deduplication by responding to changes in the data stream but can involve complex processing. In some cases system utilizes a technique for dynamically aligning deduplication blocks based on changing content in the data stream as described in U.S. Pat. No. 8 364 652.

Information management system can perform deduplication in a variety of manners at a variety of locations. For instance in some embodiments system implements target side deduplication by deduplicating data at the media agent after being received from data agent . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826. Instead of or in combination with target side deduplication deduplication can also be performed on the source side or client side e.g. to reduce the amount of data to be transmitted by data agent to media agent . Storage manager may communicate with other components within system via network protocols and cloud service provider APIs to facilitate cloud based deduplication single instancing as exemplified in U.S. Pat. Pub. No. 2012 0150818. Some other deduplication single instancing techniques are described in U.S. Pat. Pub. Nos. 2006 0224846 and 2009 0319534.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation which generally automatically moves data between classes of storage devices such as from high cost to low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time. In some embodiments an HSM operation is similar to archiving in that creating an HSM copy may though not always involve deleting some of the source data e.g. according to one or more criteria related to the source data. For example an HSM copy may include primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold. Often and unlike some types of archive copies HSM data that is removed or aged from the source is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device or other source storage device such as a secondary storage device to replace the deleted source data and to point to or otherwise indicate the new location in another secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to HSM data that has been removed or migrated system uses the stub to locate the data and may make recovery of the data appear transparent even though the HSM data may be stored at a location different from other source data. In this manner the data appears to the user e.g. in file system browsing windows and the like as if it still resides in the source location e.g. in a primary storage device . The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. compressed encrypted deduplicated and or otherwise modified . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies . Examples of HSM and ILM techniques are provided in U.S. Pat. No. 7 343 453.

An auxiliary copy is generally a copy of an existing secondary copy . For instance an initial secondary copy may be derived from primary data or from data residing in secondary storage subsystem whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies provide additional standby copies of data and may reside on different secondary storage devices than the initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195.

Information management system may also make and retain disaster recovery copies often as secondary high availability disk copies. System may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

Data manipulation and processing may include encryption and compression as well as integrity marking and checking formatting for transmission formatting for storage etc. Data may be manipulated client side by data agent as well as target side by media agent in the course of creating secondary copy .

Information management system in some cases is configured to process data e.g. files or other data objects primary data secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security. System in some cases encrypts the data at the client level such that client computing devices e.g. data agents encrypt the data prior to transferring it to other components e.g. before sending the data to media agents during a secondary copy operation. In such cases client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when media agent creates auxiliary copies or archive copies. Encryption may be applied in creating a secondary copy of a previously unencrypted secondary copy without limitation. In further embodiments secondary storage devices can implement built in high performance hardware based encryption.

Similar to encryption system may also or alternatively compress data in the course of generating a secondary copy . Compression encodes information such that fewer bits are needed to represent the information as compared to the original representation. Compression techniques are well known in the art. Compression operations may apply one or more data compression algorithms. Compression may be applied in creating a secondary copy of a previously uncompressed secondary copy e.g. when making archive copies or disaster recovery copies. The use of compression may result in metadata that specifies the nature of the compression so that data may be uncompressed on restore if appropriate.

Data analysis reporting and management operations can differ from data movement operations in that they do not necessarily involve copying migration or other transfer of data between different locations in the system. For instance data analysis operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data analysis operations are performed in conjunction with data movement operations. Some data analysis operations include content indexing operations and classification operations which can be useful in leveraging the data under management to provide enhanced search and other features. Other data analysis operations such as compression and encryption can provide data reduction and security benefits respectively.

In some embodiments information management system analyzes and indexes characteristics content and metadata associated with primary data online content indexing and or secondary copies off line content indexing . Content indexing can identify files or other data objects based on content e.g. user defined keywords or phrases other keywords phrases that are not defined by a user etc. and or metadata e.g. email metadata such as to from cc bcc attachment name received time etc. . Content indexes may be searched and search results may be restored.

Information management system generally organizes and catalogues the results into a content index which may be stored within media agent database for example. The content index can also include the storage locations of or pointer references to indexed data in primary data or secondary copies as appropriate. The results may also be stored elsewhere in system e.g. in primary storage device or in secondary storage device . Such content index data provides storage manager or other components with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria thus greatly increasing the search speed capability of system . For instance search criteria can be specified by a user through user interface of storage manager . Moreover when system analyzes data and or metadata in secondary copies to create an off line content index this operation has no significant impact on the performance of client computing devices and thus does not take a toll on the production environment. Examples of content indexing techniques are provided in U.S. Pat. No. 8 170 995.

One or more components such as a content index engine can be configured to scan data and or associated metadata for classification purposes to populate a database or other data structure of information which can be referred to as a data classification database or a metabase. Depending on the embodiment the data classification database s can be organized in a variety of different ways including centralization logical sub divisions and or physical sub divisions. For instance one or more data classification databases may be associated with different subsystems or tiers within system . As an example there may be a first metabase associated with primary storage subsystem and a second metabase associated with secondary storage subsystem . In other cases there may be one or more metabases associated with individual components e.g. client computing devices and or media agents . In some embodiments a data classification database may reside as one or more data structures within management database or may be otherwise associated with storage manager or may reside as a separate component.

In some cases metabase s may be included in separate database s and or on separate storage device s from primary data and or secondary copies such that operations related to the metabase s do not significantly impact performance on other components of information management system . In other cases metabase s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with identifiers e.g. tag entries etc. to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations. For instance a metabase can dramatically improve the speed with which the information management system can search through and identify data as compared to other approaches which can involve scanning an entire file system. Examples of metabases and data classification operations are provided in U.S. Pat. Nos. 7 734 669 and 7 747 579.

Certain embodiments leverage the integrated ubiquitous nature of information management system to provide useful system wide management and reporting functions. Operations management can generally include monitoring and managing the health and performance of system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like. As an example storage manager or other component in system may analyze traffic patterns and suggest and or automatically route data to minimize congestion. In some embodiments the system can generate predictions relating to storage operations or storage operation information. Such predictions which may be based on a trending analysis may predict various network operations or resource usage such as network traffic levels storage media use use of bandwidth of communication links use of media agent components etc. Further examples of traffic analysis trend analysis prediction generation and the like are described in U.S. Pat. No. 7 343 453.

In some configurations having a hierarchy of storage operation cells a master storage manager may track the status of subordinate cells such as the status of jobs system components system resources and other items by communicating with storage managers or other components in the respective storage operation cells. Moreover the master storage manager may also track status by receiving periodic status updates from the storage managers or other components in the respective cells regarding jobs system components system resources and other items. In some embodiments a master storage manager may store status information and other information regarding its associated storage operation cells and other system information in its management database and or index or in another location . The master storage manager or other component may also determine whether certain storage related or other criteria are satisfied and may perform an action or trigger event e.g. data migration in response to the criteria being satisfied such as where a storage threshold is met for a particular volume or where inadequate protection exists for certain data. For instance data from one or more storage operation cells is used to dynamically and automatically mitigate recognized risks and or to advise users of risks or suggest actions to mitigate these risks. For example an information management policy may specify certain requirements e.g. that a storage device should maintain a certain amount of free space that secondary copies should occur at a particular interval that data should be aged and migrated to other storage after a particular period that data on a secondary volume should always have a certain level of availability and be restorable within a given time period that data on a secondary volume may be mirrored or otherwise migrated to a specified number of other volumes etc. . If a risk condition or other criterion is triggered the system may notify the user of these conditions and may suggest or automatically implement a mitigation action to address the risk. For example the system may indicate that data from a primary copy should be migrated to a secondary storage device to free space on primary storage device . Examples of the use of risk factors and other triggering criteria are described in U.S. Pat. No. 7 343 453.

In some embodiments system may also determine whether a metric or other indication satisfies particular storage criteria sufficient to perform an action. For example a storage policy or other definition might indicate that a storage manager should initiate a particular action if a storage metric or other indication drops below or otherwise fails to satisfy specified criteria such as a threshold of data protection. In some embodiments risk factors may be quantified into certain measurable service or risk levels. For example certain applications and associated data may be considered to be more important relative to other data and services. Financial compliance data for example may be of greater importance than marketing materials etc. Network administrators may assign priority values or weights to certain data and or applications corresponding to the relative importance. The level of compliance of secondary copy operations specified for these applications may also be assigned a certain value. Thus the health impact and overall importance of a service may be determined such as by measuring the compliance value and calculating the product of the priority value and the compliance value to determine the service level and comparing it to certain operational thresholds to determine whether it is acceptable. Further examples of the service level determination are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

System may additionally calculate data costing and data availability associated with information management operation cells. For instance data received from a cell may be used in conjunction with hardware related information and other information about system elements to determine the cost of storage and or the availability of particular data. Exemplary information generated could include how fast a particular department is using up available storage space how long data would take to recover over a particular pathway from a particular secondary storage device costs over time etc. Moreover in some embodiments such information may be used to determine or predict the overall cost associated with the storage of certain information. The cost associated with hosting a certain application may be based at least in part on the type of media on which the data resides for example. Storage devices may be assigned to a particular cost categories for example. Further examples of costing techniques are described in U.S. Pat. No. 7 343 453.

Any of the above types of information e.g. information related to trending predictions job cell or component status risk service level costing etc. can generally be provided to users via user interface in a single integrated view or console not shown . Report types may include scheduling event management media management and data aging. Available reports may also include backup history data aging history auxiliary copy history job history library and drive media in library restore history and storage policy etc. without limitation. Such reports may be specified and created at a certain point in time as a system analysis forecasting or provisioning tool. Integrated reports may also be generated that illustrate storage and performance metrics risks and storage costing information. Moreover users may create their own reports based on specific needs. User interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. As one example user interface may provide a graphical depiction of primary storage devices secondary storage devices data agents and or media agents and their relationship to one another in system .

In general the operations management functionality of system can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding secondary copy operations for system such as job status component status resource status e.g. communication pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like. Further examples are provided in U.S. Pat. No. 7 343 453.

Information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in secondary storage devices e.g. backups archives or other secondary copies . For example system may construct and maintain a virtual repository for data stored in system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

An information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy and or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a data structure or other information source that defines or includes information sufficient to determine a set of preferences or other criteria for performing information management operations. Storage policies can include one or more of the following 1 what data will be associated with the storage policy e.g. subclient 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of secondary copy operation to be performed and 5 retention information specifying how long the data will be retained at the destination see e.g. . Data associated with a storage policy can be logically organized into subclients which may represent primary data and or secondary copies . A subclient may represent static or dynamic associations of portions of a data volume. Subclients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location. Subclients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration subclients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different subclients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the subclients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the subclients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the subclient data. While information in the storage policy can be statically assigned in some cases some or all of the information in the storage policy can also be dynamically determined based on criteria which can be set forth in the storage policy. For instance based on such criteria a particular destination storage device s or other parameter of the storage policy may be determined based on characteristics associated with the data involved in a particular secondary copy operation device availability e.g. availability of a secondary storage device or a media agent network status and conditions e.g. identified bottlenecks user credentials and the like.

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data associated with the storage policy between the source and destination. A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Furthermore retention parameters can specify how long the resulting secondary copies will be kept e.g. a number of days months years etc. perhaps depending on organizational needs and or compliance criteria.

Another type of information management policy is a scheduling policy which specifies when and how often to perform operations. Scheduling parameters may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations are to take place. Scheduling policies in some cases are associated with particular components such as a subclient client computing device and the like.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protection operations quickly without awaiting human intervention. Thus in some embodiments system automatically applies a default configuration to client computing device . As one example when one or more data agent s are installed on a client computing device the installation script may register the client computing device with storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Another type of information management policy is an audit policy or security policy which comprises preferences rules and or criteria that protect sensitive data in information management system . For example an audit policy may define sensitive objects which are files or data objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. . An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local primary storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

Another type of information management policy is a provisioning policy which can include preferences priorities rules and or criteria that specify how client computing devices or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . Storage manager or other components may enforce the provisioning policy. For instance media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department may be adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies or operational parameters thereof. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items that information management policies may specify 

Information management policies can additionally specify or depend on historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and tape library B are off site and may be remotely located from the other components in system e.g. in a different city office building etc. . Indeed off site may refer to a magnetic tape located in remote storage which must be manually retrieved and loaded into a tape drive to be read. In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure at the main site s where data is stored.

The file system subclient A in certain embodiments generally comprises information generated by the file system and or operating system of client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail subclient B can include data generated by an e mail application operating on client computing device e.g. mailbox information folder information emails attachments associated database information and the like. As described above the subclients can be logical containers and the data included in the corresponding primary data A and B may or may not be stored contiguously.

The exemplary storage policy A includes backup copy preferences or rule set disaster recovery copy preferences or rule set and compliance copy preferences or rule set . Backup copy rule set specifies that it is associated with file system subclient and email subclient . Each of subclients and are associated with the particular client computing device . Backup copy rule set further specifies that the backup operation will be written to disk library A and designates a particular media agent A to convey the data to disk library A. Finally backup copy rule set specifies that backup copies created according to rule set are scheduled to be generated hourly and are to be retained for 30 days. In some other embodiments scheduling information is not included in storage policy A and is instead specified by a separate scheduling policy.

Disaster recovery copy rule set is associated with the same two subclients and . However disaster recovery copy rule set is associated with tape library B unlike backup copy rule set . Moreover disaster recovery copy rule set specifies that a different media agent namely B will convey data to tape library B. Disaster recovery copies created according to rule set will be retained for 60 days and will be generated daily. Disaster recovery copies generated according to disaster recovery copy rule set can provide protection in the event of a disaster or other catastrophic data loss that would affect the backup copy A maintained on disk library A.

Compliance copy rule set is only associated with the email subclient and not the file system subclient . Compliance copies generated according to compliance copy rule set will therefore not include primary data A from the file system subclient . For instance the organization may be under an obligation to store and maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to file system data. Compliance copy rule set is associated with the same tape library B and media agent B as disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally compliance copy rule set specifies that copies generated under compliance copy rule set will be retained for 10 years and will be generated quarterly.

A logical grouping of secondary copy operations governed by a rule set and being initiated at a point in time may be referred to as a secondary copy job and sometimes may be called a backup job even though it is not necessarily limited to creating backup copies. Secondary copy jobs may be initiated on demand as well. Steps below illustrate three secondary copy jobs based on storage policy A.

At step storage manager initiates a backup job according to the backup copy rule set which logically comprises all the secondary copy operations necessary to effectuate rules in storage policy A every hour including steps occurring hourly. For instance a scheduling service running on storage manager accesses backup copy rule set or a separate scheduling policy associated with client computing device and initiates a backup job on an hourly basis. Thus at the scheduled time storage manager sends instructions to client computing device i.e. to both data agent A and data agent B to begin the backup job.

At step file system data agent A and email data agent B operating on client computing device respond to the instructions received from storage manager by accessing and processing the respective subclient primary data A and B involved in the backup copy operation which can be found in primary storage device . Because the secondary copy operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data suitable for a backup copy.

At step client computing device e.g. using file system data agent A communicates the processed data to the first media agent A according to backup copy rule set as directed by storage manager . Storage manager may further keep a record in management database of the association between media agent A and one or more of client computing device file system data agent A and or backup copy A.

The target media agent A receives the data agent processed data from client computing device and at step generates and conveys backup copy A to disk library A to be stored as backup copy A again at the direction of storage manager and according to backup copy rule set . Media agent A can also update its index to include data and or metadata related to backup copy A such as information indicating where the backup copy A resides on disk library A data and metadata for cache retrieval etc. Storage manager may similarly update its index to include information relating to the secondary copy operation such as information relating to the type of operation a physical location associated with one or more copies created by the operation the time the operation was performed status information relating to the operation the components involved in the operation and the like. In some cases storage manager may update its index to include some or all of the information stored in index of media agent A. At this point the backup job may be considered complete. After the 30 day retention period expires storage manager instructs media agent A to delete backup copy A from disk library A and indexes and or are updated accordingly.

At step storage manager initiates another backup job according to the disaster recovery rule set . Illustratively this includes steps occurring daily for creating disaster recovery copy B. Disaster recovery copy B will be based on backup copy A and not on primary data A and B.

At step illustratively based on instructions received from storage manager at step the specified media agent B retrieves the most recent backup copy A from disk library A.

At step again at the direction of storage manager and as specified in disaster recovery copy rule set media agent B uses the retrieved data to create a disaster recovery copy B and store it to tape library B. In some cases disaster recovery copy B is a direct mirror copy of backup copy A and remains in the backup format. In other embodiments disaster recovery copy B may be generated in some other manner such as by using primary data A B from primary storage device as source data. The disaster recovery copy operation is initiated once a day and disaster recovery copies B are deleted after 60 days indexes and or are updated accordingly when after each information management operation is executed and or completed. The present backup job may be considered to be complete.

At step storage manager initiates another backup job according to compliance rule set which includes steps occurring quarterly for creating compliance copy C. For instance storage manager instructs media agent B to create compliance copy C on tape library B as specified in the compliance copy rule set .

At step in the example compliance copy C is generated using disaster recovery copy B as the source. In other embodiments compliance copy C is instead generated using primary data B corresponding to the email subclient or using backup copy A from disk library A as source data. As specified in the illustrated example compliance copies C are created quarterly and are deleted after ten years and indexes and or are kept up to date accordingly.

Storage manager may permit a user to specify aspects of storage policy A. For example the storage policy can be modified to include information governance policies to define how data should be managed in order to comply with a certain regulation or business objective. The various policies may be stored for example in management database . An information governance policy may align with one or more compliance tasks that are imposed by regulations or business requirements. Examples of information governance policies might include a Sarbanes Oxley policy a HIPAA policy an electronic discovery e discovery policy and so on.

Information governance policies allow administrators to obtain different perspectives on an organization s online and offline data without the need for a dedicated data silo created solely for each different viewpoint. As described previously the data storage systems herein build an index that reflects the contents of a distributed data set that spans numerous clients and storage devices including both primary data and secondary copies and online and offline copies. An organization may apply multiple information governance policies in a top down manner over that unified data set and indexing schema in order to view and manipulate the data set through different lenses each of which is adapted to a particular compliance or business goal. Thus for example by applying an e discovery policy and a Sarbanes Oxley policy two different groups of users in an organization can conduct two very different analyses of the same underlying physical set of data copies which may be distributed throughout the information management system.

An information governance policy may comprise a classification policy which defines a taxonomy of classification terms or tags relevant to a compliance task and or business objective. A classification policy may also associate a defined tag with a classification rule. A classification rule defines a particular combination of criteria such as users who have created accessed or modified a document or data object file or application types content or metadata keywords clients or storage locations dates of data creation and or access review status or other status within a workflow e.g. reviewed or un reviewed modification times or types of modifications and or any other data attributes in any combination without limitation. A classification rule may also be defined using other classification tags in the taxonomy. The various criteria used to define a classification rule may be combined in any suitable fashion for example via Boolean operators to define a complex classification rule. As an example an e discovery classification policy might define a classification tag privileged that is associated with documents or data objects that 1 were created or modified by legal department staff or 2 were sent to or received from outside counsel via email or 3 contain one of the following keywords privileged or attorney or counsel or other like terms. Accordingly all these documents or data objects will be classified as privileged. 

One specific type of classification tag which may be added to an index at the time of indexing is an entity tag. An entity tag may be for example any content that matches a defined data mask format. Examples of entity tags might include e.g. social security numbers e.g. any numerical content matching the formatting mask XXX XX XXXX credit card numbers e.g. content having a 13 16 digit string of numbers SKU numbers product numbers etc. A user may define a classification policy by indicating criteria parameters or descriptors of the policy via a graphical user interface such as a form or page with fields to be filled in pull down menus or entries allowing one or more of several options to be selected buttons sliders hypertext links or other known user interface tools for receiving user input etc. For example a user may define certain entity tags such as a particular product number or project ID code that is relevant in the organization. In some implementations the classification policy can be implemented using cloud based techniques. For example the storage devices may be cloud storage devices and the storage manager may execute cloud service provider API over a network to classify data stored on cloud storage devices.

While not shown in at some later point in time a restore operation can be initiated involving one or more of secondary copies A B C. A restore operation logically takes a selected secondary copy reverses the effects of the secondary copy operation that created it and stores the restored data to primary storage where a client computing device may properly access it as primary data. A media agent and an appropriate data agent e.g. executing on the client computing device perform the tasks needed to complete a restore operation. For example data that was encrypted compressed and or deduplicated in the creation of secondary copy will be correspondingly rehydrated reversing deduplication uncompressed and unencrypted into a format appropriate to primary data. In general restored data should be indistinguishable from other primary data . Preferably the restored data has fully regained the native format that may make it immediately usable by application .

As one example a user may manually initiate a restore of backup copy A e.g. by interacting with user interface of storage manager or with a web based console with access to system . Storage manager may accesses data in its index and or management database and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A where the secondary copy resides. The user may be presented with a representation e.g. stub thumbnail listing etc. and metadata about the selected secondary copy in order to determine whether this is the appropriate copy to be restored e.g. date that the original primary data was created. Storage manager will then instruct media agent A and an appropriate data agent to restore secondary copy A to primary storage device . A media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent e.g. A retrieves secondary copy A from disk library A. For instance media agent A may access its index to identify a location of backup copy A on disk library A or may access location information residing on disk library A itself.

In some cases when backup copy A was recently created or accessed caching may speed up the restore operation. In such a case media agent A accesses a cached version of backup copy A residing in index without having to access disk library A for some or all of the data. Once it has retrieved backup copy A the media agent A communicates the data to the requesting client computing device . Upon receipt file system data agent A and email data agent B may unpackage e.g. restore from a backup format to the native application format the data in backup copy A and restore the unpackaged data to primary storage device . In general secondary copies may be restored to the same volume or folder in primary storage device from which the secondary copy was derived to another storage location or client computing device to shared storage. In some cases the data may be restored so that it may be used by an application of a different version vintage from the application that created the original primary data .

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to one or more secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices. Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation media agent storage manager or other component may divide files into chunks and generate headers for each chunk by processing the files. The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with secondary copy on secondary storage device the chunk headers can also be stored to index of the associated media agent s and or to index associated with storage manager . This can be useful in some cases for providing faster processing of secondary copies during browsing restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to media agent and or storage manager which may update their respective indexes accordingly. During restore chunks may be processed e.g. by media agent according to the information in the chunk header to reassemble the files.

Data can also be communicated within system in data channels that connect client computing devices to secondary storage devices . These data channels can be referred to as data streams and multiple data streams can be employed to parallelize an information management operation improving data transfer rate among other advantages. Example data formatting techniques including techniques involving data streaming chunking and the use of other data structures in creating secondary copies are described in U.S. Pat. Nos. 7 315 923 8 156 086 and 8 578 120.

Referring to data stream has the stream header and stream payload aligned into multiple data blocks. In this example the data blocks are of size 64 KB. The first two stream header and stream payload pairs comprise a first data block of size 64 KB. The first stream header indicates that the length of the succeeding stream payload is 63 KB and that it is the start of a data block. The next stream header indicates that the succeeding stream payload has a length of 1 KB and that it is not the start of a new data block. Immediately following stream payload is a pair comprising an identifier header and identifier data . The identifier header includes an indication that the succeeding identifier data includes the identifier for the immediately previous data block. The identifier data includes the identifier that the data agent generated for the data block. The data stream also includes other stream header and stream payload pairs which may be for SI data and or non SI data.

As an example data structures illustrated in may have been created as a result of separate secondary copy operations involving two client computing devices . For example a first secondary copy operation on a first client computing device could result in the creation of the first chunk folder and a second secondary copy operation on a second client computing device could result in the creation of the second chunk folder . Container files in the first chunk folder would contain the blocks of SI data of the first client computing device . If the two client computing devices have substantially similar data the second secondary copy operation on the data of the second client computing device would result in media agent storing primarily links to the data blocks of the first client computing device that are already stored in the container files . Accordingly while a first secondary copy operation may result in storing nearly all of the data subject to the operation subsequent secondary storage operations involving similar data may result in substantial data storage space savings because links to already stored data blocks can be stored instead of additional instances of data blocks.

If the operating system of the secondary storage computing device on which media agent operates supports sparse files then when media agent creates container files it can create them as sparse files. A sparse file is a type of file that may include empty space e.g. a sparse file may have real data within it such as at the beginning of the file and or at the end of the file but may also have empty space in it that is not storing actual data such as a contiguous range of bytes all having a value of zero . Having container files be sparse files allows media agent to free up space in container files when blocks of data in container files no longer need to be stored on the storage devices. In some examples media agent creates a new container file when a container file either includes 100 blocks of data or when the size of the container file exceeds 50 MB. In other examples media agent creates a new container file when a container file satisfies other criteria e.g. it contains from approximately 100 to approximately 1000 blocks or when its size exceeds approximately 50 MB to 1 GB . In some cases a file on which a secondary copy operation is performed may comprise a large number of data blocks. For example a 100 MB file may comprise 400 data blocks of size 256 KB. If such a file is to be stored its data blocks may span more than one container file or even more than one chunk folder. As another example a database file of 20 GB may comprise over 40 000 data blocks of size 512 KB. If such a database file is to be stored its data blocks will likely span multiple container files multiple chunk folders and potentially multiple volume folders. Restoring such files may require accessing multiple container files chunk folders and or volume folders to obtain the requisite data blocks.

Moreover depending on the embodiment the system of may additionally include any of the other components shown in for example that are not specifically shown in . The system may include one or more of each component. All components of the system can be in direct communication with each other or communicate indirectly via the client computing device the storage manager the media agent or the like. In certain embodiments some of the components in shown as separate components can reside on a single computing device or vice versa.

Generally data of an organization is backed up or archived according to one or more storage policies. For example a storage policy ies may apply to files that meet the criteria defined in the storage policy ies . In some cases the user may have better knowledge of how a file should be stored in secondary storage. For example the user can recognize that certain types of files e.g. accounting related emails or documents should be kept for at least a specific period of time. In such cases it can be useful for the user to indicate to the system how the files should be handled when performing secondary storage operations such as a backup or archiving operation. Accordingly the information management system may provide secondary storage operation instruction tags that define rules for storage operations which should be performed with respect to the tagged data. These secondary storage operation instruction tags may be referred to as smart tags or tags to facilitate discussion. The users can tag files with appropriate smart tags and the files can be processed according to the smart tags during secondary storage operations.

With further reference to the interaction between the various components of the exemplary information management system will now be described in greater detail with respect to data flow steps indicated by the numbered arrows. Certain details relating to smart tags are further explained with respect to .

At data flow step the user tags data in primary storage with one or more smart tags. The user may be a system administrator a user of an application etc. Data may be generated by one or more applications and may be stored in one or more storage devices such as the information store . Data could be in the form of one or more files . An application may have one or more data agents associated with it. In some embodiments a data agent is associated with multiple applications . A client computing device can have one or more applications installed on the client computing device . A client computing device may also have one or more data agents installed on the client computing device .

The system may provide one or more smart tags e.g. defined by a system administrator. A smart tag can have corresponding rules that specify which storage operation s need to be performed on data tagged by the smart tag. For example a smart tag can specify how long data should be retained how long data should be archived for whether data should be pruned from primary storage whether to make an additional copy of data in secondary storage whether data is eligible to be copied to a different type of media e.g. tape within secondary storage etc. The system can provide different types or categories of smart tags such as long term retention tags archiving tags sharing tags tags with user defined rules etc. Smart tags can be applied to emails files folders etc.

According to certain aspects smart tags are distinguished from metadata generated by the applications . For example a file generated by an application has corresponding metadata generated by the application . The smart tags are added after the creation of the file and are above and beyond the metadata generated by the native application . Smart tags also add another layer of control above and beyond storage policies. Although one or more storage policies may be applicable to data the smart tags can override the storage policies as explained below. The smart tags can apply to a different subset of data from the storage policies. For instance storage policies may apply to one subset of files and smart tags may apply to another subset of files. The subsets may or may not have an overlap depending on the embodiment. Certain details relating to applying smart tags to data are further explained below for example with respect to .

In some cases smart tags can override the storage policy ies that apply to certain data. For example the storage policy that applies to File 1 can indicate that the files should be retained for 5 years. However the user may know from looking at the content of File 1 that it should probably be retained longer. Then the user can select one or more tags that specify to retain data longer than 5 years and apply the tag s to File 1 . For instance the system may provide a smart tag for retaining data for 7 years and the user can tag File 1 with the 7 year retention tag. In other cases it may not be desirable for the smart tags to override the applicable storage policy ies . For instance certain types of data may need to be retained for a set period of time due to legal compliance purposes. In these cases the system can prevent the smart tags from being applied to these types of data. For example the system may disable tagging of these types of data. Or the system may not grant users permission to change properties of the data e.g. with respect to secondary storage operations.

The predefined smart tags can be provided to the user through the native interface of an application . The native interface may refer to an interface provided by the application itself e.g. the application GUI . By utilizing the native interface the system does not have to create a separate user interface e.g. GUI for tagging for each application . In one embodiment smart tags for different applications are pushed to the user through the corresponding plug ins or data agents . For instance the data agent associated with Microsoft Exchange makes the smart tags available within Outlook and the user can accesses and applies the smart tags to emails in Outlook. Or the system provides a laptop plug in or data agent such as a file system data agent and the user views or accesses the smart tags through the explorer or browser of the file system on the laptop. The user can apply one or more smart tags to files on the laptop.

As explained above smart tags can be created by a system administrator and pushed or published to the users. The smart tags created by the system administrator or another person associated with the system may be referred to as admin defined tags or system defined tags. The system administrator may or may not allow the users to edit the published smart tags. In some cases smart tags may also be created by the users. For instance the user can define a smart tag using the native interface of an application . The smart tags created by users may be referred to as user defined tags. The system can distinguish between tags defined by the system and tags defined by the users. For example the system may only allow certain kinds of tags to be defined by the users.

The system may store the system defined tags and the user defined tags separately. In one embodiment the system defined tags are stored in the management database and the user defined tags are stored in the media agent index . For example the user defined tags can be stored with content indexing data of the media agent index . The system may store the different types of tags separately to avoid overburdening certain resources in the system such as the management database . Even if one user defines one tag the number of user defined tags can amount to quite a large number of tags. Storing both the system defined tags and the user defined tags in the management database could lead to storing too much information in the management database and reducing performance. By storing the user defined tags in a separate location such as the media agent index the system can provide better scalability. As the number of user defined tags increases the system can add additional media agent indexes and or media agents to handle the increased amount of data. Also managing the system defined tags and the user defined tags separately can make it easier to organize the tags.

The tags and rules associated with the tags may be stored in the form of a table. The storage management database can have a tag rules table that indicates which tags are provided by the system and what rules are associated with the tags. In the example of the table specifies tags . . . and the corresponding rules. Supposing tag 1 is the 7 year retention tag as explained above the rules for tag 1 can specify to make a secondary copy of a file to store the secondary copy in a certain storage device and to keep the secondary copy of the file for at least 7 years. Similarly the media agent index can have a tag rules table that indicates which tags are available e.g. the user defined tags and what rules are associated with the tags. In the example of the table specifies tags n n 1 n 2 . . . and the corresponding rules. The table and the table can include the same or similar types of information or different types of information depending on the embodiment. In some embodiments the tags and rules are stored in a file or another format. In one embodiment the tags and or the rules may be stored or defined in XML format. Tags and corresponding rules can be defined through a user interface e.g. a GUI such as a web interface . The system administrator may create basic tags and corresponding rules. In some embodiments such basic tags can serve as templates for any user defined tags. In one example tagging is based on received time of emails and the rules can specify that emails older than 3 years should be deleted.

When the user tags data with one or more smart tags the smart tags may be stored with metadata associated with the data. For example if the user tags a file the tag s can be stored with the metadata of the file . In another example if the user tags an email the tag s can be stored with the metadata associated with the email.

In some embodiments the tagging of data in primary storage occurs automatically. Instead of a user tagging specific data the user or the system administrator can configure rules for tagging data in primary storage. These rules are distinguished from the rules associated with the smart tags these rules specify criteria for applying a tag to data rather than specify the secondary storage operations associated with a particular tag. The client computing device may run the rules e.g. periodically and tag data that meets the rules. The tags can be stored with the metadata associated with the data and be forwarded with the data at the time of backup. For instance a rule can specify to tag all PDF files that include a certain word. The rules can be based on file type. The rules may be implemented on the client computing device .

At data flow step the storage manager initiates a backup. Backup may run according to a schedule at user request based on certain events etc. A schedule may be based on the passage of a pre determined amount of time such as on a regular basis e.g. after a particular time interval such as a certain number of hours or days or on an intermittent basis. Backup may also be event based and may be triggered by certain events. Backup can be implemented as one or more storage policies and the storage manager may manage such storage policies. In some embodiments the system may provide use of smart tags as an option for backup. For example the system administrator may select support for smart tags as one of the backup parameters. The storage manager can initiate a backup operation according to the storage policies. For instance the storage manager can instruct the client computing devices e.g. the data agents to prepare and forward data for backup.

Functionality for smart tags may be implemented by any component of the system or any combination of components in the system . For example the functions performed by the storage manager the data agent and the media agent may be performed by one or more other components of the system depending on the embodiment.

At data flow step the data agent forwards tagged data. The data agent can capture the tags associated with the data and forward the tags along with the data. For instance the data agent accesses one or more tags stored with the metadata of a file e.g. in the information store and the data agent forwards the tag s and the file to the media agent for processing. In one embodiment the data agent extracts any tags for a file from the metadata of the file and sends the tags with the file . In another embodiment the data agent sends the tags as included in the metadata of the file and the media agent extracts the tags from the metadata of the file .

At data flow step the media agent processes the tags associated with the forwarded data. When the media agent receives the tags and data the media agent can access either the management database or the media agent index to find the rules associated with the tags. For a system defined tag the media agent can access the management database to look up the associated rules. For a user defined tag the media agent can access the media agent index to look up the associated rules. The media agent may know from the tag itself whether it is a system defined tag or a user defined tag. Or the media agent may look up whether a tag is system defined or user defined in order to access the rules associated with the tag. In one embodiment the storage manager provides e.g. in the management database information about the type of tag e.g. system defined or user defined and where the rules for the tag are stored e.g. the management database or the media agent index . When backup is initiated the media agent that is assigned to process a particular file can access the management database to look up whether the tag associated with the file is system defined or user defined and or where to find the rules for the tag.

At data flow step the media agent performs a secondary storage operation s based on the tags. After obtaining the rules for a tag from the storage manager index or the media agent index the media agent can perform the storage operation s specified by the rules for the tag. In the example of the 7 year retention tag the media agent refers to the rules for the 7 year retention tag and performs the storage operations indicated by the rules. The media agent creates a secondary copy of a file stores the secondary copy of the file in the designated storage device and marks the secondary copy to be retained for a minimum of 7 years.

In this manner the system can provide more granular control over backup of data in primary storage through the use of the smart tags. The user can determine the importance of certain data and instruct the system how to store the data in secondary storage by selecting smart tag s for the data. Instead of applying a uniform storage policy to all data that meets specific criteria the user may override the default storage policy as appropriate. In this way the system can provide more flexibility in secondary storage operations. Moreover by using the native interface of the applications the system can provide smart tags in a seamless manner and without having to build a separate interface for tagging.

While described with respect to a backup operation for the purposes of illustration the techniques described herein are compatible with other types of storage operations such as for example archiving replication migration and the like. A description of these and other storage operations compatible with embodiments described herein is provided above.

In certain embodiments the system provides a different type of tags instead of or in addition to providing the smart tags functionality discussed above. These tags may be referred to as content index tags to be distinguished from the smart tags. Content indexing tags CI tags can be used in content indexing files. Users can add CI tags to any file in primary storage regardless of the type of file. The system may utilize data streams or forks provided by various operating systems OSs to allow adding tags to a file. In Windows OS the system can use Alternate Data Stream ADS . An ADS may refer to a system fork used in Windows OS. In some embodiments a fork may be a set of data associated with a file system object in a file system. An ADS may be different from a data stream for data transport for example between various storage devices as explained above. In Mac OS and Unix the system can use resource fork.

To facilitate discussion CI tags will be explained further with reference to Windows OS and ADS. Windows OS provides a tagging feature for certain types of files such as Microsoft Word files. Metadata of Word files can be stored within the file itself and the tags for Word files can be stored within the file as a part of the metadata. However the metadata of a text file or an executable file is not stored within the file and therefore Windows does not provide tagging for these types of files. Accordingly the system can use an ADS to store tags for a file. Use of the ADS can allow the system to add tags to any file regardless of the type of the file. The ADS can be created for any file to which a tag is added and stored with the file itself. The ADS may be stored in XML format.

At the time of backup the system can look for the ADS of a file and back up the ADS along with the file. The system can use the same name format for the ADS of a file such that the system knows how to check whether an ADS exists for a file. In one example the system hard codes the name of the ADS. During backup the system can extract the tags in the ADS of a file and perform content indexing using the tags. The tags can be added to the content index in association with the file. Subsequently the content index data can be used to search for files. The content index data can be stored in the media agent index . The ADS can also be backed up with the file so that the tags are available when the file is restored. At the time of restore the ADS can be restored along with the file.

Tags may be added to a file using the native interface of the file system such as Windows Explorer for Windows OS. The data agent associated with the file system may provide tags through a plug in and the user can access the tags within Windows Explorer. For example the user may right click on a file and access a menu item for tags. In one embodiment a pop up window is displayed and the user can see a list of any existing tags and add new tags to the file. Generally tags are added by the user but in some cases tags may be added by the system for example according to an algorithm.

When the user is browsing backup files in secondary storage e.g. using the storage manager console the user may also view the tags of the files. The user may also browse files by tags. For example files can be displayed under various tags. The user may also filter the tags and browse a filtered view of the tags and files relating to the tags.

Similarly resource forks can be used to add tags to files in Mac OS and Unix. In certain embodiments the resource forks may work in a similar manner as the ADS.

In certain embodiments the CI tags can be used with mobile devices and cloud computing. When data is being backed up to cloud storage the ADS can be uploaded to the cloud with the file. When data is restored from cloud storage the ADS can be downloaded with the file.

Functionality for CI tags may be implemented by any component of the system or any combination of components in the system . For example the functions performed by the storage manager the data agent and the media agent may be performed by one or more other components of the system depending on the embodiment.

While described with respect to a backup operation for the purposes of illustration the techniques described herein are compatible with other types of storage operations such as for example archiving replication migration and the like. A description of these and other storage operations compatible with embodiments described herein is provided above.

In the user interface illustrates a file system browser such as Windows Explorer for Windows OS. One or more files can reside in the file system for example in various folders or directories. The user can tag a file with one or more tags . In one embodiment the user selects a file and right clicks to display the context menu. The context menu can include a menu item for tagging the file . Selecting the menu item or hovering over the menu item can display tags that can be applied to the file . The user selects a tag from the available tags to apply to the file . In another embodiment the user right clicks on the file and selects the properties menu item to apply a tag to the file . Tags can be associated with a file in many different ways. In some embodiments the user can drag and drop tags e.g. from a list of available tags onto files in order to tag the files .

In some embodiments tags can have hierarchies. For example a tag may be a child of another tag and if a file is tagged with the child tag the media agent can perform the storage operation s specified by the rules of the parent tag and also perform the storage operation s specified by the rules of the child tag . Hierarchy may be useful when only the last few storage operations are different in handling certain types of data. The system administrator can define a parent tag with the common storage operations and define child tags with the different storage operations. Hierarchy may also be useful in organizing the tags . For instance there can be a parent tag for different categories of tags such as archiving retention etc. and any tag belonging to a certain category can be created as a child of the parent tag .

The user interface in illustrates tagging of files in a file system. The system can utilize the native interface of the file system such as Windows Explorer to provide the tagging feature. Certain versions of Mac OS provide tagging functionality and the system defined or user defined tags can be added to the list of available tags in Mac OS for example by the data agent . The user can then select a tag from the list to apply to a file . Similarly for various applications the native interface of the applications can be used to provide the tagging feature. By leveraging the native interface the system does not need to implement a user interface for tagging that is separate from the native interface.

The user interface may visually indicate to the user that a tag has been applied to a file . In one embodiment the file icon for a tagged file can be changed to indicate that the file has been tagged. In another embodiment an email item is displayed with the tag s associated with the email item. In other cases there may not be a visual indication of tags for a file but any tags for a file could be accessed through the properties of the file .

At block the media agent processes tagged data. The data agent forwards a file and any tags for the file to an appropriate media agent . The storage manager may determine to which media agent the data agent should forward the file and accompanying tags. After being forwarded the file and the accompanying tags the media agent can access the rules for the tags for instance by consulting the management database .

At block the media agent compares one or more tags associated with data to an existing policy ies for the data. The file could also satisfy the criteria of one or more existing storage policies. Generally the tags for the file can override any applicable storage policies. However it could be helpful for the system to double check if there are any inconsistencies between the applicable storage policies and the tags. Prior to performing the storage operation s specified by the rules for the tags the media agent can compare the rules of the tags and the storage policies to make sure there would not be problems resulting from overriding the storage policies. In one example a storage policy indicates that File 1 should be retained for 30 years for legal compliance but the tag for File 1 instructs to retain File 1 for only 10 years. In this case it is very important that File 1 is retained for 30 years. The system would not override the storage policy in this case. The system may provide an indication to the user that the tag was not applied. An error message could be displayed with the file for example using a different file icon. The file icon can visually indicate that a tag associated with the file was not applied e.g. show a tag in the icon as faded or lined through . Or the tag for an email could be displayed as faded and when the user hovers over the tag it can display the message that the tag was not applied due to a conflict with a storage policy that could not be overridden. The media agent can take into consideration various factors in determining whether to apply the existing storage policies instead of applying the tags. Some examples of such factors include legal compliance legal hold etc. In certain embodiments a user may want to tag an item for deletion from secondary storage but the system administrator wants to retain the item for compliance reasons e.g. legal hold . The items may appear deleted to the user but the items are still stored in secondary storage. In some embodiments the tags may be applied to data in secondary storage.

At block the media agent performs a storage operation s based on the comparison. Based on the determination at block the media agent either performs a storage operation s specified by the existing storage policies or a storage operation s specified by the rules associated with the tags. If the media agent determines that the storage policies can be overridden the media agent performs the storage operation s associated with the tags. Otherwise the media agent performs the storage operation s associated with the storage policies.

The routine can include fewer more or different blocks than those illustrated in without departing from the spirit and scope of the description. Moreover it will be appreciated by those skilled in the art and others that some or all of the functions described in this disclosure may be embodied in software executed by one or more processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile and or non transitory storage.

At block the system provides one or more tags associated with rules specifying a secondary storage operation s . The secondary storage operation s specified by the rules are to be performed by a media agent . The media agents may implemented on corresponding secondary storage computing devices as described herein which may also be referred to as secondary storage controller computers. The computer that implements the storage manager can also be referred to as a secondary storage controller computer according to some embodiments. The one or more tags can be assigned to files residing in a file system in primary storage. The one or more tags may include a tag defined by a system administrator or a tag defined by a user associated with a client computing device . Tags defined by a system administrator may be stored in the management database . Tags defined by a user associated with a client computing device may be stored in the media agent index .

At block the user tags a file with a tag s . Files in primary storage may be generated by an application executing on a client computing device and the client computing device may provide access to the one or more tags in the user interface of the application . The storage manager can forward the one or more tags to the data agent associated with the application and the data agent can make the one or more tags available within the application . The client computing device may receive user selection of a tag from the user interface where the user selection is associated with at least one file . In some cases multiple files can be tagged simultaneously. For example the user can select two files and apply a tag s to the two files . After receiving user selection of a tag the client computing device can associate the tag with selected file . In response to association of the tag with the file the tag is stored with the metadata of the file e.g. in the information store .

In some embodiments the user creates rules for automatically tagging files associated with the client computing device instead of manually tagging files . For instance the client computing device creates rules for applying a tag to files in a file system executes the rules for applying the tag at a specified time and associates the tag with a file that meets the rules. In response to association of the tag with the file the tag is stored with the metadata of the file .

At block the data agent forwards the file and the tag s to a media agent s . In response to receiving instructions to back up data in primary storage e.g. from the storage manager the data agent forwards the file and the tag to the media agent s . In one embodiment the data agent extracts or obtains the tag from the metadata of the file and forwards the file and the tag.

At block the media agent s perform a storage operation s associated with the tag s on the file . The media agent s access rules associated with the tag s for instance from the management database and or the media agent index as appropriate. Then the media agent s perform the storage operation s specified by the rules for the tag s to create a secondary copy of the file . The secondary copy can be stored on one or more storage devices in secondary storage. The media agent s perform the storage operation s on the file by overriding any storage policy that applies to the file . The storage operations specified by the rules may include a backup operation an archiving operation a migration operation a replication operation etc.

The routine can include fewer more or different blocks than those illustrated in without departing from the spirit and scope of the description. Moreover it will be appreciated by those skilled in the art and others that some or all of the functions described in this disclosure may be embodied in software executed by one or more processors of the disclosed components and mobile communication devices. The software may be persistently stored in any type of non volatile and or non transitory storage.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense i.e. in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list. Likewise the term and or in reference to a list of two or more items covers all of the following interpretations of the word any one of the items in the list all of the items in the list and any combination of the items in the list.

In some embodiments certain operations acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all are necessary for the practice of the algorithms . In certain embodiments operations acts functions or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described. Software and other modules may reside and execute on servers workstations personal computers computerized tablets PDAs and other computing devices suitable for the purposes described herein. Software and other modules may be accessible via local computer memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces interactive voice response command line interfaces and other suitable interfaces.

Further processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. Two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems and or computing devices. Likewise the data repositories shown can represent physical and or logical data storage including e.g. storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer specially equipped computer e.g. comprising a high performance database server a graphics subsystem etc. or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor s of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks. These computer program instructions may also be stored in a non transitory computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded to a computing device or other programmable data processing apparatus to cause operations to be performed on the computing device or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computing device or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention. These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

To reduce the number of claims certain aspects of the invention are presented below in certain claim forms but the applicant contemplates other aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C. sec. 112 f AIA other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 f will begin with the words means for but use of the term for in any other context is not intended to invoke treatment under 35 U.S.C. 112 f . Accordingly the applicant reserves the right to pursue additional claims after filing this application in either this application or in a continuing application.

