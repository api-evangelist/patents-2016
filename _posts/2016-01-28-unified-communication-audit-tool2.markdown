---

title: Unified communication audit tool
abstract: Providing for dynamic auditing of components of a communication network is provided herein. By way of example, network components can be queried by way of dynamic and intelligent application programming interface (APIs) queries to extract data for the network components. Such data can then be compared with best practice rules to identify potential enhancements to efficiency or scalability of such components. In some aspects, an audit report can be output summarizing identified enhancements. In other aspects, data can be written to an updated component according to protocols suited to such component. Accordingly, an audit can provide feedback in light of best practices or can be utilized to dynamically upgrade a legacy system to newer system software and/or hardware components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569539&OS=09569539&RS=09569539
owner: Cisco Technology, Inc.
number: 09569539
owner_city: San Jose
owner_country: US
publication_date: 20160128
---
This application is a continuation of U.S. Non Provisional patent application Ser. No. 14 590 120 entitled Unified Communication Audit Tool and filed on Jan. 6 2015 which is a continuation of U.S. Non Provisional patent application Ser. No. 13 921 561 filed on Jun. 19 2013 now U.S. Pat. No. 8 959 074 which is a continuation of U.S. Non Provisional application Ser. No. 12 036 906 filed on Feb. 25 2008 now U.S. Pat. No. 8 473 519 the entirety of which is incorporated herein by reference.

Network service providers utilize various types of electronic equipment to facilitate remote electronic communication. In addition various types of communication services including data communication voice over Internet Protocol VoIP circuit switched communication and so on can require different types of electronic equipment or equipment configured according to different protocols. For instance electronic equipment servicing a VoIP based network can require a first protocol and set of application programming interface API whereas electronic equipment servicing a circuit switched based network can require a second protocol and a second set of APIs.

Size of a provider s network typically corresponds to a number of subscribers associated with the provider. Likewise numbers of electronic components e.g. switches routers servers hubs gateways support databases and so on also correspond to the size of the provider s network. A single service provider can have dozens of support databases for instance as a subscriber base requires. Since each type of device can have different software protocols APIs etc. an interface to all of the components of a typical network can be fairly complex.

As types of remote communication become more diverse management software controlling networks and associated equipment also becomes more diverse. In addition the rate at which software changes can be measured in months or only a few years. For a large network however keeping abreast with current changes in software can be expensive. Often an operator maintains various types of management software within a network and upgrades the software as new components are added e.g. based on component repair or replacement or on subscriber growth .

As a specific example communication servers and storage databases can utilize various operating systems and management modules depending on a type of communication service associated with such equipment. A database operating system for VoIP phone calling can store configuration details for routing calls subscriber directory information connectivity information traffic engineering guidelines best practice rules for providing interconnectivity and the like. Although each type of equipment e.g. switch support database will typically utilize a common operating system such is not necessarily the case as older versions of the operating systems often exist simultaneously in a network. In addition as VoIP standards change software changes to incorporate protocols accordingly. Further as new technology becomes available e.g. VoIP conference calling software is updated to incorporate new communication features. Updating software in physical network components however can be much more time consuming than the software upgrades. In addition cost can be prohibitive to upgrade many system components at once. Unfortunately conventional systems do not provide for efficient and intelligent transfer of data data structures and or data configuration information in unified communication applications from one network component to another to meet advancements in technology or updates to communication standards.

The following presents a simplified overview in order to provide a basic understanding of some aspects of the claimed subject matter. This overview is not an extensive overview. It is not intended to identify key critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The disclosed subject matter provides for dynamic auditing of components of a communication network. In some aspects an audit can provide suggestions corresponding to rules of best practice to increase efficiency or scalability of network components. The audit can utilize various exposed or secure application programming interfaces APIs to provide accessibility to at least a substantial portion of the component while reducing load on active devices at low levels. Accordingly the dynamic auditing can be engaged while a component is performing other tasks in the network environment.

According to some aspects an audit report can be generated as a result of an audit to identify improvements to a network component. The audit report can be generated by extracting data or configuration information from a database and comparing extracted data information with rules of best practice. The report can identify conditions where the network component departs from the rules of best practice and can make suggestions as to improving those conditions.

According to at least one aspect a concatenated feedback mechanism is employed in conjunction with performing an audit of a network component. The feedback mechanism enables information extracted from a first portion of the component to be utilized in conjunction with an interface to a second portion of the component. For instance information extracted from a database as a result of a first API query can be shared with a second query engine optionally utilizing a second API. Thus the audit can interface with a complex device and improve queries to various portions of such a device based on prior query results.

According to further aspects expedited intelligent data transfer is provided from an existing network component to another related e.g. upgraded new generation network component s . Protocols utilized to interface with a first component can be determined dynamically in conjunction with dynamic API queries to the component. Data and data configuration information can be extracted from the first component and iteratively written to the related component s . Errors received due to iterative writing can be analyzed and applied to subsequent iterations. In such a manner a format for writing data to a new network component e.g. server database can be determined dynamically. Optionally updated rules can be provided to auditing components as a baseline format for transferring data to a newer system. In some embodiments best practice rules can be modified or updated in conjunction with new protocols APIs standards or the like associated with the newer system. Best practices can be stored and cross referenced at least as a function of type of system.

According to still other embodiments a data collector can be implemented as a stand alone executable file separate from an analysis reporting and or transfer components of an audit system. The stand alone collector can be sent to an entity responsible for a network or component thereof to extract data from the component and generate a file. Such a data collector can be implemented by secure personnel for instance to minimize a security risk posed by a data extracting tool. The generated file can be encrypted and transmitted to additional components via a network interface for analysis reporting and or transfer functions. Accordingly security can be provided for audited components despite an intrusive nature of a data collection tool.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the claimed subject matter. These aspects are indicative however of but a few of the various ways in which the principles of the claimed subject matter can be employed and the claimed subject matter is intended to include all such aspects and their equivalents. Other advantages and distinguishing features of the claimed subject matter will become apparent from the following detailed description of the claimed subject matter when considered in conjunction with the drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

As used in this application the terms component module system interface or the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. As another example an interface can include I O components as well as associated processor application and or API components and can be as simple as a command line or a more complex Integrated Development Environment IDE .

Disclosed is a mechanism that provides an interface to various communication infrastructure devices independent of management software implemented on such devices. The interface enables query and auditing of servers and databases associated with the infrastructure devices. Results of an audit can be used to generate a report that compares current data structures and data configurations with best practice rules. The reports can provide suggestions for improving efficiency of the infrastructure devices based on the best practice rules. In addition an audit can be useful to port data and configuration parameters from a first server and or database to a second server database. For instance porting data from a first device to a second can be useful for backup and restoration of a database. As another example data porting can be useful to change an operating system of a device to different operating system or upgrade software from a previous version to a newer version etc. As used herein communication infrastructure devices can include data management servers and or databases traffic engineering devices network switches and routers voice over Internet Protocol VoIP management servers databases video and voice meeting management devices e.g. video and or voice conference call servers databases voice and or video message management devices or the like or a combination thereof.

In general no current mechanism exists to provide consistent efficient and dynamic access to unified applications of network support and infrastructure devices. As an example of a unified application a call management application a conference calling application and a data routing application integrated on one or more network infrastructure devices e.g. a VoIP database can comprise a unified application. A unified application typically incorporates different communication functions along with various protocols and application programming interfaces APIs applicable to individual portions of the unified application. For instance a call management and accounting database utilized to track call connection activity for billing and mediation purposes can utilize an open database connectivity ODBC API and or a structured query language SQL for database access. As a further example a call management application can typically utilize simple object access protocol SOAP to exchange extensible markup language XML based messages over a remote network e.g. utilizing hypertext transfer protocol HTTP or secured hypertext transfer protocol HTTPS .

In at least one aspect of the subject disclosure intelligent queries to one or more portions of a network device can be performed to extract information from such device. Types of queries can include structured simple network management protocol SNMP polls windows management instrumentation WMI grand unified socket interface GUSI SOAP queries or like application API queries configured to extract data from various portions of a network device. Typically conventional tools are limited to interfacing with one or a limited number of applications APIs or communication protocols. A need exists therefore for a network interface mechanism that can query audit and or extract information from unified communication application servers call control and network entities and the like. In some aspects this need is met by utilizing device queries operating in parallel to extract information in an efficient manner. In further aspects results of one or more queries can be utilized to optimize other queries providing increased coverage reduced extraction time and or reduced system load. For instance an SNMP poll can extract software hardware and or firmware version information from a communications device or application and provide such data to a SOAP query.

According to one or more other aspects provided is a unified communication interface that can utilize multiple APIs and communication protocols to interface with most or all aspects of unified network applications. For instance a query utilizing a first API can interact with a first portion of a communication server e.g. a billing and mediation database . In addition a query utilizing a second API can interact with a second portion of the communication server e.g. a call management application conference calling application or the like . According to further aspects results of a first query e.g. utilizing the first API can be provided to a second query e.g. utilizing the second API . Accordingly information about an application and or network device can be shared amongst multiple query engines. Thus information received from a billing and usage database can be cross referenced to intelligently configure interactions with a call management application. According to still other aspects query engines can dynamically update query rules as information is received from various portions of a device. Therefore an intelligent interface is provided that can increase efficiency and effectiveness of the interface based on prior interactions with one or more applications.

As an additional example of the foregoing a communication interface can utilize and manage APIs and queries to reduce load levels on audited devices and networks. Specifically an API framework can utilize concatenated feedback to distill information from one API and feed information to another API. Such feedback can provide maximum coverage for an interface to an application and or network device. Such feedback and interface can also throttle queries to a device to reduce query load when network service load is high. Accordingly impact on network services can be reduced when an audit of a device is in progress.

According to additional aspects a unified interface can be utilized to generate audit reports. As discussed above an interface can be utilized to intelligently query portions of a network device and to collect data data structure information and data configurations over one or more API interfaces. Data gathered can be compared with suitable network communication best practice rules. According to some aspects the best practice rules can be dynamically updated depending on current best practice information e.g. pertinent to one or more application versions and interaction with new and or upgraded application devices. For instance an audit report of a VoIP database running version 1.0 of a management application can provide recommendations and highlight potential problem areas pertinent to the management application version. In addition if it is desired to upgrade the VoIP database to version 2.0 of the management application the audit report can adapt the best practice rules according to policies and protocols of the 2.0 version. New policies can be uploaded to an audit tool manually or such policies can be determined dynamically via iterative data exchange with the 2.0 database e.g. in conjunction with porting data from the version 1.0 database to the version 2.0 database . Best practice rules can be adapted to meet specific network deployment network application upgrades or the like.

According to some aspects an audit tool can be separated into collection and analysis portions. Specifically a data collector can comprise a stand alone executable function that utilizes intelligent queries to extract data. Extracted data can then be organized into a data file. The data file can be encrypted to protect sensitive or secret information. The data file can then be forwarded via a network connection to an analysis portion of the audit tool. The analysis portion can compare information in the data file to best practice rules as described above and provide an output report highlighting potential inefficiencies lack of data redundancy stability feedback design conformance feedback periodic data configuration snapshots for troubleshooting generate as built documents or export import data for system backup or upgrade discussed below or the like.

In accordance with still other aspects a communication audit tool can port data and data configuration information between network systems and or devices. Porting data can be useful for data backup and or redundancy or to automate system upgrades. Conventional techniques for upgrading communication device systems are largely manual. Such techniques require manual copying of data from a first database into an intermediary database. Specific information is then parsed manually by an operator to facilitate porting data and restructuring configuring the data in a new database. In many cases porting to a new database requires an operator to modify data structures to be compatible with rules and protocols of the new database. Accordingly conventional upgrading is time consuming tedious and has high overhead costs.

In contrast the subject disclosure provides for intelligent and automated system updates. A first database can be intelligently queried to extract information from the database as discussed above. Extracted information can then be iteratively written to a new database. Each iteration and any results provided by the new database can be examined to determine if errors exist. Subsequent iterations can then be adjusted according to the errors and results and updated rules pertinent to the first database and the new database can be saved. Once one or more iterations are written without associated errors the new rules can be associated with each additional iteration and remaining data can be copied to the new database in a large data dump. Accordingly the subject disclosure provides an intelligent and dynamic mechanism to port data from a first device to a second device despite differences in software or protocols of the devices.

As described herein the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Further as used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims should generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Additionally the various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein can be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any suitable combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be any conventional processor controller microcontroller or state machine. A processor can also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Additionally at least one processor can comprise one or more modules operable to perform one or more of the steps and or actions described herein.

Referring now to illustrated is a block diagram of a system that includes a network audit device according to one or more aspects disclosed herein. Audit device can couple with and extract information from network components and provide audit results based on best rule practices. Extracted information can be analyzed to provide an audit report pertinent to one or more analyzed systems . Accordingly system can interface with network systems to help improve communication efficiency and effectiveness of such systems .

Audit device can connect to network components by various communication architectures including a local bus structure a local network a wide area network a remote wired and or wireless interface an interface to a data network such as the Internet or a combination thereof or of the like. The audit device can comprise a data collection component that can query a server and or database coupled with the audit device . Specifically data collector can obtain a type of the database extract stored data data structures and or data configuration information or the like. Such information can be utilized at least in part to generate an audit report for the database or server .

Database can be any suitable network communication data structure. Examples can include a call management database a VoIP database a traffic engineering database stability or backup database or a database associated with a video or voice conference call server a data management server a network switch or router VoIP management servers usage and charging server or a combination thereof. Server can also provide various network communication functions including call management traffic engineering circuit switched or packet switched connectivity management billing and charging and the like. Such devices can include various operating systems interface architectures and other applications and software utilizing various communication protocols. It should also be appreciated that server and or database can be unified devices. For instance such components can incorporate call management voice text message mail services charging and billing and so on into a single component or group of unified components .

According to some aspects audit device and data collection component can utilize various communication protocols and APIs to interface with portions of a unified server and database . For instance data collection component can utilize structured SNMP polls or SOAP WMI GUSI HTML XML ODBC SQL or telephone application programming interface TAPI java telephony API JTAPI queries or a combination thereof as suitable to interface with various portions of network components . As a particular example a first query utilizing a first API can be directed toward a first portion of database . In addition a second query utilizing a second API can be directed toward a second portion of database . Accordingly unified devices utilizing various applications can be queried by data collector in an efficient and integrated manner.

As a specific non limiting example of the foregoing an ODBC SQL query can be utilized to communicate with usage tracking and charging portions of a unified database . Also a TAPI JTAPI query can be utilized to communicate with a call messaging portion of such database . In addition a structured SNMP query can be utilized to determine a type of the database version information of management software and operating software and so on. In some aspects data collection component can provide information gained from one query to other queries. For instance an SNMP query providing version and system type information can be utilized by the ODBC SQL and or TAPI JTAPI queries. Accordingly the latter queries can be configured in accordance with the determined application versions and system types making the queries more effective.

Audit device can further include a reference component that contains a list of best practice rules pertaining to configuration and storage of data. The best practice rules can be associated with configuration practices data structure types maintaining data system redundancy maintaining sufficient backup and recovery implementations maintaining sufficient security where suitable and so on. Further the rules can be pertinent to one or more applications application versions and or system versions or types. For instance a first set of rules can be correlated to a first version e.g. version 1.0 of an operating system of database . Further a second set of rules can be correlated to a second version e.g. version 2.0 of the operating system. Accordingly various types of applications e.g. call management messaging traffic routing and so on and operating systems can be supported by reference component .

In addition to the foregoing it should be appreciated that the best practice rules can be dynamically updated by interaction with device applications. For instance if audit device interfaces with database and encounters a new operating system or operating system version e.g. 3.0 existing best practice rules can be updated based on interactions with such operating system. As a more specific example if an error is received from a new system version the error can be analyzed and best practice rules generated and or updated accordingly. Thus reference component can modify existing rules or generate new rules as suitable based on interaction with new or updated systems .

According to some embodiments audit device can include an analysis component that can compare information extracted by data collector to at least one best practice rule pertinent to server or database . For instance a rule can be referenced that is compatible with a current application operating on such devices or a type of such devices . The comparison can be utilized to identify potential problem areas potential system inefficiencies etc. For instance analysis component can flag data configuration issues pertinent to an application or type of database identify where desirable system redundancy is missing or where improvements are possible based on the best practice rules maintained at reference component .

Audit device can further include an output component that generates a report indicating a result of the comparison performed by analysis component . The report can be in a spreadsheet format database listing word processing format etc. Such report can be sent to an operator associated with analyzed network components for maintenance and or upgrade purposes. It should be appreciated that such report can be in any suitable electronic format or hardcopy format e.g. printout . As described system provides a mechanism to interface with unified network communication components and extract data from such components utilizing intelligent API and communication protocol calls. Further system can analyze extracted data according to dynamic best practice rules and provide a report identifying potential inefficiencies and improvement areas. Accordingly system can provide a beneficial network analysis and feedback tool for management and maintenance of various communication networks and network components .

Data collection component can comprise a stand alone executable module. Such module can be distributed to network operators support professionals etc. to interface with secure system components and obtain data data configuration and data structure information associated with such components . The data can be utilized to provide an audit of the components or upgrade the components to newer operating systems including additional applications unify legacy applications update application versions and the like.

Server can be any suitable network communication server having a secure interface or unexposed API interface. As an example server can include a call management server having private API access. Such server can require specific login information encrypted signature s or other suitable authentication information in order to access the server or a corresponding secure database . In some embodiments a local computer not depicted can be required to interface with server and or database . In such circumstances a data collection interface could be installed on the local computer to interface with the secure network components .

As a stand alone executable module data collection component can be installed on a local network device e.g. local computer terminal server etc. to interface with server and database . Alternatively or in addition a local maintenance entity can execute and interface the data collection component with the server or database utilizing secure access configured for the entity e.g. a username password combination digital certificate virtual private network VPN login etc. . In other aspects secure access information can be loaded into the data collection component to enable and authorize a data collection interface with the server and or database . Accordingly as a stand alone module data collection component can interact with private components in a secure manner.

Once coupled with secure network components the data collection component can utilize intelligent queries involving multiple APIs as described herein. In some aspects APIs can provide access to various portions of server or database . Particularly SNMP polls can determine a type and version of application software on the server and database . Results of the SNMP polls can be utilized to configure other API queries of management routing messaging usage tracking charging maintenance and like network system functions. In some aspects APIs associated with a secure server or database can be private and unexposed via an external interface e.g. local or wide area network . In such case data collection component can utilize an internal API once configured to the secure system as discussed above. As described data collection component can extract information from secure network components while mitigating exposure to conventional data mining techniques.

Data and configuration information extracted by data collection component can be written to a secure output file . Such a file can be encrypted password protected scrambled or coded and or transformed by various other mechanisms for securing digital information as known in the art. The output file can therefore be protected against intrusion by unauthorized sources.

File can be provided to audit tool for secure analysis. The file can be transmitted over a data network such as the Internet via a secure connection e.g. secure socket layer SSL transport layer security TLS VPN public key infrastructure PKI TLS pre shared key PSK ciphersuites or a combination thereof or of the like . Alternatively the file can be sent by other suitable electronic transfer means such as e mail file included messaging or via portable hard disk flash memory compact disc digital video disk and so on. Audit tool can receive the file and can extract pertinent data configuration information and data structure information from such file . According to some aspects the audit tool can interact with extracted data internally for maximum security or can provide limited access to external entities e.g. an authorized audit technician to manually deconstruct data provide and or update best practice rules or troubleshoot system incompatibilities.

In some aspects audit tool can compare information extracted from the file with best practice rules pertinent to the secure server and secure database . For instance the audit tool can first extract component operating system version and or type information from the file and apply such information to other interactions with data in the file . The audit tool can generate an output report based at least in part on the comparison of data with best practice rules. Such rules can be modified or additional rules can be referenced where appropriate depending on system version and or type information. The output report can be secured in a similar manner as the file e.g. encrypted password protected scrambled coded transformed etc. . The output report can be submitted to a service provider maintenance technician or the like associated with the network components . Accordingly system provides a secure mechanism to extract and analyze data from private network components to provide management maintenance and or update information for such components .

System can include a database update system that receives data extracted from an input database by a data collection component . Data received by the database update system can be written to an output database by an upgrade component . Input database and output database can be of like types and utilize similar management software e.g. management application operating system and similar versions of such software. In such case database update system can provide analysis and or backup and recovery services for input database . In other cases input database and output database can be of different database types or have different software or versions of such software e.g. version 1.0 of an operating system vs. version 2.0 of an operating system . In such case database update system can function to port data between databases and reconfigure the data if needed to provide upgrade services e.g. in lieu of or in addition to backup and recovery service .

As described herein data collection component can interface with input database utilizing one or more intelligent API queries and extract data data configuration and data structure information there from. The extracted information can be forwarded to database update system . Such system can include a reference component that contains best practice rules associated with the input database and output database . Thus information pertinent to the type application s and or operating system associated with input database can be represented with such best practice rules. Further information pertinent to the type application s and or operating system associated with output database can also be represented by the best practice rules. Accordingly modifications to data extracted from the input database required for compatibility with output database can be determined at least in part based on the best practice rules. In some aspects reference component can dynamically modify the best practice rules upon successive interactions with the input database or the output database .

An analysis component can compare the data provided by the data collection component with the best practice rules stored at reference component . The comparison can identify changes to the data in compliance with the rules of best practice as described herein e.g. configuration efficiency possible improvements appropriate redundancy . In addition changes to the data required by any disparity in database type application s and or operating systems of the databases can be identified by the analysis component . Results of the comparison s performed by analysis component can be provided to output component . Output component can then convert the information provided by analysis component to a format usable by the upgrade component .

Upgrade component can write data extracted from the input database and analyzed and or modified by database update system to an output database . It should be appreciated that output database can be of a similar or different type as input database e.g. having different applications software operating systems or operating system versions etc. . Information written to the output database can be in accordance with best practice rules determined by analysis component for instance that are pertinent to the output database . Further upgrade component can dynamically modify a manner in which data is written to the output database . For instance upgrade component can interface with analysis component to identify changes to the manner in which data is written to the output database based on feedback from such database and or the best practice rules contained at reference component . Accordingly system can port data from one database to another utilizing intelligent and comprehensive queries to extract the data from a first database and utilizing an interactive approach to update or modify the data as suitable to write such data to a second database .

System can include an upgrade component that receives data to be written to the output database . Such data can be of a particular format e.g. XML extracted from an input database . Upgrade component can reference a set of best practice rules provided by an analysis component . Such rules can optionally be updated based on feedback provided by the output database and upgrade component as described below.

The upgrade component can include machine learning that provides a dynamic and intelligent mechanism to adjust a manner in which data is written to output database based on one or more interactions with the database . More specifically machine learning can iteratively write data extracted from a first database to output database adjusting subsequent iterations based on results of prior iterations. According to some aspects error messages a lack of such messages or other feedback provided by output database can be analyzed by machine learning to define a configuration namespace that bridges best practice rules for the input database and the output database . According to still other aspects the configuration namespace can be utilized as a template to modify the data extracted from input database in accordance with updated best practice rules pertinent to the output database . By such mechanisms or like mechanisms machine learning can make strategic determinations to optimize data written to the output database .

To make strategic determinations machine learning can utilize a set of models e.g. recipient preference model input item history model general MRU tag models of senders and or recipients etc. in connection with iteratively writing data to the output database . The models can be based on a plurality of information e.g. best practice rules associated with the input database updated best practice rules associated with the output database database type installed applications installed operating systems of such databases feedback provided by the output database parsed log data information analyzed by an analysis component etc. Optimization routines associated with machine learning can harness a model that is trained from previously collected data a model that is based on a prior model that is updated with new data via model mixture or a data mixing methodology or simply one that is trained with seed data and thereafter tuned in real time by training with actual field data provided by the output database best practice rules or data compiled from a log of the input database if applicable.

In addition machine learning can employ learning and reasoning techniques in connection with making determinations or inferences regarding optimization decisions and the like. For example machine learning can employ a probabilistic based or statistical based approach in connection with modifying or updating data structures or data configurations associated with data written to the output database . The inferences can be based in part upon explicit training of classifier s not shown before employing the machine learning or implicit training based at least upon manual input and the like during use of a device . Data or policies used in optimizations can be collected from a specific database or from a community of databases of various types various applications and or operating systems for instance.

Machine learning can also employ one of numerous methodologies for learning from data and then drawing inferences from the models so constructed e.g. Hidden Markov Models HMMs and related prototypical dependency models more general probabilistic graphical models such as Bayesian networks e.g. created by one or more structure searches using a Bayesian model score or approximation linear classifiers such as support vector machines SVMs non linear classifiers such as methods referred to as neural network methodologies fuzzy logic methodologies and other approaches that perform data fusion etc. in accordance with implementing various automated aspects described herein. As a non limiting example classifiers can be trained on a set of feedback provided by output database data and or best practice rules as described herein. As more interaction with the output database occurs the classifiers can be retrained. When an item is received or e.g. displayed presented to the device user machine learning can execute one or more classifiers to generate changes to data as written to the output database .

Methodologies employed by machine learning can also include mechanisms for the capture of logical relationships such as theorem provers or more heuristic rule based expert systems. Inferences derived from such learned or manually constructed models can be employed in optimization techniques such as linear and nonlinear programming that seek to maximize some objective function. For example manipulating data to be compatible with output database can be based on iterative interactions with the output database feedback analyzed to produce a configuration namespace that bridges typical data configurations between the input database and output database and or best practice rules pertinent to such databases as well as like factors suitable for data configuration optimization.

According to some aspects analysis component can include a log parser that examines a data log of the input database . The data log can provide configuration history usage history and like information pertinent to the input database and data . Examination of the data log can provide information to update best practice rules based at least in part on information associated with the data log .

In addition analysis component can receive feedback from upgrade component and output database to further modify the best practice rules . For instance successive interactions between machine learning and output database can identify distinctions between data structure and data configuration utilized by the input database and output database . Such information can be provided to analysis component to incorporate into the updated best practice rules . Specifically such updated rules can comprise at least in part a namespace that bridges protocols configurations and structures between such databases . The updated best practice rules can be provided back to upgrade component and machine learning to further optimize interactions with output database . Accordingly system can interact with a database and protocols and configuration rules associated with such database to dynamically modify data written to the database .

According to some aspects analysis component can include a correlation engine that compares general data configuration structures to the default list of best practices and outputs a database stability analysis. The configuration structures can be associated with various data storage protocols communication protocols interface APIs and so on associated with the input database . Such structures can also be pertinent to a particular software application and or operating system installed on the input database . The database stability analysis can be output from the analysis component for other analysis and reporting functions such as providing an audit report of the input database based on the data configuration structures and list of best practices . It should also be appreciated that the list of best practices can be updated based at least in part on the database stability analysis.

In addition to the foregoing analysis component can further include a connectivity engine that can compare call drop information contained in the database to the default best practice rules and output a connectivity stability analysis. Such comparison can be pertinent to call management conferencing messaging or like functions based in part on voice calls e.g. circuit switched calls or packet switched VoIP calls . The connectivity stability analysis can be output from the analysis component for reporting and or update uses as described herein. The connectivity stability analysis can also be utilized to modify default best practice rules to generate updated best practice rules pertinent to the input database .

Analysis component can also include a routing engine that can compare traffic engineering information contained in the database to the list of best practices and output a traffic engineering analysis. Such analysis can be also be utilized to provide an audit report for the input database as well as generate and or modify updated best practice rules in a similar fashion as described above. It should be appreciated that various suitable interactions between analysis component and the input database can be utilized to provide updated best practice rules . Accordingly analysis component can interact dynamically with a database and or information extracted from such database and generate and or modify network engineering rules of practice as a result. It should also be appreciated that such rules can be utilized to provide suggestions to improve efficiency stability redundancy and or like properties of a network communication component . Further such rules can be utilized to port data from the input database to newer versions systems and the like as described herein.

As a particular example a first query can utilize a first API e.g. an SNMP poll to identify a type of the database an operating system installed on the database management applications installed on the database as well as version information associated with such software. Furthermore a second query can identify different portions of the database and identify functions applicable to each portion e.g. for a unified application database . As a more specific example such query can identify that various portions of database perform call management traffic engineering messaging and usage and billing functions for a VoIP server. Such query can also determine appropriate protocols or APIs suitable to interface with each such portion of the database . Information obtained as a result of a query can be stored in shared memory and distributed to the query engines via feedback loop . Accordingly subsequent queries can be configured according to the information obtained as a result of the previous queries. System therefore can provide substantial benefit over conventional database interface mechanisms that typically require blind copying from a first database to a second database. Instead data collection component can dynamically interact with the database and extract information according to the protocols and applications thereof. Thus system can provide increased efficiency in interacting with a database and extracting data there from for audit reporting and or update purposes.

The aforementioned systems have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub components specified therein some of the specified components or sub components and or additional components. For example a system could include audit tool upgrade component machine learning input database and output database or a different combination of these and other components. Sub components could also be implemented as components communicatively coupled to other components rather than included within parent components. Additionally it should be noted that one or more components can be combined into a single component providing aggregate functionality. For instance reference component can include analysis component or vice versa to facilitate maintenance of best practice rules and comparison of received data with such rules by way of a single component. The components can also interact with one or more other components not specifically described herein but known by those of skill in the art.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below may include or consist of artificial intelligence or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia and in addition to that already described herein can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks are necessarily required to implement the methodologies described hereinafter. Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture as used is intended to encompass a computer program accessible from any computer readable device conductive carrier interface or media.

At method can query a second portion of the database based at least in part on a result of the first query. For instance the second query can interface with a second portion of the database in a manner determined in part by a result of the first query. As a more specific example if the first query identified a charging and billing portion of the database the second query can be configured to utilize an ODBC SQL API to interact with the billing portion of the database.

At method can write data extracted from the database to a second database. A manner in which data is written can be based at least in part on data extracted from the database. Also the second database can be similar to the database e.g. having a similar operating system and application software or can be of a different type having different operating system s application software or versions of such software. In the former case method can provide backup and recovery services by porting data from the database to the second database. In the latter case method can provide update services in addition to or in lieu of backup services by porting data from a first type of database e.g. an older version to a second type of database e.g. a newer version of the database .

At method can output a best practices result based on the queries. The best practice result can be based at least in part in a comparison of results of queries conducted at reference numbers and and a list of best practice rules pertinent to the database. Further the best practice result can be configured to identify inefficiencies lack of sufficient redundancy or traffic stability drawbacks associated with the database or a related network. Accordingly method provides for informed queries to a database to extract data from such database and write the extracted database to a new database or provide a best practice audit report of such database or both.

At method can write extracted data to a database of a different type having a different operating system or having a different arrangement of applications or unified applications as compared with the network database. At method can analyze feedback such as an error associated with writing the extracted data to the database of the different type. At subsequent writing iterations can be updated in response to the analyzed feedback. Specifically data can be organized into a particular structure or configured in a particular manner and so on based on the analyzed feedback and or based on a related structure configuration of the network database. At a set of best practice rules pertinent to the network database and or the database of the second type can be updated or generated based at least in part on the analyzed feedback.

At method can employ traffic stability and or connectivity analysis in conjunction with transferring data from the network database to the database of the second type. Such analysis can be based on data extracted from the network database for instance. Further the analysis can be compared with the best practice rules to identify potential problems associated with an original data structure utilized by the network database. At the writing of data to the database of the second type can be adjusted based on updated best practice rules if any or the analysis determined at reference number . At an audit report can be output that identifies changes made to data extracted from the network database if any upon porting such data to the database of the second type. Specifically changes determined in accordance with best practice rules and or updated best practice rules can be identified. Further changes in accordance with the traffic stability and or connectivity analysis can also be identified. According to some aspects changes made as a result of feedback obtained from iterative writing of data to the database of the second type can also be included in the output report. Accordingly such report can provide a summary of changes made to data and reasons for such changes e.g. increased stability compatibility with a new database etc. and the like.

In order to provide additional context for various aspects of the disclosed subject matter as well as the following discussion is intended to provide a brief general overview of a suitable environment in which the various aspects of the disclosed subject matter can be implemented. For instance logic and or operational functions related to generating intelligent and interactive database queries analyzing query results writing data to an output database updating iterative writing according to feedback provided by such database and the like can be implemented by one or more computer processing functions as described below. While the subject matter has been described herein in the general context of block diagrams and block components those skilled in the art will recognize that various portions of the disclosed subject matter can also be implemented in combination with computer executable instructions of a computer program for instance that run on a computer and or computers other like program modules.

Generally program modules include routines programs components data structures etc. that can perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multiprocessor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention can be practiced on stand alone computers. In a distributed computing environment program modules can be located in both local and remote memory storage devices described below.

With reference to an example environment for implementing various aspects disclosed herein includes a computer e.g. desktop laptop server hand held programmable consumer or industrial electronics . . . . The computer includes a processing unit a system memory and a system bus . The system bus can couple system components including but not limited to the system memory to the processing unit . The processing unit can be any of various microprocessors such as dual microprocessors quad microprocessors and other multiprocessor architectures suitable for a computer environment .

The system bus can be any of several types of suitable bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any suitable variety of available bus architectures including but not limited to 11 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example disk storage . Disk storage includes but is not limited to devices such as a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in operating environment . Such software can include an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.

A user can enter commands or information into the computer through input device s . Input devices can include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s can utilize some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like displays e.g. flat panel and CRT speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and can typically include many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for example internal and external technologies such as modems including regular telephone grade modems cable modems power modems and DSL modems ISDN adapters and Ethernet cards or components.

The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

What has been described above includes examples of aspects of the claimed subject matter. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly the disclosed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes has or having are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

