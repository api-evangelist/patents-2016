---

title: Generation and distribution of named, definable, serialized tokens
abstract: A method for generating and distributing serialized tokens is provided. The method may include receiving a request from at least one client. The method may further include determining whether the received at least one request is a request for generating names and definitions for a group of serialized tokens, deleting a names and definitions, and/or receiving a group of serialized tokens. Additionally, the method may include enabling the at least one client to generate names and definitions for a group of serialized tokens. The method may also include storing the names and definitions on a server. The method may also include deleting the names and definitions from the server. The method may also include formatting and distributing serialized tokens based on the names and definitions for the serialized tokens. The method may further include sending a response to the client based on the received request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09473304&OS=09473304&RS=09473304
owner: International Business Machines Corporation
number: 09473304
owner_city: Armonk
owner_country: US
publication_date: 20160225
---
The present invention relates generally to the field of computing and more specifically to serialized tokens.

Generally in application and software development tokens may be generated to enable such actions as communication between servers and clients. Typically tokens are generated based on a specific format and are unique. Serialized tokens are tokens that are typically generated incrementally or in a series based on a specific format. Furthermore the generation of serialized and unique tokens often occurs in a dynamic environment with multiple concurrent client tasks demanding serialized and unique tokens simultaneously. A common process to client demands of serialized tokens is to use servers to format and generate the serialized tokens and incrementally distribute the serialized tokens as requested by clients so that no two tasks are provided the same serialized token. For example servers may define the format of the serialized tokens and distribute the tokens incrementally such as Log 001 Log 002 and Log 003 . . . to clients as the clients request the tokens to perform software tasks.

A method for generating and distributing a plurality of serialized tokens is provided. The method may include receiving at least one request from at least one client. The method may further include receiving at least one request from at least one client. The method may also include determining whether the received at least one request is a request for generating at least one name and at least one definition for a group of serialized tokens. The method may further include in response to the determination that the received at least one request is a request for generating the at least one name and the at least one definition for the group of serialized tokens enabling the at least one client to generate the at least one name and the at least one definition for the group of serialized tokens. Additionally the method may include storing the generated at least one name and the generated at least one definition on at least one server. The method may also include determining whether the received at least one request is a request for deleting at least one second name and at least one second definition for a second group of serialized tokens. The method may further include in response to the determination that the received at least one request is a request to delete the at least one second name and the at least one second definition for the second group of serialized tokens deleting the at least one second name and the at least one second definition for the second group of serialized tokens from the at least one server. The method may also include determining whether the received at least one request is a request for receiving the second group of serialized tokens based on the at least one second name and the at least one second definition. The method may further include in response to the determination that the received at least one request is a request for receiving the second group of serialized tokens formatting and distributing the second group of serialized tokens based on the at least one second name and the at least one second definition. The method may also include sending a response to the client based on the received at least one request.

A computer system for generating and distributing a plurality serialized tokens is provided. The computer system may include one or more processors one or more computer readable memories one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories whereby the computer system is capable of performing a method. The method may include receiving at least one request from at least one client. The method may also include determining whether the received at least one request is a request for generating at least one name and at least one definition for a group of serialized tokens. The method may further include in response to the determination that the received at least one request is a request for generating the at least one name and the at least one definition for the group of serialized tokens enabling the at least one client to generate the at least one name and the at least one definition for the group of serialized tokens. Additionally the method may include storing the generated at least one name and the generated at least one definition on at least one server. The method may also include determining whether the received at least one request is a request for deleting at least one second name and at least one second definition for a second group of serialized tokens. The method may further include in response to the determination that the received at least one request is a request to delete the at least one second name and the at least one second definition for the second group of serialized tokens deleting the at least one second name and the at least one second definition for the second group of serialized tokens from the at least one server. The method may also include determining whether the received at least one request is a request for receiving the second group of serialized tokens based on the at least one second name and the at least one second definition. The method may further include in response to the determination that the received at least one request is a request for receiving the second group of serialized tokens formatting and distributing the second group of serialized tokens based on the at least one second name and the at least one second definition. The method may also include sending a response to the client based on the received at least one request.

A computer program product for enabling at least one user interface display field to perform at least one action is provided. The computer program product may include one or more computer readable storage devices and program instructions stored on at least one of the one or more tangible storage devices the program instructions executable by a processor. The computer program product may include program instructions to receive at least one request from at least one client. The computer program product may also include program instructions to determine whether the received at least one request is a request for generating at least one name and at least one definition for a group of serialized tokens. The computer program product may further include in response to the determination that the received at least one request is a request for generating the at least one name and the at least one definition for the group of serialized tokens program instructions to enable the at least one client to generate the at least one name and the at least one definition for the group of serialized tokens. Additionally the computer program product may include program instructions to store the generated at least one name and the generated at least one definition on at least one server. The computer program product may also include program instructions to determine whether the received at least one request is a request for deleting at least one second name and at least one second definition for a second group of serialized tokens. The computer program product may further include in response to the determination that the received at least one request is a request to delete the at least one second name and the at least one second definition for the second group of serialized tokens program instructions to delete the at least one second name and the at least one second definition for the second group of serialized tokens from the at least one server. The computer program product may also include program instructions to determine whether the received at least one request is a request for receiving the second group of serialized tokens based on the at least one second name and the at least one second definition. The computer program product may further include in response to the determination that the received at least one request is a request for receiving the second group of serialized tokens program instructions to format and distribute the second group of serialized tokens based on the at least one second name and the at least one second definition. The computer program product may further include program instructions to send a response to the client based on the received at least one request.

Detailed embodiments of the claimed structures and methods are disclosed herein however it can be understood that the disclosed embodiments are merely illustrative of the claimed structures and methods that may be embodied in various forms. This invention may however be embodied in many different forms and should not be construed as limited to the exemplary embodiments set forth herein. Rather these exemplary embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this invention to those skilled in the art. In the description details of well known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.

Embodiments of the present invention relate generally to the field of computing and more particularly to serialized tokens. The following described exemplary embodiments provide a system method and program product for generating and distributing serialized tokens. Therefore the present embodiment has the capacity to improve the technical field associated with serialized tokens by enabling clients to name and define serialized tokens. Specifically the present embodiment may enable clients instead of servers to name and define the format for serialized tokens store the named and defined format for the serialized tokens on servers and request distribution of the named and defined serialized tokens on demand based on the format definitions.

As previously described with respect to serialized tokens servers commonly dictate set formats for generating serialized tokens and incrementally distributing the serialized tokens at clients requests. However having servers dictate the generation and distribution of serialized tokens is limiting. Certain aspects such as the life cycle of the serialized token may be controlled by the server. Furthermore applications may have code for token generation and supply which means that the same sort of code may be written over and over. However the required format generated by the server may be different. As such it may be advantageous among other things to provide a system method and program product for enabling client side devices to generate and control distribution of serialized tokens. Specifically the system method and program product may enable clients to name formats associated with serialized tokens so that the number of potential formats is only limited by the possible number of names control the format of the serialized tokens consumed by the clients control the life cycle of serialized tokens and create different formats for serialized tokens.

According to at least one implementation of the present embodiment requests for serialized tokens may be received. Next whether the received requests are for creating names and definitions for serialized tokens may be determined. Then if the received requests are for creating names and definitions for serialized tokens the clients may create the names and definitions for serialized tokens and store the names and definitions on server databases. Next if the received requests are not for creating names and definitions for serialized tokens whether the received requests are for deleting names and definitions for serialized tokens may be determined. Then if the received requests are for deleting the names and definitions for serializes tokens the stored names and definitions for serialized tokens on the server databases may be deleted. Next if the received requests are not for deleting the names and definitions for serialized tokens whether the received requests are for requesting serialized tokens based on the names and definitions may be determined. Then if the received requests are for requesting serialized tokens based on the names and definitions the stored names may be read and the serialized tokens may be formatted and retrieved based on the stored definitions. Next replies may be sent according to the performed action.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The following described exemplary embodiments provide a system method and program product for generating and distributing serialized tokens.

According to at least one implementation requests for serialized tokens may be received. Next whether the received requests are for creating names and definitions for serialized tokens may be determined. Then if the received requests are for creating names and definitions for serialized tokens the clients may create the names and definitions for serialized tokens and store the names and definitions on server databases. Next if the received requests are not for creating names and definitions for serialized tokens whether the received requests are for deleting names and definitions for serialized tokens may be determined. Then if the received requests are for deleting the names and definitions for serializes tokens the stored names and definitions for serialized tokens on the server databases may be deleted. Next if the received requests are not for deleting the names and definitions for serialized tokens whether the received requests are for requesting serialized tokens based on the names and definitions may be determined. Then if the received requests are for requesting serialized tokens based on the names and definitions the stored names may be read and the serialized tokens may be formatted and retrieved based on the stored definitions. Next replies may be sent according to the performed action.

Referring now to an exemplary networked computer environment in accordance with one embodiment is depicted. The networked computer environment may include a computer with a processor and a data storage device that is enabled to run a token generation and distribution program A and a software program . The software program may be an application program such as an internet browser and an email program. The token generation and distribution program A may communicate with the software program . The networked computer environment may also include a server that is enabled to run a token generation and distribution program B and a communication network . The networked computer environment may include a plurality of computers and servers only one of which is shown for illustrative brevity.

According to at least one implementation the present embodiment may also include a database which may be running on server . The communication network may include various types of communication networks such as a wide area network WAN local area network LAN a telecommunication network a wireless network a public switched network and or a satellite network. It may be appreciated that provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made based on design and implementation requirements.

The client computer may communicate with server computer via the communications network . The communications network may include connections such as wire wireless communication links or fiber optic cables. As will be discussed with reference to server computer may include internal components and external components respectively and client computer may include internal components and external components respectively. Server computer may also operate in a cloud computing service model such as Software as a Service SaaS Platform as a Service PaaS or Infrastructure as a Service IaaS . Server may also be located in a cloud computing deployment model such as a private cloud community cloud public cloud or hybrid cloud. Client computer may be for example a mobile device a telephone a personal digital assistant a netbook a laptop computer a tablet computer a desktop computer or any type of computing device capable of running a program and accessing a network. According to various implementations of the present embodiment the token generation and distribution program A B may interact with a database that may be embedded in various storage devices such as but not limited to a mobile device a networked server or a cloud storage service.

According to the present embodiment a program such as a token generation and distribution program A and B may run on the client computer or on the server computer via a communications network . The token generation and distribution program A B may enable clients to control the generation and formatting of serialized tokens. Specifically a user using a computer such as computer may run a token generation and distribution program A B that interacts with a software program such as a web browser to enable clients to create serialized tokens by naming and defining serialized tokens and storing the created names and definitions associated with the serialized tokens on servers for retrieval at client requests.

Referring now to an operational flowchart illustrating the steps carried out by a program for generating and distributing serialized tokens is depicted. At the token generation and distribution program A B may receive client requests. Specifically the token generation and distribution program A B may receive client requests to create names and definitions for serialized tokens delete the names and definitions associated with serialized tokens and or receive named and defined serialized tokens. For example the token generation and distribution program A B may receive HTTP RESTful API requests from client applications to name and define serialized tokens.

Next at the token generation and distribution program A B may determine whether the received requests are for creating names and definitions for serialized tokens. As previously described at step the token generation and distribution program A B may receive client requests to create names and definitions for serialized tokens. For example the token generation and distribution program A B may receive HTTP RESTful API requests from a client application to create names and definitions for serialized tokens associated with the World Wide Web. Therefore the token generation and distribution program A B may determine that the received requests are to create names and definitions for serialized tokens.

Then at the token generation and distribution program A B may enable clients to create the names and definitions for the serialized tokens. Specifically according to one embodiment the token generation and distribution program A B may receive the format for distributing serialized tokens by enabling clients to create names and definitions for serialized tokens. For example the token generation and distribution program A B may receive names and definitions for serialized tokens via JavaScript Object Notation JSON data and or Extensive Markup Language XML data. Furthermore the token generation and distribution program A B may enable users to create names for serialized tokens such as naming the serialized tokens as MY SERIALIZED TOKENS and may enable users to create definitions for the name MY SERIALIZED TOKENS such as defining MY SERIALIZED TOKENS as LITERAL AA 0000 to LITERAL ZZ 9999 where 0000 9999 is a first counter and AA ZZ is a second counter and the first counter and the second counter determine the order of distribution for the serialized tokens. Thus according to the previous example the token generation and distribution program A B may distribute the serialized tokens based on the created definition by incrementing the first counter 0000 9999 in the order defined by users then incrementing the second counter AA ZZ in the order defined by users.

For example the token generation and distribution program A B may increment the first counter 0000 9999 by 1 up to 9999 i.e. 0001 0002 0003 . . . NNNN then increment the second counter AA by 1 up to ZZ i.e. AA AB AC . . . . Therefore the token generation and distribution program A B may determine that the first counter 0000 9999 has a min value of 0000 and a max value of 9999 and that the second counter has a min value of 0 and a max value of 675 i.e. based on 26 letters in the alphabet calculated as 26 26 1 . Furthermore the token generation and distribution program A B may determine that the number of counting positions used by the first counter 0000 9999 is 4 i.e. 4 numbers are used by the first counter to increment by 1 and the number of counting positions used by the second counter AA ZZ is 2 i.e. 2 letters are used by the second counter to increment by 1 . Additionally the token generation and distribution program A B may determine that the symbols used for the first counter are 0 1 2 3 4 5 6 7 8 9 and that the symbols used by the second counter are A B C D E F G H I J K L M N O P Q R S T U V W X Y Z. Thus according to the previous example the token generation and distribution program A B may enable users to generate pseudocode for creating names and definitions for serialized tokens such as 

Also according to one embodiment the token generation and distribution program A B may enable users to create non numeric definitions for serialized tokens. For example the token generation and distribution program A B may enable users to name serialized tokens as BEATLES and may enable users to create definitions for the serialized tokens BEATLES by using 4 unique IDs such as JOHN PAUL GEORGE RINGO. Furthermore the token generation and distribution program A B may enable users to increment BEATLES by 1 from JOHN to RINGO in the order of JOHN PAUL GEORGE RINGO. Therefore according to the previous example the token generation and distribution program A B may enable users to generate pseudocode for naming and defining the non numeric serialized tokens such as 

Then at the token generation and distribution program A B may store the created names and definitions for serialized tokens on server databases. As previously described at step the token generation and distribution program A B may determine whether the received requests are for creating names and definitions for serialized tokens and if so the token generation and distribution program A B may enable users to create the names and definitions for the serialized tokens at step . For example and as previously described at step the token generation and distribution program A B may enable users to create MY SERIALIZED TOKENS and may enable users to define MY SERIALIZED TOKENS as LITERAL AA 0000 to LITERAL ZZ 9999. As such the token generation and distribution program A B may receive the created names and definitions for serialized tokens then may store the received names and definitions for serialized tokens on server databases for retrieval at clients requests.

Next at the token generation and distribution program A B may determine whether the received client requests are to delete the names and definitions associated with the serialized tokens. Specifically if the token generation and distribution program A B determines that the received clients requests are not for creating names and definitions for serialized tokens at step the token generation and distribution program A B may determine whether the client requests are for deleting the names and definitions associated with serialized tokens. For example the token generation and distribution program A B may have enabled users to create names and definitions for the serialized tokens named BEATLES. Then the token generation and distribution program A B may receive a client request to delete the serialized tokens associated with the name BEATLES.

Then at the token generation and distribution program A B may delete the names and definitions associated with the serialized tokens from the server databases. As previously described at step the token generation and distribution program A B may store names and definitions associated with serialized tokens on server databases. For example the token generation and distribution program A B may have stored the names and definitions associated with the serialized tokens named MY SERIALIZED TOKENS. Then as previously described at step the token generation and distribution program A B may determine that a received client request such as HTTP DELETE MY SERIALIZED TOKEN is a request for the server to delete the stored name and definition associated with the serialized tokens named MY SERIALIZED TOKENS. Therefore the token generation and distribution program A B may delete the stored name MY SERIALIZED TOKENS and the definitions associated with the stored name MY SERIALIZED TOKENS from the server databases.

Next at the token generation and distribution program A B may determine whether the received client requests are requests to receive serialized tokens. Specifically if the token generation and distribution program A B determines that the received clients requests are not for generating named and defined serialized tokens at step and not for deleting the named and defined serialized tokens at step the token generation and distribution program A B may determine whether the received clients requests are requests to receive serialized tokens based on the names and definitions. As previously described at step the token generation and distribution program A B may store the names and definitions associated with serialized tokens. As such the token generation and distribution program A B may enable clients to use serialized tokens by receiving requests to receive serialized tokens based on the names and definitions. For example the token generation and distribution program A B may store the names and definitions for serialized tokens such as the name MY SERIALIZED TOKENS and the definition LITERAL AA 0000 to LITERAL ZZ 9999. Then at step the token generation and distribution program A B may determine that the received client request such as HTTP GET MY SERIALIZED TOKEN is a request to receive serialized tokens based on the name MY SERIALIZED TOKENS and the definition LITERAL AA 0000 to LITERAL ZZ 9999.

As such at step the token generation and distribution program A B may read the stored name and definition from the server databases. Thus according to the previous example based on the received client request the token generation and distribution program A B may read the stored definition name MY SERIALIZED TOKENS.

Then at step the token generation and distribution program A B may format and distribute the requested serialized tokens according to the stored name and definition. Specifically the token generation and distribution program A B may format and distribute serialized tokens to the requesting clients based on the created names and definitions. Therefore based on the previous example the token generation and distribution program A B may read the stored name MY SERIALIZED TOKENS then may format and distribute MY SERIALIZED TOKENS based on the definition LITERAL AA 0000 to LITERAL ZZ 9999.

For example the token generation and distribution program A B may determine that the client requests the next 3 serialized tokens associated with the created name MY SERIALIZED TOKENS. Furthermore the token generation and distribution program A B may determine that the next 3 serialized tokens associated with the created name MY SERIALIZED TOKENS and distributed based on the definition LITERAL AA 0000 to LITERAL ZZ 9999 are LITERAL AA 0056 LITERAL AA 0057 and LITERAL AA 0058. Therefore the token generation and distribution program A B may format the serialized tokens based on the created name and definition by receiving the determined next 3 serialized tokens associated with MY SERIALIZED TOKENS as well as bookmarking the counting position of the first counter and the second counter i.e. determining where the counter left off which for this example is at LITERAL AA 0059 .

Then at the token generation and distribution program A B may send responses based on the received client requests. Specifically the token generation and distribution program A B may send responses based on the determinations made at steps and . For example as previously described at step the token generation and distribution program A B may receive requests for creating names and definitions for serialized tokens may enable clients to create the names and definitions at step and may store the created names and definitions on server databases at step . Therefore the token generation and distribution program A B may send a response indicating that the user s names and definitions for serialized tokens are generated and stored. Also for example and as previously described at step the token generation and distribution program A B may receive client requests to delete created names and definitions for serialized tokens and may delete the names and definitions for serialized tokens at step . Therefore the token generation and distribution program A B may send a response indicating that the created names and definitions for serialized token are deleted. Furthermore for example and as previously described at step the token generation and distribution program A B may receive client requests to receive serialized tokens based on created names and definitions. Therefore the token generation and distribution program A B may send a response that may include the requested serialized tokens according to the created name and definition.

It may be appreciated that provide only illustrations of one implementation and does not imply any limitations with regard to how different embodiments may be implemented. Many modifications to the depicted environments may be made based on design and implementation requirements. According to one embodiment in step the token generation and distribution program A B may send error messages as responses to users. For example the token generation and distribution program A B may receive client requests to receive serialized tokens named MY SERIALIZED TOKENS. However MY SERIALIZED TOKENS may not have remaining serialized tokens. Also for example the token generation and distribution program A B may receive a request for creating serialized tokens named MY SERIALIZED TOKENS. However the name MY SERIALIZED TOKENS may already be in use. Thus in the first example the token generation and distribution program A B may send an error message as a response indicating that there are no more serialized tokens according to the definition associated with the name MY SERIALIZED TOKENS. Furthermore in the second example the token generation and distribution program A B may send an error message as a response indicating that the name MY SERIALIZED TOKENS is already in use.

Data processing system is representative of any electronic device capable of executing machine readable program instructions. Data processing system may be representative of a smart phone a computer system PDA or other electronic devices. Examples of computing systems environments and or configurations that may represented by data processing system include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems network PCs minicomputer systems and distributed cloud computing environments that include any of the above systems or devices.

User client computer and network server include respective sets of internal components and external components illustrated in . Each of the sets of internal components includes one or more processors one or more computer readable RAMs and one or more computer readable ROMs on one or more buses and one or more operating systems and one or more computer readable tangible storage devices . The one or more operating systems the software program the token generation and distribution program A in client computer and the token generation and distribution program B in network server computer are stored on one or more of the respective computer readable tangible storage devices for execution by one or more of the respective processors via one or more of the respective RAMs which typically include cache memory . In the embodiment illustrated in each of the computer readable tangible storage devices is a magnetic disk storage device of an internal hard drive. Alternatively each of the computer readable tangible storage devices is a semiconductor storage device such as ROM EPROM flash memory or any other computer readable tangible storage device that can store a computer program and digital information.

Each set of internal components also includes a R W drive or interface to read from and write to one or more portable computer readable tangible storage devices such as a CD ROM DVD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device. A software program such as a token generation and distribution program A and B can be stored on one or more of the respective portable computer readable tangible storage devices read via the respective R W drive or interface and loaded into the respective hard drive .

Each set of internal components also includes network adapters or interfaces such as a TCP IP adapter cards wireless Wi Fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The token generation and distribution program A and software program in client computer and the token generation and distribution program B in network server can be downloaded to client computer from an external computer via a network for example the Internet a local area network or other wide area network and respective network adapters or interfaces . From the network adapters or interfaces the token generation and distribution program A and software program in client computer and the token generation and distribution program B in network server computer are loaded into the respective hard drive . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Each of the sets of external components can include a computer display monitor a keyboard and a computer mouse . External components can also include touch screens virtual keyboards touch pads pointing devices and other human interface devices. Each of the sets of internal components also includes device drivers to interface to computer display monitor keyboard and computer mouse . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter . Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time. Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings. Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations. Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises. Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services. Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes RISC Reduced Instruction Set Computer architecture based servers servers blade servers storage devices and networks and networking components . In some embodiments software components include network application server software and database software .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients .

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and Token Generation and Distribution . A Token Generation and Distribution Program A B may be offered as a service in the cloud i.e. Software as a Service SaaS for applications running on mobile devices and may generate and distribute serialized tokens based on client input.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

