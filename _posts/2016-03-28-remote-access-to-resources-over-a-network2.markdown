---

title: Remote access to resources over a network
abstract: Systems and techniques are provided for controlling requests for resources from remote computers. A remote computer's ability to access a resource is determined based upon the computer's operating environment. The computer or computers responsible for controlling access to a resource will interrogate the remote computer to ascertain its operating environment. The computer or computers responsible for controlling access to a resource may, for example, download one or more interrogator agents onto the remote computer to determine its operating environment. Based upon the interrogation results, the computer or computers responsible for controlling access to a resource will control the remote computer's access to the requested resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09628489&OS=09628489&RS=09628489
owner: SonicWall Inc.
number: 09628489
owner_city: Santa Clara
owner_country: US
publication_date: 20160328
---
The present application is a continuation and claims the priority benefit of U.S. patent application Ser. No. 14 058 215 filed Oct. 19 2013 now U.S. Pat. No. 9 300 670 which is a continuation and claims the priority benefit of U.S. patent application Ser. No. 12 938 330 filed Nov. 2 2010 now U.S. Pat. No. 8 601 550 which is a continuation and claims the priority benefit of U.S. patent application Ser. No. 11 251 087 filed Oct. 14 2005 now U.S. Pat. No. 7 827 590 which is a continuation in part and claims the priority benefit of U.S. patent application Ser. No. 11 009 692 filed Dec. 10 2004 now U.S. Pat. No. 8 255 973 which is continuation in part and claims the priority benefit of U.S. provisional application No. 60 528 870 filed Dec. 10 2003 the disclosures of which are incorporated herein by reference.

The present invention relates to the determination of access to resources on a remote server computer over a network. Various aspect of the invention may be used to limit access to resources on a remote computer based upon a user s computing environment.

In the last decade the use of electronic computer networks has greatly increased. Electronic computer networks may be found in businesses schools hospitals and even residences. With these networks two or more computing devices communicate together to exchange packets of data according to one or more standard protocols such as the TCP IP protocols. Usually one computer often referred to as a client requests that a second computer perform a service. In response the second computer often referred to as a server performs the service and communicates the resulting data back to the first computer.

As reliance on computers has increased the demand to access computer resources from a variety of locations has increased as well. Conventionally for example a business user may have accessed resources on a corporate server through a desktop computer connected to the corporate server by a private secure corporate network. Now however that user may wish to access the same corporate resources from a personal computer at home over a public network such as the Internet. Still further the user may wish to access those resources from a laptop computer while traveling. The connection to the corporate server computer might then be made over a publicly accessible wireless network connection in a hotel or coffee shop. In some instances that user may even desire to access those corporate resources from a computer at a public kiosk.

In addition to accessing a resource on a remote computer from a variety of computing environments the user may also employ a number of different communication and security techniques when accessing those resources. For example a laptop provided by the same company maintaining the desired resources may have dedicated communication software installed. It may also have sophisticated security related software such as commercial anti malware and anti virus software. The same user s home computer however may only have some limited security related software such as residential anti virus software. Also it may communicate with the remote server computer using a browser application with additional plug in software to enhance the browser s communication abilities. Still further a computer at a public kiosk may have little or no security related software and provide only a basic browser software application for communicating with the remote server. Still further a computer may access remote resources via communication channels secured using the Secure Socket Layers SSL protocol the Hypertext Transfer Protocol Secure HTTPS protocol which employs the Secure Socket Layers SSL protocol or the Internet Protocol Security IPSec protocol on another computer.

Despite this wide variety of computing environments and associated variety of security risks now being used to access resources on remote computers actual access to resources typically is predicated only on the user s identification. This identification may be direct such as by credential information personally associated with the user or indirect such as credential information associated with a particular computer or copy of a software application. Thus if a user can provide the proper credentials to authenticate his or her identity the user can access authorized resources regardless of the type of resource being accessed or the security of the computing environment being used to access the resources.

Various aspects of the invention can be employed to a user s access to resources on a remote computer based upon the computing environment of the computer or end point being employed by the user to obtain those resources. With some examples of the invention for example an analysis of the security of the user s computing environment determine whether the user is granted access to resources on a remote computer. Thus authorization to access resources on a remote computer may be graded according to the current security state of the user s computing environment.

In other examples of the invention an analysis of the communication software available to the user s computing environment may determine how resources on a remote computer are provided to the user. With still other aspects of the invention a user may be provisioned with one or more process objects in order to enhance the user s computing environment. For example the user s computing environment may be provisioned with one or more security objects deemed necessary to obtain requested resources from a remote computer.

As will be discussed in further detail below various embodiments of the invention provide systems and techniques for controlling requests for resources from remote computers. More particularly a remote computer s ability to access a resource will be determined based upon the computer s operating environment. With these embodiments the computer or computers responsible for controlling access to a resource will interrogate the remote computer to ascertain its operating environment. The computer or computers responsible for controlling access to a resource may for example download one or more interrogator agents onto the remote computer to determine its operating environment. The interrogator agents may interrogate the remote computer regarding any combination of static artifacts residing on the remote computer and process objects including active processes and agents. The interrogator agents may for example interrogate the remote computer regarding security process objects such as anti virus agents communication process objects such as agents used to establish or maintain a virtual private network or both.

In addition to passively interrogating the remote computer with some embodiments of the invention the computer or computers responsible for controlling access to a resource may additionally provision the remote computer with process objects. For example the computer or computers responsible for controlling access to a resource may require a remote computer to have a specific portfolio of process objects in order to access the resource. In some embodiments this portfolio may vary depending upon the identity of the person using the remote computer to access the resource. If the interrogation process determines that the remote computer does not possess the required portfolio of process objects then the computer or computers responsible for controlling access to the resource may provision the remote computer with the missing process objects. Some embodiments of the invention may additionally provision and install an installation agent to facilitate the subsequent installation of process objects.

While various embodiments of the invention may use any number of interrogator agents some embodiments of the invention will use two interrogator agents an interrogator agent that is employed before authenticating the identity of the remote computer s user and an interrogator agent that is employed after authenticating the identity of the remote computer s user. With these embodiments the pre authentication interrogator agent may interrogate the remote computer for artifacts. Based upon the determined artifacts the computer or computers responsible for controlling access to a resource may provision the remote computer with on or more process objects such as security process objects useful to protect the user s credential information during the authentication process.

The post authentication interrogator agent can then interrogate the remote computer for additional artifacts process objects or a combination of both. Depending upon the interrogation results and any additional provisioning of process objects the computer or computers responsible for controlling access to a resource may determine whether the remote computer may access that resource. Alternately or additionally they may determine the communication mechanism used to access the resource.

Various embodiments of the invention will typically be employed to facilitate cooperation between a client and one or more servers. As known in the art a client server configuration including a Web based architecture configuration occurs when a computing device requests the use of or access to a resource from another computing device. For convenience and ease of understanding hereafter requests to use obtain or otherwise access a resource may generically be referred to simply as requesting a resource while using obtaining or otherwise accessing a resource may generically be referred to simply as obtaining a resource.

Because the computing device responsible for providing the resource serves the computing device initially requesting the resource the computing device responsible for providing the resource is often referred to as a server. The computing device requesting the resource is then commonly referred to as a client. Also because a request for resources and the delivery of those resources may be relayed among a variety of computing devices having a client server relationship the client computing device initially requesting the resource is commonly referred to as the end point client.

It should be noted that as used herein a server may be considered a virtual device rather than a physical device. For example the functions of the server may be performed by a single computing device. Alternately the functions of the server may be performed by a group of computing devices cooperating together. Similarly a client may be considered a virtual device. That is one or more separate computing devices can cooperate together to function as a client. In many situations a client may work with multiple servers in order to obtain a resource. For example a client may submit the request for a resource to a first server which may then relay the request to a second server. The second server may authenticate the identity of the client or a user employing the client to determine whether the client should be permitted may access or use the requested resource. Yet another server may then actually provide the resource to the client.

As used herein a resource may be any type of object or service available through a server. For example the resource may be a data file or a directory of data files. The resource may also be a service such as an electronic mailing service a database service a document management service a remote shell or terminal service or the like.

Various embodiments of an end point control server system according to the invention may be implemented using electronic hardware. More typically however the various features of the invention will be implemented by executing software instructions on a programmable computing device or computer. Accordingly shows one example of a computer that can be used to implement various aspects of the invention.

The computer system illustrated in includes a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system memory may include a read only memory ROM and a random access memory RAM . A basic input output system BIOS containing the routines that help to transfer information between elements within the computer system such as during startup may be stored in the read only memory ROM . If the computer system is embodied by a special purpose server application computer system it may further include for example another processing unit a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk not shown or an optical disk drive for reading from or writing to a removable optical disk not shown such as a CD ROM or other optical media.

A number of program modules may be stored on the ROM the hard disk drive the magnetic disk drive and the optical disk drive . A user may enter commands and information into the computer system through an input device such as a keyboard a pointing device a touch screen a microphone a joystick or any other suitable interface device. Of course the computer system may simultaneously employ a variety of different input devices as is known in the art. An output device such as a monitor or other type of display device is also included to convey information from the computer system to the user. As will be appreciated by those of ordinary skill in the art a variety of output devices such as displays speakers and printers may alternately or additionally be included in the computer system .

In order to access other computing devices the computer system should be capable of operating in a networked environment using logical connections to one or more remote computing devices such as the remote computing device . The computer system may be connectable to the remote computer through a local area network LAN or a wide area network WAN such as the Internet. When used in a networking environment the computer system may be connected to the network through an interface such as a wireless or wired network interface card NIC or similar device. While the interface is illustrated as an internal interface in it may alternately be an external interface as is well known in the art. Of course it will be appreciated that the network connections shown in this figure are for example only and other means of establishing a communications link with other computers may be used.

As employed herein the term user will refer to the individual using the client or other client to obtain resources from the server system . For some applications of the invention the client may be implemented on a computing device owned by its user or by the same corporation or institution maintaining the server system or by a related corporation or institution . With still other applications of the invention the client may be implemented on a computing device owned by a third party and may even be provided in a publicly available kiosk.

As will be discussed in greater detail below the client transmits requests to the access server for the use of or access to one or more resources provided through the workplace server . With various embodiments of the invention the client may request one or more resources from the workplace server through a secure communication channel. For example the client may seek to establish a secure communication channel using any desired conventional security protocol such as the Secure Socket Layers SSL protocol the Hypertext Transfer Protocol Secure HTTPS protocol which employs the Secure Socket Layers SSL protocol the Internet Protocol Secure protocol IPSec the SOCKet Secure SOCKS protocol the Layer Two Tunneling Protocol L2TP the Secure Shell SSH protocol or the Point to Point Tunneling Protocol PPTP . Further the client may seek to establish a secure communication channel using a secure remote computer connection technique such as Windows Remote Desktop Citrix Virtual Network Computing VNC or other screen scraping technology.

It also should be noted that the workplace server shown in is merely representative of any combination of servers that can provide a requested resource. Thus the workplace server may be any server or combination of servers responsible for providing one or more resources to clients. For example the workplace server may be an electronic mail server a server that maintains a database a print server a data storage server a file or document management server a Voice over Internet Protocol VoIP server a remote shell or terminal service or the like. With some implementations the workplace server may only be indirectly responsible for providing requested resources. For example the workplace server may be a proxy server providing a connection to another server through for example a private network which will actually provide requested resources to the client . Thus the resource being sought by the user over the network does not have to be in physical or logical proximity to the workplace server . It also should be appreciated that the workplace server may be responsible for providing a variety of different types of resources including any combination of data files and services.

The access server may be any device or combination of devices that provides a gateway to the remainder of the server system or other resource servers . Typically the access server will be responsible for establishing both secure and unsecured communication channels with the client . For example as known in the art the client may use an unsecured communication channel to contact the access server . The access server may then respond to the client that the client needs to establish a secure communication channel and the manner in which this may be done. In reply the client will request that the access server establish a secure communication channel for the client to obtain the requested resource. The access server can then use an encrypted communication protocol to create a secure communication channel between the client and the server system .

It also should be noted that in some applications of the invention the client will contain special purpose software for establishing a secure connection with the server system through the access server . For example the access server may be configured to cooperate with software resident on the client to create a Virtual Private Network VPN secure communication session between the client and the server system using secure encryption communication protocols such as the Secure Sockets Layer SSL protocol or the Internet Protocol Secure IPSec protocol. With other applications a user may employ a general purpose software application on the client such as a browser application to establish a secure connection to the server system through the access server . For example a user may attempt to employ a browser application on the client such as the Microsoft Internet Explorer or Mozilla to access a Universal Resource Locator URL address in the server system . The access server may therefore be configured to use appropriate secure communication protocols such as the Secure Hypertext Transfer Protocol HTTPS to establish secure communication with a client using such a general purpose software application. Accordingly the access server may include multiple components or be comprised of multiple servers for handling multiple communication techniques.

In some embodiments of the invention the access server may maintain the secure communication channel with the client . With other embodiments of the invention however the access server may simply establish the secure communication channel. It may then pass off responsibility for maintaining and administering the secure communication channel to another server such as the workplace server .

The policy server determines the conditions under which a user of the client may obtain the requested resources. More particularly as will be explained in detail below the policy server administers policy rules specifying the conditions under which a user may obtain a requested resource. With various embodiments of the invention these conditions may include both the identity of the user and the operating environment of the client . With various embodiments of the invention the policy server also may validate authentication credentials submitted by a user with a request to obtain resources from the server system . As used herein the term administrator will refer to a person authorized to configure policy rules for enforcement by the policy server .

As shown in the policy server includes a credentials and profile information analysis module . It also includes a rule set and a rule configuration module . As will be discussed in further detail below the credentials and profile analysis module receives credential and profile information regarding a user requesting to access or use resources on the client computer . The credentials and profiles analysis module then compares this received information with rules in the rule set to determine if the requested access should be granted. With various embodiments of the invention the credentials and profiles analysis module may also require some action from the client computer based upon requirements specified in the rule set . The rule configuration module then provides the server system administrator with a user interface for configuring and revising rules in the rule set .

The access server may support a variety of different communication techniques by which the client may securely communicate with the server system as noted above. Accordingly with various embodiments of the invention an administrator may employ the policy server to implement a single access control policy for multiple communication techniques provided by the access server .

The entry for each rule may include for example a selection check box a rule number and an action indicator . The selection check box can be used to select the associated rule in order to for example delete or reorder the rule. The rule number then indicates the order in which the rule will be evaluated. With various embodiments of the invention the rule number may also serve as an edit command control that the administrator can activate when he or she wishes to edit the rule. The action indicator then indicates the function of the rule. For example a green action indicator may be used to indicate that the rule will permit access to the associated resource for a compliant user while a red action indicator may be used to indicate that the rule will prohibit access to an associated resource for a compliant user.

A rule may also include a description a user identification a destination a communication method indicator and a zone indicator . The description indicator can be used by the administrator to provide a convenient description of the function and or applicability of the rule. The user indicator then indicates the users to which the rule applies. For example an administrator may designate that a rule applies to one or more specific users one or more particular communities one or more particular realms or any combination of these. Alternately the administrator may designate the rule to be applicable to any user. The destination indicator is then associated with the resource being controlled by the rule. With some embodiments of the invention the destination indicator may indicate the location in the server system through which the resource may be accessed. With still other embodiments of the invention however the destination indicator may identify the resource itself.

The communication method indicator indicates the particular type of communication method to which the rule will be applied. As will be discussed in detail below various embodiments of the invention provide multiple communication techniques for establishing a secure communication session between the client and the server system . As will be appreciated by those of ordinary skill in the art some communication techniques will be more inherently secure than others. Accordingly a rule can be configured to specify its applicability to one or more particular communication techniques. Advantageously as described herein various embodiments of the invention allow an administrator to designate rules for all communication techniques using a unified set of user interfaces provided by a single rule configuration system. Lastly the zone indicator indicates the zone in which the operating environment of the client must be classified in order to comply with the requirements of the rule.

The action controls allow the administrator to specify the action that the rule will take if a client complies with the requirements of the rule. For example if the administrator selects the permit action control then the client will be permitted to access the associated resource upon compliance with the rule. Similarly if the administrator selects the deny action control the client will be denied access to the resource if the policy server determines that the client is in compliance with the provisions of the rule. An administrator can then select the disabled action control in order to disable the rule.

Similarly when configuring a rule the administrator must designate the resource whose access will be controlled by the rule. The administrator may therefore activate the destination resource edit command control B to obtain a list of resources available through the server system . The administrator may then select from this list in order to specify the resources will be included in the destination resources control A to which the rule will be applied.

The provisioning server and the EPC server assist the policy server to enforce the access rules. For example the provisioning server and the EPC server cooperate to interrogate the client computer to detect the presence of desired process objects. Further depending upon the rules specified in the rule set the provisioning server and the EPC server may cooperate to install and activate desired process objects on the client computer . For example if a rule requires that the client have a specific portfolio of security process objects installed and operational then the provisioning server and the EPC server may cooperate to install and activate one or more of those security process objects on the client . Also with some embodiments of the invention the provisioning server and the EPC server can determine if the client is capable of executing a communication process object that will implement a more preferred or alternate communication technique. With these embodiments the provisioning server and the EPC server may cooperate to install and activate one or more such communication process objects on the client device .

The security objects may be any software such as for example anti malware or anti virus agents. As used herein the term malware generally will refer to software agents or processes that are intended to obtain information for illicit purposes. The term virus will then generally be used to refer to software agents or processes intended to damage data or obstruct the operation of the host computer. It should be appreciated however that these terms should not be construed as limiting since many software agents and processes may both obtain information for illicit purposes and damage data or obstruct the operation of the host computer. The security objects may also include client certification agents client integrity agents client inventory agents data protection agents patch management agents personal firewall agents system audit agents and vulnerability assessment agents. Still further with various embodiments of the invention the provisioning server and the EPC server can cooperate to check for and or install any desired security object on the client computer .

As noted above and as will be discussed in detail below a policy rule may determine the availability of a resource based upon the identity of the user and the operating environment of the client . In order to allow an administrator to simultaneously specify a variety of client operating environments for a rule multiple client operating environments may be categorized into a zone of trust. Accordingly a policy rule may specify that a user may access a resource when his or her client operating environment can be categorized into zone of trust or zone of trust but will be refused access if his or her client operating environment is categorized into zone of trust . Another policy rule may then specify that a different user user B can only obtain that same resource if his or her client operating environment is categorized in zone of trust .

Accordingly the provisioning server and the EPC server cooperate to interrogate a client s operating environment and if necessary to change a client s operating environment by provisioning the client with specified security objects. With various embodiments of the invention however the provisioning server and the EPC server may split the interrogation and provisioning process into two stages. One stage will be performed before the user authenticates his or her identity and the second stage will then be performed after the use has authenticated his or her identity.

This approach advantageously allows the provisioning server and the EPC server to ensure that the client is provisioned with specified anti malware agents or other desired agents before the authentication process begins. The specified anti malware agents will then prevent malware from illicitly obtaining the user s credentials during the authentication process. Moreover by provisioning the client in stages the provisioning server and the EPC server can avoid unnecessary provisioning steps if for example the user s credentials are not accepted during the authentication process.

Various embodiments of the invention may therefore factor the client operating environment required before the authentication process begins and the client operating environment required after the authentication process has been completed in determining the zone of trust into which the client computer will be categorized Moreover by partitioning the criteria for a zone of trust into pre authentication requirements and post authentication requirements various embodiments of the invention can customize the process for determining the post authentication requirements based upon the user s identification obtained during the authentication process. Accordingly the tools employed to interrogate the user s client regarding its operating environment can be varied based upon the identity of the user.

The state of the client s operating environment when requesting a resource is referred to as the client s signature. This signature is a list of pre existing static process objects or artifacts on the client . The signature may also include processes or agents running on the client . The information in the signature can be used to determine the identity of the client .

For example an administrator for a corporate managed server system may expect all corporate owned computers to be configured with a particular set of artifacts and agents. Likewise the administrator may expect a responsible employee to ensure that his or her personal computer is configured with a different set of particular artifacts and agents. On the other hand the administrator may expect a computer provided in a public kiosk to have only a minimal set of artifacts and agents. Accordingly the EPC server may use the signature of a Client to distinguish a corporate owned computer from a personal computer owned by an employee of the company from a computer at a public kiosk. The identity inherently provided by the signature may then subsequently used to classify the client into a zone.

With various embodiments of the invention a signature definition may be configured as a Boolean logic expression of literal values that conform to the standard Conjunctive Normal Form CNF i.e. a conjunction of disjunctions . More particularly a signature can be defined as a group of artifact literal values associated by the logical AND operator and one or more groups of agent literal values associated by the logical OR operator. The group of artifact literal values is then associated with the group or groups of agent literal values by a logical AND operator. Thus for a client operating environment to match a particular signature each artifact literal value must be TRUE and one agent literal value from each group of agents literal values also must be TRUE.

For example if artifact literal A ARTIFACT agent literal PFW Personal Firewall agent literal AV AntiVirus agent literal CC ClientCertification and agent literal O Other for a yet to be defined agent type a signature definition can then be expressed as 

For various embodiments of the invention the artifact literals may include DIR where the value of this artifact literal will be a directory pathname to be found on client FILE where the value of this artifact literal will be a file to be found on the client and REGISTRY where the value of this artifact literal will be a KeyName to be found in the registry of the client. The artifact literals may also include PROCESS where the value of this artifact literal value is a running process to be found on the client DOMAIN where the value of this artifact literal will be a domain of which the client is a member and OS where the value of this artifact literal will be an operating system employed by the client.

The agent literals may include the PFW AGENT literal and the AV AGENT literal. The values of these agent literals will specify a particular instance of that agent. For example the PFW AGENT literal value ZONE PFW may correspond to the Personal Firewall provided by Zone Labs Corporation. Thus for a client to have a signature matching a signature definition requiring this PFW AGENT literal value the Personal Firewall software application provided by ZONE ALARMS Corporation must exist and be running on the client . The PFW AGENT literal value SYGATE PFW may then correspond to the Sygate Personal Firewall software application while the PFW AGENT literal value MS PFW may correspond to the Microsoft Personal Firewall software application. Similarly the AV AGENT literal value MCAFEE AV may correspond to the McAfee Anti Virus software application while the AV AGENT literal value NORTON AV may correspond to the Norton Anti Virus software application.

It should be noted however that this list of possible artifact and agent literals is one possible example and should not be considered limiting. Various embodiments of the invention may provide any combination of desired artifacts and agents for inclusion in a signature definition. Still further various embodiments of the invention may even allow an administrator to create define new artifact and agent literals as desired. Various embodiments of the invention also may allow an administrator to employ any combination of literal comparison operators in addition to the default equality comparison operator to define a signature such as the literal comparison operators and . This permits for example the evaluation of the Microsoft Windows operating system registry entries during the authentication process.

With various embodiments of the invention the policy server may maintain a global list of signatures. An administrator can then select one or more signatures from this global list to define a zone of trust. While the precise configuration of the list structure will be implementation specific the structure of one example of such a list is provided below.

A zone of trust or zone is an assertion of state on a client. As previously noted the client state defining a zone of trust is a combination of the static and dynamic state existing on the client device prior to instantiating an authenticated secure communication session i.e. the signature and the dynamic state added to the client during the lifecycle of the authenticated secure communication session. State assertions that are added to the client during the authenticated secure communication session also are expressed as individual literals in a zone of trust definition. Like the signature definitions a definition of a zone of trust may be created as a Boolean logic expression of literals that conform to the standard Conjunctive Normal Form CNF .

With the illustrated embodiments of the invention the definition of a zone of trust will first include one or more signature literal values. A signature literal value is true if the pre authentication operating environment of the client i.e. its signature matches the signature definition for that literal. The definition of a zone of trust may be expressed as a group of compound signature literals associated by the logical OR operator followed by one or more groups of agent literals associated by the logical OR operator. Because the agent literals employed in this definition correspond to agents that are provisioned and or after the authentication process these agent literals are referred to below as ADDED AGENT literals. The group of compound signature literals is associated with the group or groups of ADDED AGENT literals by the logical AND operator. Accordingly for a client operating environment to match a zone one of the values of the signature literals must be TRUE. Also one of the values in each group of the ADDED AGENT literals also must be TRUE in order for the client operating environment to match a zone of trust definition.

For example if signature literal S SIGNATURE agent literal DP DataProtection agent literal CI ClientIntegrity and agent literal O other representing a yet to be defined agent type then the definition of a zone may be expressed as 

The policy server may provide literals for a variety of different types of agents. These agents may include for example anti malware or anti Trojan agents anti virus agents client certification agents and client integrity agents. Anti malware and anti Trojan agents detect and protect against key stroke loggers back doors remote hick jacking spy ware and other processes intended to obtain information for illicit purposes. Anti virus agents then detect and protect against viruses and other similar threats. Client certification agents determine the identity of a client device through a set of heuristics and or cryptographic certification. Client integrity agents determine the integrity of the client device by performing multiple threat category functions rather than a single function.

The policy server also may provide literals for client inventory agents data protection agents and patch management agents. Client inventory agents search for artifacts on the client. They may be used for example to determine the signature of the client. Typically however these agents will not be included in signature or zone of trust definition. Instead one or more agents of this type are provisioned on the client in advance of determining a client s signature or zone of trust. Data protection agents protect data being used in authenticated secure communication sessions from being disclosed to parties other than the authenticated session user. Patch management agents manage client system patches in order to ensure that where possible security holes have been repaired by software vendors.

Still further the policy server may provide literals for personal firewall agents system audit agents and vulnerability assessment agents. Personal firewall agents wall the client off from unauthorized network traffic and the associated threats of direct client system network attack and indirect network attack. System audit agents audit the compliance of end point security policy while vulnerability assessment agents perform vulnerability scans of the client and assess its resistance to external threats.

The value of an agent will then correspond to a particular software application or other process. For example a value of ACC for the data protection agent literal DP AGENT will correspond to the Cache Cleaner software application available from Aventail Corporation of Seattle Wash. Similarly a value of ASD for the data protection agent literal DP AGENT will correspond to the Aventail Secure Desktop software application also available from Aventail Corporation of Seattle Wash. The value of SSP for the client integrity agent literal CI AGENT will correspond to the Sygate Security Portal also referred to as the Sygate On Demand product available from Sygate Technologies of Fremont Calif.

It should be noted however that this list of possible agent literals is one possible example and should not be considered limiting. Various embodiments of the invention may provide any combination of desired agents for inclusion in a zone definition. Still further various embodiments of the invention may even allow an administrator to create define new agent literals as desired. Various embodiments of the invention also may allow an administrator to employ any combination of literal comparison operators in addition to the default equality comparison operator to define a signature such as the literal comparison operators and . This permits for example the evaluation of operating system registry entries such as entries in the Microsoft Windows operating system registry during the authentication process.

Moreover it should be noted that the above described definition of a zone is described with respect to embodiments of the invention that divide the interrogation process into a pre authentication interrogation of the client s operating environment and a post authentication interrogation of the client s operating environment. Various embodiments of the invention may alternately define a zone with any combination of artifact and agent literal values associated by any combination of logical operators and comparison operators.

Various embodiments of the policy server may provide a global list of zones of trust for selection by an administrator. While the precise configuration of the list structure will be implementation specific the structure of one example of such as list is provided below.

In addition to one or more zones of trust that specify a particular signature the list of zones also typically will include a default zone that does not require a specific signature. Thus if the client fails to match any other zone of trust its operating environment will be matched with this zone of trust by default. In various implementations of the invention however this zone of trust may still require that the client be provisioned with one or more additional process objects.

With various embodiments of the invention a user will be categorized into a realm. As used herein a realm is any group of one more users that is permitted to authenticate against a specific set of authentication servers such as for example an LDAP authentication server a Radius authentication or an Active Directory authentication server. In order to allow an administrator to more conveniently associate a user with one or more zones various embodiments of the policy server may provide for the use of one or more communities. 

As used herein a community is a group of one or more users within a realm that is associated with one or more defined zones. Thus a community may be considered a subset instance of a realm authentication and authorization name space. With some applications of the invention a community definition may have some additional usefulness outside of the scope of end point control. Accordingly only the features of a community definition that relate to end point control will be discussed herein.

From the perspective of the EPC server a community represents a configuration of zones of trust in the form of a scoped list into which a specific authenticated user is authorized to be classified. As will be discussed in further detail below after a user has authenticated his or her identity the provisioning server installs a post authentication interrogator agent onto the client in order to ascertain more information regarding the client s operating environment e.g. to ascertain the remainder of the client s signature that was not discovered by the pre authentication interrogator agent . The EPC server can thus program this post authentication interrogator agent with a specific manifest of artifacts to search for on the client that correspond only to the zones of trust in which the user can be categorized. That is the post authentication interrogator agent will not need to search for the artifacts and agents included in every defined zone of trust only for those zones of trust that are applicable to that user. The interrogation results returned from this post authentication interrogator agent is then used to classify the user s client into a specific zone of trust according to the Boolean logic previously described.

While the precise configuration of the structure of a community will be implementation specific the structure of one example of a list of realms is provided below.

Once the user of the client has been authenticated and the client operating environment has been categorized into a zone of trust the policy server will determine whether the client may obtain a particular resource based upon a policy rule. With various embodiments of the invention the makeup and use of policy rules may have some additional usefulness outside the scope of end point control. Accordingly only the features of a realm definition that relate to end point control will be discussed herein.

From the perspective of the EPC server a policy rule represents the enforcement mechanism of a zone of trust. That is in order for the client operating environment to be factored into a security policy it must be associated with a policy rule. With various embodiments of the invention this association is made with the use of a zone of trust literal. More particularly when a zone of trust literal is encountered during evaluation of a policy rule the currently classified zone of trust for the user is employed in Boolean conjunctive logic for the zone of trust literal and therefore factored into the security policy. While the precise configuration of the structure of policy rules will be implementation specific the structure of one example of a list of policy rules is provided below.

It should be noted that various embodiments of the policy server may provide for hierarchical and other forms of aggregating zones in a policy rule definition.

The operation of an end point control process that may be implemented by the server system according to various embodiments will now be described in detail with reference to . In step the user employs the client to request a resource available through the workplace server . For example the user may employ a browser application on the client to provide the access server with a Universal Resource Locator URL associated with a desired resource available through the workplace server . As previously noted this initial request may be submitted via an unsecured communication channel.

In response the access server performs an authorization check of the communication with the policy server in step . If the communication is part of an existing authenticated communication session and the end point control process thus has already been performed for the client the remainder of the end point control process may be skipped. Likewise if the requested resource does not require authentication or end point control e.g. it is a publicly available resource then again the remainder of the end point control process may be skipped and the client allowed to obtain the requested resource.

If however a secure communication session has not been initiated and the requested resource is not a public resource then the access server transfers control of communications with the client to the provisioning server so that the provisioning server may begin the pre authentication interrogation of the client . Accordingly in step the provisioning server downloads the pre authentication interrogator to the client . If the pre authentication interrogator is successfully installed then the pre authentication interrogator will transmit a report of the client s operating environment back to the EPC server . With some embodiments of the invention the pre authentication interrogator may also send a message to the EPC server confirming its successful information. The interrogation report may include information regarding artifacts on the client such as its operating system name and version whether the browser supports the Java programming language and the like.

The pre authentication interrogator agent may be for example a Java applet that can be installed and activated through the browser without being blocked by any security features of the client . The pre authentication interrogator agent requires no input and returns various data to the provisioning server . The pre authentication interrogator agent is used by the server system to determine artifacts on the client in order to select the kind of post authentication interrogator to employ to complete the determination of artifacts and agents. In addition the provisioning server may use the information provided by the pre authentication interrogator agent to facilitate provisioning of additional agents on the client .

The fundamental data structure used to communicate interrogation results between the provisioning server and the pre authentication interrogator agent is the pre authentication interrogator agent artifacts schema. This data structure is a fixed set of elements that the pre authentication interrogator agent populates and sends to the provisioning server . While the precise configuration of the structure of schema will be implementation specific various examples of elements that may be employed in the schema may include operating system information for the client such as the operating system name version most recent service pack and build and the client s processor type. The elements may also include information regarding the browser being used to access the resources such as the browser name and version the version of JavaScript supported by the browser the vender and the version of Java supported by the browser. Still further the schema elements may include the local human language used by the client the size of the monitor employed by the client and any other desired environmental information that may be accessible by the pre authentication interrogator agent.

With various embodiments of the invention the pre authentication interrogator agent will obtain the information to populate the artifacts schema from conventionally available sources on the client . For example if the client is employing the Microsoft Internet Explorer browser application available from Microsoft Corporation of Redmond Wash. then the pre authentication interrogator agent may obtain the information from the Document Object Model of the browser. It should be noted that other methods well known in the art can alternately or additionally be used to determine information to populate the artifacts schema such as the availability of Active X or Java if the pre authentication interrogation of the client environment does not report on them. Once the schema is populated the pre authentication interrogator agent may then report the schema back to the EPC server using for example a cookie.

The provisioning server then transfers control to the EPC server so that the EPC server can process the results provided by the pre authentication interrogator. In step the EPC server determines whether it has received an interrogation report from the pre authentication interrogator installed on the client . If it did not receive an interrogation report then the EPC server may terminate communications with the client . If the EPC server did receive an interrogation report then in step the EPC server determines which process objects if any should be downloaded to the client . More particularly based upon the information obtained by the pre authentication interrogator agent such as the operating system processor Java runtime and Active X runtime used by the client the EPC server identifies various security objects that should be installed on the client .

For some client configurations the administrator may not require any process objects to be downloaded to the client. For example if the client is employing an operating system that is an infrequent target of malware such as the Macintosh operating system provided by Apple Computers then the EPC server may determine that no process objects should be downloaded to the client . If however the client is employing an operating system that is a frequent target of malware such as the Microsoft Windows operating system available from Microsoft Corporation of Redmond Wash. then the EPC server may identify one or more security process objects that should be downloaded to the client . As discussed in detail above these process objects are downloaded before the authentication process is started. Accordingly the administrator may desire that security process objects such as anti malware agents be downloaded to the client to better protect the confidentiality of the user s credentials during the subsequent authentication process.

Accordingly in step the provisioning server downloads any process objects designated by the EPC server to the client . If the process objects downloaded to the client were successfully installed and operating they will transmit a communication reporting their successful installation to the EPC server . Thus in step the EPC server checks to confirm that the downloaded process objects were successfully installed. If they were not then the EPC server may terminate communications with the client . If the downloaded process objects were successfully installed however then the EPC server transfers control of communication with the client to the policy server to authenticate the user.

Accordingly in step the policy server requests credential information from the user and subsequently authenticates the user in step . If the user fails to authenticate then communications with the client are terminated. If the user is successfully authenticated then control over the communication with the client is transferred back to the EPC server in order to perform the post authentication portion of the end point control process.

During the authentication process the user will identify himself or herself either directly or indirectly as a member of a community or a realm. Accordingly in step the EPC Server determines which zones of trust if any are configured for the community or realm for which the user is an authenticated member. If one or more zones of trust are configured for the user s community or realm then in step the provisioning server downloads an end point installer agent to the client . If a zone of trust was not configured for the user s community or realm then the process proceeds to step .

As noted above various embodiments of the invention may allow a user to request a resource using a variety of different communication techniques. Moreover as will be discussed in more detail below some embodiments of the invention may even provision the client with communication process objects necessary to switch communication techniques while requesting a resource thereby enabling the client to employ the most convenient or beneficial communication technique available to obtain the resource. In order to allow the client to switch communication techniques without having to reauthenticate the user these embodiments of the invention may provide the client with a set of authentication credentials confirming that the user s identity already has been authenticated by the policy server .

For example some embodiments of the invention may create a cookie on the client that includes authentication information confirming that the user s identity already has been authenticated by the policy server . Because this authentication information may be universal for the different communication techniques provided by the server system the client will not have to resubmit the user s credentials in order to establish a secure communication channel after switching to a different communication technique.

The end point installer agent is used to facilitate the subsequent provisioning of process objects on the client . Accordingly the end point installer agent will be an agent configured to work with the client s operating environment to reliably install specified process objects onto the client . As previously noted a client may employ a browser application such as the Microsoft Internet Explorer browser application to communicate with the server system . Accordingly various embodiments of the invention will employ an end point installer agent compatible with the Microsoft Internet Explorer browser application.

For example some embodiments of the invention may employ an end point installer agent implemented as an ActiveX control. Depending upon the user s privileges for installing new software applications on the client the browser may install the end point installer agent onto the client directly from a .cab file downloaded from the provisioning server . If the user does not have sufficient privileges to install ActiveX controls various embodiments of the invention may employ additional processes to facilitate the installation of the end point installer agent.

Thus if the client is employing the Microsoft Windows operating system available from Microsoft Corporation of Redmond Wash. some embodiments of the invention may also download a Java applet referred to as an end point loader to facilitate the download and installation of the end point installer agent. The end point loader will download a .cab for the end point installer agent file and then use the Java Native Interface JNI to extract the .cab file into for example one or more .dll and .inf files and instantiate the end point installer agent. The end point loader will then instruct the end point installer agent to register itself with the operating system. When this process is employed however the end point installer agent is configured to register itself in the users portion of the Microsoft Windows COM registry instead of the system portion of the Microsoft Windows COM registry where ActiveX controls typically are registered thereby allowing the end point installer agent to install and run regardless of the user s installation privileges.

Various embodiments of the invention may use a variety of techniques to avoid obstructions presented by the security protections of different operating systems. For example when updated with the Microsoft Windows Service Pack 2 the Microsoft Windows operating system may not allow a user to install an Active X control without requiring the user to acknowledge an additional prompt. To avoid requiring the user to specifically acknowledge this prompt various embodiments of the invention may employ JavaScript programming to acknowledge the prompt and complete the installation of the end point installer agent. For a client that does not employ the Microsoft Internet Explorer browser application various embodiments may employ similar Java based or other software language based end point installer agents.

Once the end point installer agent is installed it will then accept instructions from the provisioning server . When the provisioning server desires to install a process object it may instruct the end point installer agent to download one or more process components from the provisioning server . For example the provisioning server may send the end point installer agent HTTP format instructions to install components located at the provisioning server . The end point installer agent will obtain an .inf file for the components which lists the required pieces of components and the version information for the components. The end point installer agent will then compare the version information in the downloaded file with version information for any corresponding components already present on the client .

If the version information indicates that the resident components are newer the end point installer agent will then enter this determination and any associated information into a log and discontinue the installation process. If however the end point installer agent determines from the version information that the components on the provisioning server it will request the new components from the provisioning server and install them. The network intense download of components is thus performed only when required. More particularly it will rename the resident components install the newly obtained components and then delete the renamed components e.g. marks them for deletion upon rebooting of the client . This ensures that some form of the components can be salvaged for use by the client if the installation process fails. With various embodiments of the invention the end point installer agent will only install components that have a verifiable signature confirming their authenticity from trusted source.

With some embodiments of the invention the end point installer agent will keep a record of files that it installs and has the capability of subsequently uninstalling all these files in a single operation so that all of these file can be subsequently uninstalled at the conclusion of the communication session. For example if the process object is installed through various browser software applications the browser may provide a feature to uninstall specified processes. For process objects installed via the end point loader or the Java native interface an uninstaller agent may be installed with the end point installer agent. This uninstaller agent can then uninstall all previously loaded process objects. This may be done by specific prompt or by automatic detection of end of communication session.

Next in step the EPC server creates an interrogation manifest request based upon the zones configured for the user s community or realm. One example of how this interrogation manifest request may be created will be discussed with reference to . More particularly illustrates one technique that may be used by various embodiments of the invention to create a post authentication interrogator agent manifest request according to various embodiments of the invention. As seen in this figure in step the EPC server initially selects the next available realm from among the list of all available realms. If there are no further realms to select then the EPC server concludes that the manifest request creation process is completed. If however there is a realm remaining in the list of available realms in step the EPC server selects the next available user community in the realm. If there is no remaining user community available for the realm then the process returns to the step . If however there is a user community in the realm that has not yet been processed in step the EPC server creates a literal graph for that user community.

Next in step the EPC server will obtain the next available zone in the list of zones associated with the user community. If there are no further zones listed for that user community then the process returns to step . Otherwise the EPC server will obtain the first signature listed for the current zone. If there are no further available signatures then the EPC server will return to step to obtain the next available zone for the user community. If however a signature is available for analysis then in step the EPC server will obtain the first literal specified in the definition of that signature. If there is no remaining literal designated for the signature then the process returns to step where the EPC server will obtain the next available signature for the current zone. If however there is another literal specified for the signature then in step the EPC server determines whether the literal is unique to the current literal graph for the user community. If it is then in step the literal is added to the graph and the EPC server obtains the next literal for the signature. Otherwise the process simply returns directly to step .

In this manner each literal for each signature making up each zone for each user community in all available realms are identified and a graph is created for each zone of each user community. When a user is identified as being a member of a user community the EPC server can then simply identify the appropriate graphs for that user community and incorporate the graph into a manifest request for processing by the post authentication interrogator agent.

After the EPC server creates an interrogation manifest request in step the provisioning server downloads and installs the post authentication interrogator with the manifest request onto the client . More particularly after the installer agent has been installed on the client the provisioning server sends a message to the installer to instantiate the post authentication interrogator agent. The message may be for example an HTML message. This message may also include for example a URL identifying a configuration file containing the manifest request. This configuration file may use for example the Microsoft Windows .ini file format.

As will be discussed in detail below the configuration file will include commands for the post authentication interrogator to search for specific artifacts or process objects. For example it may include commands instructing the post authentication interrogator to look for a specified file directory running process registry key registry value or data whether a specific personal firewall is running user domains. This information may be obtained through conventional operating system application programming interfaces APIs or through APIs specifically made available by third parties such as the providers of a process object.

The manifest request may use Hash Message Authentication Code HMAC signing techniques to ensure that information contained in the manifest request or in the manifest response is not forged by a third party for illicit uses. Also to ensure security queries in the manifest request may be formulated as questions prompting specific prior known answers rather than open ended questions as open ended questions could be viewed as a privacy threat if abused by the server administrator via clever signature definitions. For example wildcard queries may be prohibited from the manifest request to prevent disclosure of information beyond that needed for evaluation of access control and authentication of the user session.

With various embodiments of the invention the fundamental data structure that may be used to exchange data between the EPC server and the post authentication interrogator agent is the interrogation manifest. Unlike the pre authentication interrogation manifest the post authentication interrogation manifest includes a variable number of questions in the form of literals sent from the EPC server to the post authentication interrogator agent in the manifest request and answers added to the literals on responses sent back to the EPC server by the post authentication interrogator agent. The following presents an abstract definition of this manifest but it should be noted that different embodiments of this structure will be implementation specific.

These literals have no input and are answered with values pertaining to the literal. There may be 0 1 occurrences per literal present in the manifest.

After it has been installed on the client the post authentication interrogator examines the operating environment of the client looking for artifacts and process objects specified in the post authentication interrogator manifest request. It then reports back its findings via a post authentication interrogator manifest response to the EPC server in step . For example the post authentication interrogator may create an XML file containing the interrogation results and post these results back to the EPC server .

Based upon the information returned by the post authentication interrogator agent the EPC server will classify the client s operating environment into a zone of trust in step . This process will be described in more detail with reference to .

If there are no further signatures in the definition of the current zone of trust then the process returns to step . Otherwise the policy server obtains the next the next available literal in the obtained device profile in step . If there are no further literals in the signature then the operating environment of the client is categorized into the current zone. Otherwise the obtained literal is compared with the corresponding state of the client s operating environment. If the value of the literal is true for the current operating environment then the process returns to step to examine the next literal available in the signature. If however the value of the literal is not true for the Client then the process returns to step to obtain the next available signature for the current zone.

Next in step the policy server may provision the client with any suitable with communication process objects that will enable the client to employ an alternate communication technique for communicating with the server system . As previously discussed various embodiments of the invention may provide different communication techniques for securely communicating with the server system and subsequently obtaining resources from or through the server system .

For example some embodiments of the invention will accommodate one communication technique employing a conventional browser. Various embodiments of the invention may alternately or additionally accommodate another communication technique employing the Microsoft Windows Internet Explorer browser where the communication functionality has been enhanced by an ActiveX control. These embodiments of the invention may further accommodate a communication technique implemented by a Java enabled application that is specifically configured for securely communicating with the server system . Still further various embodiments of the invention may accommodate a communication technique implemented by a special purpose software application that works with the client s operating system. For example some embodiments may support a communication technique implemented by a software application that is a client of the Microsoft Windows operating system provided by Microsoft Corporation of Redmond Wash.

As will be appreciated by those of ordinary skill in the art in some situations one communication technique may be preferable to another communication technique. For example if a client is employing the Microsoft Windows operating system the user may obtain more effective communication with the server system by employing a special purpose software application than by using a browser application to communicate with the server system . On the other hand if the client is not employing the Microsoft Windows operating system then a special purpose software application which requires the Microsoft Windows operating system to run would not be useful for communication with the server system . Instead the user would be better served using a communication technique implemented by a Java enabled application.

Accordingly various embodiments of the invention may provision a client with communication process objects that will enable the client to employ a communication technique most suitable to the client s operating environment. More particularly these embodiments of the invention may employ the information obtained from one or more interrogator agents to determine which communication techniques can be supported by the client . The provisioning server can then provision the client with the communication process objects to implement one or more of these communication techniques.

For example the provisioning server may determine from the client s signature whether the client is employing the Microsoft Windows operating system. If the client is employing the Microsoft Windows operating system then the provisioning server may download and install a software application that is a client of the Microsoft Windows operating system to establish a secure connection with the server system . Similarly the provisioning server may determine from the client s signature whether the client is Java enabled and if it is then the provisioning server may download and install a Java based software application to establish a secure connection with the server system . Still further the provisioning server may determine from the client s signature whether the client is employing the Microsoft Internet Explorer browser and will allow the installation of ActiveX controls. If it does then the provisioning server may download and install an ActiveX control to help the Microsoft Internet Explorer browser establish a secure connection with the server system .

With various embodiments of the invention the provisioning server may provision the client with communication process objects in this manner according to any desired criteria. For example the provisioning server may provision the client with every communication process object that the client will support. Alternately the provisioning server may provision the client with a communication process object based upon a preset hierarchy or based upon heuristics accounting for communication process objects already installed on the client . It also should be noted that if the end point installer agent was not previously installed during step it may be installed at this point to facilitate the installation of the communication process objects.

In step the EPC server determines whether the client should be provisioned with any additional security process objects based upon the zone of trust into which the client has been classified. In addition to specifying artifacts and process objects that must be resident on the client in order to be classified in the zone of trust the definition of the zone of trust may also require that additional process objects such as additional security process objects be installed on the client in order for the client to remain classified in that zone of trust. Accordingly the provisioning server will provision the client with any additional security process object required by the EPC server. It should be noted that if the end point installer agent was not previously installed during step it may be installed at this point to facilitate the installation of the additional security process objects.

After being installed on the client the additional security process objects may report the results of their successful installation to the provisioning server . Accordingly the provisioning server will confirm that the required additional security process objects were properly installed on the client . Upon successful installation these additional security process objects report back their security status to the EPC server . If one or more of the additional security process objects were not properly installed or failed to report positive status to the EPC server then the server system may discontinue communicating with the client . Alternately various embodiments of the server system may attempt to remediate the classification of the client into another zone of trust that does not require installation of the additional security process objects.

Lastly in step the EPC server may asynchronously and periodically revalidate the state of the client s operating environment For example the EPC server may periodically request that the post authentication interrogator verify the compliancy state of agents associated with the current zone of trust. It then proceeds to re classify the zone of trust where a zone of trust change may occur due to the current compliancy state of the client device.

It should be noted that while particular examples of the invention are described in detail above there are numerous variations and permutations of the invention. For example some embodiments of the invention may employ zones of trust without regard to the user s identity. Thus all clients may be assigned the same set of zones of trust regardless of the identity of their individual users. By employing these embodiments an administrator can ensure that all clients have an operating environment that meets minimum security requirements.

Still further various embodiments of the invention may employ a single interrogator agent. With some of these embodiments the single interrogator agent may interrogate the client to obtain its entire signature before the authentication process. Other of these embodiments may deploy the single interrogator agent after the authentication process. Of course still other embodiments of the invention may employ any desired number of interrogator agents to ascertain the client s operating environment.

Additionally various embodiments of the invention may perform some task associated with a zone of trust when a client is classified into that zone of trust. For example the server system may log the client off of a secure communication session if the client is assigned a zone of trust associated with this command. Of course any desired command to be enacted by the server system or one of its components can be associated with a zone of trust being assigned to a client .

It also should be noted that while various connections have been described above unless otherwise expressly indicated these connections should be considered to include both direct connections between two elements or indirect connections that may include any number of intermediate elements between the connected elements. Further while various functions have been ascribed to one or more components of particular embodiments of the invention such as servers various embodiments of the invention may collect or redistribute these functions in any desired configuration. For example a single server may be used to implement the functionality of both the provisioning server and the EPC server described above. Alternately some embodiments of the invention may provide three or more servers to perform that functionality. Still further various functions ascribed to a particular server may be implemented in different embodiments of the invention by another server. For example with some embodiments of the invention one or more of the functions of the EPC server may be performed by the policy server and vice versa in alternate embodiments of the invention.

While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques that fall within the spirit and scope of the invention as set forth in the appended claims. For example while particular software services and processes have been described as performing various functions it should be appreciated that the functionality of one or more of these services and processes may be combined into a single service or process or divided among additional services and processes.

