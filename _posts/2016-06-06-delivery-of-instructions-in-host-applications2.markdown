---

title: Delivery of instructions in host applications
abstract: Embodiments of the systems described herein can implement one or more processes remotely delivering customized code to a host application and/or computing device. The host application may be configured as an Application Programming Interface with a customized code processing library that may configure the host application to receive further instructions remotely. The host application may be further configured to execute host code and/or third-party code. The host application may be configured to receive remote application logic, after the host application has been installed on a computing device, and to execute the received application logic to alter the behavior of the host application, such as selectively tracking end user interactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635100&OS=09635100&RS=09635100
owner: TEALIUM INC.
number: 09635100
owner_city: San Diego
owner_country: US
publication_date: 20160606
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by any one of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Any and all applications if any for which a foreign or domestic priority claim is identified in the Application Data Sheet of the present application are hereby incorporated by reference under 37 CFR 1.57.

In some computing areas host applications such as mobile applications are developed and built for distribution through a distribution site. Typically the host applications are built or compiled to run natively on computing devices such as mobile computing devices.

In some embodiments a method is disclosed for tracking user interactions based at least on remotely received application logic in a host mobile application. The method can include under control of a physical computing device comprising digital logic circuitry executing a host mobile application that invokes a customized code processing module wherein the host mobile application comprises initial instructions and is configured to identify an event associated with the host mobile application and register the event with the customized code processing module identifying using the customized code processing module application logic and a tag library received from a remote network server constructing a tag object from the tag library without precompiling the host mobile application the tag object comprising different instructions from the initial instructions in response to the registered event determining using the tag object to additionally process the registered event in response to determining to additionally process the registered event executing using the customized code processing module the application logic to process the registered event and determine to track the registered event and executing first instructions specified by the application logic based at least on the determination to track the registered event wherein the execution of the first instructions causes the physical computing device to transmit data associated with the registered event.

The method of the preceding paragraph can include one or more of the following features. The method can further include under control of the physical computing device in response to invoking the first instructions to process the registered event sending a message to the remote network server and identifying a response from the remote network server to update the customized code processing module wherein the response is associated with the sent message. The method can further include under control of the physical computing device identifying using the customized code processing module updated application logic received from the remote network server the updated application logic specifying to invoke second instructions rather than the first instructions in response to the registered event and after identifying the updated application logic in response to the registered event executing using the customized code processing module the updated application logic to invoke second external instructions to process the registered event. The method can further include under control of the physical computing device requesting the updated application logic from the remote network server storing in a memory the updated application logic received from the remote network server wherein the identification of the updated application logic comprises determining whether the memory stores the updated application logic. The customized code processing module can be executed via a background thread. The event can be further associated with a user interaction with the host mobile application.

In some embodiments non transitory physical computer storage comprising instructions stored thereon for implementing in one or more computer hardware processors a method comprising executing a host application that invokes a customized code processing module wherein the host application comprises initial instructions and is configured to identify an event and register the event with the customized code processing module identifying using the customized code processing module application logic received from a server the application logic comprising different instructions from the initial instructions and being configured to affect processing of the registered event in response to the registered event executing using the customized code processing module the application logic to process the registered event and determine to track the registered event and executing first instructions specified by the application logic based at least on the determination to track the registered event wherein the execution of the first instructions provides data associated with the registered event.

The non transitory physical computer storage of the preceding paragraph can include one or more of the following features. The method can further include identifying using the customized code processing module updated application logic received from the server and in response to a second registered event executing using the customized code processing module the updated application logic to invoke second instructions to process the second registered event. The method can further include in response to invoking the second instructions to process the second registered event sending a message to the server and identifying a response from the server to update the customized code processing module wherein the response is associated with the sent message. The customized code processing module can be executed via a background thread. The event can be associated with a user interaction with the host application. The server can be a remote network server.

In some embodiments a system for tracking user interactions based at least on remotely received and executed application logic instructions in a host mobile application. The system can include a computer hardware processor configured to receive a tag library a tag interpreter and application logic instructions from a tag network server wherein at least one of the tag library the tag interpreter or the application logic instructions is configured to affect processing of an event and comprises logic that was not present in a host mobile application before receipt of the logic from the tag network server receive the event generated in response to a user interaction with the host mobile application determine via the tag library to additionally process the event by the tag interpreter determine via the tag interpreter which of the application logic instructions to execute on the event wherein the determination of which of the application logic instructions to execute by the tag interpreter is based at least on conditional logic of the tag interpreter execute the determined application logic instructions to generate tracking data associated with the event and transmit the tracking data to a tracking network server.

The system of the preceding paragraph can include one or more of the following features. At least one of the tag library the tag interpreter or the application logic instructions can comprise JavaScript. Transmitting the tracking data can comprise executing an HTTP call comprising at least some of the tracking data. The computer hardware processor can be further configured to in response to invoking the determined application logic instructions send a message to the tag network server and identify a response from the tag network server to update at least one of the tag library the tag interpreter or the application logic instructions wherein the response is associated with the sent message. The computer hardware processor can be further configured to identify updated application logic received from the tag network server the updated application logic specifying to invoke second instructions rather than the determined application logic instructions and after identifying the updated application logic execute the updated application logic to invoke the second external instructions to process a second event. The computer hardware processor can be further configured to request a token from an external network server in response to the request receive the token from the external network server transmit the token to the tag network server and receive from the tag network server at least one of updated tag library updated tag interpreter or updated application logic instructions wherein the at least one of the updated tag library updated tag interpreter or updated application logic instructions comprises the token. Requesting the token from the external network server can comprise starting a background thread to wait for a response from the external network server. The computer hardware processor can be further configured to receive content data from the tag network server wherein the application logic instructions are further configured to present at least some of the content data in the host mobile application.

Due to the ever increasing popularity of applications for user computing devices such as mobile applications it may be advantageous to efficiently alter and or rapidly publish application logic for host applications executing on those user computing devices. Techniques for altering application logic of host applications can include recompiling or distributing new versions of host applications through a distribution site. A problem with this method for updating application logic however can be that some users may not update their applications and or installing a new version of an application may be intrusive to the user computing experience. Thus in some embodiments it may be advantageous to configure host applications to flexibly change the internal workings of those applications such that application logic may be remotely transmitted to those host applications to dynamically update their behavior.

Some developers or publishers of host applications such as mobile applications would like to obtain the results of analytics associated with user interactions on their host applications. Digital marketing providers may also desire analytics of end user interactions in host applications including both desktop and mobile applications. While tags are commonly used to track user interactions with websites analytics may be obtained through a third party analytics provider that provides an analytics library that can be integrated with the host application. As described above if a developer or publisher wants to alter the application logic of the host application then the developer or publisher may rebuild or recompile the host application with the new analytics logic.

The present disclosure describes embodiments systems methods and non transitory computer readable media that can address any of the preceding desires or concerns. For example a host application may be integrated with a customized code processing library and or module. The host application may wrap internal method invocations with corresponding tag methods configured with the customized code processing library and or module. Thus a host application may be configured as an Application Programming Interface API with a customized code processing library that may configure the host application to receive further instructions remotely. Furthermore the host application may be further configured to execute host code and or third party code as described herein. The customized code processing module may be configured to communicate with an external analytics and or tag management system to receive updates to the customized code processing module and or application logic of the host application. Thus a host application may be configured to receive remote application logic after the host application has been installed on a user computing device and to execute the received application logic to alter the behavior of the host application. For example a host application may be published and or installed with no and or an original application logic. An operator through the tag management system may provide or generate new application logic and publish and or push the new application logic to host applications on user computing devices. The new application logic may alter the behavior of the host application such as optimizing and or selectively tracking end user interactions. An example of new application logic for tracking end user interactions may include attaching a probability to whether an end user interaction and or sequence of interactions will be tracked and or reported to a third party. In some embodiments the application logic may be configured to dynamically invoke and or alter the behavior of the host application via first party and or host code. For example the host application may be configured via the customized code processing module to receive application logic and or instructions to alter the content of the host application such as new background colors and or new text for a pop up alert.

As used herein the term host application in addition to having its ordinary meaning can refer to an application other than a web application or to an application that is not implemented entirely in a web browser. The host application may be a hybrid host web application in an embodiment. The host application may also be referred to as a native application in some instances.

For purposes of summarizing the disclosure certain aspects advantages and novel features of several embodiments are described herein. It is to be understood that not necessarily all such advantages can be achieved in accordance with any particular embodiment of the embodiments disclosed herein. Thus the embodiments disclosed herein can be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

While a tag management environment is often used as an example below it will be appreciated that methods for flexibly changing and or remotely transmitting application logic as disclosed herein may be used in a variety of environments other than a tag management environment. For example aspects of the present disclosure in some embodiments may be used and or implemented for general mobile computing and or application development such as a gaming context a digital library context an educational context and or any other context where there is a desire to remotely publish and or transmit application logic.

Tags and or tracking analytics can provide data about end user interactions to a variety of analysis systems hosted by third party tag vendors. These analysis systems may include for example data management platforms analytics systems and or tag management systems that perform vendor specific processing on the data to obtain insights about users of a content site or application. These analysis systems often operate independently of one another from vendor to vendor and specialize in providing different insights from the collected data. After the analysis systems complete their processing a provider of the content site or application can access reports on the processed data from the analysis systems and evaluate the reports to assist with making business decisions such as how to manage the content site or application.

Tag management systems can enable the placement of a JavaScript snippet on website pages. That code snippet may replace the tags that would otherwise have been individually deployed. For tag management systems user coding lines of HTML and JavaScript on pages can be replaced by a web interface where vendors actions and pages are unified and controlled. In some embodiments it may be advantageous to use the tag management systems that include JavaScript templates and or application logic to configure the tracking of end user interactions in host applications. For example a developer publisher and or third party user that manages websites and host applications may want a unified tag management experience and using the methods and systems provided in a content site tag management environment in a host application environment may provide such a unified experience.

Systems and methods in accordance with some embodiments of the disclosure provide a means to remotely transmit and or update application logic via a tag management system. In some embodiments the application logic may be updated locally or using other data transfer approaches that may not be characterized as remotely transmitting or updating. This may be done without using an update and or redeployment of the precompiled units of executable code of the host application. Thus application logic may be flexibly transmitted and or deployed to a host application.

Attention is now directed to which illustrates a system . System includes one or more user computing devices also denoted herein for brevity as devices such as cellular phones PDAs Wi Fi 802.11 devices tablet computer or other electronic devices. In the system one device is shown but the system can include many more user computing devices . It is further noted that in some embodiments the device may not be portable and the functionality herein may be implemented on more stationary devices such as desktop or notebook computers or other types of fixed devices.

Host application may include one or more modules for implementing some or portion of the systems and methods described herein. For example host application may include a customized code processing module which may be implemented via a customized code processing library and or software development kit. In some embodiments customized code processing module may include a tag library and or tag interpreter for executing the received application logic as described herein. Furthermore host application may be configured with first party and or host code and or third party code . As described herein host code may be configured with the application logic to trigger functions and or interactions within host application . Additionally or alternatively the remotely received application logic may be used to execute third party code such as vendor tracking functions which may be natively called within the host application and or may invoke an external method such as a hypertext transfer protocol HTTP and or a representational state transfer REST call.

System further includes analytics system and tag management system comprising one or more servers as well as other associated computer and data processing hardware not shown in such as networking equipment displays monitors I O devices or other computer or data communication systems hardware and or software. In some embodiments analytics system and or tag management system may be provided by and or operated by an analytics management provider.

Device can be configured to connect through network as shown in . Network may include one or more wired or wireless networking elements such as Ethernet LAN technologies telephony networks such as POTS phone networks cellular networks data networks or other telephony networks as well as Wi Fi or Wi Max networks other wired or wireless Internet network connections and or other networks as are known or developed in the art. These connections may be facilitated by one or more host applications running on device as well as one or more analytics systems tag management systems tag management system applications as shown in running on one or more host system servers included in analytics system along with one more network interfaces and or other networking hardware and or software as is known or developed in the art.

As illustrated host application and or customized code processing module may retrieve tag library A tag interpreter A and or application logic A. In some embodiments host application on startup and or after a configurable time interval for example may check for updated versions of tag library A tag interpreter A and or application logic A from the analytics system and or tag management system . In some embodiments host application and or tag management system may implement a caching system for retrieving and or providing tag library A tag interpreter A and or application logic A. In some embodiments following execution of some application logic the host application and or the customized code processing module may send a message to the analytics system and or tag management system . The analytics system and or tag management system may then send a response to the customized code processing module to update the tag library A tag interpreter A and or application logic A. As used herein application logic may be used interchangeably with tag library tag object and or tag interpreter. 

In some embodiments tag library A may include a JavaScript library or other data file for managing tags and or processing events. For example customized code processing module may load tag library A in a WebKit object and or a software component that may be used for operating and or presenting a web browser. For example tag library A is illustrated as being loaded as a tag object module B of the customized code processing module . Thus tag library A may also be used for managing tags in content sites such as websites which may be advantageous because the tag management system may provide a unified approach and or solution to managing tags for host applications and content sites.

Host application may be configured to receive an event and or register the event with the customized code processing module . For example a user interaction with host application may cause an event that may be received identified and or registered by host application . User interaction may include user selections text input logins navigational input views purchases or any other interaction with elements of a host application or an input device of the device . It will also be appreciated that various events may be processed by host application and or customized code processing module that some events may not be directly or indirectly user generated. Once the event is registered with customized code processing module the event may be processed by tag object B. In some embodiments by registering events with customized code processing module the developer and publisher of host application has inserted placeholders into host application for additional processing with application logic which may be updated remotely. In some embodiments tag interpreter A may be loaded by customized code processing module for execution of the tag interpreter as a module B. In some embodiments tag interpreter A may be similar to tag library A such as being a JavaScript module and or another module in an interpreted programming language. Following a determination by tag object B for additional event processing tag interpreter B may further process the event by executing application logic B. In some embodiments similar to the retrieved tag library A and or tag interpreter A which were loaded as modules application logic A may be retrieved from the tag management system and executed as module B. Furthermore application logic A may be similar to tag library A and or tag interpreter A such as including a JavaScript module and or another module in an interpreted programming language. For example application logic A may include JavaScript instructions and or templates for handling event processing and or dynamic calls to host code and or third party code as described herein. In some embodiments the tag interpreter B may be configured to make direct HTTP calls from device to some endpoint. For example tag interpreter B may include libraries to construct a correct HTTP call including a destination headers and or the appropriate security protocols.

In some embodiments customized code processing module may include a response mechanism for receiving push notifications from the tag management system . For example application logic and or instructions A from the tag management system may instruct the host application to register for a push notification such as receiving a device token and or identifier from a content distributor. Once tag interpreter B receives a device token and or identifier for device from a content distributor customized code processing module may send a message to the tag management system including the device token and or identifier. Tag management system may then register device with one or more third party vendors using the device token and or identifier. As a result customized code processing module may await a response from the tag management system via the response mechanism . For example a response may include an updated tag library A tag interpreter A and or application logic A which may be loaded by customized code processing module completing the response. In other words customized code processing module may be configured to execute some commands and or instructions send a message and wait for a proper response for follow up actions in some cases. It will be appreciated that while a token response mechanism is described herein the customized code processing module may support any other type of response mechanism. For example an update to one or more of the application logic tag library and or tag interpreter that may be updated iteratively and may use a message response system to update successfully.

In the system may include systems components and or devices that may be similar to or the same as the systems components and or devices of the system of . For example the device host application tag library tag interpreter and or host code of may be similar to the device host application tag library tag interpreter and or host code of .

In at step one the tag library may receive and or identify one or more events for processing such as the tracking event . At step two the tag library may evaluate the tracking event . If the tag library determines that additional event processing may occur at step three the tag interpreter further evaluates the tracking event and determines that a specific application logic A is to be executed. At step four the specified application logic A and or command block is triggered and or executed which in this example is some internal code such as retrieving and or requesting a push token by the customized code processing module. At step five if the host code is successful it can trigger another application logic B and or command to execute at step six such as registering that same token with a push vendor. This example may be further chained and or explained with reference to the example system of .

In the system may include systems components and or devices that may be similar to or the same as the systems components and or devices of the system of . For example the device host application tag library tag interpreter and or host code of may be similar to the device host application tag library tag interpreter and or host code of . Additionally the system may include systems components and or devices that may be similar to or the same as the systems components and or devices of the system of .

In a customized code processing module not illustrated such as customized code processing module may conditionally trigger and or execute follow up client code processing. Steps one through four of may be similar to steps one through four of . At step five the host code is executed which could optionally trigger another event such as tracking event at step six which could then trigger one or more other application logic not illustrated .

In the system may include systems components and or devices that may be similar to or the same as the systems components and or devices of the system of . For example the device host application tag library and or tag interpreter third party code of may be similar to the device host application tag library tag interpreter and or third party code of . Additionally the system may include systems components and or devices that may be similar to or the same as the systems components and or devices of the system of or the system of .

In a customized code processing module not illustrated such as customized code processing module may conditionally trigger and or execute the third party code . Steps one through four of may be similar to steps one through four of except that step four of executes the third party code rather than or in addition to host code. At step five the third party code may be executed which in this example sends specific data to a third party external network server such as a third party cloud service or vendor.

In some embodiments the customized code processing module may include translation code to execute host code when third party code is executed and or vice versa. The translation code may consist of API calls to host code when third party code is invoked or vice versa in response to event processing. For example the API calls to a third party vendor may transmit information regarding user data such as tracking data regarding user interactions with the host application or any other application or device.

Additionally or alternatively the customized code processing module may be configured to generically execute any API call based on the configuration of a tab object and or library as described herein with respect to and or . Accordingly in some embodiments translation code may not be necessary because the customized code processing module includes generic logic to execute any API call based on configuration information contained within the remotely retrieved tag object and or library. Further the ability to call particular third party code or any blocks of code as specified by remotely retrieved tag objects may be enabled by an instruction such as a single line of code which thereby enables the respective third party or other library on the device. Accordingly the customized code processing module may be capable of supporting new third party libraries and or other code blocks without the need to include translation code due to the generic API execution logic by enabling the new third party library and or code and the remotely retrieved tag objects and or tag library that indicates the respective library and or code should be invoked. The optional capability described herein regarding generically executing third party code and or any other code blocks may compatible with one or more embodiments disclosed herein.

In the system may include systems components and or devices that may be similar to or the same as the systems components and or devices of the system of . For example the customized code processing module the event and or the application logic B of may be similar to the customized code processing module the event and or the application logic B .

In the customized code processing module may be configured to receive and or register the event . Once the event is registered with customized code processing module the event may be processed by tag object B. In this example tag object B includes configuration and or instructions that specify the inputs and or the particular host code and or third party code to execute for the event . As described herein the tag object B and or tag library may be remotely retrieved and or pushed to the host application and or customized code processing module . Example tag object B includes instructions to receive input X Y and Z and specifies the particular API calls to execute for 1 host code 2 third party code A and 3 third party code B. Following a determination by the tag object B for additional event processing the tag interpreter B may further process the event by executing application logic B. In this example the tag object B may indicate executing some combination of host code the third party code A A and or the third party code B B. For example the customized code processing module which includes a generic API execution process may execute the third party code A to make an HTTP call for the URL www.example.com tracking v Y which specifies the input parameter Y. 

Memory space may comprise DRAM SRAM FLASH hard disk drives or other memory storage devices such as media drive configured to store and access operating systems host application customized code processing module and or data . In particular memory space may include the host application stored for execution on CPU to perform the various functionality described herein.

Memory space may comprise DRAM SRAM FLASH hard disk drives or other memory storage devices such as media drives configured to store operating systems application programs and or data and memory space may be shared with distributed with or overlap with the memory storage capacity of database . In some embodiments memory space may include database or in some embodiments database may include data as shown in memory space .

Data stored in memory space and or database may include information such as tag management system information or other types of data.

In some embodiments the following assumptions can be made regarding a host application architecture illustrated in 

In some embodiments the third party code and libraries can exist within the host application in order to provide functionality that can be intended to be used by the application s developer or manager not the general user audience.

As noted some embodiments in accordance with the disclosure may include computer software or computer hardware and software combinations configured to implement one or more processes or functions such as those described herein and or in the related applications. Embodiments may also take the form of a computer storage product with a computer readable medium having computer code thereon for performing various computer implemented operations such as operations related to functionality as describe herein. The media and computer code may be those specially designed and constructed for the purposes of performing functionality described herein or they may be of the kind well known and available to those having skill in the computer software arts.

Examples of computer readable media within the spirit and scope of the present disclosure include but are not limited to magnetic media such as hard disks optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute program code such as programmable microcontrollers application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code may include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. Computer code may be comprised of one or more modules executing a particular process or processes to provide useful results and the modules may communicate with one another via means known in the art. For example some embodiments may be implemented using assembly language Java JavaScript Objective C C C C or other programming languages and software development tools as are known in the art.

The following example or one or more sub features thereof may be implemented in any combination with any of the features described herein. Turning to an embodiment of a computing environment is shown for implementing various tag features including some or all of the tag management features described herein. In the computing environment one or more end user systems and or devices such as end user systems can communicate over a network with a configuration information server and an analytics system . The end user system can be an example of device described herein. The end user system can include any form of computing device and may be a desktop laptop smartphone tablet a virtualization of a smartphone or tablet or the like. The end user system can further include a host application B which can provide application content or functionality to the end user system and a user input A that can receive user inputs for interacting with the host application B. The host application B can be an example of host application described herein. The host application B can present a user interface on a display and can request and or receive application logic and or libraries from the tag management system for controlling and or adjusting operation of the host application B. The application logic and or libraries can include a directives file such as a JavaScript file loadable by the host application B.

In some embodiments the analytics system may be implemented in physical and or virtual servers which may be geographically dispersed or co located. In the depicted embodiment the analytics system includes the user processing system and the tag management system as well as a user profile data repository . The user processing and tag management systems are shown separately for illustrative purposes although their functionality may be implemented by a single system. The analytics system can also be implemented without the tag management system and thus the functionality of the user processing system can be implemented independent of any tag management functionality. Further the analytics system can be implemented without the user processing system and thus the functionality of the tag management system can be implemented independent of any user processing functionality.

One or more tag management user systems such as tag management user systems can access the analytics system or user intelligence system via the network . The tag management user system can include user input A that can receive user inputs. The tag management user system can also be any type of computing device including but not limited to a desktop laptop tablet smartphone a virtualization of a smartphone or tablet or the like. The user input A can include one or more of a motion sensor touch screen sensor microphone button or the like to receive user inputs. In addition the tag management user system further can include a browser B. The browser B can be used to provide access or change the application logic stored on the tag management system and or the analytics system . Although the tag management user system is illustrated as having a browser B some market user systems may not include the browser B depending on the implementation.

The tag management user system can be operated by tag management users such as digital marketing professionals providers of the host application B or any other individual who uses tags or data obtained from tags. Tag management users may not be the primary intended end users of the host applications B in certain embodiments. Instead a tag management user may use the tag management user system to dynamically view or update the types of data tracked or analyzed for different users of the host application B such as by updating the application logic associated with the host application. This data can be tracked by the user processing system via updating data obtained from the host application B to build updated user profiles . In addition host application providers can access the information stored in the user intelligence system to obtain an understanding of particular end user system for purposes such as evaluating the effectiveness of tag related campaigns for instance.

In certain embodiments the user processing system can enable tag management users to configure the types of data tracked for different users of a host application B including altering the logic of host application B based on the user data as well as analyze and report on this user data. For instance the user processing system can provide one or more user interfaces via the browser B that enable customization of collecting information about user of the host application B. Upon execution of the host application B the host application B can supply user data to the user the analytics system . Such user data can be stored in user profiles in the user profile data repository which may include physical computer storage. Tag management users can subsequently query the user profiles to obtain reports or other information about users of the host application B.

The tag management system can be used to manage the tags provided by third party vendors. For instance the tag management system can provide functionality for tag management users to select which third party vendor tags and or application logic to associate with a host application for a variety of vendor specific processing purposes. These purposes can include obtaining analytics for data analysis or visitor intelligence tracking affiliate activity with respect to the host application obtaining user data for displaying targeted ads obtaining user data for customizing search functionality or email campaigns targeted to the end users obtaining user data for personalizing content of the host application obtaining user data for integration with social networking functionality obtaining user data for big data analysis combinations of the same or the like. Data collected by the tags from the host application B can be provided to tag vendor systems which can perform any of this vendor specific processing. The data or related data may additionally or alternatively be passed to the tag vendor systems through the tag management system .

In some embodiments the tag management system provides functionality such as one or more user interfaces through the browser B for tag management users to map data sources in the host application B to data sources gathered by the tags. For instance if a host application includes a shopping cart value named cart value the tag management system can provide a user interface that enables a tag management user to tell the tag management system to collect data on the cart value and map this data to a cart value variable of one of the tags and or to conditionally configure when to collect data on the cart value. 

However in some embodiments the tags can instead perform a greedy collection of some or all data available in the host application B. Since the tags and user processing system can be provided by the same entity the data obtained by the tags need not be mapped to third party mappings like the data obtained by the third party tags. Instead some or all of the data available to the tags can be provided to the user processing system for processing. Thus the tags can facilitate vendor neutral data gathering of some or all of the data elements in the host application B. Since this data may not be mapped to a vendor specific format in certain embodiments the data can be exported to visitor or user intelligence systems such as user intelligence system without a need to massage the data from its mapped form which can be cumbersome to its original raw form.

The systems can provide the processed data to the user intelligence system which may be owned operated or otherwise used by an operator of the host application B to analyze application user behavior. The user intelligence system can receive the raw data or processed data from the systems and store and manage the data in a way that facilitates a meaningful presentation of information to those interested in the performance of the host application B. In some embodiments the user intelligence system is part of the user processing system or the tag management system rather than separate as illustrated in .

Turning to an embodiment of a host application logic update process is shown. The process illustrates an example mode of operation of the device of and may be implemented by the various components shown in system of . For convenience the process is described in the context of system but may instead be implemented by other systems described herein or other computing systems not shown. The process provides one example approach by which device and or host application can obtain updated application logic for the host application upon start up of the host application and or based on a request or configurable interval. Advantageously in certain embodiments the process enables a host application to receive remote application logic that may be executed by host application on device .

At block device may execute a host application . In some embodiments device may receive a command to begin executing the host application . The command can be received from an end user of device . In some embodiments host application may include a customized code processing module and use a customized code processing library. Host application can include first party code providing application functionality for the end user of device . In addition host application can include integrated third party code such as third party source code and or a third party code library.

At block the host application may identify and or receive an event. For example user interaction with device and or host application may cause an event to be generated that is identified and or received by host application . In some embodiments an event can include a successful launching of the host application a user selection a user navigating to a resource and or location and or any event that may be received and or identified by host application . Once the event is identified and or received host application may register and or otherwise communicate the event to customized code processing module . Thus when host application is deployed to device host application may be configured to register some or all events such that the application logic to process those events may be retrieved and or updated at a later time.

At block host application and or customized code processing module receives the updated application logic A. In some embodiments the updated application logic A may include programming instructions such as JavaScript. Customized code processing module may load the application logic as a module B that may be executed at a later time. As described herein the updated application logic A may be managed by a tag management user via a tag management user system. Advantageously in certain embodiments the process enables the tag management users to make application logic changes to the host application without having to submit an updated version of the host application to an application approval organization or without the end users having to re download the updated version of the host application . Furthermore process may allow updates to fix application logic that is not functioning properly without having the user update the host application . In some embodiments advantages of remotely receiving the application logic A is that the host application need not be recompiled or precompiled to dynamically update and or affect the behavior of the host application such as tracking different events and or executing different application logic based on the remotely received application logic A. In one example the application logic A comprises instructions that are different from the initial or current instructions of the host application .

At block host application and or customized code processing module executes the loaded application logic B to process one or more events. Customized code processing module may process one or more of events and or sequence of events by executing the updated application logic B. For example application logic B may be executed to determine which of a sequence of events to further process via tracking functions such as by executing third party vendor code. As will be described herein customized code processing module may execute first party third party and or application logic instructions upon determining that an event should be further processed.

At block customized code processing module executes the instructions and or code block specified by application logic B. The executed code instructions may execute third party vendor code integrated with host application and or host code of host application . For example third party code may execute tracking functions that externally report interactions and or statistics associated with the end user and host application . In some embodiments host code may be executed to invoke any number of instructions that have been configured with host application such as content modification and or alert pop ups with updated text from the tag management system. Application logic A and or B may include content such as images and or any other of data that host application supports. Advantageously application logic B may be able to flexibly process events because the application logic includes executable instructions that can be updated and or host application registers all events that may be processed by the updated application logic. For example example process may support tracking by vendors that do not have third party code loaded on device because the application logic may be updated to execute external tracking methods such as HTTP calls where all of the data for executing external tracking methods may be supplied by the application logic and or libraries provided by the tag management system remotely.

At block customized code processing module may receive a tag library A from tag management system . In some embodiments tag library A may include JavaScript instructions and or a JavaScript library for tag management. The received tag library A may initially be received by host application however host application may be configured with the customized code processing library to register receipt of tag library A for additional processing by customized code processing module . In some embodiments advantages of remotely receiving tag library A is that the host application need not be recompiled or precompiled to dynamically update the behavior of the host application such as tracking different events and or executing different application logic based on the remotely received tag library A.

At block customized code processing module may construct a tag object B from the received tag library A. The customized code processing module may load the tag library A as a tag object B using a software module that is used for used for operating and or presenting a web browser such as WebKit software module. In some embodiments it may be an advantageous to use a web browser software module to process tag library A because tag library A may be used in both the host application context and a content site context such as for websites. In some embodiments the tag object B and or the tag library A includes updated logic and or instructions that updates and or affects the behavior of the host application. Examples of updating and or affecting the behavior of the host application is tracking different events associated with the host application and or executing different application logic in response to the identification of one or more events. In some embodiments the tag object B and or the tag library A comprise instructions that are different from the initial or current instructions of the host application .

In some embodiments the tag object B includes configuration and or instructions to execute host code and or third party code. As described herein the customized code processing module may include generic logic to execute any third party library that is added to the device. For example the tag object B may specify input data and or other data for the particular host code and or third party code to execute for the one or more events.

At block one or more of events are processed by the tag object B to determine whether additional event processing is to be performed. For example there may be a number of events registered by host application that are not related to tracking purposes and or may be ignored by third party vendors. Thus where no additional processing is to be performed customized code processing module may discontinue processing and conserve processing resources. In some embodiments since tag library A may be received remotely and therefore tag object B may update an event which was not processed with an older tag object may be processed at a later time by the updated tag object B.

In some embodiments with a generic API execution process the one or more events may be processed by the tag object B that may conditionally cause the execution of host code and or third party code at block . As described herein since the tag object B may be retrieved remotely the customized code processing module can cause the execution new libraries and or third party code that are configured in the tag object B.

At block tag object B determines that the one or more events are to be further processed. Customized code processing module may execute a tag interpreter A which may also include code instructions such as JavaScript that may be loaded as a tag interpreter module B. The tag interpreter module B may further process the one or more events to determine which application logic B should be conditionally executed. Thus in some embodiments customized code processing module may provide various layers and or modules such as tag library B tag interpreter B and or application logic B that may be remotely received and or updated to conditionally process and or operate on particular events. Customized code processing module executes application logic B via tag interpreter module B that may correspond to one or more blocks from process of and or process of . Once customized code processing module executes application logic B the customized code processing module returns to block to determine whether further instructions exist for continued event processing. For example the dynamic nature of application logic B and or tag interpreter module B may enable multiple application logic modules and or code blocks to be processed sequentially and or continuously until there are no instructions for additional event processing or a subset of instructions have been processed. Examples of conditional and or sequential processing may be discussed herein such as with respect to example systems and or of . Additionally or alternatively the multiple application logic modules and or code blocks may correspond to third party libraries and or host code that can be processed by the generic API execution techniques described herein. Examples of generic API execution techniques described may be discussed herein such as with respect to example system of .

At block customized code processing module determines whether a response is expected following a code execution as determined by application logic B. The application logic B may include instructions that a further response is expected. For example the command executed before block may have requested a token and or device ID from an application distributor and or any external network server. In the example the customized code processing module may send a request such as a message to the external network server requesting a token. Upon receiving the token and or device ID application logic B may transmit a message to tag management system reporting the token and or device ID. The tag management system may then respond at a later time. Where customized code processing module determines that a further response is expected customized code processing module will proceed to block below.

At block customized code processing module determines whether an appropriate response has been received as defined by application logic B. Customized code processing module will continue to wait until an appropriate response is received as the loop at block illustrates. In some embodiments customized code processing module may advantageously implement threading to wait for the response. For example customized code processing module may execute as a background thread to not consume computing resources of device while there are threads and or processes that affect the user experience. In some embodiments configuration of customized code processing module as a background thread may be configured by application logic B that may indicate which thread and or queue for the customized code processing module and or some portion thereof to execute on.

At block customized code processing module processes the response . In some embodiments once the response is received customized code processing module may execute another set of instructions as defined by application logic B. In the device token example tag management system may provide an updated tag object B tag interpreter B and or application logic B in response with various third party vendor code that incorporates the device token and or ID. For example once device receives application logic B with the appropriate device token and or ID the application logic B may process further events to report to additional third party vendors with the received device token and or ID.

Turning to an example user interface is shown that can allow users to specify and or configure application logic for a host application . The user interface may be generated by the tag management system and provided as a webpage or the like to the tag management user systems for output in the browser B. In the depicted embodiment of the user interface different content pages are specified for the host application specified in area . Pages and area make reference to uniform resource locators URLs because some host applications may be designed and or implemented with web technology. However in some embodiments it will be appreciated that Pages and area may not reference URLs. A user can specify a custom name for the product page using name fields as well as specify a URL for the page itself using a page field . Alternatively the user can browse a file system for a content page to find the name or file system path of the page using browse buttons . Using add and delete buttons the user can insert a page into or delete a page from user interface . As illustrated application logic may be selected via the logic template selector . As described above the application logic may correspond to JavaScript files which may be hosted by the tag management system . It will be appreciated that users may upload and or generate new application logic and or JavaScript files or templates via user interface . Users can save a specified application logic using a save logic selector .

Turning to a more detailed example embodiment of a computing environment is shown that can perform any of the analytics features described herein. The computing environment is a more detailed example of implementation of the system of . As in devices may communicate over a network not shown . In addition tag management user systems are also shown. The computing environment facilitates implementation of an analytics system which may include the functionality of the analytics systems described above.

In the depicted embodiment the analytics system is shown distributed in a cloud platform that provides redundant and geographically dispersed access to the analytics system . In particular the analytics system is implemented in various cloud regions . These cloud regions may be implemented in any type of cloud platform which may simply be a data center operated by a vendor of the analytics system or by a third party vendor such as Amazon Web Services Microsoft Azure Rackspace Linode combinations of the same or the like. Each cloud region includes a load balancer that can balance requests to analytics system instances .

The analytics system instances can be implemented as virtual machines and or physical machines. In the Amazon Web Services embodiment the instances can be elastic compute cloud EC2 instances that are distributed geographically for faster and redundant access to geographically dispersed analysis user systems . In addition visitor profile data storage devices are shown in the different cloud regions and can store tag and visitor data in the cloud. Virtual private network VPN tunnels facilitate secure communication in a virtual private network among the different cloud regions and enable administrator users not shown of the analytics system to access analytics system instances .

In an embodiment the virtual private network is facilitated or provided by a private cloud service such as the Virtual Private Cloud VPC service provided by Amazon Web Services . The private cloud service can provide security to the analytics system instances by virtue of obscuring IP addresses of the analytics instances . The analytics system instances may have nonpublic IP addresses so that each analytics system instance does not need to have security software that is responsible for securing the analytics system itself.

A geodns provider is provided for interfacing between host applications analysis user systems and the various analytics system instances . The geodns provider can also provide end users with access to published tags which are stored in tag servers accessible through one or more or content delivery networks CDNs . The function of the geodns provider in one embodiment is to periodically determine which CDN hosting the tags has the lowest latency thereby selecting which CDN to point the host applications to when accessing tags on the tag servers . The geodns provider may implement the DYN DNS system in one embodiment.

Advantageously in certain embodiments by storing tags in CDNs tag access can be much faster than if tags were stored in locally hosted tag servers. Further by using a geodns provider access to tags can be even more rapidly achieved by cycling through the fastest available CDNs .

In some embodiments the systems and methods described in herein for receiving application logic may offer robust security mechanisms. For example a publisher and or developer of host application may insert customized code triggering placeholders into their host application to enable application logic functionality. Furthermore application logic and or library received from tag management system may be executed by an internal data object such as a WebKit object that is permitted limited execution functions that may not result in any security breaches. Thus a security breach may depend on multiple attacks and or breaches at the host application level which may include specific code embedded into the host application and a breach of that tag management system with corresponding malicious code which may be unlikely.

In some embodiments the systems and methods described herein may facilitate optimized computing performance. For example execution of application logic customized code processing modules and or customized code processing libraries may be conditioned upon received and or identified events. Thus execution of customized code may be based on event triggering such as user interactions which may be limited. Furthermore as described herein the customized code processing modules and or libraries may be configured to run as background threads to conserve resources and or reduce any impact on the user experience because processing of application logic may occur when the user is idle. Other optimizations include selectively determining which user interactions to track via the remotely received application logic based on a probability such as fifty percent of the users from the west coast reporting a login and or sign on interaction. In some embodiments the systems and methods described herein for updating interpreted modules of host application may be efficient and or reduce data bandwidth requirements. For example unlike dynamic websites which may load large amounts of web content the customized code processing methods and modules described herein may use low bandwidths for updating particular modules and or receiving instructions. Further in some embodiments the HTTP calls and or data transmissions of application logic and or libraries may be compressed and or encrypted for enhanced performance and or security.

In some embodiments command identifiers may be used to identify customized code processing methods and or source code via the customized code processing module . For example command identifiers may identify third party vendor code to be executed by the remotely received application logic. Thus the application logic may reference third party vendor code by a particular command identifier and or the application logic may be configured with command identifiers via the tag management system and or the tag management user system.

Many other variations than those described herein will be apparent from this disclosure. For example depending on the embodiment certain acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially. In addition different tasks or processes can be performed by different machines and or computing systems that can function together.

The steps of a method process or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module stored in one or more memory devices and executed by one or more processors or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of non transitory computer readable storage medium media or physical computer storage known in the art. An example storage medium can be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The storage medium can be volatile or nonvolatile. The processor and the storage medium can reside in an ASIC.

Conditional language used herein such as among others can might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or states. Thus such conditional language is not generally intended to imply that features elements and or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or states are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. Further the term each as used herein in addition to having its ordinary meaning can mean any subset of a set of elements to which the term each is applied.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As will be recognized certain embodiments described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others.

