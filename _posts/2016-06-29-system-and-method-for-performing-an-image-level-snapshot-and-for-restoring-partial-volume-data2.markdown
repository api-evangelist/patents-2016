---

title: System and method for performing an image level snapshot and for restoring partial volume data
abstract: The present invention relates to a method for performing an image level copy of an information store. The present invention comprises performing a snapshot of an information store that indexes the contents of the information store, retrieving data associated with the contents of the information store from a file allocation table, copying the contents of the information store to a storage device based on the snapshot, and associating the retrieved data with the copied contents to provide file system information for the copied contents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619341&OS=09619341&RS=09619341
owner: Commvault Systems, Inc.
number: 09619341
owner_city: Tinton Falls
owner_country: US
publication_date: 20160629
---
Any and all applications for which a foreign or domestic priority claim is identified in the Application Data Sheet or any correction thereto are hereby incorporated by reference into this application under 37 CFR 1.57.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosures as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever.

This application is related to the following patents each of which is hereby incorporated herein by reference in its entirety 

The invention disclosed herein relates generally to a system and method for performing a snapshot and for restoring data. More particularly the present invention relates to a system and method for performing snapshots of an information store which are stored across multiple storage devices and for restoring partial or full snapshots.

To obtain a more thorough understanding of the present invention the following discussion provides additional understanding regarding the manner is which magnetic media is used to store information. Using traditional techniques copies of an information store are performed using the operating system s file system. Copying is done by accessing the operating system s OS file system for the information store to be backed up such as the Windows NTFS file system. The file allocation system of the operating system typically uses a file allocation table to keep track of the physical or logical clusters across which each file in the information store is stored. Also called an allocation unit a cluster is a given number of disk sectors that are treated as a unit each disk sector storing a number of bytes of data. This unit the cluster is the smallest unit of storage the operating system can manage. For example on a computer running Microsoft s Windows 95 operating system the OS uses the Windows FAT32 32 bit file allocation table having a cluster size to 4K. The number of sectors is determined when the disk is formatted by a formatting program generally but not necessarily when the OS is installed.

The operating system allocates disk space for a file only when needed. That is the data space is not preallocated but allocated dynamically. The space is allocated one cluster at a time where a cluster is a given number of consecutive disk sectors. The clusters for a file are chained together and kept track of by entries in a file allocation table FAT .

The clusters are arranged on the disk to minimize the disk head movement. For example all of the space on a track is allocated before moving on to the next track. This is accomplished by using the sequential sectors on the lowest numbered cylinder of the lowest numbered platter then all sectors in the cylinder on the next platter and so on until all sectors on all platters of the cylinder are used. This is performed sequentially across the entire disk for example the next sector to be used will be sector on platter of the next cylinder.

For a hard fixed disk FAT sector cluster etc. size is determined when a disk formatting program formats the disk and are based on the size of the partition. To locate all of the data that is associated with a particular file stored on a hard disk the starting cluster of the file is obtained from the directory entry then the FAT is referenced to locate the next cluster associated with the file. Essentially the FAT is a linked list of pointers to clusters on the disk e.g. each 16 bit FAT entry for a file points to the next sequential cluster used for that file. The last entry for a file in the FAT has a number indicating that no more clusters follow. This number can be from FFF8 to FFFF base 16 inclusive.

A sixteen byte section of a FAT is depicted. The first four bytes store system information. A two byte pair bytes four and five are the beginning bytes of the FAT used to track file information. The first cluster for data space on all disks is cluster 02. Therefore bytes four and five are associated with the first cluster of disk sectors 02 used to store file information. Bytes six and seven are associated with cluster 03 . . . and bytes fourteen and fifteen are associated with cluster 07. 

This example illustrates how sectors associated with a file referenced in a directory are located. The cluster information bytes in the directory point to cluster number 02. The sectors in cluster 02 not shown contain the initial sector of data for the referenced file. Next the FAT is referenced to see if additional clusters are used to store the file information. FAT bytes four and five were pointed to by the cluster information bytes and the information stored in bytes four and five in the FAT point to the next cluster used for the file. Here the next cluster is OS . Accordingly cluster OS contains the next sector of data for the referenced file. FAT bytes ten and eleven contain an end of file flag FFFF indicating there are no more clusters associated with the referenced file. All of the information comprising the referenced file therefore is contained in clusters 02 and 05 on the disk.

As with other applications running on the computer a typical backup application provides a read request to the operating system which handles interpretation of the information contained in the FAT and reading of each file for the backup application. A file system is provided on the storage device that is used by the backup application to write files that are copied to the device. Similarly the recovery portion of the backup application or a separate recovery application may read files from the storage device for recovery of the information.

Inherent problems and disadvantages have been discovered with currently available systems and methods for archiving data contained in an information store. One technique is to perform a full copy of the data contained in the information store. Utilizing this technique results in two separate copies of the information store and the length of time it takes to make this kind of copy is related to the amount of data copied and the speed of the disk subsystem. For example assuming a transfer rate of 25 MB sec the approach will take one hour to copy 90 GB of data. These techniques however in addition to other disadvantages require the applications on the information store to be quiesced during the copy routine. This places a significant burden on system administrators to complete copying and get critical systems back into the production environment as absent a high speed data bus the copying may consume a significant amount of time to complete.

Administrators typically keep multiple copies of a given information store. Unfortunately this has the drawback of requiring n times the amount of space of the information store to maintain n copies which can be quite expensive to store in addition to requiring complex and time consuming techniques for restoration of the copied data.

One currently available alternative is to perform snapshots of an information store. With current snapshot systems and methods administrators create an incremental copy that is an exact point in time replica of the source volume each time a snapshot is taken. A series of snapshot are stored locally on the information store from which it was taken and track incremental changes to the data in the information store. Furthermore changed data is written to a new location in the information store as tracked by the snapshot. With knowledge regarding the change as well as the changed data the snapshot can be used to roll back changes to an information store to the point in time when the snapshot was taken. If there should be any logical corruption in the information store s data that went undetected for a period of time however these incremental updates faithfully replicate that logical corruption to the data when copying. Additionally other drawbacks are associated with currently know snapshot techniques including the significant drawback of preventing restoration from the snapshot in the event that the information store fails as both the snapshot and the information store become unavailable.

Systems and methods are needed therefore that overcome problems associated with currently known techniques for taking maintaining and restoring snapshots.

The present invention addresses among other things the problems discussed above with copying up data using systems and methods known to those of skill in the art. The invention provides systems and methods for performing n snapshots of an information store without requiring n times the space of the information store and storing those snapshots in multiple destinations across a network.

One embodiment of the system of the present invention creates the snapshots by taking a snapshot that indexes only clusters for files that were created or changed since the last snapshot. A snapshots tn is restored by restoring the clusters from the snapshot tn. The clusters that were not restored from snapshot tare restored from snapshot t etc. until the remaining clusters are restored from the first snapshot snapshot t.

In accordance with some aspects of the present invention multiple snapshots are kept on a storage device without requiring n times the space of the total volume of the information store. The system creates snapshots at various points in time that index only clusters for files that were created or changed since the last snapshot and creates a copy of the data that has been changed or created. This allows users to keep several snapshots without requiring n times the space of the total volume of the information store.

In some embodiments the system stores a map which may be part of a snapshot to track specific files and folders with their corresponding copied clusters. The map created by reading data from the file allocation table of the information store and associates files and folders with the clusters stored in the snapshots. In this way even though the snapshot was performed at the cluster level individual or groups of files and or folders may be restored without unnecessarily restoring the entire information store.

With reference to embodiments of the present invention are shown. presents a block diagram illustrating the components of a system for performing storage and restoration operations on electronic data in a computer network according to one embodiment of the invention. It should be understood that the invention is not limited to networked environments and may also be implemented on a stand alone computer or electronic device.

As shown the system of includes a storage manager including a volume replication table and a storage manager index cache and one or more of the following a client an information store a data agent a media agent a media agent index cache and a storage device . One exemplary embodiment of the present system is the CommVault QuNetix three tier system available from CommVault Systems Inc. of Oceanport N.J. further described in U.S. patent application Ser. No. 09 610 738 and hereby incorporated by reference in its entirety.

A data agent is a software module that is generally responsible for retrieving data from an information store for copies snapshots archiving migration and recovery of data stored in an information store or other memory location e.g. hard disc drive. Each client computer preferably has at least one data agent and the system can support many client computers . The data agent provides an interface to an information store to execute copies snapshots archiving migration recovery and other storage operations on data in conjunction with one or more media agents . According to one embodiment each client runs a number of data agents wherein each data agent is configured to interface with data generated by or from a specific application e.g. a first data agent to interface with Microsoft Exchange data and a second data agent to interface with Oracle database data. As is explained in greater detail herein a data agent is III communication with one or more media agents to effect the distributed storage of snapshots on one or more storage devices that are remote from the information store that is the source of the snapshot .

The storage manager is a software module or application that coordinates and controls other components comprising the system e.g. data and media agents and respectively. The storage manager communicates with data and media agents to control and manage snapshot creation migration recovery and other storage operations. According to one embodiment the storage manger maintains data in a storage manager index cache that instructs a given data agent to work in conjunction with a specific media agent to store snapshots on one or more storage devices .

The storage manager maintains a storage manager index cache . Data in the storage manager index cache which the storage manager collects from data agents media agents user and other applications is used to indicate track and associate logical relationships and associations between components of the system user preferences management tasks and other data that is useful to the system. For example the storage manager index cache may contain data that tracks logical associations between media agents and storage devices . The storage manager index cache may also contain data that tracks the status of storage operations to be performed storage patterns such as media use storage space growth network bandwidth service level agreement SLA compliance levels data protection levels storage policy information storage criteria associated with user preferences data retention criteria storage operation preferences and other storage related information.

A media agent is a software module that transfers data in conjunction with one or more data agents as directed by the storage manager between an information store and one or more storage devices such as a tape library a magnetic media storage device an optical media storage device or other storage device. The media agent communicates with and controls the one or more storage devices . According to one embodiment the media agent may communicate with the storage device via a local bus such as a SCSI adaptor. Alternatively the storage device may communicate with the data agent via a Storage Area Network SAN . Other types of communication techniques protocols and media are contemplated as falling within the scope of the invention.

The media agent receives snapshots preferably with the changed data that is tracked by the snapshot from one or more data agents and determines one or more storage devices to which it should write the snapshot. According to one embodiment the media agent applies load balancing algorithms to select a storage device to which it writes the snapshot. Alternatively the storage manager instructs the media agent as to which storage device the snapshot should be written. In this manner snapshots from a given information store may be written to one or more storage devices ensuring data is available for restoration purposes in the event that the information store fails. Either the media agent or the storage manager records the storage device on which the snapshot is written in a replication volume table thereby allowing the snapshot to be located when required for restoring the information store .

A media agent maintains a media agent index cache that stores index data the system generates during snapshot migration and restore operations. For example storage operations for Microsoft Exchange data generate application specific index data regarding the substantive Exchange data. Similarly other applications may be capable of generating application specific data during a copy or snapshot. This data is generally described as metadata and may be stored in the media agent index cache . The media agent index cache may track data that includes for example information regarding the location of stored data on a given volume. The media agent index cache may also track data that includes but is not limited to file names sizes creation dates formats application types and other file related information information regarding one or more clients associated stored data information regarding one or more storage policies storage criteria storage preferences compression information retention related information encryption related information and stream related information. Index data provides the system with an efficient mechanism for locating user files during storage operations such as copying performing snapshots and recovery.

This index data is preferably stored with the snapshot that is backed up to the storage device although it is not required and the media agent that controls the storage operation may also write an additional copy of the index data to its media agent index cache . The data in the media agent index cache is thus readily available to the system for use in storage operations and other activities without having to be first retrieved from the storage device .

In order to track the location of snapshots the system uses a database table or similar data structure referred to herein as a replication volume table . The replication volume table among other advantages facilitates the tracking of multiple snapshots across multiple storage devices . For example the system might as directed by a policy or a user store a first snapshot to on first storage device A such as a tape drive or library and then store subsequent snapshots containing only the changed cluster s tn on a second storage device B such as an optical drive or library. Alternatively instructions may be stored within system components e.g. a storage manger or media agent directing the storage devices used to store snapshots. Information regarding the storage device to which the snapshot is written as well as other information regarding the snapshot generally is written to the replication volume table . An exemplary structure according to one embodiment is as follows 

In the exemplary replication volume table id is a unique identification number assigned by the system to the snapshot PointInTime represents the date and time that the snapshot was created CreationTime represents the date and time that the snapshot was completed ModifyTime is the recorded date and time of the snapshot taken prior to the current snapshot Current state is an identifier used to indicate a current status of the snapshot e.g. pending completed unfinished etc. PrimaryVolumeId is the identifier for the information store from which the snapshot is being made PhysicalVolumeId is a hardware identifier for the information store RVScratchVolumeId is an identifier for a scratch volume which in some embodiments may be used to buffer additional memory as known to those of skill in the art Flags contains a 32 bit word for various settings such as whether a snapshot has been taken previously etc. JobId stores the identifier for the job as assigned by a storage management module and the Snap VolumeId points to the physical destination storage device to which the snapshot is written.

As each snapshot indexes an information store at a given point in time a mechanism must be provided that allows the snapshots taken of an information store to be chronologically related so that they are properly used for restoring an information store . According to the replication volume table the CurrentRole integer may store a value for the relative position of a given snapshot in hierarchy of snapshots taken from a given information store e.g. first to second tl t2 t3 etc. 

In some embodiments components of the system may reside on and be executed by a single computer. According to this embodiment a data agent media agent and storage manager are located at the client computer to coordinate and direct local copying archiving migration and retrieval application functions among one or more storage devices that are remote or distinct from the information store . This embodiment is further described in U.S. patent application Ser. No. 09 610 738.

One embodiment of a method for using the system of the present invention to perform snapshots is illustrated in the flow diagram of . When the system is initialized or at other times as directed by a user or rules e.g. policies or other instructions the storage manager directs the data agent to perform an initial full snapshot of the data stored in the information store e.g. indexing the location of all data in the information store in conjunction with one or more media agents. The system copies all of the data on the information store with the initial snapshot to a storage device step .

Advantageously the snapshot and data copied from the information store may be written to a storage device that is remote or different from the information store step e.g. local data from a given information store is written to a storage device attached to a network. The selection of a destination storage device for the snapshot may be accomplished using one or more techniques known to those of skill in the art. For example a fixed mapping may be provided indicating a storage device for which all snapshots and copied or changed data should be written. Alternatively an algorithm may be implemented to dynamically select a storage device from among a number of storage devices available on a network. For example a storage manager may select a media agent to handle the transfer of the snapshot and copied data to a specific storage device based on criteria such as available bandwidth other scheduled storage operations media availability storage policies storage preferences or other consider considerations. The snapshot preferably along with the data from the information store is written to the selected destination storage device step . According to certain embodiments the snapshot contains information regarding the files and folders that are tracked by the snapshot. Alternatively the information regarding the files and folders that are indexed by the snapshot e.g. file system information are stored on the storage device.

One embodiment of a snapshot used to track clusters read from the information store to clusters in a snapshot as well as to map file and folder names corresponding to the snapshot clusters is illustrated in . It should be noted that clusters are but one level of granularity that may be indexed by a snapshot e.g. blocks extents etc. During the scan the data agent creates a snapshot and writes data e.g. new or changed data to a storage device . According to the present embodiment the snapshot is illustrated as a flat file data structure although those of skill in the art will recognize that the snapshot may be embodied in a number of disparate types of data structures.

The snapshot is used to associate the original cluster numbers from an information store with clusters on a storage device which in the present embodiment is a magnetic tape. It should be appreciated by those of skill in the art that the present invention is not limited to magnetic tape and that the systems and methods described herein may be applicable to using snapshots with other storage technologies e.g. storing disk geometry data to identify the location of a cluster on a storage device such as a hard disk drive.

The tape offsets for the clusters in the snapshot are mapped to original disk cluster information . File and folder names may be scanned from the information store s FAT and also mapped to the tape offsets . A file part column in the snapshot tracks the clusters for each file and folder where each file and folder contains an entry for the first cluster . For files or folders that are stored in more than one cluster sometimes not in contiguous clusters the offset table entry for each further cluster is numbered consecutively .

In order to identify the files and folders represented by the stored clusters e.g. changed data in the snapshot the map may exclude data from columns relating to the original disc clusters and last snapshot . In order to keep track of changed verses unchanged clusters however the original disk cluster information is stored in the map . Other information may also be stored in the map such as timestamps for last edit and creation dates of the files.

For each snapshot even though only clusters that have been changed or created since a previous snapshot are tracked in a given snapshot after the initial snapshot to the snapshot may be provided with the data from all previous snapshots to provide the latest snapshot with folder and file information such that an index of the entire information store is maintained concurrently each snapshot. Alternatively this may be bypassed in favor of creating a snapshot that indexes all data at a given point in time in the information store and copying only changed data.

Entries from each snapshot may also contain a last snapshot field that holds an identifier for the last snapshot containing the cluster indexed by the entry at the time the current snapshot was created. According to an alternative embodiment e.g. for snapshots that do not store the information from the information store s FAT the snapshot only tracks clusters stored in the information store with the clusters indexed by the snapshot. For those embodiments the snapshot contains neither file and folder information nor file part information .

Returning to once the first full snapshot to has been taken step the storage manager may implement a rule policy or similar set of instructions that require snapshots to be taken at certain time intervals. Accordingly at each time interval where a subsequent snapshot to is taken the data agent works in conjunction with one or more of the media agents to perform and store snapshot and accompanying data that changed since the subsequent snapshot t loop .

For each snapshot tn that is taken of the information store a comparison is performed such that only the clusters which have changed or been created since the last snapshot tn. was taken of that volume are stored step . For example in some embodiments the data agent employs a block filter or similar construct known to those of skill in the art to compare snapshot tn with tn i and thereby detect changed clusters on an information store. Alternatively the data agent may use other techniques know in the art such as Copy on Write COW to identify changed data on an information store. If a given cluster in the information store has changed since the last snapshot in which the cluster appears or if the cluster from the information store was created subsequent to the last snapshot then the cluster is read from information store and stored with the new snapshot being written to the storage device step .

A determination is made regarding the given storage device to which the snapshot and changed data which may also include newly created data is to be written step . Techniques such as those described in conjunction with storage of the initial snapshot steps and may also be employed regarding storage of subsequent snapshots. Advantageously the initial snapshot and any subsequent snapshot may written to any storage device available in the network. Furthermore there is no limitation to the combination of devices used to store the snapshots for a given information store. For example an initial snapshot may be written to storage device A a second and third snapshots may be written to storage device B and a fourth snapshot may be written to storage device C. Regardless of the storage device that is selected step the replication volume table is updated to reflect the location step allowing snapshots to be located when a user requests to restore the information store from which the snapshots were taken.

System administrators use stored snapshots in conjunction with the changed data that the snapshot indexes or tracks to recover lost or corrupted information. presents a flow diagram illustrating one embodiment of a method for restoring an information store from one or more snapshots. If the user or a system process wants to restore an information store from one or more snapshots an interface is presented to restore the snapshot step . The interface may be for example a graphical user interface GUI and Application Programming Interface API or other interface known to those of skill in the art. The storage manager scans the replication volume table to identify available snapshots for presentation in a menu that allows selection of an available snapshot step .

When the user selects a snapshot the storage manager performs a query of the replication volume table to identify all previous snapshots for an information store from which the selected snapshot was taken step . This may be accomplished by performing a search on the replication volume table for all snapshots with the same PrimaryVolumeId or PhysicalVolumeId. Starting with the selected snapshot for each snapshot in the query result loop the storage manager directs a given media agent in conjunction with a given data agent to read and restore all clusters of changed data not already restored from clusters indexed by a prior snapshot e.g. the latest version of each cluster step . According to one embodiment this is accomplished by restoring the clusters indexed by each of the snapshots in the query result starting with the original snapshot and overwriting clusters indexed by the original snapshot with changed clusters indexed by subsequent snapshots up to the snapshot representing the point in time selected by the user or system process. As an alternative the last snapshot field of the selected snapshot may be utilized to determine the snapshots that should be utilized in the restore operation. The latest version of each cluster starting with those indexed by the selected snapshot is then restored step .

As discussed above embodiments of the invention are contemplated wherein FAT information of the information store is stored in conjunction with a given snapshot e.g. the file and folder information corresponding to the clusters of changed data indexed by a given snapshot. Accordingly the storage manager may allow the user to select individual files and or folders to be selected for restoration from a snapshot. With reference to a flow diagram is presented illustrating one embodiment of a method for restoring individual files and or folders indexed by a snapshot.

When the user desires to restore the information store to a given point in time the user interface allows the user to view the files and folders indexed by a snapshot representing the point in time as if the user were viewing a folder structure on a storage device step . The storage manager retrieves the file and folder information for changed data that is indexed by one or more snapshots for display. Once one or more files and or folders are selected step the storage manager selects those snapshots that index the given version of the files and or folders using the replication volume table step . Each snapshot indexing data for the one or more files to be restored are opened serially loop . The changed data for the selected files and folders that are indexed by the snapshots are restored from clusters indexed by each snapshot step but not overwriting clusters indexed by prior snapshots.

While the invention has been described and illustrated in connection with preferred embodiments many variations and modifications as will be evident to those skilled in this art may be made without departing from the spirit and scope of the invention and the invention is thus not to be limited to the precise details of methodology or construction set forth above as such variations and modification are intended to be included within the scope of the invention.

