---

title: Methods and systems for instantaneous asynchronous media sharing
abstract: Disclosed are methods and systems for instantaneous asynchronous media sharing. The method comprises establishing a communication channel between a user device and a server; receiving a media stream object containing a recording of a screen of the user device through the communication channel, as it is recorded; storing the recording to permanent storage as it is received; receiving a publication request at a publication request time; and in response to receiving the publication request, making the recording accessible to one or more viewers within an immediate time frame by generating a complete video file ready for download, wherein the immediate time frame is a time to upload a remaining number of bytes to the server from the publication request time plus a time to complete processing the remaining number of bytes to generate the complete video file. Also disclosed are benefits of the new methods, and alternative embodiments of implementation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09641566&OS=09641566&RS=09641566
owner: Opentest, Inc.
number: 09641566
owner_city: San Francisco
owner_country: US
publication_date: 20161130
---
This application is a non provisional of and claims the benefit of provisional application having U.S. Ser. No. 62 397 306 filed on 20 Sep. 2016 and entitled Methods and Systems for Instantaneous Asynchronous Media Sharing the entire disclosure of which is hereby incorporated by reference in its entirety herein.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. This patent document may show and or describe matter which is or may become trade dress of the owner. The copyright and trade dress owner has no objection to the facsimile reproduction by anyone of the patent disclosure as it appears in the U.S. Patent and Trademark Office files or records but otherwise reserves all copyright and trade dress rights whatsoever.

Embodiments of the present invention are related to methods and systems for instantaneous asynchronous media sharing.

Video communication is a very efficient way of knowledge sharing and information exchange in various fields including education business and marketing. However with existing technologies streamable media such as audio and video are generally associated with non trivial waiting times while the media get uploaded processed and stored before being made shareable on network connected devices. For example uploads to the popular video sharing website YouTube involve a long waiting time due to the transcoding of quality streams before allowing users to view and share the media. Another video sharing website Vimeo has a similar process as YouTube with waiting times taking up to 40 minutes. In the case of Vimeo and YouTube waiting is still acceptable because media are consumed in a televised format instead of being used as a messaging mechanism.

File hosting service provider Dropbox attempts to reduce this waiting time by utilizing on demand transcoding in real time while streaming. Transcoding happens after an upload completes with the operation first done on the initial few seconds of a video to give servers sufficient time to catch up and transcode the rest of the video content on demand or as a background job. In other words processing is deferred to make the transmission seem streamed by doing some work up front. As a result a user will inevitably run into buffering issues.

The aforementioned difficulties of synchronous real time video communication and waiting times associated with asynchronous media upload provide for unsatisfactory user experiences and technical difficulties with using video as part of business communications.

The inventor of the present invention has created methods and systems for instantaneous asynchronous media sharing that is making recorded media instantaneously ready for consumption once the media is finished being created. Several alternative methods of implementation are described below.

More specifically in one aspect one embodiment of the present invention is a system for instantaneous and asynchronous media sharing. The system includes a server having access to at least one processor and a user device and a non transitory physical medium for storing program code and accessible by the server. The program code when executed by the processor causes the processor to establish a communication channel between the user device and the server receive through the communication channel from the user device a media stream object containing a recording initiated on the user device where the recording is uploaded from the user device as it is recorded on the user device and where the recording is of a screen of the user device. The program code when executed by the processor also causes the processor to store the recording to permanent storage as the recording is received receive a publication request from the user device where the publication request is received from or input by a user at a publication request time and in response to receiving the publication request make the recording accessible to one or more viewers within an immediate time frame by generating from the recording a complete video file ready for download by the one or more viewers wherein the immediate time frame is a time to upload a remaining number of bytes to the server from the publication request time plus a time to complete processing the remaining number of bytes to generate the complete video file.

In some embodiments of the present invention the program code when executed by the processor further causes the processor to initiate a post processing pipeline to post process the received recording where the complete video file is generated from the post processed recording and where the post processing pipeline performs a transcoding function. In some embodiments a metadata atom of the recording is generated in real time as the media stream object is uploaded to the server and a remaining amount of time is minimized to update the metadata atom on just the remaining number of bytes during the processing of the remaining number of bytes. In some embodiments the post processing pipeline further performs a post processing function of audio extraction speech to text conversion video processing indexing object detection phoneme search eye tracking sentiment analysis behavioral analysis or gesture analysis.

In some embodiments of the present invention the communication channel from the user device to the server utilizes a lossless protocol where the media stream object is attached to a stream recorder on the user device where the recording in the media stream object is segmented into a plurality of video segments and where the receiving of the media stream object through the communication channel comprises receiving a subset of the plurality of video segments from the user device at discrete intervals. In some embodiments of the invention where the communication channel utilizes a lossless protocol from the user device to the server the program code when executed by the processor further causes the processor to determine whether a transmission speed over the communication channel is below a predetermined threshold and in response to determining that the transmission speed over the communication channel is below the predetermined threshold down sample the recorded data to reduce the rate of data transmitted through the communication channel. In some embodiments of the invention where the communication channel utilizes a lossless protocol from the user device to the server the program code when executed by the processor further causes the processor to determine whether a transmission speed over the communication channel is below a predetermined threshold and in response to determining that the transmission speed over the communication channel is below the predetermined threshold replace the lossless protocol with a lossy protocol. In some embodiments of the invention where the communication channel utilizes a lossless protocol from the user device to the server the program code when executed by the processor further causes the processor to determine whether a transmission speed over the communication channel is below a predetermined threshold and whether a post processing pipeline has already been started and in response to determining that the transmission speed over the communication channel is below the predetermined threshold and that a post processing pipeline has already been started continue the post processing pipeline concurrently as the recorded data on the user device is stored in a buffer.

In some embodiments of the invention the communication channel utilizes a lossy peer to peer real time protocol where the user device functions as a first peer in the communication channel and where the server functions as a second peer in the communication channel. In some embodiments where the communication channel utilizes a lossy peer to peer protocol the program code when executed by the processor further causes the processor to determine whether a direct connection between the user device and the server has failed and in response to determining that the direct connection has failed use a second server to relay traffic between the user device and the server where the second server resides on the public internet and where the second server is a TURN Traversal Using Relays around Network Address Translators NAT server.

In some embodiments of the present invention the media stream object further contains a recording from a front facing camera. In some embodiments media stream object further contains a recording of a user annotation on the screen of the user device and a recording from a camera on the user device. In yet some embodiments the media stream object further contains a superposition of a recording from a front facing camera on the user device and a recording from a back facing camera on the user device.

In another aspect the present invention is a non transitory computer readable storage medium storing executable instructions the instructions when executed by a processor causes the processor to perform the aforementioned steps for sharing media instantaneously and asynchronously.

In yet another aspect the present invention is a non transitory computer readable storage medium for sharing media asynchronously the storage medium comprising program code stored thereon that when executed by a processor causes the processor to first establish a communication channel between a user device and a server receive through the communication channel from the user device a media stream object containing a first recording and a second recording initiated on the user device where the first and the second recordings are received as they are recorded on the user device where the first recording is of a user annotation on a screen of the user device and wherein the second recording is from a camera on the user device store the recording to permanent storage as the recording is received initiate a post processing pipeline to post process the received recording receive a publication request from the user device where the publication request is received from a user at a publication request time and in response to receiving the publication request make the recording accessible to one or more viewers within an immediate time frame by generating from a post processed recording a complete video file ready for download by the one or more viewers wherein the immediate time frame is a time to upload a remaining number of bytes to the server from the publication request time plus a time to complete post processing the remaining number of bytes to generate the complete video file.

In yet another aspect the present invention is a system for instantaneous and asynchronous media sharing the system comprising a user device having a display a camera and a first memory a server comprising a second memory and a data repository a telecommunications link between the user device and the server and a plurality of computer codes stored on the first memory and the second memory respectively where the plurality of computer codes when executed causes the server and user device to execute a process comprising the aforementioned steps.

In yet another aspect the present invention is a computerized server comprising at least one processor a memory and computer codes stored thereon. The server when connected to a user device and the computer codes when executed by the processor causes the processor to execute a process comprising the aforementioned steps.

Yet other aspects and embodiments of the present invention include the methods processes and algorithms comprising the steps described herein and also include the processes and modes of operation of the systems and servers described herein. Other aspects and embodiments of the present invention will become apparent from the detailed description of the invention when read in conjunction with the attached drawings.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention can be practiced without these specific details. In other instances structures devices activities and methods are shown using schematics use cases and or flow diagrams in order to avoid obscuring the invention. Although the following description contains many specifics for the purposes of illustration anyone skilled in the art will appreciate that many variations and or alterations to suggested details are within the scope of the present invention. Similarly although many of the features of the present invention are described in terms of each other or in conjunction with each other one skilled in the art will appreciate that many of these features can be provided independently of other features. Accordingly this description of the invention is set forth without any loss of generality to and without imposing limitations upon the invention.

Some illustrative definitions are provided to assist in understanding the present invention but these definitions are not to be read as restricting the scope of the present invention. The terms may be used in the form of nouns verbs or adjectives within the scope of the definitions. Some definitions are referenced from Wikipedia the Mozilla Developer Network the WebM Project the World Wide Web Consortium and Stackoverflow.

In comparison to WebRTC WebSocket is designed for bi directional communication between a client and a server. WebSocket allows the streaming of audio and video as well as other data. In addition WebSocket offers ways of uploading data without streaming in real time that is asynchronously. WebSocket may be considered another example of a communication channel type. WebSocket also differs from WebRTC as it is built upon TCP which provides reliable and ordered delivery of data packets while also being limited by retransmission and buffering delays. Thus ebSocket is preferable with faster network connections and applications that do not have stringent real time requirements.

With reference to the definitions above and the figures provided embodiments of the present invention are now described in detail.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention can be practiced without these specific details. In other instances structures devices activities and methods are shown using schematics use cases and or flow diagrams in order to avoid obscuring the invention. Although the following description contains many specifics for the purposes of illustration anyone skilled in the art will appreciate that many variations and or alterations to suggested details are within the scope of the present invention. Similarly although many of the features of the present invention are described in terms of each other or in conjunction with each other one skilled in the art will appreciate that many of these features can be provided independently of other features. Accordingly this description of the invention is set forth without any loss of generality to and without imposing limitations upon the invention.

Video communication is becoming an increasingly important way of knowledge sharing and information exchange in various fields such as education business and marketing. However with existing technologies streamable media such as audio and video are often associated with non trivial waiting times while the media is uploaded processed and stored before being made sharable on network connected devices. For example when videos are used for business purposes the faster they are made available for sharing the better the user experience. The present invention proposes to tackle the problem of unpleasant wait times by providing a system for asynchronous media sharing instantaneously after media are created by uploading and post processing a media stream associated with a given recording at the time the recording is being made.

Some illustrative benefits of the present invention include but are not limited to immediate consumption of curated media which may be lengthy in duration instant psychological gratification for the curator and much better user experiences where both media curation and media viewing become less cumbersome. The turnaround to consume curated content becomes extremely fast as well to the extent of being instantaneously available upon completion of a recording may it be a screen recording camera capture or user annotation and dictation with bottlenecks only by a curator s network connection quality and server processing capabilities. With such advantages there is increased propensity for people to record more media content and to record longer media durations. With instantaneous asynchronous video sharing user may further enjoy the benefit of full context immersion as facilitated by screen sharing which makes facial expressions and conversation tonality available to participating users.

Compared with real time video streaming technologies that often trade off between packet loss and delays the present invention is not limited to real time uplink and or downlink data streaming applications but instead provides an asynchronous solution by combining real time uplink transmission of high quality videos real time backend stream processing and smart quality of service management techniques to enable instantaneous media curation and sharing with minimal delay and timing overheads.

Broadly embodiments of the present invention relate to methods and systems for sharing media instantaneously and asynchronously. shows an illustrative system architecture for one embodiment of the invention. A user device contains a recorder which is capable of recording from a display screen on user device from an application displayed on user device or from one or more optical cameras on user device . User device is connected to a receiver within a LOOM system server through a communication channel . Communication channel may be established between user device and LOOM system server before the recording is initiated while the recording takes place or after recording has been completed. Receiver may send the received recording directly to a storage unit such as blob storage on system server . In some embodiments such storage units may be permanent and maybe used to store raw data or post processed data such as transcoded data in some embodiments such storage units may be non permanent thus allowing temporary caching of the data stream while the data stream is handled by a post processor or post processing pipeline such as dedicated transcoder or general post processor . Each of transcoder or post processor may be physical or logical components implemented in dedicated or general purpose hardware. In some embodiments received data are first post processed through a transcoder before the transcoded media recording is sent to blob storage . Transcoding may be considered as a post processing process as raw or even post process data is converted from one format to another. Concurrently or in tandem the received recording may optionally be post processed through a post processor which may perform functions such as audio extraction object detection speech to text conversion phoneme search eye tracking sentiment analysis behavioral analysis and and gesture analysis. The post processor may further be connected to optional searchable index storage . Although not shown explicitly post processed media recordings generated by post processor may also be passed to transcoder stored in blob storage or sent to any other permanent or non permanent storage units or control components that provide video hosting and sharing services such as on demand replay streaming video searches and user management.

More particularly shows a schematic block diagram illustrating data flow for curated media recordings according to one embodiment of the present invention. A recording generated on a user device may include a combination of screen capture front facing camera capture back facing camera capture and user annotations and dictations as discussed with reference to . Upon the start of a recording session a screen display on user device or any application running on user device and displayed on the display screen may be captured. A LOOM client application on user device may then set up a media stream object on the user device containing the recording and upload the media stream object to a system server through a communication channel established between user device and system server . Communication channel may employ any lossless transmission protocols such as WebSocket or any lossy and potentially real time protocols such as WebRTC. In some embodiments a TURN server may optionally be needed when a lossy transmission protocol such as WebRTC is used if symmetry between the two ends of the communication channel cannot be achieved as will be further described in more detail below. A receiver in server receives the transmitted media stream object which contains media recording captured by user device . The received media recording may then be stored in a storage tier or be sent to a transcoder . The received media recording may also be sent to a post processor before or in parallel to the transcoding process. Post processed data included transcoded data may then be stored through storage tier . In other words storage tier may store raw or post processed media recordings in any format appropriate for media storage and or sharing. For example storage tier may be a blob storage. In some embodiments storage tier may be a content delivery tier and LOOM system server may serve as a node within a content delivery network CDN . In some other embodiments system server may be connected to a CDN or a parallel storage that is connected to a CDN for redundancy. Connection to and interaction with a CDN allows for immediate sharing of the raw recording content as soon as the recording process is completed. As previously discussed while media stream object is transmitted through communication channel to system server system server may optionally initiate a post processing pipeline internally by sending the received media recordings to post processor . Furthermore a recording user may instruct through user device whether recorded content may be shared immediately. Upon the receipt of a publication request for the recorded content as collected from or input by the user though user device system server may end a currently progressing post processing pipeline before making post processed media content available. For example in response to receiving the publication request system server may make the received raw recording or post processed recording accessible to one or more viewers within an immediate time frame wherein the immediate time frame is a time to upload or receive a remaining number of bytes to the server from the publication request time plus a time to complete processing the remaining number of bytes to generate a complete video file for download by the one or more viewers at the server. If a post processing pipeline has been started. In some embodiments system server may end the recording by continuing to receive the data recording upload until an end of file signal is detected and start a new post processing pipeline within the server to post process the received recording. If immediate viewing of a raw transcoded or post processed media stream is desired the previous step as discussed may be modified to stream raw data as received by receiver to both storage tier and or post processing pipeline in parallel or in tandem. In other words every process may be fully streamed where media data is handled on a byte by byte frame by frame or segment by segment basis. As a post processing pipeline is completed post processed recordings may be made accessible to one or more viewers. In some embodiments of the present invention the post processing pipeline may perform post processing functions including but are not limited to transcoding audio extraction video processing indexing object detection speech to text conversion phoneme search eye tracking sentiment analysis behavioral analysis or gesture analysis. Thus in some embodiments transcoder may be implemented as a particular instance of post processor .

While a recording is being made and uploaded there may be different consumption patterns. In some embodiments the consumption pattern is a live streaming from the recording user to the server and through the server to the viewer and the post processing pipeline does not need to complete before the media is consumed. In some embodiments the consumption pattern may be asynchronous video messaging for which a subset of the post processing pipeline must be finished or completed shortly or immediately after the publication request is received in order for the post processed recording to be made accessible. In some embodiments the publication request is in the form of an end of transmission or end of file signal. In such cases the post processing process may be automatically completed upon the detection of such signals. In addition in some embodiments a viewer may have the same access as the uploading user to open source or proprietary media container formats and players such as a WebM playable browser where WebM is an open Media file format. The post processing may then simply consist of uploading the video to a storage layer that backs it up to a CDN and raw data may consumed directly. In another example where a viewer s browser is not WebM playable the post processing may include a transcoding step where a final conversion to the MPEG 4 or MP4 media format is performed and metadata such as defined through a metadata atom is constructed as part of the streamed transcoding process. Metadata atoms are discussed in more specific embodiments below. In both cases the time to consumption when bytes are uploaded as soon as they are recorded is the time that it takes for the server to process the byte stream until the last byte is processed. The parallelism in recording uploading and streamed post processing ensures that such time to consumption is very fast to seem almost instantaneous. Alternatively if transmission speeds are lower than optimal some down sampling operations such as compressions may be performed on the recording data device first and alternative communication protocols may be used taking into account the quality of service desired including but are not limited to error rate throughput and uplink and downlink transmission delays.

More specifically is an illustrative screenshot showing a countdown to recording in a web browser for one embodiment. In the background is simplified website content as displayed by the web browser. In the lower left corner is a user video as captured by the front facing camera such as those available on mobile phones or laptop and tablet devices. In this particular example the captured user video is superimposed superpositioned or overlapped on the screen capture. As the user is being recorded icons next to user video are displayed for various settings. For example in some embodiments Capture Settings may allow the user to select a target window or a portion of the screen for capture. Microphone Settings may allow the user to turn on or off a microphone. Camera Settings may allow the user to select or turn on or off a front facing or a back facing camera on the user device. Recording Settings may allow the user to pause or resume the recording or allow other characteristics of the recording to be adjusted.

Furthermore although not shown explicitly in some embodiments the LOOM system may initiate a first recording of a user annotation which may be typed scribbled or dictated and speech to text converted on the screen display of the user device as well as a second recording from a camera on the user device to capture the user at the same time. The system may combine such first and second recordings into a single media stream object for transmission. In yet other embodiments a media stream object may contain a superposition of a first recording from a front facing camera on the user device and a second recording from a back facing camera on the user device or any combinations of screen recording camera capture and user annotation therein.

The present invention as disclosed herein is structurally different from conventional video hosting and sharing services in that every step of the recording process is handled in the form of a stream. Although the present discussion has focused on capturing media on the client side a media recording may in general happen on a client or a server and it can be viewed as an upload process with every step necessary for consuming the media in a streamed format. In other words media recording uploading post processing storage and sharing may occur concurrently to achieve an instantaneous effect in the media curation and sharing process. More specifically the user device may simply obtain a handle of a byte stream and send the byte stream to the system server wherein the byte stream is obtained through or represented by a recording process. The system may then obtain the byte stream handle on the system server and stream these bytes to any other processes that readily accept a byte stream such as uploading to a blob storage transcoding transcribing audio extraction speech to text conversion video processing indexing object detection phoneme search eye tracking sentiment analysis behavioral analysis and gesture analysis. Moreover different processes or modules in the post processing pipeline may be extensible and may connect in any reasonable order. Unlike many existing streaming technologies or protocols with coarse data resolution where chunked uploads comprise data on the scale of MegaByte MB each some embodiments of the present invention facilitate quick turnaround in each of the recording transmission and post processing steps by using finer data resolution with byte sized chunks or packets that may comprise hundreds or thousands of bytes only. Such byte streams or small packet streams take advantage of the fast processing speeds of computerized systems so no unnecessary delays are incurred in any step of the recording transmission and post processing pipeline. In some embodiments data bytes may not be stored anywhere on disk before reaching the server except for the purpose of backup and recovery in which case such storage may plug into the pipeline as a backup step that occurs concurrently with other post processing steps such as transcoding and transcribing. For example blob storage in may be for backup purposes. Storage at any stage before the data stream reaches the server may not be strictly necessary. Such methodology allows for immediate consumption of curated or uploaded media.

Moreover the present invention differ from existing video conferencing technologies. In the latter metadata atoms are generally localized per packet. In a software such as Skype a connection is first established to a peer. Then the software would encode small datagram packets from the originating peer typically compressing aggressively to ensure that the packets are received as fast as possible. Those packets are then timestamped and sent over UDP. If a packet is received on the recipient peer out of order it may often be dropped since the consumption pattern is synchronous or real time and such software has often deemed it unnecessary and blocking to the experience to ensure all packets are received and sent between the peers. Thus if a packet is not received at all it is most likely not recovered. This approach can be thought of as a series of very small non seekable videos hitting each peer. It is acceptable for these videos to be lost as to not disrupt the consumption experience. In the LOOM system by contrast peers have one singular message for each transmission that must be seekable recoverable and usually with intentional data loss in some cases. These are for instance data lost to intentional compression mechanisms to save space rather than data loss because it may be too late for such data to be consumed or because the network may drop the video since it was sent over UDP.

In short the present invention comprises new and novel systems and methods for streamed recording uploading and processing. As long as the recording process is streamable to the server and the server can grab and handle received data as a stream the server may also stream any other processes required for media consumption including transcoding thumbnail extraction storage into a CDN and such.

In what follows several additional embodiments of the present invention with different methods of recording are described.

For some relatively new browsers such as Google Chrome Microsoft Edge Firefox Safari and Opera a MediaRecorder API is available and the lossless WebSocket transmission protocol may be used for data transmission through the communication channel such as communication channels in in . Accordingly a LOOM system as described herein may attach a media stream object such as media stream object to a stream recorder either using the MediaRecorderAPI or a recorder built with native code to listen to the media stream. The system may create or establish a WebSocket connection from user device or to system server or as communication channels or . In this particular example a recorded media stream may already have raw recording bytes such as in the WebM format with VP8 or VP9 compression standards. The user device may segment the recorded data in the media stream object into smaller chunks such as bytes packets or blobs and send series of chunks from the user device to the server at discrete intervals for example every few hundred milliseconds automatically over the lossless channel or directly to the storage layer such as an Amazon S3 storage layer. The size of the chunks may be optimized with respect to details such as page size server latency transmission speed resolution and other properties of the application and system.

For older Browsers without access to a MediaRecorder API a lossy and real time protocol such as WebRTC may be used. In this example media stream object may be a WebRTC stream which may be attached to a first peer such as user device or and to a second peer such as server or . In other words the system may create the second peer as a WebRTC server peer on backend servers or and connect the user device to the server through a virtual peer to peer connection. In some embodiments if the symmetry of the network between the user device and the server does not match or if a direct peer to peer connection fails for any reason the connection data between the user device peer and server peer may be relayed through a TURN server . Backend servers or may then listen to the media stream that is getting sent to the server peer through the TURN server and record the received bit or byte stream. As received data are recorded the system may stream them to the storage layer.

In both cases as discussed above server or may transcode received and or post processed media data to any desirable media formats such as MP4 for wider device availability while also serving in simpler formats such as WebM immediately for WebM capable devices such as Chrome Firefox browsers on desktops and Safari and Opera browsers on mobile devices.

In some embodiments the LOOM system may use a lossless protocol initially then determine or detect if a transmission speed or some other performance characteristics over an established communication channel is below a certain threshold. Upon determining that the transmission speed and or a performance characteristics is below the threshold the system may down sample the recorded data for example by reducing the number of frames per second and or the resolution of the transmission to reduce the rate of data transmitted through the communication channel. If the transmission speed is still insufficient to achieve a given delay constraint then LOOM system may replace the lossless protocol with a lossy protocol which may cause less delay but also lower reliability. If a post processing pipeline has already been started and a sudden drop in transmission speed is detected the system may keep the pipeline going while buffering the recorded data on the user device if such a buffer is available.

In some embodiments of the present invention the streaming approach as disclosed is extrapolated one step further and metadata atoms are moved to the beginning of a file in a consecutive streaming manner for both the case of complete media files being uploaded to a server and the case of streamed media files being recorded while being concurrently uploaded asynchronously. A metadata atom is a self contained data unit that contains information about the video file. In MP4 this is called a moov atom. This atom may be crucial for playing a streamable media such as video or audio and playing of a media file may not be started until a metadata atom is located.

In some embodiments of the present invention the metadata atom is generated in real time as the media stream object is uploaded to the server or moved in real time to the beginning of a media file. There are two reasons why this is useful. First some media players neither support HTTP byte range requests out of the box nor contain logic to check the end of a file for the metadata atom. Nonetheless most browser vendor players have this kind of checking logic built in. Second many videos taken on a mobile device always tack the metadata atom onto the end of a file to save CPU from having to shift all the frames in the media over in order to tack it onto the beginning of the file. Battery life is also saved in this manner.

A similar method for efficiently handling metadata atoms is proposed in the following two categories of embodiments. For some embodiments in the case of uploading a recorded media file the system may construct the metadata atom by either retrieving file attributes using a Unix system call stat grabbing a blob size of the file or if the metadata atom already exists checking for it at the end of the file. Then the system may upload that metadata atom first to the server and the server may write a new file with that metadata atom at the front. The rest of the upload is streamed and tacked onto that metadata atom so that the file is immediately ready for consumption as soon as the upload completes. For embodiments in which the recording is streamed asynchronously the system may construct the metadata atom by counting the bytes sent to the server. At the end of the recording the server has all the information needed to finalize the metadata atom and to store it immediately and follow the same method above where the rest of the recording is added to the new metadata atom. Thus a remaining amount of time may be minimized to update the metadata atom on just a remaining number of bytes during the processing of a remaining number of bytes.

Furthermore in the asynchronous streaming case since the post processed stream of the recording is continuously being received in the server the time taken from the publication request time at which a user request is input by a user through the user device to the time when the video becomes available for consumption is very short compared to many other existing technologies as shown in Table 1 below. This is because the turn around time is simply the time needed to upload a remaining number of bytes to the server from the publication request time plus a time to complete the post processing pipeline on the remaining number of bytes at the server from the time at which streaming or upload ends. In various embodiments this turn around time may be on the order of less than 5 seconds for any video file of having a five minute ten minute or hour long duration. Thus in both cases the user may experience an instant or instantaneous rendering of the recorded video which is highly desirable to improved user experience. In the case of asynchronous streaming the creator of the media and the server perform meaningful work in tandem. The end result is to have the recorded media ready for consumption almost immediately upon creation. Such instant gratifications and ease of use may further promote and encourage users to create a larger number of longer videos.

Experiments have been performed to test an embodiment of the present invention and compare with existing applications for video uploading in terms of the time it takes for a complete video to become available for download upon completion of a video recording process where the recorded videos may be of various lengths. The numerical results are listed in Table 1 below where projected valued are labelled with an asterisk. The time delay between the termination of a video recording process and the time at which the corresponding completed video file becomes available for download is define as the waiting time. Existing applications tested include HYFY VIEWEDIT and WEBEX. The network used had a download speed of 18.98 Mbps an upload speed of 1.45 Mbps and the server was located in Chicago. The resulting waiting times were obtained by using a stop watch to measure the amount of time experienced by the user from the time end recording is clicked to the time at which the video becomes available for viewing. It should be noted that HYFY does not support video lengths of more than 3 minutes for its free version of the product so an extrapolation was done for the 5 minute video. Also WEBEX upload was very slow and therefore results for videos exceeding 1 minute in duration were projected. These and other projected scenarios are shown in Table 1 with an asterisk. Since the measured values showed a linear relationship between waiting time and video length projections or extrapolations were made according to the same linear relationship. The uncertainty in the measurements is about 1 second and the uncertainty in the projection values is plus or minus 10 . Note waiting times for LOOM may contain jitters instead of being a smooth linear curve since internal processing of larger chunk sizes may have an impact on the waiting time on the scale of seconds.

To demonstrate the effectiveness of methods and system as disclosed herein a case study is presented next. This case study is not to be read as limiting the scope of the present invention its applications or uses.

EXPERIMENT Inc. is a crowdfunding platform for scientific research. It is analogous to a Kickstarter for scientific research where most of the users are graduate students and professors working on early stage research ideas. Before the use of LOOM EXPERIMENT was constantly challenged with issues of inefficiency. With LOOM platform debugging new feature distribution and customer service all had significant improvements in efficiency.

More specifically before LOOM programming bug reporting and tracking using text based communication was a time consuming and confusing process especially for new users who are unfamiliar with the system and often have difficulties reproducing certain scenarios for discussion with in house engineers. Similarly dissemination of new product features proved to be problematic. With LOOM logging bugs or sharing new features with users can be done very simply by hitting a record button to capture what is going on in the EXPERIMENT application and to explain the process of how to make progress in the platform. Bugs new product features and even new crowdfunding strategies may be recorded using screenshots accompanied by detailed notes and made available to both users and engineers.

In addition LOOM allowed new ways of instantaneous and asynchronous sharing of new ideas suggestions and advice for project fundraising. Users can shoot short or long videos which are uploaded while being recorded and immediately made available to all other users within the platform. The negligible latency in the video sharing process enabled dynamic and innovative interactions among users allowed the preservation of the full context of creative ideas as they are generated and greatly improved user experiences of the EXPERIMENT platform.

By allowing the founder of EXPERIMENT to asynchronously yet instantaneously walk researchers through bugs or new features on the platform LOOM enabled quick and accurate elimination of questions without noticeable communication delays and in so doing provided great time savings in such information exchanges. The availability of video communication data as soon as such data are recorded proved to be extremely beneficial in inciting user satisfaction while utilizing the EXPERIMENT platform.

The present invention may be implemented using server based hardware and software. shows an illustrative architecture diagram of a server for implementing one embodiment of the present invention which is now described below.

The present invention may be implemented in hardware and or in software. Many components of the system for example network interfaces etc. have not been shown so as not to obscure the present invention. However one of ordinary skill in the art would appreciate that the system necessarily includes these components. A user device is a hardware that includes at least one processor coupled to a memory . The processor may represent one or more processors such as microprocessors and the memory may represent random access memory RAM devices comprising a main storage of the hardware as well as any supplemental levels of memory e.g. cache memories non volatile or back up memories such as programmable or flash memories read only memories etc. In addition the memory may be considered to include memory storage physically located elsewhere in the hardware e.g. any cache memory in the processor as well as any storage capacity used as a virtual memory e.g. as stored on a mass storage device.

The hardware of a user device also typically receives a number of inputs and outputs for communicating information externally. For interface with a user the hardware may include one or more user input devices such as a keyboard a mouse a scanner a microphone a web camera etc. and a display for example a Liquid Crystal Display LCD panel. For additional storage the hardware my also include one or more mass storage devices e.g. a floppy or other removable disk drive a hard disk drive a Direct Access Storage Device DASD an optical drive e.g. a Compact Disk CD drive a Digital Versatile Disk DVD drive etc. and or a tape drive among others. Furthermore the hardware may include an interface with one or more units of external permanent storage which are used for blob storage searchable index storage and any other permanent storage and which are usually implemented with a hard disk and a SQL abstraction layer for example. The system as recognized by one of ordinary skill in the art would also possess buffers transitory storage and any other hardware and or software components with appropriate abstraction layers to implement the present invention. In the case in which a blob storage is a just a buffer there is some other permanent storage elsewhere for example in Amazon S3 cloud storage. The hardware may include an interface with one or more networks e.g. a local area network LAN a wide area network WAN a wireless network and or the Internet among others to permit the communication of information with other computers coupled to the networks. It should be appreciated that the hardware typically includes suitable analog and or digital interfaces to communicate with each other.

The hardware operates under the control of an operating system and executes various computer software applications components programs codes libraries objects modules etc. indicated collectively by reference numerals to perform the methods processes and techniques described above.

The present invention may be implemented in a client server environment. shows an illustrative system architecture for implementing one embodiment of the present invention in a client server environment. User devices on the client side may include smart phones laptops desktop PCs tablets or other devices. Such user devices access the service of the system server through some network connection such as the Internet.

In some embodiments of the present invention the entire system can be implemented and offered to the end users and operators over the Internet in a so called cloud implementation. No local installation of software or hardware would be needed and the end users and operators would be allowed access to the systems of the present invention directly over the Internet using either a web browser or similar software on a client which client could be a desktop laptop mobile device and so on. This eliminates any need for custom software installation on the client side and increases the flexibility of delivery of the service software as a service and increases user satisfaction and ease of use. Various business models revenue models and delivery mechanisms for the present invention are envisioned and are all to be considered within the scope of the present invention.

In general the method executed to implement the embodiments of the invention may be implemented as part of an operating system or a specific application component program object module or sequence of instructions referred to as computer program s or computer code s . The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer and that when read and executed by one or more processors in a computer cause the computer to perform operations necessary to execute elements involving the various aspects of the invention. Moreover while the invention has been described in the context of fully functioning computers and computer systems those skilled in the art will appreciate that the various embodiments of the invention are capable of being distributed as a program product in a variety of forms and that the invention applies equally regardless of the particular type of machine or computer readable media used to actually effect the distribution. Examples of computer readable media include but are not limited to recordable type media such as volatile and non volatile memory devices floppy and other removable disks hard disk drives optical disks which include Compact Disk Read Only Memory CD ROMS Digital Versatile Disks DVDs etc. as well as digital and analog communication media.

One of ordinary skill in the art knows that the use cases structures schematics and flow diagrams may be performed in other orders or combinations but the inventive concept of the present invention remains without departing from the broader scope of the invention. Every embodiment may be unique and methods steps may be either shortened or lengthened overlapped with the other activities postponed delayed and continued after a time gap such that every user is accommodated to practice the methods of the present invention.

Although the present invention has been described with reference to specific exemplary embodiments it will be evident that the various modification and changes can be made to these embodiments without departing from the broader scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than in a restrictive sense. It will also be apparent to the skilled artisan that the embodiments described above are specific examples of a single broader invention which may have greater scope than any of the singular descriptions taught. There may be many alterations made in the descriptions without departing from the scope of the present invention.

