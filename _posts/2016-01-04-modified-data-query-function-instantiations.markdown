---

title: Modified data query function instantiations
abstract: Techniques are described for using stored function instantiations, together with user queries. In one example, a method includes receiving a query from a user that contains one or more parameters. The method further includes comparing one or more parameters of the query with one or more parameters of one or more stored function instantiations. The method further includes determining a pre-existing function instantiation from the one or more stored function instantiations that have one or more parameters in common with the query. The method further includes identifying one or more parameters that are not in common between the query and the pre-existing function instantiation. The method further includes modifying the pre-existing function instantiation into a repurposed function instantiation that incorporates the one or more parameters from the query that are not in common between the query and the pre-existing function instantiation. The method further includes executing the repurposed function instantiation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396248&OS=09396248&RS=09396248
owner: International Business Machines Corporation
number: 09396248
owner_city: Armonk
owner_country: US
publication_date: 20160104
---
Enterprise software systems are typically sophisticated large scale systems that support many e.g. hundreds or thousands of concurrent users. Examples of enterprise software systems include financial planning systems budget planning systems order management systems inventory management systems sales force management systems business intelligence tools enterprise reporting tools project and resource management systems and other enterprise software systems.

Many enterprise performance management and business planning applications require a large base of users to enter data that the software then accumulates into higher level areas of responsibility in the organization. Moreover once data has been entered it must be retrieved to be utilized. The system may perform mathematical calculations on the data combining data submitted by many users. Using the results of these calculations the system may generate reports for review by higher management. Often these complex systems make use of multidimensional data sources that organize and manipulate the tremendous volume of data using data structures referred to as data cubes. Each data cube for example includes a plurality of hierarchical dimensions having levels and members for storing the multidimensional data.

Business intelligence BI systems may include analytics systems that may provide insights into collections of enterprise data. An analytics system may be used to explore data determine cause and effect relationships among data formulate predictions based on existing data and support decision making for example. An analytics system may include a variety of tools and capabilities for analyzing and exploring data. Some analytics capabilities include database queries that enable a user to retrieve information from one or more databases in enterprise data stores.

In one aspect of the invention a method includes receiving a query from a user that contains one or more parameters. The method further includes comparing one or more parameters of the query with one or more parameters of one or more stored function instantiations. The method further includes determining a pre existing function instantiation from the one or more stored function instantiations that have one or more parameters in common with the query. The method further includes identifying one or more parameters that are not in common between the query and the pre existing function instantiation. The method further includes modifying the pre existing function instantiation into a repurposed function instantiation that incorporates the one or more parameters from the query that are not in common between the query and the pre existing function instantiation. The method further includes executing the repurposed function instantiation.

In another aspect a computer program product includes one or more computer readable storage mediums having program code embodied therewith. The program code is executable by a computing device to receive a query from a user that contains one or more parameters. The program code is further executable by a computing device to compare one or more parameters of the query with one or more parameters of one or more stored function instantiations. The program code is further executable by a computing device to determine a pre existing function instantiation from the one or more stored function instantiations that have one or more parameters in common with the query. The program code is further executable by a computing device to identify one or more parameters that are not in common between the query and the pre existing function instantiation. The program code is further executable by a computing device to modify the pre existing function instantiation into a repurposed function instantiation that incorporates the one or more parameters from the query that are not in common between the query and the pre existing function instantiation. The program code is further executable by a computing device to execute the repurposed function instantiation.

In another aspect a computer system includes one or more processors one or more computer readable memories and one or more computer readable storage mediums. The computer system further includes program instructions stored on at least one of the one or more storage mediums for execution by at least one of the one or more processors via at least one of the one or more memories to receive a query from a user that contains one or more parameters. The computer system further includes program instructions stored on at least one of the one or more storage mediums for execution by at least one of the one or more processors via at least one of the one or more memories to compare one or more parameters of the query with one or more parameters of one or more stored function instantiations. The computer system further includes program instructions stored on at least one of the one or more storage mediums for execution by at least one of the one or more processors via at least one of the one or more memories to determine a pre existing function instantiation from the one or more stored function instantiations that have one or more parameters in common with the query. The computer system further includes program instructions stored on at least one of the one or more storage mediums for execution by at least one of the one or more processors via at least one of the one or more memories to identify one or more parameters that are not in common between the query and the pre existing function instantiation. The computer system further includes program instructions stored on at least one of the one or more storage mediums for execution by at least one of the one or more processors via at least one of the one or more memories to modify the pre existing function instantiation into a repurposed function instantiation that incorporates the one or more parameters from the query that are not in common between the query and the pre existing function instantiation. The computer system further includes program instructions stored on at least one of the one or more storage mediums for execution by at least one of the one or more processors via at least one of the one or more memories to execute the repurposed function instantiation.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

Various examples are disclosed herein for techniques methods and systems generally directed to using cached function instantiations for Business Intelligence BI data warehouse queries. For example information from transactional systems may be amalgamated into data warehouses. These data warehouses may serve as information stores for data retrieval to serve querying reporting and data discovery among many other tasks. Connectivity to the data warehouses may be facilitated by proprietary interfaces that leverage off functionality and query data stored within the warehouses. Hence business applications may act as clients that interface through the provided application programming interface APIs to communicate and gather information stored in the data warehouses.

A warehouse may contain dozens of modularized components which may be further subdivided into multiple function groups. These function groups may each contain scores of scalar parameters as well as nested complex types that may need to be populated and serve as inputs prior to execution of a query or instantiation. During the course of multiple executions a negative performance impact may occur that is related to populating these instantiated functions. There may also be repetition of function parameters employed in the executions particularly by various different business agents employing the same function in the same or very similar contexts.

A system of this disclosure goes beyond caching distilled results achieved by filtering for meaningful high level result sets. A system of this disclosure may address situations in which a round trip to a data warehouse is required for obtaining different results in response to a new query. A system of this disclosure may intelligently reuse previous function instantiations in order to avoid the time and computing burden of a round trip to a data warehouse in order to use an effective function instantiation responsive to the new query.

A system of this disclosure may automatically cache instantiated functions based on rules and associate the functions with a subset of connections belonging to an individual data warehouse. In addition a system of this disclosure may incorporate intelligence to be context aware in order to recycle a previously executed function by tuning or modifying only a minimal amount of parameters from a previously executed instantiation of the function.

According to techniques of this disclosure cached functions determined to be idempotent may have the ability to have result set pointers available for recycling alongside fully reusable instantiated functions. Each cached function instantiation may have more than one parameter and the parameters of each function instantiation may be nested or layered.

A system of this disclosure may offer advantages of increased efficiency including an acceleration of bootstrapping for query input parameter population and consequent execution among other advantages. In addition a system of this disclosure may offer higher throughput smaller memory footprint as a result of independent business agents using multiple independent queries each of which may leverage off a common cache with minimalistic customizations. A system of this disclosure may allow the use of previously cached remote result set pointers for marked idempotent functions to be used in their entirety preventing additional query executions. Therefore it may not be necessary to repurpose a function instantiation for every query. Depending on capacity function instantiation system may create additional function instantiations. Function instantiation system may choose from a plurality of function instances of a particular function type from which function instantiation system may modify any of the suitable instances.

In one particular example of this disclosure a business intelligence analyst may wish to find the most popular color of floor mats for cars in Mexico. A business application may use the context of Mexico and car floor mats to create a low level data warehouse query to an appropriate data warehouse. The business application may obtain a connection to the appropriate data warehouse and query a sales data cube. The business intelligence analyst may then receive the exact floor mat product along with corresponding data.

The business application may then use this product member in the same context to find out its characteristic of color. The business application may use the same context of Mexico and populate the low level function BAPI MDPROVIDER GETMEMBERS. Parameters to populate the function may be profiled in real time and if certain functions take longer or contain a large number of parameters to be populated the functions may be cached. For example the application may choose to cache a function with twenty different parameter values. The function fields may be analyzed and if idempotency based on expected results is established then additionally the result set pointer may also become a candidate for caching.

Continuing this example if the business intelligence analyst later wishes to find the most popular color of mechanic gloves in Mexico the context of Mexico would remain the same as in the previous business query described above. A different business application may retrieve a product member corresponding to the highest selling mechanic gloves. The original business application may use the same context with a change in only one parameter corresponding to MEM NAM in order to find the corresponding color attribute. A broker component may ensure that the cache of remote result set pointers continues to remain refreshed in the event that a batch data warehouse update has occurred synchronizing it with the transactional system. Aspects of this and other examples are further described below with reference to the figures.

In the system shown in enterprise business intelligence system is communicatively coupled to a number of client computing devices A N collectively client computing devices or computing devices by an enterprise network . Users interact with their respective computing devices to access enterprise business intelligence system . Users computing devices enterprise network and enterprise business intelligence system may all be either in a single facility or widely dispersed in two or more separate locations anywhere in the world in different examples.

For exemplary purposes various examples of the techniques of this disclosure may be readily applied to various software systems including enterprise business intelligence systems or other large scale enterprise software systems. Examples of enterprise software systems include enterprise financial or budget planning systems order management systems inventory management systems sales force management systems business intelligence tools enterprise reporting tools project and resource management systems and other enterprise software systems.

In this example enterprise BI system includes servers that run BI dashboard web applications and may provide business analytics software. A user may use a BI portal on a client computing device to view and manipulate information such as business intelligence reports BI reports and other collections and visualizations of data via their respective computing devices . This may include data from any of a wide variety of sources including from multidimensional data structures and relational databases within enterprise as well as data from a variety of external sources that may be accessible over public network including external client computing devices A N collectively external client computing devices or computing devices used by external users A N external users . Enterprise may thus make function instantiation system available to any of enterprise users and or external users .

Users may use a variety of different types of computing devices to interact with enterprise business intelligence system and access data visualization tools and other resources via enterprise network . For example an enterprise user may interact with enterprise business intelligence system and run a business intelligence BI portal e.g. a business intelligence dashboard etc. using a laptop computer a desktop computer or the like which may run a web browser. Alternatively an enterprise user may use a smartphone tablet computer or similar device running a business intelligence dashboard in a web browser a dedicated mobile application or other means for interacting with enterprise business intelligence system . An external user may also access function instantiation system via a smartphone tablet computer or similar device running a business intelligence dashboard in a web browser a dedicated mobile application or other means for interacting with certain externally surfaced functions of enterprise business intelligence system .

Enterprise network and public network may represent any communication network and may include a packet based digital network such as a private enterprise intranet or a public network like the Internet. In this manner computing environment can readily scale to suit large enterprises. Enterprise users may directly access enterprise business intelligence system via a local area network or may remotely access enterprise business intelligence system via a virtual private network remote dial up or similar remote access communication mechanism.

BI portal may include a user interface for a BI analytics application user interface UI that may interact with a BI analytics system that comprises function instantiation system . BI analytics system configured with function instantiation system may receive and compare user query see with stored function instantiations according to the techniques of this disclosure. Function instantiation system may thereby enable BI analytics system and or BI analytics application UI to generate a query response output as further described below.

In one embodiment BI portal may output a finalized query response output for a user to view manipulate and explore. BI portal may present a finalized query response output in the form of charts or graphs that a user may view manipulate and explore for example. BI portal may present query response output based on data from sources such as BI reports e.g. that may be generated with enterprise business intelligence system or another BI dashboard as well as other types of data sourced from external resources through public network . BI portal may present a query response output based on data that may be sourced from within or external to the enterprise.

Function instantiation system may be hosted among enterprise applications as in the example depicted in or may be hosted elsewhere including on a client computing device A A which may be a client computing device A internal to enterprise computing environment or a client computing device A external to enterprise computing environment in different examples or distributed among various computing resources in enterprise business intelligence system in some examples. Function instantiation system may be implemented as or take the form of a stand alone application a portion or add on of a larger application a library of application code a collection of multiple applications and or portions of applications or other forms and may be executed by any one or more servers client computing devices processors or processing units or other types of computing devices.

As depicted in enterprise business intelligence system is implemented in accordance with a three tier architecture 1 one or more web servers A that provide web applications with user interface functions including a server side BI portal application 2 one or more application servers B that provide an operating environment for enterprise software applications and a data access service and 3 database servers C that provide one or more data stores A B through N data stores . Enterprise software applications may include function instantiation system as one of enterprise software applications or as a portion or portions of one or more of enterprise software applications .

The data stores may include two dimensional databases and or multidimensional databases or data cubes. The data stores may be implemented using a variety of vendor platforms and may be distributed throughout the enterprise. As one example the data stores may be multidimensional databases configured for Online Analytical Processing OLAP . As another example the data stores may be multidimensional databases configured to receive and execute Multidimensional Expression MDX queries of some arbitrary level of complexity. As yet another example the data stores may be two dimensional relational databases configured to receive and execute SQL queries also with an arbitrary level of complexity. Data stores may also include one or more sets of cross sectional data for example.

Multidimensional data structures are multidimensional in that each multidimensional data element is defined by a plurality of different object types where each object is associated with a different dimension. The enterprise applications on client computing device A may issue business queries to enterprise business intelligence system to build reports. Enterprise business intelligence system includes a data access service that provides a logical interface to the data stores . Client computing device A may transmit query requests through enterprise network to data access service . Data access service may for example execute on the application servers intermediate to the enterprise software applications and the underlying data stores in database servers C. Data access service retrieves a query result set from the underlying data stores in accordance with query specifications. Data access service may intercept or receive queries e.g. by way of an API presented to enterprise applications . Data access service may then return this result set to enterprise applications as BI reports other BI objects and or other sources of data that are made accessible to BI portal on client computing device A. Data access service may also return this result set to function instantiation system to process in accordance with the techniques of this disclosure to generate query response output which BI analytics system may then provide to BI portal or other enterprise applications potentially incorporated into BI reports or other BI objects.

As described above and further below function instantiation system may be implemented in one or more computing devices and may involve one or more applications or other software modules that may be executed on one or more processors. Example embodiments of the present disclosure may illustratively be described in terms of function instantiation system in various examples described below.

Result set provisioning may request result sets from warehouses . In one example result set provisioning may store result sets from previous query executions for reuse. Result set provisioning may receive result sets from warehouses and provide those results sets to business applications .

Function provisioning may store function instantiations from previous query executions. In one embodiment function provisioning may compare the parameters of a query from a user to the parameters from one or more stored function instantiations. Function provisioning may determine which of the stored function instantiations has the highest number of identical parameters to the query. If several stored function instantiations have one or more identical parameters with the query function provisioning may use an abstract syntax tree to determine which parameters have the highest likelihood of variance. Function provisioning may determine a pre existing function instantiation based on the determination and modify the parameters in the pre existing function instantiation that are not identical with the parameters from the query thus modifying the pre existing function instantiation into a repurposed function instantiation that incorporates the parameters that are not in common between the query and the pre existing function instantiation. In some embodiments function provisioning may be responsible for executing function instantiations including the newly modified function instantiations that incorporate new query parameters into a modified form of a pre existing function instantiation.

Connection provisioning may store connections to data warehouses in one or more pools. Each pool may be associated with a particular data warehouse. The use of a connection that is stored in connection provision may be more efficient than establishing a new connection to warehouses . In an example embodiment in response to being prompted by business applications broker may be responsible for requesting a connection to warehouses from connection provisioning . Connection provisioning may create new connections to warehouses and store them in one or more pools.

Thus in one embodiment of system of one or more connections may each have their own pool. Each of the pools may further contain multiple channels where each of the channels may be associated with a particular function. In this embodiment multiple function instantiations for the same function may reside in a single channel. System may determine a qualification for having a channel reserved for a function based on thresholds such as metering or profiling computational effort associated with instantiation of a function instance. Function instantiation system of system may determine a subset of the function parameters typically including complex nested parameters to have low variance and high computational burden. The one or more parameters that are not in common between the query and the pre existing function instantiation may be included in a subset of the plurality of nested arguments for example such that a remainder of the nested arguments may be identical between the pre existing function instantiation and the repurposed function instantiation. Function instantiation system may use this determination in selecting which of the many function instances in the channel to select for modifying into a repurposed instantiation for a new query. To accommodate a scalable solution the capacity of each channel may be configurable thereby enabling the possibility of adding additional function instances rather than repurposing a pre existing function instance for a new query.

In system in certain cases in which a new query matches a pre existing function instantiation the repurposed function instantiation may not need to be repurposed but may be used readily. Idempotent functions may go a step further whereby function instantiation system may determine that the temporal tolerance and context are satisfied preventing the need for querying a database in data warehouses . Instead function instantiation system may use a result set already associated with a pre existing identical function instantiation but modifying selected parameters of the pre existing identical function instantiation as appropriate. Function instantiation system may use a pointer to result sets for idempotent functions to avoid executing a query via a function instantiation to a data warehouse . The use of a result set pointer may be based on whether data is within a temporal tolerance threshold.

In one particular example warehouse contains data relating to the Asia Pacific region warehouse contains data relating to Europe Middle East and Africa and warehouse contains data relating to the Americas. Result sets may include a pointer to remote data . In this example the warehouses store result sets and system stores a pointer to each result set . A result set pointer may be especially useful for a result set that has large temporal tolerance.

As shown in some examples of process may include function instantiation system receiving user query with one or more parameters . Process may also include function instantiation system comparing one or more parameters of user query with one or more parameters of one or more stored functions instantiations and determining a pre existing function instantiation from the one or more stored function instantiations that has one or more parameters in common with user query . Parameters that are in common between user query and a stored function instantiation may include parameters that are identical or substantially equivalent. Process may further include function instantiation system identifying one or more parameters that are not in common between user query and the pre existing function instantiation and modifying the pre existing function instantiation into a repurposed function instantiation that incorporates the one or more parameters that are not in common between the query and the pre existing function instantiation . Process may further include function instantiation system executing the repurposed function instantiation . In other examples function instantiation system may communicate the modified repurposed function instantiation to a separate function instantiation executing subsystem for executing.

Receiving user query may include function instantiation system receiving a query from user N on enterprise network or from user N on public network . User query may have one or more parameters that may correspond to search variables entered by user N or user N. The user may have entered these search variables in order to generate search results that are important to the user s objectives. In one example the user wishes to determine the most popular color for floor mats sold in Mexico. In this example the search variables may include Mexico as a location attribute floor mats as the item type or product name and color as the target variable.

Function instantiation system may then compare the parameters of user query with stored function instantiations . Stored function instantiations may be held in a memory cache on a computer system for example after previous queries were executed. Stored function instantiations may represent the parameters from previous queries and it is possible that stored function instantiations may not contain any information about the results of previous queries. As function instantiation system compares parameters function instantiation system may search for the stored function instantiations that have the greatest number of matching parameters. Function instantiation system may also use an abstract syntax tree to determine which parameters are most likely to vary among the stored function instantiations. In other examples function instantiation system may use other techniques to determine which parameters are most likely to vary among the stored function instantiations. Determining the parameters that are most likely to vary may allow function instantiation system to compare these parameters first in order to conserve resources and perform efficiently.

Function instantiation system may then determine a pre existing function instantiation from the one or more stored function instantiations that have one or more parameters in common with the query . Function instantiation system may choose the stored function instantiation with the highest number of parameters in common with user query . Function instantiation system may also base the determination at block on parameters that are more or less likely to vary according to an abstract syntax tree or other technique.

In the depicted embodiment broker may be responsible for encouraging reuse between various business agents and flagging when data is dirty such as after a nightly synchronization of the data warehouse with the transactional system. FunctionProfiler may contain information relating to the preparing and execution of the function including number of parameters memory footprint of input structures setup time execution time and so forth. FunctionInstantiator may compare user query with one or more stored function instantiations to determine common variables. In one example FunctionInstantiator may determine a pre existing function instantiation from a one or more stored function instantiations that have one or more parameters in common with user query . PoolCoordinator may interact with pool and organize connections to one or more warehouse. ContextCreator may create or re employ a context that is shaped by the attributes of a warehouse and other high level business constraints that may serve as input for function executions. ASTBuilder may create abstract syntax trees ASTs to account for the parameters in function instantiations. AST may contain a list of parameters from stored function instantiations. AST may also contain data regarding how frequently each parameter changes within the set of stored function instantiations. FunctionExecutor may occur in a warehouse and may include metrics related to the time to complete the execution. Pool may include multiple pools wherein each pool is associated with a particular warehouse. Connection may include multiple connections spread across two or more warehouses. The multiple connections associated with connection may not be accumulated in a single pool. Context may describe the key input differentiators that may be transported to various different ASTs with differing functions. FunctionInstance may be associated with AST and may describe the function with input parameters which may be gathered together in context . RemoteResult may be a pointer to a result set that is preserved and associated with context for idempotent functions.

Profile function instantiation may monitor and profile activities associated with preparing and executing the function instantiation including number of parameters memory footprint of input structures setup time execution time and so forth. Meets threshold may be involved with matching the metrics collected with the thresholds preferences. Function codification storage may involve building an AST for a function associating it in a hierarchical fashion with a key corresponding to the context which in turn is keyed on by its corresponding connection pool. Function execution may be the actual execution of the function on a warehouse. Function execution may include an additional metric related to time to complete the execution that may be obtained at this step. Result set storage may pertain to storage of result set for idempotent functions. Remote result set pointer storage may involve storing a pointer to a result set stored remotely in a warehouse. Reuse connection may represent using a previously provisioned connection to a warehouse. Match context may include matching a context from previously stored contexts for a function execution. Similar instantiation may involve obtaining the closest matching function. Instantiation detected may include three possible outcomes that is whether an instantiation was an exact match partial match or no match. Manipulate closest match may modify the function instantiation to support the newer inputs for execution against a warehouse.

Each of the variables in search menu may correspond to one or more parameters in user query . Similarly each of the search variables in boxes may correspond to one or more parameters in user query such as target variables. In one embodiment a user may select one or more of these parameters to limit the query response output .

In one embodiment query response output may result in a display of data relating to the product categories sought by user N incorporating results that may be retrieved more quickly and efficiently by use of repurposed function instantiations as identified and modified by function instantiation system as described above. For example if user N queries the most popular floor mat color in Mexico during the prior five years function instantiation system may identify a most similar cached pre existing function instantiation previously generated in response to a prior similar query modify the parameters not in common between the new query and the cached pre existing function instantiation identified as most similar to the new query thus modifying the pre existing function instantiation into a repurposed function instantiation and execute the repurposed function instantiation thereby generating query response output which may display as a bar graph depicting the revenues associated with several floor mat colors as shown in . As an example query response output may display the revenues for a given time such as 2010 2014 or for a given location such as Mexico. Implementations of this disclosure including search menu may thus enable user N to display sales data profit data inventory data or location data on query response output for a given query. Other variables in query responses output may include total sales gross profit operating profit assets liability gross margin and operating margin. Function instantiation system may thus facilitate fast and efficient retrieval of BI analytics information with regard to a wide variety of business data of interest.

In one particular example of method of in common with various features described above a user may wish to determine the most popular color for mechanic gloves in Mexico. Function instantiation system may compare one or more parameters of a query from the user with one or more parameters of stored function instantiations including a function instantiation relating to a previous query for the most popular color of floor mats in Mexico. Function instantiation system may then determine a pre existing function instantiation using the parameters in common such as the location e.g. Mexico and one of the search parameters e.g. color . In another example one or more additional parameters may be in common such as the time period or the industry category e.g. automotive . Function instantiation system may then identify the parameters that are not in common such as the product name e.g. floor mats as opposed to mechanics gloves and function instantiation system may modify the pre existing function instantiation into a repurposed function instantiation that incorporates the one or more parameters from the query not in common between the query and the pre existing function instantiation. In one example embodiment function instantiation system may then execute the repurposed function instantiation. In another embodiment function instantiation system may store a pointer to a result set associated with the repurposed function instantiation. In another embodiment function instantiation system may display a result set generated by executing the repurposed function instantiation.

In the illustrative example of computing device includes communications fabric which provides communications between processor unit memory persistent data storage communications unit and input output I O unit . Communications fabric may include a dedicated system bus a general system bus multiple buses arranged in hierarchical form any other type of bus bus network switch fabric or other interconnection technology. Communications fabric supports transfer of data commands and other information between various subsystems of computing device .

Processor unit may be a programmable central processing unit CPU configured for executing programmed instructions stored in memory . In another illustrative example processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. In yet another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type. Processor unit may be a reduced instruction set computing RISC microprocessor such as a PowerPC processor from IBM Corporation an x86 compatible processor such as a Pentium processor from Intel Corporation an Athlon processor from Advanced Micro Devices Corporation or any other suitable processor. In various examples processor unit may include a multi core processor such as a dual core or quad core processor for example. Processor unit may include multiple processing chips on one die and or multiple dies on one package or substrate for example. Processor unit may also include one or more levels of integrated cache memory for example. In various examples processor unit may comprise one or more CPUs distributed across one or more locations.

Data storage includes memory and persistent data storage which are in communication with processor unit through communications fabric . Memory can include a random access semiconductor memory RAM for storing application data i.e. computer program data for processing. While memory is depicted conceptually as a single monolithic entity in various examples memory may be arranged in a hierarchy of caches and in other memory devices in a single physical location or distributed across a plurality of physical systems in various forms. While memory is depicted physically separated from processor unit and other elements of computing device memory may refer equivalently to any intermediate or cache memory at any location throughout computing device including cache memory proximate to or integrated with processor unit or individual cores of processor unit .

Persistent data storage may include one or more hard disc drives solid state drives flash drives rewritable optical disc drives magnetic tape drives or any combination of these or other data storage mediums. Persistent data storage may store computer executable instructions or computer readable program code for an operating system application files comprising program code data structures or data files and any other type of data. These computer executable instructions may be loaded from persistent data storage into memory to be read and executed by processor unit or other processors. Data storage may also include any other hardware elements capable of storing information such as for example and without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis.

Persistent data storage and memory are examples of physical computer readable data storage devices. Data storage may include any of various forms of volatile memory that may require being periodically electrically refreshed to maintain data in memory while those skilled in the art will recognize that this also constitutes an example of a physical computer readable data storage device. Executable instructions may be stored on a medium when program code is loaded stored relayed buffered or cached on a physical medium or device including if only for only a short duration or only in a volatile memory format.

Processor unit can also be suitably programmed to read load and execute computer executable instructions or computer readable program code for a function instantiation system as described in greater detail above. This program code may be stored on memory persistent data storage or elsewhere in computing device . This program code may also take the form of program code stored on computer readable medium comprised in computer program product and may be transferred or communicated through any of a variety of local or remote means from computer program product to computing device to be enabled to be executed by processor unit as further explained below.

The operating system may provide functions such as device interface management memory management and multiple task management. The operating system can be a Unix based operating system such as the AIX operating system from IBM Corporation a non Unix based operating system such as the Windows family of operating systems from Microsoft Corporation a network operating system such as JavaOS from Oracle Corporation or any other suitable operating system. Processor unit can be suitably programmed to read load and execute instructions of the operating system.

Communications unit in this example provides for communications with other computing or communications systems or devices. Communications unit may provide communications through the use of physical and or wireless communications links. Communications unit may include a network interface card for interfacing with a LAN an Ethernet adapter a Token Ring adapter a modem for connecting to a transmission system such as a telephone line or any other type of communication interface. Communications unit can be used for operationally connecting many types of peripheral computing devices to computing device such as printers bus adapters and other computers. Communications unit may be implemented as an expansion card or be built into a motherboard for example.

The input output unit can support devices suited for input and output of data with other devices that may be connected to computing device such as keyboard a mouse or other pointer a touchscreen interface an interface for a printer or any other peripheral device a removable magnetic or optical disc drive including CD ROM DVD ROM or Blu Ray a universal serial bus USB receptacle or any other type of input and or output device. Input output unit may also include any type of interface for video output in any type of video output protocol and any type of monitor or other video display technology in various examples. It will be understood that some of these examples may overlap with each other or with example components of communications unit or data storage . Input output unit may also include appropriate device drivers for any type of external device or such device drivers may reside elsewhere on computing device as appropriate.

Computing device also includes a display adapter in this illustrative example which provides one or more connections for one or more display devices such as display device which may include any of a variety of types of display devices. It will be understood that some of these examples may overlap with example components of communications unit or input output unit . Input output unit may also include appropriate device drivers for any type of external device or such device drivers may reside elsewhere on computing device as appropriate. Display adapter may include one or more video cards one or more graphics processing units GPUs one or more video capable connection ports or any other type of data connector capable of communicating video data in various examples. Display device may be any kind of video display device such as a monitor a television or a projector in various examples.

Input output unit may include a drive socket or outlet for receiving computer program product which comprises a computer readable medium having computer program code stored thereon. For example computer program product may be a CD ROM a DVD ROM a Blu Ray disc a magnetic disc a USB stick a flash drive or an external hard disc drive as illustrative examples or any other suitable data storage technology.

Computer readable medium may include any type of optical magnetic or other physical medium that physically encodes program code as a binary series of different physical states in each unit of memory that when read by computing device induces a physical signal that is read by processor that corresponds to the physical states of the basic data storage elements of storage medium and that induces corresponding changes in the physical state of processor unit . That physical program code signal may be modeled or conceptualized as computer readable instructions at any of various levels of abstraction such as a high level programming language assembly language or machine language but ultimately constitutes a series of physical electrical and or magnetic interactions that physically induce a change in the physical state of processor unit thereby physically causing or configuring processor unit to generate physical outputs that correspond to the computer executable instructions in a way that causes computing device to physically assume new capabilities that it did not have until its physical state was changed by loading the executable instructions comprised in program code .

In some illustrative examples program code may be downloaded over a network to data storage from another device or computer system for use within computing device . Program code comprising computer executable instructions may be communicated or transferred to computing device from computer readable medium through a hard line or wireless communications link to communications unit and or through a connection to input output unit . Computer readable medium comprising program code may be located at a separate or remote location from computing device and may be located anywhere including at any remote geographical location anywhere in the world and may relay program code to computing device over any type of one or more communication links such as the Internet and or other packet data networks. The program code may be transmitted over a wireless Internet connection or over a shorter range direct wireless connection such as wireless LAN Bluetooth Wi Fi or an infrared connection for example. Any other wireless or remote communication protocol may also be used in other implementations.

The communications link and or the connection may include wired and or wireless connections in various illustrative examples and program code may be transmitted from a source computer readable medium over mediums such as communications links or wireless transmissions containing the program code . Program code may be more or less temporarily or durably stored on any number of intermediate physical computer readable devices and mediums such as any number of physical buffers caches main memory or data storage components of servers gateways network nodes mobility management entities or other network assets en route from its original source medium to computing device .

The present invention may be a system a method and or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

