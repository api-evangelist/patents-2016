---

title: Dynamic software assembly
abstract: An improved system and method for updating software is described. The system, upon detecting one or more changes within the set of eligibility attribute values associated with the one or more particular components of previously-provided software, selects a replacement component. The component is selected based on one or more changed eligibility attribute values within the set of eligibility attribute values, and the metadata of the user device. Using the replacement component, the replacement software is constructed and sent to the user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09557971&OS=09557971&RS=09557971
owner: Apollo Education Group, Inc.
number: 09557971
owner_city: Phoenix
owner_country: US
publication_date: 20160111
---
This application claims the benefit as a Continuation of application Ser. No. 14 601 138 filed Jan. 20 2015 the entire contents of which is hereby incorporated by reference as if fully set forth herein under 35 U.S.C. 120. The applicant s hereby rescind any disclaimer of claim scope in the parent application s or the prosecution history thereof and advise the USPTO that the claims in this application may be broader than any claim in the parent application s .

The present invention relates to a system for dynamically assembling software for download and more specifically to assembling the software based on capabilities of the device requesting the software.

Many electronic user devices such as laptops tablets and smart phones support the installation and execution of applications or apps . Apps are software programs that carry out operations to allow a user to perform a specific task. Apps are typically designed based on assumptions about the hardware or software of the devices that will be running the apps. These assumptions can be communicated to the user as system requirements. In many instances it is incumbent on the user to have prior knowledge about their device and to evaluate the system requirements in relation to the characteristics of their device.

To facilitate installation of software on various types of user devices application developers offer multiple versions of their software. For example an application developer offers a version for each of the following operating systems WINDOWS ANDROID iOS etc. In some instances the application developer specifies particular models of user devices on which each of the versions of the application are configured to run.

Some application vendors e.g. iTunes Google Play Windows Store are configured to receive a limited amount of data about a user device such as model operating system the presence of a particular I O device e.g. a front facing camera or motion sensor . The application vendor can pre filter the available apps so that only the apps that are likely to be able to be executed by the user device given what the vendor knows about the user device are presented to the user. Existing customization of apps is limited to customizing the app based on the available visual display of the device and is based on user preferences. For example if a user has provided a preference for HD video then an application vendor can select an HD plugin or component for that download of the app.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

A software provider system facilitates intelligent software construction and causes the software to be downloaded to user devices. A user device requests a software application having a plurality of components. The software provider system selects components to include in the software based at least in part on the hardware and software configurations of the user device. The selected components can be assembled according to a software template and delivered to the user device. The software provider system helps to ensure that the software downloaded to the user device is supported by the user device at a specified level of performance.

Embodiments of the software provider system allow users to specify preferences that are further used to select components from a set of available components. The user preferences can include a preference towards lower power consumption a richer user interface or regarding some other aspect of the software or its execution. The user preferences can cause the system to set a particular component as a default for the user or to be removed from the pool of components for the user s software.

In some instances more than one user device has the same configuration. When a software request is received from a user device the metadata of the user device is compared to stored metadata of other user devices to which the requested software has been sent. If the metadata of the requesting user device matches metadata of a user device from a previous request a specification provider accesses stored specifications of software previously sent to the other user device. Using the stored specification the requested software can be constructed and sent to the user device.

In some instances after the user device has received the requested software one or more of the user device the available components or the template used to construct the requested software can change or be updated. In these instances an update manager can detect the change and initiate a new software request. The update manager can reside on the user device and or on the software provider system. The new software request is processed in a similar fashion as the original software request.

Techniques are described hereafter for providing requested software to user devices based on the respective characteristics of the user devices. is a block diagram that depicts an example network arrangement for providing software to the user devices according to embodiments. Network arrangement includes user devices and and a software provider server that are communicatively coupled via a network . Software provider server is also communicatively coupled to a component repository database . Example network arrangement may include other devices including client devices server devices and display devices according to embodiments. For example one or more of the services attributed to software provider server herein may run on other server devices that are communicatively coupled to network .

User devices and can be any type of computing device that is communicatively connected to network . Example implementations of user devices and include without limitation workstations personal computers laptop computers personal digital assistants PDAs tablet computers video game consoles cellular telephony devices such as smart phones and any other type of computing device.

In network arrangement one or more of user devices and can be configured with client side component managers not depicted and client side update managers not depicted . The user devices may be configured with other mechanisms processes and functionalities depending upon a particular implementation.

Further respective user devices and are communicatively coupled to one or more display devices not shown in for displaying graphical user interfaces such as graphical user interfaces of an application downloaded from the software provider server . Such a display device may be implemented by any type of device capable of displaying a graphical user interface. Example implementations of a display device include a monitor a screen a touch screen a projector a light display a display of a tablet computer a display of a telephony device a television etc.

Network may be implemented with any type of medium and or mechanism that facilitates the exchange of information between a user device and the software provider server . Furthermore network may facilitate use of any type of communications protocol and may be secured or unsecured depending upon the requirements of a particular embodiment.

The software provider server may be implemented by any type of computing device that is capable of communicating with a user device over network . In network arrangement software provider server is configured with a request processor a specification provider a component manager a component registry and an update manager . These functionalities may be part of a cloud computing service and also may be implemented by one or more logical modules. The software provider server may be configured with other mechanisms processes and functionalities depending upon a particular implementation.

The software provider server is communicatively coupled to a component repository database . The component repository database maintains one or more components for download in each category identified in a template of requested software. According to embodiments components reside in memory other than memory associated with component repository database where component manager can access the memory via network . Component repository database may reside in any type of storage including volatile and non volatile storage e.g. random access memory RAM a removable or disk drive main memory etc. and may be implemented by one or more logical databases. The storage on which component repository database resides may be external or internal to software provider server .

User devices and and the modules within the software provider server may receive and respond to Application Programming Interface API calls Simple Object Access Protocol SOAP messages requests via HyperText Transfer Protocol HTTP HyperText Transfer Protocol Secure HTTPS Simple Mail Transfer Protocol SMTP or any other kind of communication. Further the user devices and the modules within the software provider server may send one or more such communications over network e.g. to one of the other entities of the system.

Functionality attributed to one or more of software provider server and user devices and may be performed by a different service client according to some embodiments. In an embodiment each of the processes described in connection with one or more of the user devices and and the software provider server are performed automatically and may be implemented using one or more computer programs other software elements and or digital logic in any of a general purpose computer or a special purpose computer while performing data retrieval transformation and storage operations that involve interacting with and transforming the physical state of memory of the computer.

The request processor is configured to receive a request from a user device e.g. one of user devices and to download software e.g. an application to the user device. When the requested software has been downloaded the user device can execute the software to perform one or more tasks.

The request processor receives the request via the network . In some embodiments the user device from which the request is received is the user device to which the software is to be downloaded. In other embodiments the request is received from a first user device for download onto a second user device where the first user device and the second user device can be operated by the same user. The request can be generated by for example an app store application installed on the user device e.g. iTunes Google Play or Windows Store . In other instances the requested is generated by a webpage loaded into a browser on the user device. The request can be pre generated and an activation link sent to an email mailbox accessible by the user device. Other techniques to generate the request can also be used.

The request processor in response to receiving the request is configured to obtain metadata about the user device. The metadata comprises one or more of identification of the user device the hardware configuration of the user device the system software configuration of the user device current state information user preferences and known user priorities.

According to embodiments identification of the user device indicates that the user device is a feature phone a smart phone a tablet computer a laptop computer or some other type of device.

The hardware configuration metadata includes information such as processor specifications e.g. 32 bit vs. 64 bit processors processing speed memory working memory I O devices e.g. display device keyboard touchpad camera motion sensor GPS Wi Fi capability cellular networking capability and the like . In some instances the metadata includes further detailed information about the hardware configuration such as whether a display device is a light emitting diode LED display a retina display a liquid crystal display LCD or another type of display.

The software configuration information includes one or more of operating system and version presence of other applications system settings etc.

In some instances current state information of the user device is also obtained by the request processor . Current state information comprises one or more of available working memory network connection and or speed battery remaining GPS location etc.

The request processor is configured to obtain user preferences if available. User preferences include indications such as a preference to preserve power e.g. extend battery life of the user device to provide a rich user interface and or improved usability e.g. provide text to speech capability for visually impaired users to perform more processing locally rather than remotely e.g. on a cloud or at a server to override a particular hardware or software configuration etc.

In some embodiments the request processor automatically identifies learned or implicit priorities. Request processor derives such learned priorities from changes made by the user based on previous application downloads. For example in a software request initiated via the app store request processor automatically identifies implicit user priorities based on reviews of other applications in the app store that were submitted by the user from settings set by the user in the app store from habits relating to downloading updating and running apps already installed on the user device etc. Examples of learned priorities include a user preference for enhanced security or multi factor authentication a preference that the user device read aloud text in for example an e book a preference that video content be high definition or have a lower resolution. The request processor may receive input from a client side component manager and a client side update manager on the user device. The input describes the current capabilities of the user device and the user s preferences and customization usage data. For example the incoming data from the user device may indicate that videocapability GPUEngine HD and the user s customization usage data may indicate that videocapability GPUEngine SD . In this case the request processor can assign a higher priority to the user s customization usage data than the capability data. In the above example even though the user device supports HD video playback the request processor may assemble the requested software as including the SD video plugin.

The specification provider allows the software provider server to retrieve records of previously constructed versions of requested software to make fulfilling the software requests more efficient. For widely used hardware and software configurations along with popular user preferences the specification provider provides a consistent experience across a plurality of similar user devices.

Once the metadata of the user device is known the specification provider is configured to compare the metadata to stored metadata of other user devices that have previously requested the same software being requested by the requesting user device. All or part of the metadata may be compared. For instance in some embodiments only the hardware and software configurations are compared. In other instances at least a portion of the current state information and or the user preferences are compared.

The specification provider then determines whether there is a match between any of the other user devices and the requesting user device. To qualify as a match at least some of the metadata from the two user devices must match e.g. display type input devices etc. . The match is determined using a number of techniques known to those in the art. According to embodiments software templates specify attribute type such as the types of eligibility attributes and a comparison function to use for an indicated attribute and or attribute type. According to embodiments eligibility attributes include metadata indicating type and or comparison function to use. In some embodiments the component manager may determine if there is a match.

To illustrate user device metadata matches when metadata between the two user devices is one or more of identical e.g. one user device s display resolution of 1080p is identical to another user device s display resolution of 1080p values associated with the metadata are within a pre defined range or margin identified in mapping data as matching etc. To illustrate processor speed can be a float value and can be compared using equality.

Mapping data is data that is accessible to specification provider that identifies various components of user device metadata that are not identical but that nevertheless match. For example mapping data indicates that one user device s display resolution of 1080p matches another user device s display resolution of 1920 1080 pixels . For another example mapping data indicates that a device s processor of type Intel Core i5 matches a device s processor of type AMD FX 8350 .

According to embodiments mapping data identifies ranges of values of user device metadata where metadata values within the range are considered matching. For example mapping data indicates that user devices having from 1 GB to 2 GB of RAM match. Based on this mapping data specification provider determines that metadata indicating a user device having 1 GB of RAM matches metadata indicating a user device having 1.5 GB of RAM.

When it is determined that there is a matching user device the specification provider accesses a stored record describing the software previously provided to the matching user device. The specification provider then identifies the components included in the previous version of the software for construction by the component manager as described in further detail below. According to embodiments specification provider records information about user devices that have matched stored specifications. For example specification provider records one or more of a number of times the specification has matched user devices a number of unique user devices that have matched the specification common differences between the user device described by the specification and user devices that match the specification etc.

If there is no matching user device and thus no existing record of a previously constructed version of the software the component manager is configured to select components for the selected software according to a template of the selected software. Component manager constructs the requested software from the selected components and sends the software to the requesting user device. A copy of the component manager or a client specific software manager can be downloaded to the user device as part of the requested software. In embodiments the client side component manager installed on a user device detects hardware and or software changes in the user device. The client side component manager provides information about detected changes to the component manager on software provider server . Component manager parses the information from the client side component manager to assemble requested software as described in further detail below.

To select components for requested software the component manager identifies a template corresponding to the software requested from a plurality of stored software templates. A software template comprises a set of one or more categories of software components that are to be included in the software. According to embodiments the template further dictates one or more of how many components from each category are to be included in the assembled software how the components are assembled one or more optional categories or components that can be included in the software but that are not necessary in all circumstances one or more particular components to include in the software etc. The template can include for example a requirement that a copy of the component manager and the update manager be included in the software.

In an example embodiment a template identified by component manager includes instructions that the software include a client side component manager a client side update manager and one software component from each of five categories e.g. C1 C2 C3 C4 and C5 . According to another embodiment a client side component manager is included in requested software regardless of whether the software template dictates that the client side component manager be included.

Each software component in component repository database is associated with at least one category. A category of a software component identifies the functionality that the component is configured to perform. For example the software components in component repository database that are associated with category C1 are display components that are configured to cause the user device to display graphical user interfaces for the installed software.

The component manager is configured to select software components from component repository database for each of the five categories indicated in the identified template. To select the components the component manager accesses the component registry . The component registry provides access to eligibility attributes of each of the available components in component repository database . Eligibility attributes of a particular component identify aspects of a user device on which the component is configured to run. For example eligibility attributes include one or more of a feature list storage space computing requirements display requirements etc. For example a particular component is associated with eligibility attributes that indicate that the component is configured to run on a user device with a display that has a resolution of 1080p or greater. The component registry further registers components to and deregisters components from the user devices.

By comparing the eligibility attributes of the software components in component repository to the metadata of the user device the component manager selects the most appropriate component for the requesting user device in each needed category. Further the component manager is configured to determine whether to include optional components or components from optional categories based on eligibility attributes of the optional components or categories and or user device metadata.

Once all of the needed components are selected either based on a previous configuration of the software or based on selection of software components by the component manager the component manager is configured to construct the software. The component manager retrieves the selected components from the component repository and assembles them into a downloadable software file. Software provider server constructs the downloadable software file according to any technique within embodiments. The component manager then transmits via the network the constructed software to the user device for which the software was requested.

As part of the run time assembly the component manager records which of the different components are used or requested. These records are stored in a system repository not depicted . Once these records are analyzed frequency data describing which components are downloaded more than others can be communicated to device manufacturers. In some instances the device manufacturers may use this data to determine the market demand for various capabilities or configurations. Same use case data can be used by the software application developers to ensure that the provided software supports components that are most in demand by users. For example every time a user requests software that renders HD video there is a counter tracking downloads of the corresponding component. The count maintained by the counter can then be used to determine which of the available components are most popular. This determination can be provided to device manufacturers to illustrate the market demand for supporting GPU acceleration to render HD video and to application developers to ensure that they have a component and content available for HD rendering.

After the software is received and installed on the user device or changes to the user device software template and or software components may change the optimal configuration of software components in the installed software. The update manager is configured to detect a change warranting an update and to replace one or more components in the software configuration for a particular user device.

A change in a user device such as user device may cause the optimal configuration of software that was previously downloaded to the user device to change. A change in a user device may be a change in the hardware configuration of the user device the system software configuration of the user device current state information user preferences and known user priorities etc. For example user device changes when a user adds new memory to user device .

Update manager may detect a change in a user device in a variety of ways. In instances where a client side update manager is installed on the user device e.g. as part of previously downloaded software the client side update manager is configured to detect a change in the user device update the user device metadata and notify update manager of the changed metadata.

A change in a user device can trigger an update of software downloaded to the user device. For example a client side component manager installed on user device detects a change in hardware or software configuration on user device or a change in the current state of the user device or a change in user preference. The client side component manager sends notification of the detected change to component manager which in turn notifies update manager of the user device metadata change.

Update manager determines whether the detected change warrants a software upgrade on user device . For example update manager evaluates the eligibility requirements of components of software currently installed on user device and the eligibility requirements of software components associated with the categories needed for the installed software in component repository database . If any of the software components in component repository database are a better fit for user device based on the current metadata of user device with the detected change then update manager triggers an update for the software installed on user device .

For example update manager triggers an update upon receiving notification of a change in the amount of memory in user device . Examples of changes in the amount of available memory in user device include but are not limited to addition of a Micro Secure Digital SD card to the user device the performance of tasks to free up memory such as clearing cache memory or uninstalling other applications etc. Specifically update manager receives notification that the available memory in user device has increased from 200 MB to 2 GB.

In response to receiving the change notification update manager determines that user device has particular software installed thereon e.g. based on information about user device in component registry . Update manager determines that the particular software is based on a particular software template that dictates software components from categories C1 C2 and C3 be included in the particular software.

Update manager determines whether any software components associated with categories C1 C2 and C3 in component repository database are a better fit for the metadata of user device with the increased available memory than the software components currently installed on user device . As described above the capabilities of the user device and the user preferences associated with the user device are accessed. In some instances a user preference may dictate whether the software is updated and or whether one update is selected over another update. Upon determining that one or more components in component repository database is a better fit for the metadata of user device update manager triggers an update of the installed software to replace the software components on user device with the software components that are a better fit.

When an update is triggered the client side update manager sends a software request with the current metadata of the user device to update manager . Update manager causes component manager to re select components for the requested software.

According embodiments update manager determines whether the re selected components are the same as components in the software already installed on the user device. For example update manager compares the re selected components to the components in the software that is already installed on the user device e.g. by referencing components registered to the user device in the component registry . If one or more of the re selected components is different than the components in the installed software then update manager sends causes the installed software to be updated with the different components. In an embodiment update manager sends the updated component to the user device for inclusion in the installed software i.e. as a replacement for the component s counterpart in the installed software . In this embodiment the client side software is configured to replace the component s counterpart in the installed software with the new component. In another embodiment update manager sends to the user device updated software including all of the re selected components.

Furthermore a change in the available components in component repository database a change in a software template and or a change in eligibility attributes of a component can cause an update to occur. For example an administrator registers a new software component in component registry where the new software component is associated with category C2. In response to receiving the new registration component registry identifies a set of one or more software templates that include C2 software components. Component registry then identifies e.g. from a user device registry in component registry one or more user devices on which software based on the one or more identified software templates are installed.

Component registry requests update manager to perform a software update evaluation for the identified software on the identified one or more user devices. Update manager determines whether software components on the identified one or more user devices should be updated as described above.

Based on the registrations stored by the component registry affected user devices having the changed components or software generated from a now changed template are identified. The affected user devices can be further interrogated for current metadata on which to base updated software. Based on the change and or the current metadata the update manager can instruct the component manager to re select and re assemble components to transmit to the user device.

In an operation a software request is received via a network from a user device. For example user device sends a request for software to be installed on user device . As a further example user device sends a request for software to be installed on user device . The request may include at least a portion of the metadata of user device . Request processor receives the request for software to be installed on user device via network .

In an operation metadata of the user device is obtained. For example request processor obtains the metadata for user device as part of the software request. As a further example request processor requests the metadata for client device in response to receiving the software request. The metadata as described above includes one or more of the hardware and or software configuration of the user device current state information of the user device user preferences and learned priorities.

In an operation a determination is made as to whether the user device or the metadata of the user device matches an existing specification of another user device. For example specification provider determines whether the metadata for user device matches an existing specification including user device metadata for user devices that have previously requested the presently requested software.

If there is matching existing metadata the process shown in flowchart proceeds to an operation in which a stored specification is retrieved. The stored specification includes information identifying those software components that were included in software previously constructed for a user device having at least some of the same or substantially similar metadata as the requesting user device. The process shown in flowchart then proceeds to operation discussed below. The operation can be performed by the specification provider .

If there is no matching existing metadata the process shown in flowchart proceeds to an operation in which a template of the requested software is obtained. For example component manager identifies a software template for the software requested for user device . The identified software template dictates that the software include one component for each of the following categories C1 C2 C3 C4 and C5.

In an operation for each category of components dictated by the template available components and their respective eligibility attributes are identified. In each category the one or more components can vary in functionality allocated compute resource and other hardware and software requirements. Continuing with the previous example component manager identifies for each of categories C1 C2 C3 C4 and C5 indicated in the software template those software components in component repository database that are associated with each category. In performing the operation the component manager can access data about the components in the component registry .

In an operation one or more depending on the template components are selected from each category indicated in the template. For example component manager compares the eligibility attributes of the components within each category in the template to the metadata of user device .

According to embodiments component manager first determines which software components match user device metadata indicating hardware and software configurations. To illustrate component manager identifies two software components component A and component B in component repository database that are associated with category C1. The eligibility requirements of component A indicate that the user must have at least a 1.8 GHz processor speed to run the component. The eligibility requirements of component B indicate that the user must have at least a 2.4 GHz processor speed to run the component. Component manager determines from the metadata of user device that user device has a 2.0 GHz processor. Component manager determines that the metadata of user device matches the eligibility requirements of component A and does not match the eligibility requirements of component B. Such a matching determination may be made as described above. In this example component manager determines that component A should be included in the software for user device to fulfill category C1.

Component manager refines software component matching based on other user device metadata. As an example that builds on the previous example the metadata of user device instead indicates that user device has a 2.7 GHz processor. Thus component manager determines that the hardware metadata of user device matches the eligibility requirements of both components A and B. In this situation where user device hardware software metadata matches multiple components component manager uses other metadata for user device to select a component for the user device such as user preference metadata. For example the metadata for user device indicates that the user prefers high definition HD video. The eligibility requirements of component A indicate that the component only supports standard definition video and the eligibility requirements of component B indicate that the component supports any definition of video including HD video. Because component B both matches the hardware metadata of user device and the user preference metadata of user device component manager selects component B as the best fit C1 software component for user device .

The selection of the components can further be recorded by the specification provider for later retrieval. For example in the case that there was no matching specification for the requesting user device specification provider records a new specification that includes information identifying the requested software at least part of the metadata of user device and information identifying the software components selected for inclusion in the software.

In an operation the requested software is constructed from the components selected in the operation or in the stored specification of the operation . For example component manager retrieves a copy of each of the components from the component repository database and registered in the component registry . Component registry provides an interface to register and unregister software components. Components are registered with associated eligibility metadata attributes including one or more of feature list storage compute display comparison function etc.

Component manager generates a downloadable version of the software that includes the selected software components. For example component manager packages a downloadable version of the requested software based on the operating system of the requesting user device. For example metadata for the requesting user device indicates that the user device runs an Android operating system. Component manager uses the APK packager which is configured to package software for the Android operating system. As a further example the requesting user device runs IOS and component manager uses one of the supported package managers. Specifically component manager uses the identified package manager s API to assemble the selected software components for the requested software. When assembled the components can communicate with one another using a shared API.

In an operation the requested software is transmitted to the user device via the network . For example component manager transmits the downloadable version of the assembled software to user device as a response to the request for the software.

As shown the metadata is depicted in terms of a relative processing power shown as a set of processors a relative amount of memory and a depiction of the user interface. The pictorial representation of the software includes a client side component manager labelled CM and five wedge shaped components labelled according to its category C1 C5 positioned about the client side component manager. The relative size of each of the five wedge shaped components is representative of the eligibility attributes of the respective component. To illustrate the five categories in the software are display type e.g. including components supporting retina display LED and LCD input devices e.g. including components supporting touch screen keyboard scanner and mouse supported file types e.g. including components for supporting MPEG MP4 MP3 PDF TXT and DOC files computing e.g. including components supporting 32 bit processing and 64 bit processing and database types e.g. including components supporting access to SQLite and DB2 databases .

Each of the five software components selected for inclusion in the software for the user device with the capabilities represented in each of metadata and is selected based on the capabilities of the corresponding user device. To illustrate the tailoring of the components to the capabilities of the user device each component in the corresponding software representation is depicted with distinctive proportions.

For example as illustrated in the metadata of the user device e.g. user device or indicates that the user device has 4 processing power 2 memory and has a tablet interface. In contrast depicts a smaller user device that according to metadata has 1 processing power 1 memory and has a feature phone interface. Accordingly representation depicts a larger software taking up more resources than the software depicted in representation . Specifically the software depicted in representation comprises the configuration manager labelled CM and one component from each of the same five categories labelled C1 C5 . The components of are significantly smaller than those of indicating that they require fewer resources than the components in and can be executed by a user device having less powerful resources.

In a user device is pictured that according to the metadata has 2 processing power 2 memory and has a smart phone interface. The representation illustrates that the software provided comprises the configuration manager labelled CM and one component from each of the same five categories labelled C1 C5 . The components of are a mix of the larger components of see e.g. components labelled C1 and C3 of and the smaller components of see e.g. components labelled C2 C4 and C5 of . Thus the components are selected so as to run effectively on the designated user device.

In an example in a change in hardware configuration of the user device of is depicted. The user device pictured according to the metadata has 4 processing power 1 memory where one of two previously available memories has been removed from the user device and has a tablet interface. The representation illustrates that the software provided comprises the configuration manager labelled CM and one component from each of the same five categories labelled C1 C5 . In the representation the dotted lines indicate where larger components have been replaced by smaller components depicted using solid lines see e.g. components labelled C1 and C3 . Thus the components are updated in response to the change in memory in the user device.

In an operation a determination is made as to whether there has been a change in the components available to be downloaded to the user device in the eligibility attributes of the components or in the template used to assemble the components. Such determination is for example performed by update manager inspecting the software and components that are registered in the component registry to identify changes in the registered software components.

As another example an administrator registers a new software component in component repository database with component registry by providing to component registry information that identifies the new software component and also the eligibility attributes of the new software component. In response to receiving the registration component registry sends notification of the new software component to update manager . Upon receiving such notification update manager detects the change in the software components on component repository database .

As yet another example an administrator registers a replacement template configured to replace a now obsolete template with component registry by providing to component registry information that identifies the new template and the now obsolete template that the new template is configured to replace. In response to receiving the registration component registry sends notification of the new template to update manager . Upon receiving such notification update manager detects the change in the now obsolete software template.

If no change is detected in the operation in an operation a determination is made as to whether there has been a change in metadata of the user device. In some instances the client side configuration manager can asynchronously notify the software provider server of changes on a user device. The change can be a change in hardware or software configuration a change in the current state of the user device a change in user preferences and or a change in explicit or learned user priorities as described above. The determination of the operation can be performed by for example a client side update manager or the update manager . If no change is detected in the metadata of the user device or in the software provided the process of flowchart returns to the operation .

In an operation if a change is detected in either the metadata of the user device or in the components or template then current metadata of the subject user device is obtained. For example in the case of a change in template or software component update manager identifies one or more subject user devices by identifying which user devices of a plurality of user devices e.g. user devices and have previously downloaded the software constructed with the now obsolete component s or template. In the case of a change in a user device the subject user device is already known.

Update manager obtains the metadata of the one or more subject user devices either by sending a request for metadata to the one or more subject user devices or via the notification of the change in the subject user device which may contain the changed metadata for the subject user device . The current metadata of the user device may be the same as the previously obtained metadata of the user device e.g. obtained in the operation of flowchart discussed above or may be different from the previously obtained metadata e.g. if there is a determination that the metadata has changed in the operation . In the operation the current metadata of the user device can be obtained in whole or in part e.g. as a differential of previously obtained metadata and the current metadata . The operation can be performed by the update manager and or the request processor .

In an operation a determination is made as to whether there is an existing updated specification. As discussed above existing specifications are maintained by the specification provider for user devices that have previously downloaded software. The new metadata of the subject user device may match the metadata of a user device in an existing specification that has previously downloaded the applicable software. If a match is found the process of the flowchart proceeds to an operation discussed below. The operation can be performed for example by the update manager .

If no match to an existing specification is found the process of flowchart proceeds to an operation in which a current template is obtained. The current template may be the same template obtained in the operation of flowchart or may be an updated version of the template obtained in the operation . The operation can be performed for example by the update manager .

In an operation available components and their respective eligibility attributes are identified. The operation may be performed in much the same way as the operation of the flowchart . The operation can be performed for example by the update manager .

In an operation the selection of components is updated. In instances where the metadata of the user device has changed the available components may not have changed since the software was last downloaded. In these instances a different component is selected as described herein. In other instances where the components or template has changed an updated or new component is selected based on information stored in the component registry . In some instances the selection of components and at least a portion of the metadata may be stored by the specification provider as an existing updated specification. The operation can be performed for example by the update manager .

In an operation the updated software or a portion of the updated software is constructed. In instances where the template is updated or where one or more of the components have changed the entire software including all of the components can be re constructed. In instances where one or more of the components are updated the components can be downloaded to the subject user device without re constructing the entirety of the software download. The operation can be performed for example by the update manager .

In an operation the updated software or a portion thereof is transmitted to the user device. In instances where only a portion of the software is sent a client side component manager or a client side update manager can construct the software at the user device. The operation can be performed for example by the update manager .

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk optical disk or solid state drive is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operate in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical disks magnetic disks or solid state drives such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

