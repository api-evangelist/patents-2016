---

title: System and method for application isolation with live migration
abstract: A system, method, computer program, and/or computer readable medium for providing application isolation and live migration to one or more applications and their associated resources. The computer readable medium includes computer-executable instructions for execution by a processing system. The computer-executable instructions may be for creating a new isolated environment, for creating a copy of an isolated environment, live migrating applications within and between isolated environments, and for deploying an isolated environment Further, the instructions may be for launching one or more applications within one or more isolated environment, for terminating one or more applications within one or more isolated environments, for configuring resource mappings, exceptions and policies, for triggering a live migrate, and for delivery of one or more applications within isolated environments over the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547542&OS=09547542&RS=09547542
owner: Open Invention Network LLC
number: 09547542
owner_city: Durham
owner_country: US
publication_date: 20160202
---
This application is a continuation of U.S. application Ser. No. 14 542 611 filed Nov. 16 2014 titled SYSTEM AND METHOD FOR APPLICATION ISOLATION WITH LIVE MIGRATION issued U.S. Pat. No. 9 251 004 issued Feb. 2 2015 which is a continuation of U.S. application Ser. No. 14 012 446 filed Aug. 28 2013 titled SYSTEM AND METHOD FOR APPLICATION ISOLATION WITH LIVE MIGRATION issued U.S. Pat. No. 8 893 129 issued Nov. 18 2014 which is a continuation of U.S. application Ser. No. 12 813 593 filed Jun. 11 2010 titled SYSTEM AND METHOD FOR APPLICATION ISOLATION WITH LIVE MIGRATION issued U.S. Pat. No. 8 539 488 issued Sep. 17 2013 which is a continuation in part and claims priority from U.S. application Ser. No. 12 421 691 filed Apr. 10 2009 titled SYSTEM AND METHOD FOR APPLICATION ISOLATION issued U.S. Pat. No. 8 341 631 issued Dec. 25 2012. This application is related to commonly assigned U.S. patent application Ser. No. 12 334 654 filed Dec. 15 2008 titled METHOD AND SYSTEM FOR PROVIDING STORAGE CHECKPOINTING TO A GROUP OF INDEPENDENT COMPUTER APPLICATIONS issued U.S. Pat. No. 8 880 473 issued Nov. 4 2014 to U.S. patent application Ser. No. 12 334 655 filed Dec. 15 2008 titled METHOD AND SYSTEM FOR PROVIDING STORAGE CHECKPOINTING TO A GROUP OF INDEPENDENT COMPUTER APPLICATIONS issued U.S. Pat. No. 8 195 722 issued Jun. 5 2012 each of which are incorporated herein by reference in their entirety. This application is related to commonly assigned U.S. patent application Ser. No. 12 334 660 filed Dec. 15 2008 titled METHOD AND SYSTEM FOR PROVIDING CHECKPOINTING TO WINDOWS APPLICATION GROUPS to U.S. patent application Ser. No. 12 334 663 filed Dec. 15 2008 titled METHOD AND SYSTEM FOR PROVIDING CHECKPOINTING TO WINDOWS APPLICATION GROUPS issued U.S. Pat. No. 8 752 048 issued Jun. 10 2014 to U.S. patent application Ser. No. 12 334 666 filed Dec. 15 2008 titled METHOD AND COMPUTER READABLE MEDIUM FOR PROVIDING CHECKPOINTING TO WINDOWS APPLICATION GROUPS issued U.S. Pat. No. 8 281 317 issued Oct. 2 2012 and to U.S. patent application Ser. No. 12 334 671 filed Dec. 15 2008 titled METHOD AND COMPUTER READABLE MEDIUM FOR PROVIDING CHECKPOINTING TO WINDOWS APPLICATION GROUPS issued U.S. Pat. No. 8 752 049 issued Jun. 20 2014 each of which are incorporated herein by reference in their entirety.

A portion of the material in this patent document is subject to copyright protection under the copyright laws of the United States and of other countries. The owner of the copyright rights has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office publicly available file or records but otherwise reserves all copyright rights whatsoever. The copyright owner does not hereby waive any of its rights to have this patent document maintained in secrecy including without limitation its rights pursuant to 37 C.F.R. 1.14.

This invention pertains generally to enterprise computer systems computer networks embedded computer systems wireless devices such as cell phones computer systems and more particularly to methods systems and procedures i.e. programming for providing application isolation for multiple applications running on a host operating system and live migration of applications within and between isolated environments.

In many environments one of the most important features is to ensure that one running application doesn t affect other running applications and that the crash of one application doesn t compromise other running applications. In many environments applications share system resources libraries and hardware which exposes subtle interconnects between seemingly unrelated applications.

Several approaches have been developed addressing this fundamental problem. The first level of application isolation is provided by the operating system. Modern operating systems such as Linux UNIX Windows2000 NT XP and Vista provide some level of application isolation through the use of processes and the underlying hardware memory management unit. The use of processes generally ensure than one running application process cannot address memory owned and used by other processes. This first level of isolation does not address the use of shared resources such as files file systems shared memory and libraries so other approaches have been developed

In U.S. Pat. No. 6 496 847 Bugnion et al. teach the use of a virtual machine monitor VMM with a protected host operating system HOS . This invention partially solves the isolation problem by placing every application into its own VMM. The solution requires the use of a VMM subsystem and in some cases a customized operating system. U.S. Pat. No. 6 496 847 does not provide isolation at the level of individual applications but for entire operating systems with all the applications within it. It does not address the problem of application isolation with multiple natively running applications on one host computer.

In U.S. Pat. No. 6 601 081 Provino et al. teach the use of a virtual machine for a plurality of application programs. As with U.S. Pat. No. 6 496 847 the use of a VM subsystem simply moves the problem to a different layer and does not address the fundamental issue of application isolation with several natively running applications on one host computer.

In U.S. Pat. No. 7 028 305 Schaefer teaches a system for creating an application protection layer to separate an application from the host operating system. Shaefer primarily teaches how to intercept the Windows registry to capture configuration information for Windows application and how to create a virtual operating environment for the application. Access to files is provided via a virtual file system access to registry information via the virtual registry etc. For Unix and MacOS few specific teachings are presented.

A related challenge to deployment of applications is that a running application generally cannot be moved without first shutting down the application and re starting it on a new server. The terminate restart cycle disconnects all users terminates all sessions and generally leaves the application services unavailable for some period of time. With the move to Software as a Service SaaS Cloud Computing or Hosted Services software services must be available at all times anything else is considered unacceptable by customers. Today service agreements for hosted services generally have penalties associated with any amount of downtime and application being unavailable.

In U.S. Pat. No. 7 213 246 Rietshote et al teach Failing over a virtual machine VM to a second system. Applications within the VM are failed over along with the entire VM. The failover requires a VM subsystem and does not address the issue of failing over the application without the presence of a virtual machine infrastructure.

In U.S. Ser. No. 11 567 983 Travostino et al teach seamless live migration of virtual machines across optical networks . The live migration requires a virtual machine and does not address live migration of the individual applications within the virtual machine or between virtual machines.

In U.S. patent application Ser. Nos. 12 334 654 12 334 655 and 12 334 657 Havemose et. al Havemose teach checkpointing of application groups on Linux and the use of checkpointing for failover and live migration. In U.S. patent application Ser. Nos. 12 334 660 12 334 663 12 334 666 and 12 334 671 Backensto et. al. Backensto teach checkpointing of application groups on Windows operating systems and the use of checkpointing for failover and live migration. Both of Havemose and Backensto included by reference above teach application checkpointing and live migration that work transparently over the underlying operating system without the need of a virtual machine subsystem.

The present invention provides a system and methods to create an application isolation environment where applications can run unmodified on un modified operating systems without requiring any virtual environments virtual machines or virtual machine monitors. The present invention also teaches how to manage and handle applications that share libraries and resources and how to handle complex multi process applications. In one embodiment an implementation in the Linux environment is disclosed in another embodiment an implementation on Windows is disclosed.

Another aspect of the present invention is a system and methods to perform live migration of applications within and between isolated environments without requiring virtual machines virtual machine monitors or other additional infrastructure.

A method system apparatus and or computer program are disclosed for achieving application isolation and application live migration for single and multi process applications and their associated resources. The application isolation and application live migration is provided without requiring any changes to the host operating system kernel or requiring any changes to the applications. The application isolation and application live migration is fully transparent to both operating system and application and automatically adjusts for resources such as memory storage and CPUs being allocated and released. The application isolation is provided in an interception layer interposed between the individual applications and the operating system and an interception database. Additionally the application live migration is provided in s shared library pre loaded into each application during loading and initialization of the application. Preferably any functional changes to system calls are done exclusively within the interception layer and interception database and only in the context of the calling application.

Another aspect of the present invention relates to a computer readable medium comprising instructions for application and application group isolation and for application live migration The instructions are for installing the applications into the isolated environment running the application in the isolated environment un installing applications from the isolated environment configuring the isolated environments live migrating applications within and between isolated environments deploying the isolated environments and configuring the isolated environments and live migration

The terms Windows and Microsoft Windows is utilized herein interchangeably to designate any and all versions of the Microsoft Windows operating systems. By example and not limitation this includes Windows XP Windows Server 2003 Windows NT Windows Vista Windows Server 2008 Windows Mobile and Windows Embedded.

The terms Linux and UNIX is utilized herein to designate any and all variants of Linux and UNIX. By example and not limitation this includes RedHat Linux Suse Linux Ubuntu Linux HPUX HP UNIX and Solaris Sun UNIX .

The term node and host are utilized herein interchangeably to designate one or more processors running a single instance of an operating system. A virtual machine such as VMWare or XEN VM instance is also considered a node . Using VM technology it is possible to have multiple nodes on one physical server.

The terms application is utilized to designate a grouping of one or more processes where each process can consist of one or more threads. Operating systems generally launch an application by creating the application s initial process and letting that initial process run execute. In the following teachings we often identify the application at launch time with that initial process.

The terms checkpointer checkpointing and checkpointing service are utilized herein interchangeably to designate a set of services which 1 capture the entire state of an application and store all or some of the application state locally or remotely and 2 restore the entire state of the application from said stored application state. The checkpointer may include the following components dynamic link library checkpoint library loadable kernel module checkpointer kernel module a control process to monitor and coordinate an application group and a merge utility to merge full and incremental checkpoints. The checkpointing services run on all nodes where the application groups run or are configured to run

The terms checkpoint taking a checkpoint and checkpoint file are utilized herein interchangeably to describe the data captured by the checkpointing service. Generally the checkpoint files are written to local disk remote disk or memory. The terms checkpoint restore and restore from checkpoint are used interchangeably to describe the process of restoring an application from a checkpoint. The term checkpoint terminate is used to describe the process of taking a checkpoint immediately followed termination of the application by the checkpointer before the application is allowed to run again.

The terms live migration application live migration and migration are utilized herein to describe the process of moving a running application from one isolated environment to another including the isolated environment as necessary. Any clients connected to the running application are preferably unaware that the application is being moved and are preferably unaffected by the application migration.

The term fork is used to designate the operating system mechanism used to create a new running process. On Linux Solaris and other UNIX variants a family of fork calls is provided. On Windows one of the equivalent calls is CreateProcess . Throughout the rest of this document we use the term fork to designate the functionality across all operating systems not just on Linux Unix. In general fork makes a copy of the process making the fork call. This means that the newly created process has a copy of the entire address space including all variables I O etc of the parent process.

The term exec is used to designate the operating system mechanism used to overlay a new image on top of an already existing process. On Linux Solaris and other UNIX a family of exec calls is provided. On Windows the equivalent functionality is provided by e.g. CreateProcess via parameters. Throughout the rest of this document we use the term exec to designate the functionality across all operating systems not just Linux Unix. In general exec overwrites the entire address space of the process calling exec . A new process is not created and data heap and stacks of the calling process are replaced by those of the new process. A few elements are preserved including but not limited to process ID UID open file descriptors and user limits.

The term Barrier and Barrier Synchronization is used herein to designate a type of synchronization method. A Barrier for a group of processes and threads is a point in the execution where all threads and processes must stop at before being allowed to proceed. Barriers are typically implemented using semaphores mutexes Locks Event Objects or other equivalent system functionality. Barriers are well known in the art and will not be described further here.

In the following we use commonly known terms including but not limited to process process ID P D thread thread ID TID thread local storage TLS instruction pointer stack kernel kernel module loadable kernel module heap stack files disk CPU CPU registers storage memory memory segments address space semaphore loader system loader system path sockets TCP IP Inter process communication IPC Asynchronous Procedure Calls APC and signal . These terms are well known in the art and thus will not be described in detail herein.

The term transport is utilized to designate the connection mechanism and or protocols used for communicating across the distributed application. Examples of transport include TCP IP Message Passing Interface MPI Myrinet Fibre Channel ATM shared memory DMA RDMA system buses and custom backplanes. In the following the term transport driver is utilized to designate the implementation of the transport. By way of example the transport driver for TCP IP would be the local TCP IP stack running on the host.

The term interception is used to designate the mechanism by which an application re directs a system call or library call to a new implementation. On Linux and other UNIX variants interception is generally achieved by a combination of LD PRELOAD wrapper functions identically named functions resolved earlier in the load process and changes to the kernel sys call table. On Windows interception can be achieved by modifying a process Import Address Table and creating Trampoline functions as documented by Detours Binary Interception of Win32 Functions by Galen Hunt and Doug Brubacher Microsoft Research July 1999 . Throughout the rest of this document we use the term interception to designate the functionality across all operating systems.

The term file context or context is used in relation with file operations to designate all relevant file information. By way of example and not limitation this includes file name directory read write append execute attributes buffers and other relevant data as required by the operating system.

The term transparent is used herein to designate that no modification to the application is required. In other words the present invention works directly on the application binary without needing any application customization source code modifications recompilation re linking special installation custom agents or other extensions.

The terms private and isolated environment and isolated environment are used herein interchangeably to designate the private area set aside for application isolation as described in further detail below.

The present invention provides application isolation at several levels 1 during installation all installation and registration information is intercepted and installation is re directed to a private and isolated environment 2 during launch of an application the installation information is retrieved and provided to the application again via interception and 3 during access to external resources interception of all access is re directed as necessary. The combination of all levels of isolation provides for fully transparent application isolation. Thus at all times access to resources configuration and run time information is intercepted and redirected.

By way of example and not limitation for embodiments within Windows operating systems access to the Windows Registry is intercepted and included in the application isolation.

Further aspects of the invention will be brought out in the following portions of the specification wherein the detailed description is for the purpose of fully disclosing preferred embodiments of the invention without placing limitations thereon.

Referring more specifically to the drawings for illustrative purposes the present invention will be disclosed in relation to through . It will be appreciated that the system and apparatus of the invention may vary as to configuration and as to details of the constituent components and that the method may vary as to the specific steps and sequence without departing from the basic concepts as disclosed herein.

The context in which this invention is disclosed is one or more applications being installed running and accessing local and remote resources. Without affecting the general case of multiple applications the following scenarios often depict and describe one or two applications as applicable. Multiple applications are handled in a similar manner.

In a preferred embodiment the interception layer is implemented in a shared library and preloaded as part of the load process.

At times it may be desirable to store some user data outside the isolated environment such as on a central file server. In a preferred embodiment this is supported by specifying which resource locations should remain fixed and public in the global exceptions . Such public resources are not translated into the isolated environment.

The Interception Database IDB is a system wide database containing mappings between the resources as the application requests them and their private values inside the isolated environment. illustrates by way of example embodiment the Interception Database IDB and its various components. The IDB contains two main components a rules engine and the core resource mappings . The rules engine contains the main high level configuration information as provided by an administrator . The rules engine and its configuration information includes but is not limited to information designating the base directory for installing the isolated environment specific exceptions to the resource mappings and the general mechanism used to create the mappings. The administrator defines exceptions as needed. The global exceptions contain all resources that should not be remapped to the isolated environments. Examples include but are not limited to shared storage shared devices network resources and system wide resources.

The resource mapping maintains mapping between public resources and the corresponding private and isolated resources . The resource mapping also consults the global exceptions prior to translating any public to private or private to public resource requests.

Resources take many forms including but not limited to files fonts shared libraries shared devices and storage. On Microsoft Windows the Registry is an important component and contains system wide configuration information used by most applications. Some resources such as data files tend to be local to the individual applications while e.g. fonts tend to be shared between multiple applications.

Access to files is handled by the IL intercepting all file operations between the application and the system libraries and operating systems. Examples include but are not limited to open fopen write read close seek remove and the Windows equivalents. Generally these functions either contain a public file name as part of the arguments or a file handle to an already established file. The files names are remapped as disclosed above to an isolated environment and any further reference to the handle is automatically re directed to the isolated environment. File operations that return information are translate back to the public values. By way of example and not limitation if the applications ask for current directory the public name as the application expects is returned and not the private name within the isolated environment. By way of further example if the current directory is located on shared storage included the global exceptions the directory is returned un translated as it s subject to the exception handling.

File paths and other resource names can be specified both as absolute values or relative values. By way of example and not limitation an absolute path for a document file may be C MyDocuments myfile.doc while a relative reference may be . . docs myfile.doc . Absolute references are resolved as previously disclosed by consulting the public resources private resources and global exceptions . Relative addresses are resolved in a multi step process First relative names are converted to absolute names and then the absolute name is converted as previously disclosed. This mechanism ensures fully transparent support of both absolute and relative naming of all resources.

Fonts pose particular problems as fonts reside both in application specific directories and global system directories such as C Windows Fonts on Windows and usr X11R6 lib X11 fonts and usr share fonts on Linux. An application may install font both into one or more global font directories as well as application specific directories. All shared fonts directories are included in the Global Exceptions as they should be accessed directly. If during installation additional fonts are installed they are installed according to the policy chosen by the administrator . Prior to installation the administrator chooses if application installed fonts are allowed to be placed in the global fonts directory or if they should be placed in the isolated environment. The rules engine consults this administrative choice and upon receiving a request to enumerate the font directory will include isolated environment fonts if so configured. If the application installs its fonts into its own file structure the fonts are treated as normal files and are not subject to the automatic enumeration as the application knows where to look for its application specific fonts.

Modern operating systems share components across multiple applications. Such shared libraries also pose a special case. On Windows Dynamic Link Libraries DLLs and on Linux UNIX shared objects .so files are examples of such shared components. On Window shared libraries primarily reside in C Windows and C Windows System32 but can sit anywhere. On Linux Unix the primary locations are usr lib usr X11 lib and the entire usr lib directory structure. The loader of the operating system traverses the system PATH to find any requested shared library but this can be manually or programmatically changed as part of the load process. The PATH is set using environment variables both on Windows and Linux. In order to intercept loading of shares libraries the present invention loads the application in stead of using the system loader directly. This enables interception of library loading done by the loader. If during installation additional shared libraries are installed they are installed according to the policy chosen by the administrator . Prior to installation the administrator chooses if application installed libraries are allowed to be placed in a global directory or if they should be placed in the private and isolated environment. If the libraries are placed into the private and isolated environment the load PATH is adjusted to search the private location.

As with files libraries can be loaded with both absolute and relative addresses. The load process handles the resource mapping as disclosed above. In all cases the loading must follow the same path and address resolution as the system loader provides.

If the application installs its shared libraries into its own file structure the libraries are treated as normal files and are not subject to an adjusted PATH or load order as the application knows where to look for its application specific libraries. In the preferred embodiment if the application installs new shared libraries they are installed into the isolated environment

One of the most significant sources of application incompatibilities and one of the motivators for the present invention is shared library conflict. By way of example and not limitation if a shared library is loaded on the system and a new application installs an older version of the library the older version may overwrite the newer version and render other applications non functional based on having their shared library replaced by an incompatible older version. This is a common problem on both the Windows and Linux platforms. Using the preferred embodiment disclosed above the application would install the older library into its isolated environment and therefore not affect other applications. The application would load and use the older library without ever being aware that it was provided from the isolated environment and other applications running on the system would be unaffected by the installation of the older library.

Microsoft Windows uses a special configuration system generally referred to as the Registry . The registry contains configuration installation and un installation information for applications on the system. When an application installs on a Windows system it uses the registry to store values such as home directory recent files etc. The preferred embodiment on Windows systems additionally include interception of all registry information and ensures that installation and runtime information that would normally go into the registry in stead is stored and maintained in the IDB. During installation of a Windows application all registry information is thus stored in the IDB and not the registry. When an application requests registry information the information is provided from the IDB and not the registry. This ensures complete application isolation from the registry.

The isolated environment contains all application files and shared resources and their respective mappings. These are all preserved persistently on local or remote storage and can be archived copied and restored as any other set of files. Specifically the isolated environment directory structure can be copied to a different node and used directly to start the application on that node.

So far the Interception database has been described as a database . Based on the teachings above it s readily apparent to anyone skilled in the art that the only requirement is that updates to the resource tables and be atomic at the record level. This functionality can be readily implemented in a variety of ways including using Java s ConcurrentHashMap the Windows .NET equivalents or by custom programming the data structures and locking. Furthermore preferably concurrent access to the Interception Database translations is provided. In an alternate implementation such a custom interception database is used in stead of a full database.

By way of example and not limitation consider an environment with the present invention active. An application calls a write operation. As disclosed in above the write is intercepted by the interception layer . Parameters to the write call are translated by the Interception Database and the rules for the isolated environment and the file context and parameters of the calling write are adjusted to point to the isolated environment. The write call is then forwarded to the system libraries and operating system as were the case with the present invention inactive. The return value from the write is returned to the IL which using the IDB maps the result back into the original context and returns the value to the caller . The application issuing the write operating is thus unaware that the write is being intercepted and re directed to the isolated environment. All translation and isolation is performed outside the application and before the write operation ever reaches the system libraries or operating system .

A specific example using ANSI C further illustrates the IL and IDB translations. Consider an example where a file is opened for writing a small text is written and the file is closed using the following code

The call to fopen returns a file pointer which the fwrite operation uses to write data to the file. The call to fopen includes the file name home user newfile.txt as the first parameter. The Interception Layer intercepts the call to fopen and changes the actual filename to the corresponding location in the isolated environment before passing the call on to the system library implementation . The following fwrite operation is unaware that the file pointer points to the isolated environment and simply writes the data. Finally fclose is called to close the file. The file pointer still points to the isolated environment and the close proceeds as a close would without the present invention active.

In a preferred implementation the interception layer is implemented as a shared library and pre loaded into each application process address space as part of loading the application. Shared libraries are implemented in such as way that each instance of the interception layer share the same code but have their own private data where said private data corresponds to the interception and resource translations undertaken on behalf of the particular application process and its threads. In a multi process application the interception layer is therefore comprised of one interception layer per application process and together the process level interception layers comprise the interception layer. On most diagrams within these disclosures we therefore show one interception layer corresponding to the fact that only one shared library has been loaded and where necessary point out that each process is being intercepted separately. The application process interception layers are generally referred to as application process interception layer on the diagrams.

A related issue with interception is that intercepted functions may call other intercepted functions. As long as said calls are performed using public intercepted names the previous teachings fully describe the interception. At times shared library developers take shortcuts and don t use the public names but refer directly to the implementation using a private name. In such cases the interceptor must overlay a copy of the intercepted shared library code using fully resolved public function names.

In an alternate implementation a separate application interception layer process is created and the individual application process interception layers communicate with the application interception layer using sockets TCP IP pipes or other inter process communication IPC . This is generally less attractive as it requires the creation of a separate process and additional communication overhead.

At times multiple applications share data libraries and work in combination. By way of example and not limitation a Microsoft Word document may include or require a Microsoft Excel spreadsheet. In general any number of applications may need to collaborate and share data. So far the approach has been to isolate applications so that to continue the example if Word and Excel were installed separately they would both be isolated and not able to work together. To enable sharing between pre designated applications the applications need to be grouped together in an application group and installed inside the same isolated environment. illustrates by way of example embodiment an application group with three individual applications operating within the present invention. Any other number of applications is handled in a similar manner. The administrator pre defines the application group and the individual applications within the group App App and App . During launch interception layers are preloaded into each application as previously disclosed App has its interception layer preloaded App has its interception layer preloaded and App has its interception layer loaded. Similar to how individual processes within an application are handled the three individual interception layers comprise the application group s interception layer .

As taught the interception layer for an application and the interception layer for an application group work in a similar manner using the same preloaded shared library hence there is no need to distinguish between the two. In the following the nomenclature Interception Layer is used to designate the interception functionality across both applications and application groups.

The administrator commits the application group to the IDB . The IDB uses the same mechanisms as disclosed above for individual applications and structures the isolated environment so that the individual applications share resources and file system. By installing the applications together they automatically use the same isolated environment and sharing is fully automatic without requiring any additional information. The interception layer intercepts as previously disclosed and requires no special configuration all application group information is contained within the IDB and the settings for the isolated environment .

The administrator commits all administrative settings to the IDB which is reflected in the database tables for the isolated environment .

At times it may be desirable to run multiple instances of the same application or application group but in separate isolated environments. Referring again to for illustrative purposes. The administrator defines each instance of the application group using separate application group names. Even though Application Group A Application Group B and Application Group C are identical they have been pre defined with their own environment and thus run in separate isolated environments without any further intervention or configuration.

The Backensto and Havemose references cited above teach checkpointing of multi process multi threaded application groups on Windows and Linux respectively without an isolated environment. The general approach taken include 

Checkpointing of application groups within the isolated environment is complicated by the addition of two new functional components the interception layer including the application process interception layers and the interception database. Generally the interception layer is contained within the application processes while the interception database is external. The following teachings incorporate the cited checkpointing references into the present invention.

Application isolation utilizes interception to redirect resource access to the isolated environment. To provide checkpointing in the context of application isolation the previously disclosed interception mechanism is enhanced to first pass all intercepted functions through the checkpointing library. The checkpointing library operates on the running program on the host operating system and utilizes interception to capture fork exec memory operations and other resources as disclosed in the two cited references. This is followed by the interception handling for resource mapping related to the isolated environment as disclosed previously.

The checkpointing library is pre loaded along with the interception layer into the address space of each application process. To keep multiple independent processes coordinated a new component is introduced the Application Group Control Process AGCP responsible for launching the application group preloading the libraries initializing and starting the application group. In summary the following additional steps and components are added 

The AGCP furthermore assumes the full functionality of the loader and the custom symbol resolution as disclosed above. AGCP is responsible for all aspects of application launch termination installation of interception loading of checkpointing library and triggering of checkpointing.

In an embodiment on Linux and UNIX AGCP triggers the asynchronous checkpoints using signals. In an embodiment on Window Asynchronous Procedure Calls APC are used to trigger the checkpoints.

As part of loading and initializing the application A AGCP further creates a dedicated checkpointing thread for each process in the application group. illustrates by way of example a one process application A with one corresponding checkpointing thread . Multi process applications are handled in a similar manner with one checkpointing thread created per process. As processes are created and terminated checkpointing threads are added and removed as necessary as disclosed in the two cited references. As part of initializing the checkpointing library the checkpointing library registers the current process with the checkpoint barrier The registration ensures that the current thread and process is included in the barrier and ensures that the current process checkpoint thread is called as part of the barrier

The Interception database IDB is global to all application groups within the isolated environment. If the IDB has not been loaded the AGCP launches the IDB prior to the performing the load process disclosed above.

The checkpointer and the isolated environment both need access to all intercepted functions. In general the checkpointer operates on the running application and utilizes interception to capture resource and their usage. The isolated environment utilizes the interception to re direct resource usage to the isolated environment. By way of example and not limitation when application A reaches function ifunc which is subject the interception the previously disclosed control flow is adjusted to account for the presence and requirements of the checkpointer. The function ifunc is intercepted and re directed to the application process interception library . At this point ifunc its context and parameters reflect the actual running application process. The intercepted call is first forwarded to the checkpointing library where all relevant stack information is saved as disclosed in the two cited references. If ifunc changes the process hierarchy the change is communicated to AGCP in order to have AGCP preload or remove the interceptors as previously disclosed. Control is then returned to the application process interception layer . The application process interception layer calls to the Interception Layer IL . The IL remaps resources using the Interception Database as previously disclosed. Adjusted resources or data are returned to the interceptor and sent back to the calling application process via the return of ifunc .

In continuation of the example in section 5 above illustrates by way of example embodiment the data and control flow with checkpointing activated. By way of example the application group consists of one application with one process. The Application Group Control Process as previously disclosed launches the application preloads the application process interception layer preloads the Interception Layer the checkpointing library and creates the checkpointing thread . As disclosed the AGCP also launches the Interception database as necessary.

The call to fopen is intercepted by the application interception layer and passed to the checkpointing library . The checkpoint library captures the real resource name home user newfile.txt and attributes w as disclosed in the two cited references and the call returns to the application process interception layer and forwarded to the Interception Layer . The interception layer then as previously disclosed translates using the IDB the public resource into the corresponding resource in the isolated environment . The call to fopen is finally forwarded to the actual implementation in the system libraries and operating system . Return values from fopen is returned to the IL translated back into the host environment as appropriate forwarded to the application process interception layer and ultimately returned to the calling application process . The file pointer FILE fp has been created in the host environment by the application intercepted for checkpointing with host environment settings and re directed to the isolated environment by the IL and IDB . This ensures that the checkpointer works on the actual executing program while resource access is redirected under both the application and the checkpointer .

The call to fopen is followed by a call to fwrite writing data to disk. Contrary to fopen fwrite operates on a file pointer and appears host native to the application and the checkpointer but was translated by the isolated environment as just disclosed. The checkpointer intercepts the fopen call but does not need to do modify anything. Likewise the interception for the isolated environment does not need to modify any of the parameters and lets the fwrite simply write the data.

By way of example and not limitation the teachings so far describe two layer interception first interception by the application process interception layer followed by interception by the checkpointer. In general any number of interceptions can be layered in a similar manner. Similarly a hierarchy of interception is supported by traversing the hierarchy and each time passing arguments and results down and up the hierarchy as disclosed for the two layer interception. Most applications use multiple system libraries or other shared libraries all of which are loaded as part of the load process. As previously disclosed the Application Group Control Process AGCP is responsible for loading the application group. The AGCP includes the operating system loader logic and therefore has access to and knowledge of references to external libraries and is responsible for loading them. The AGCP automatically intercepts all functions in said libraries building the interception hierarchy automatically without requiring any manual intervention.

Checkpoints are taken in a synchronized manner across all application processes. The synchronization is accomplished using the checkpointing barrier . The detailed teachings of checkpointing multi process application groups are provided in the Havemose and Backensto references previously cited. The general checkpointing process is

The checkpoint includes all data within the address space of the application processes including the application process interception layer the interception layer and the checkpointing library. This ensures that any in process interception or resource mapping is fully captured and included in the checkpoint.

By way of example and not limitation A has intercepted an open call processed it in the application process interception layer and the checkpointing layer and is in the middle of processing the resource mapping in the interception layer at the time the barrier is entered. With the entire address space included in the checkpoint the exact state of all shared library data is captured including the incomplete resource mappings. If at a later time a restore from checkpoint is issued everything is brought back in the same state including the incomplete resource mapping.

In a preferred embodiment the application checkpoints are stored within the isolated environment. In an alternate embodiment the application checkpoints are stored outside the environment in a shared location.

In a preferred embodiment the Interception database is not included in the checkpoints for the individual applications but is runs as a separate entity. As part of the checkpointing barrier a signal is sent from the barrier to the interception database to persistently store the settings for the application group s isolated environment.

In an alternate implementation where only one application group uses the interception database the interception database is added to the application group launched by the AGCP and included in the barrier and the checkpoints

The teachings for restoring multi process multi threaded application groups running without an isolated environment are disclosed in the Havemose and Backensto references cited above and included by reference.

The checkpoints for the application group contain all the process and thread hierarchy information including all environmental information. also illustrates an example embodiment of the key steps involved in restoring an application group from checkpoints. First the Application Group Control Process AGCP is loaded. The AGCP reads the process tables from the checkpoints and creates the process and thread hierarchy for the entire application group. For application A the checkpoint is loaded from disk the process hierarchy is overlaid with the checkpoint image and the image is exec ed the number of times indicated in the checkpoint and environment. The AGCP also pre loads all necessary shared libraries including but not limited to the application process interception layer the interception layer and the checkpointing library. The AGCP repeats this for application A and application A .

All processes and threads within the application A A and A are halted at the barrier corresponding to checkpoint from which they are being restored. All threads and processes are then released from the barrier and the application group proceeds to run.

As the interception layer and the application process interception layer are included in the checkpoint any in process resource translation resumes at the exact point where the checkpointing occurred. This ensures consistency across checkpoint and restore.

In a preferred embodiment the application checkpoints are stored within the isolated environment. When restoring the checkpoint is available within the isolated environment.

In an alternate embodiment the application checkpoints are stored outside the environment in a shared storage typically on networked storage. When restoring the checkpoint file is first retrieved from the shared storage then used to restore from.

In a preferred embodiment where the interception database is external to the application group the interception database is reloaded with the settings for the isolated environment while the application group is in the barrier. The settings for the isolated environment were persistently stored as part of the checkpointing barrier.

In an alternate embodiment where the interception database is included in the application group the interception database is restored along with the application group.

Checkpointing and Live Migration can be triggered in a variety of ways. In general the trigger can fire at any time and is from the application group s perspective therefore asynchronous.

One of the major problems with application deployment is the actual installation and the associated risks as disclosed previously. Using the present invention a pre created isolated environment can be used in place of performing an actual installation. The isolated environment contains all application files shared libraries and installation data and can be moved copied and run from anywhere the present invention is present.

In an alternate embodiment the environment is stored on shared storage and is accessed directly from the shared storage. In this embodiment the isolated environment is loaded directly from shared storage and only local data such as temporary files are kept locally.

In another embodiment the environment is saved to storage and shipped to a remote site. The remote site loads the environment and runs the applications directly from within the environment without any installations. In this embodiment the present invention may be used for disaster recovery.

Installation free deployment can be enhanced using the checkpointer to provide live migration of running application groups. A Live Migration is the process of moving a running application from one environment to another without restarting the application and losing session data. The isolated environment and checkpointing are configured such that the checkpoints are included within the isolated environment. A live migration of an application group is performed with the following steps 

The restore from checkpoint can be activated within the same isolated environment within a new isolated environment on the same host or on a new isolated environment on a different host.

The net effect of checkpoint terminate followed by a restore from checkpoint is that the application execution is moved from one isolated environment to another without loss of data. There is no loss of application data as the application is precluded from running between the checkpoint and the restore and therefore has not executed any instructions.

In a preferred embodiment Live Migration may also be used for scale out. In stead of terminating a just check pointed application group said application group is left running while a second copy is created using the checkpoint on a new host. After creating the second application group using the modified live migrate there are two running copies of the same application with identical configuration. Using a front end load balancer incoming traffic is divided between the two application groups with each copy handling approximately half of all sessions. Inactive sessions generally automatically expire.

The administrator provides general configuration information applicable to all isolated environments and applications unless explicitly changed for a particular isolated environment . Examples of administrator provided global configuration information includes but is not limited to

Each setting can be changed i.e. replaced on an application by application basis and on an application group by application basis. As determined by the administrator examples of administrator provided application level configuration information include but is not limited to

The combination of the global configuration information with the rules engine makes the configuration and deployment on new isolated environment fully automatic after the initial global configuration has been provided. As disclosed it may be desirable to change one or more of an application s isolated environment settings. By way of example and not limitation if a particular application needs to locally access certain resources only available on a particular server that one application s isolated environment would be located on that particular server while all other environments were centrally stored. The ability to mix and match environments and deployments ensure full flexibility and ability to deploy multiple applications in a heterogeneous environment with all the benefits of the present invention.

In another embodiment the administrative functions is done programmatically using an Application Programming Interface API .

In the embodiments described herein an example programming environment was disclosed for which an embodiment of programming according to the invention was taught. It should be appreciated that the present invention can be implemented by one of ordinary skill in the art using different program organizations and structures different data structures and of course any desired naming conventions without departing from the teachings herein. In addition the invention can be ported or otherwise configured for use across a wide range of operating system environments.

Although the description above contains many details these should not be construed as limiting the scope of the invention but as merely providing illustrations of some of the exemplary embodiments of this invention. Therefore it will be appreciated that the scope of the present invention fully encompasses other embodiments which may become obvious to those skilled in the art and that the scope of the present invention is accordingly to be limited by nothing other than the appended claims in which reference to an element in the singular is not intended to mean one and only one unless explicitly so stated but rather one or more. All structural and functional equivalents to the elements of the above described preferred embodiment that are known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the present claims. Moreover it is not necessary for a device or method to address each and every problem sought to be solved by the present invention for it to be encompassed by the present claims. Furthermore no element component or method step in the present disclosure is intended to be dedicated to the public regardless of whether the element component or method step is explicitly recited in the claims. No claim element herein is to be construed under the provisions of 35 U.S.C. 112 sixth paragraph unless the element is expressly recited using the phrase means for. 

