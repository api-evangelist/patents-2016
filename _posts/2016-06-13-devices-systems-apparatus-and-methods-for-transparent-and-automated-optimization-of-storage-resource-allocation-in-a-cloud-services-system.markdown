---

title: Devices, systems, apparatus, and methods for transparent and automated optimization of storage resource allocation in a cloud services system
abstract: A device or system includes a plurality of storage resources each associated with a respective performance class, each being associated with selected performance characteristics such as IOPS, bandwidth, etc. The device or system includes a compute instance having access to allocated storage resources, the allocated storage devices including one or more storage resources. The device or system also includes an optimization component adapted to obtain information relating to utilization by the compute instance component of the allocated storage resources, determine that a change to the allocated storage resources is necessary, based on the information, cause data to be migrated from a first storage resource associated with a first performance class to a second storage resource associated with a second storage class, and cause a removal from the allocated storage resources of the first storage resource and an addition to the allocated storage resources of the second storage resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09524111&OS=09524111&RS=09524111
owner: FittedCloud, Inc.
number: 09524111
owner_city: Boxborough
owner_country: US
publication_date: 20160613
---
This application claims the benefit of U.S. Provisional Patent Application No. 62 304 829 filed Mar. 7 2016 which is incorporated by reference herein in its entirety.

This specification relates generally to the storage of data and more particularly to devices systems apparatus and methods for transparent and automatic optimization of storage resource allocation in a cloud services system.

Public cloud systems have become increasingly popular in recent years. The cloud services provided by public cloud systems have transformed the information technology IT industry as customers have moved on site IT infrastructures into public clouds. Ease of provisioning has contributed to the popularity of the public cloud new model. In many cases a user can create a virtual machine with a fully installed operating system and various applications pre installed with just a few clicks of a mouse. Typically the user can also select how much processing capacity and storage capacity the virtual machine will have at the time the virtual machine is created.

On demand allocation of processing and storage resources allows a user to allocate only the amount of resources that are expected to be required by a particular application. For example a user of a particular database application can forecast the maximum storage capacity that will be needed and allocate storage capacity to meet that requirement and no more . In a specific example if a user expects a particular database application to need a maximum storage capacity of 300 GB the user can request an allocation of 300 GB of storage capacity for the database application. The cloud services system then allocates 300 GB for the application. This on demand capability enables users to avoid expenditures for processing and storage capacity that will most likely never be used.

Devices systems apparatus and methods for transparent and automatic optimization of storage resource allocation in a cloud services system are provided. Systems and methods described herein may be implemented using a single device having a plurality of storage resources and or using a plurality of devices within a network in which storage resources are distributed.

In accordance with an embodiment a device includes a plurality of storage resources each storage resource associated with one of a plurality of performance classes each performance class being associated with one or more performance characteristics. Each storage resource includes a predetermined amount of storage capacity and may include or reside within a storage device a storage system etc. The device also includes a compute instance component having access to allocated storage resources the allocated storage devices including one or more of the plurality of storage resources. The device also includes an optimization component adapted to obtain information relating to utilization by the compute instance component of the allocated storage resources determine that a change to the allocated storage resources is necessary based on the information cause data to be migrated from a first storage resource associated with a first performance class to the second storage resource associated with a second storage class and cause a removal from the allocated storage resources of the first storage resource and an addition to the allocated storage resources of the second storage resource.

In one embodiment each storage resource includes one of a hard disk drive a solid state drive a flash memory device a tape drive and an optical storage device. Alternatively each storage resource may include storage space on one of a hard disk drive a solid state drive a flash memory device a tape drive and an optical storage device.

In another embodiment the first performance class is associated with a first measure of input output operations per second IOPS and the second performance class is associated with a second measure of IOPS lower than the first measure of IOPS.

In another embodiment the information includes one of data relating to allocated storage capacity used storage capacity input output operations per second IOPS .

In another embodiment the first performance class is associated with a first measure of bandwidth and the second performance class is associated with a second measure of bandwidth different from the first measure of bandwidth.

In another embodiment the first performance class is associated with a first measure of latency and the second performance class is associated with a second measure of latency different from the first measure of latency.

In accordance with another embodiment a system for allocating access to storage devices distributed within a network is provided. The system includes a plurality of storage devices distributed within a network each storage device associated with one of a plurality of performance classes and a compute instance component having access to allocated storage devices the allocated storage devices including one or more of the plurality of storage devices. The system also includes an optimization component adapted to obtain information relating to utilization by the compute instance component of the allocated storage devices determine that a change to the allocated storage devices is necessary based on the information cause data to be migrated from a first storage device associated with a first performance class to a second storage device associated with a second performance class and cause a removal from the allocated storage devices of the first storage device and an addition to the allocated storage devices of the second storage device.

In one embodiment each storage device includes one of a hard disk drive a solid state drive a flash memory device a tape drive and an optical storage device.

In another embodiment the system also includes an agent component residing on the compute instance wherein the agent component is adapted to obtain the information and transmit the information to the optimization component.

In another embodiment the system also includes a server computer. The compute instance component resides and operates on the server computer.

In another embodiment the first performance class is associated with a first measure of input output operations per second IOPS and the second performance class is associated with a second measure of IOPS lower than the first measure of IOPS.

In another embodiment the information includes one of data relating to allocated storage capacity used storage capacity input output operations per second IOPS .

In another embodiment the first performance class is associated with a first measure of bandwidth and the second performance class is associated with a second measure of bandwidth different from the first measure of bandwidth.

In another embodiment the first performance class is associated with a first measure of latency and the second performance class is associated with a second measure of latency different from the first measure of latency.

In accordance with another embodiment a system for allocating access to storage resources distributed within a network is provided. The system includes a plurality of storage resources distributed within a network each storage resource associated with one of a plurality of performance classes and a compute instance component having access to allocated storage resources the allocated storage resources including one or more of the plurality of storage resources. The system also includes an optimization component adapted to obtain information relating to utilization by the compute instance component of the allocated storage resources determine that a change to the allocated storage resources is necessary based on the information cause data to be migrated from a first storage resource associated with a first performance class to a second storage resource associated with a second performance class and cause a removal from the allocated storage resources of the first storage resource and an addition to the allocated storage resources of the second storage resource.

In accordance with another embodiment a device includes a processor a memory adapted to store data and an optimization component communicatively coupled to the memory. The optimization component is adapted to receive information relating to utilization by a compute instance operating within a network of allocated storage resources the allocated storage resources including a first storage resource associated with a first performance class and a second storage resource associated with a second performance class. The optimization component is also adapted to determine that a change to the allocated storage resources is necessary based on the information and cause a removal from the allocated storage resources of the first storage resource and an addition to the allocated storage resources of the second storage resource.

In one embodiment the information includes one of data relating to allocated storage capacity used storage capacity input output operations per second IOPS .

In another embodiment the first performance class is associated with a first measure of input output operations per second IOPS and the second performance class is associated with a second measure of IOPS lower than the first measure of IOPS.

In another embodiment a system includes a plurality of processing resources one or more first storage resources associated with a first performance class each storage resource including a first storage device associated with the first performance class and one or more second storage resources associated with a second performance class each storage resource including a second storage device associated with the second performance class. Each processing resource may include a CPU for example. Each storage resource may include a storage device or storage system for example. The system also includes a first server device that includes a compute instance having access to a specified processing capacity and to a specified storage capacity an application residing on the compute instance and a cloud manager component. The cloud manager component is adapted to allocate to the compute instance one or more processing resources among the plurality of processing resources based on the specified processing capacity and allocate a first set of storage resources to the compute instance based on the specified storage capacity the first set of storage resources including at least one of the one or more first storage resources and one of the one or more second storage resources. The system also includes a second server device that includes an optimization component. The optimization component is adapted to obtain storage resource utilization data relating to utilization by the compute instance of the allocated storage resources determine that a change to the allocated storage resources is necessary based on the storage resource utilization data and cause the cloud manager component to allocate a second set of storage resources to the compute instance the second set of storage resources including at least one of the one or more first storage resources and one of the one or more second storage resources the second set of storage resources being different from the first set of storage resources.

In accordance with another embodiment a method is provided. An agent component is installed on a compute instance residing in a cloud services system the compute instance including a specified processing capacity and a specified storage capacity wherein one or more processing resources in the cloud services system are allocated to the compute instance and one or more storage resources in the cloud services system are allocated to the compute instance wherein the one or more storage resources have a second storage capacity. Information relating to utilization by the compute instance of the one or more storage resources allocated to the compute instance is received from the agent component. A third storage capacity actually utilized by the compute instance is determined based on the information. A difference between the third storage capacity actually utilized by the compute instance and the second storage capacity of the one or more storage resources allocated to the compute instance is determined. An adjustment to an allocation of storage resources associated with the compute instance is caused based on the difference.

In another embodiment the third storage capacity actually utilized by the compute instance is less than the second storage capacity of the one or more storage resources allocated to the compute instance. A second allocation of one or more second storage resources to the compute instance is caused. Data is migrated by the agent component from the one or more storage resources to the one or more second storage resources. A removal of the one or more storage resources from the allocation of storage resources associated with the compute instance is caused.

In another embodiment the third storage capacity actually utilized by the compute instance is greater than the second storage capacity of the one or more storage resources allocated to the compute instance. A second allocation of one or more second storage resources to the compute instance is caused.

In accordance with another embodiment a system for allocating access to storage resources distributed within a network is provided. The system includes a plurality of processing resources distributed within a network and a plurality of storage resources distributed within the network. Each storage resource is associated with one of a plurality of performance classes. The system also includes a compute instance component having access to allocated processing resources and to allocated storage resources. The allocated storage resources include one or more of the plurality of storage resources. The system also includes an optimization component adapted to obtain information relating to utilization by the compute instance component of the allocated storage resources determine that a change to the allocated storage resources is necessary based on the information cause data to be migrated from a first storage resource associated with a first performance class to a second storage resource associated with a second performance class and cause a removal from the allocated storage resources of the first storage resource and an addition to the allocated storage devices of the second storage resource.

A determination that a change to allocated storage devices or allocated storage resources may be made based on criteria relating to comparisons between actual and expected utilization of storage resources and or data cost considerations an expected data life cycle prioritization of a first type of data relative to a second type of data and other factors.

In other embodiments a first performance class may be associated with a first performance attribute defining an aspect of performance of a storage resource e.g. a specific storage capacity a specific cost a specific IOPS a specific latency a specific bandwidth etc. . In one embodiment allocated storage resources include one or more storage resources having the first performance attribute. The optimization module may determine that a change to the allocated storage resources is necessary for example in response to a determination that a discrepancy mismatch inconsistency or conflict exists between the first performance attribute and the actual utilization of the allocated storage resources. For example the optimization module may determine that the first performance attribute does not satisfy requirements associated with actual utilization of the allocated storage resources. Alternatively the optimization module may determine that a change to the allocated storage resources is necessary based on a determination that a measure of actual utilization of the first performance attribute is less than a predetermined threshold. In response to the determination a storage resource having a second performance attribute may be added to the allocated storage resources.

These and other advantages of the present disclosure will be apparent to those of ordinary skill in the art by reference to the following Detailed Description and the accompanying drawings.

Devices systems apparatus and methods for transparent and automatic optimization of storage resource allocation in a cloud services system are provided. Systems and methods described herein may be implemented using a single device having a plurality of storage resources and or using a plurality of devices within a network in which storage resources are distributed.

In accordance with an embodiment a cloud services system includes a plurality of processing resources which may be CPU resources for example and a plurality of storage resources. A compute instance having a specified processing capacity and a specified storage capacity is generated and operates within the cloud services system. One or more CPU resources are allocated to the compute instance and one or more storage resources are allocated to the compute instance. The allocated storage resources have a second storage capacity. An agent component is installed on the compute instance. An optimization module also referred to as an optimization component receives from the agent component storage resource utilization information relating to utilization by the compute instance of the storage resources allocated to the compute instance. The optimization module adjusts the allocation of storage resources to the compute instance based on the storage resource utilization information. For example a difference between a third storage capacity actually utilized by the compute instance and the second storage capacity of the storage resources allocated to the compute instance may be determined and the allocation of storage resources to the compute instance may be adjusted based on the difference.

Cloud services systems offering on demand allocation of processing and storage resources allow users to allocate only the amount of resources that are expected to be required by a particular application. For example a user of a particular database application can forecast the maximum storage capacity that will be needed and allocate storage capacity to meet that requirement and no more . In a specific example if a user expects a particular database application to need a maximum storage capacity of 300 GB the user can request an allocation of 300 GB of storage capacity for the database application. The cloud services system then allocates 300 GB for the application. This on demand capability enables users to avoid expenditures for processing and storage capacity that will most likely never be used.

However in many cases the determination of an application s capacity requirements constitutes merely a forecast of the application s maximum capacity made at the time the application and an associated virtual machine are first installed. The practice of requiring a user to specify a storage capacity requirement for an application at the time the application and associated virtual machine are first installed fails to take into account the probability that storage requirements will vary over the application s life cycle. In many cases storage capacity is significantly over provisioned in the beginning of the application s life when the application has few users and or has not yet generated and or stored large quantities of data and becomes under provisioned at a later stage in the application s life cycle as data accumulates and the allocated storage capacity becomes fully utilized .

Early in an application s life cycle a user may be wasting resources and money if the processing and storage resources allocated to the application are under utilized and thus over provisioned . Referring to the specific example introduced above while the user may have 300 GB allocated for an application and therefore is paying for 300 GB at an early stage in the application s life cycle the user may only be using 50 GB.

Later in an application s life cycle when the application s allocated storage capacity becomes fully utilized it is often difficult time consuming and costly to reconfigure the system to add more storage capacity. In existing cloud services systems reconfiguring a cloud services system to increase an application s allocated storage capacity requires downtime and careful planning. Existing cloud services systems do not provide an easy mechanism for users to provision storage capacity on a need basis and to pay only for the storage capacity that is actually used.

For example provisioning storage resources for a Logical Volume Manager LVM must be done manually by executing a series of commands and therefore requires significant Linux expertise and requires downtime. Furthermore it is very difficult to reduce allocated storage capacity in a thin provisioned LVM.

In addition in many cases different types of data require different types of treatment. Some data is accessed frequently or is of high importance and must be stored in a high performance storage medium allowing instantaneous access while other data may be rarely accessed or is of low importance and can be archived in a lower performance storage medium. Furthermore some types of data may have a life cycle that affects how often it is accessed. For example some data is accessed frequently for a short time period after being stored and then is rarely accessed later. It may be desirable to store such data initially in a high performance storage medium and in a lower performance storage medium at a later time.

Many existing cloud service systems provide different types of storage media and allow a user to select the type of storage medium to be used to store the user s data. For example a first class of storage devices may have higher performance characteristics while a second class of storage devices may have lower performance characteristics. Typically a user may select the type of storage medium to be used at the time storage capacity is allocated for the user s application. However existing cloud service systems do not enable a user to adjust the allocation of storage capacity among different types of storage media as the utilization of data evolves over time. A need exists for improved systems apparatus and methods for allocating storage resources in a cloud service system.

Downtime can be particularly costly for many businesses and organizations. In many industries business continuity is critical. As a result there is a need for systems and methods that allow re allocation of storage resources and migration of data as necessary without any downtime.

Developing systems apparatus and methods for re allocating storage resources and migrating data within a cloud services system without the need for downtime requires a thorough knowledge of data storage devices data storage systems and data storage protocols. Such knowledge is typically held by traditional storage system vendors who are not typically in the business of providing cloud services. Cloud service providers on the other hand typically are companies with experience providing Internet related services and do not typically have access to such knowledge and therefore are not in a position to develop such solutions and have not done so . For these and other reasons systems apparatus and methods for re allocating storage resources and migrating data within a cloud services system without the need for downtime have not been developed.

Systems apparatus and methods for managing the allocation of storage resources in a cloud service system are provided herein. Advantageously the systems apparatus and methods described herein allow the allocation of storage resources in a cloud service system to be automatically adjusted based on actual utilization of storage resources without the need for downtime or interruption and without the need for user input. Therefore the systems apparatus and methods described herein provide novel improvements to the performance of a cloud services system.

System includes a network and a plurality of processing resources and a plurality of storage resources. In the illustrative embodiment the plurality of processing resources includes a plurality of CPU resources A B C D E F etc. while the plurality of storage resources include a plurality of storage class I resources A B C etc. and a plurality of storage class II resources A B C etc. System also includes a cloud manager .

Network may include one or more of a number of different types of networks such as for example an Internet an intranet a local area network LAN a wide area network WAN a Fibre Channel network a storage area network SAN or a wireless network. Other networks may be used. Alternatively network may include a combination of different types of networks.

Each CPU resource represents a predetermined amount of processing capacity. For example each CPU resource may be a central processing unit having a selected processing capacity. Alternatively each CPU resource may include a plurality of central processing units. In another embodiment each CPU resource may be a virtual central processing unit Virtual CPU . While six CPU resources are shown in any number of CPU resources may be used in a system of cloud services resources.

System includes a plurality of storage resources A B C of a first class and a plurality of storage resources A B C of a second class. Storage resources are differentiated by one or more selected characteristics such as cost attributes data life cycle attributes and or performance attributes. For example storage class I resources may be storage resources having a first cost characteristic e.g. low cost while storage class II resources may be storage resources having a second cost characteristic e.g. high cost . Alternatively storage class I resources may be storage resources associated with a first stage of a data life cycle e.g. high instantaneous availability while storage class II resources may be storage resources associated with a second stage of a data life cycle e.g. low delayed availability .

In the illustrative embodiment storage class I resources are storage resources having a first set of performance characteristics and storage class II resources are storage resources having a second set of performance characteristics different from the first set of performance characteristics . In various embodiments performance characteristics used to differentiate classes of storage may include latency e.g. the time required for a storage device to respond to an I O request I Os per second IOPS bandwidth e.g. the amount of data that can be stored retrieved by a storage device per second etc.

While only two classes of storage resources are illustrated in the Drawings in other embodiments a system of resources may include more than two classes of storage resources.

Thus in the illustrative embodiment of each storage class I resource represents a predetermined amount of storage capacity having a first set of performance characteristics. Similarly each storage class II resource represents a predetermined amount of storage capacity having a second set of performance characteristics different from the first set of performance characteristics . For example each storage class I resource may represent a predetermined amount of storage capacity having a first relatively low bandwidth while each storage class II resource represents a predetermined amount of storage capacity having a second relatively high bandwidth. Each storage resource may include all of the storage capacity of a storage device or a portion of the capacity of a storage device. For example each storage resource may include all or a portion of the storage space on a hard disk drive a solid state drive a storage area network SAN a flash memory device a tape drive an optical storage device or another type of storage device or system.

Cloud manager provisions CPU resources storage class I resources and storage class II resources to users. For example cloud manager may provision resources based on one or more predetermined policies. Cloud manager is typically maintained and controlled by the cloud services provider.

CPU resources and storage resources may be arranged in any suitable arrangement. For example all CPU resources may reside in a single computer or each CPU resource may reside in a different respective computer. Similarly all storage resources and may reside in a single storage device or storage system. Alternatively each storage resource may reside in a different respective storage device or storage system.

CPU resources A B and C reside in first server . CPU resources D E and E reside in second server . First server and second server are connected to network .

Storage class I resources A B reside and operate in storage device . Storage class I resource C resides and operates in storage device . For example each storage device may be a disk drive capable of providing performance commensurate with the performance characteristics of storage class I storage resources. In another embodiment each storage device may include a storage system capable of providing performance commensurate with the performance characteristics of storage class I storage resources. For example each storage device may include a hard disk drive a solid state drive a storage area network SAN a flash memory device a tape drive an optical storage device or another type of storage device or system.

Storage class II resources A B reside and operate in storage device . Storage class II resource C resides and operates in storage device . For example each storage device may be a disk drive capable of providing performance commensurate with the performance characteristics of storage class II storage resources. In another embodiment each storage device may include a storage system capable of providing performance commensurate with the performance characteristics of storage class II storage resources. For example each storage device may include a hard disk drive a solid state drive a storage area network SAN a flash memory device a tape drive an optical storage device or another type of storage device or system.

In the illustrative embodiment a user application communicates with cloud manager via network . User application may be any type of software application such as a database a webserver a big data analytics application etc. User application stores data on storage resources and or storage resources . For example in an illustrative example user application may be a data analytics application utilized by a customer or user. The data analytics application collects relevant data and stores the data in a database maintained on storage resources or on storage resources . The data analytics application subsequently reads data from the database analyzes the data by applying various requirements and produces output in a particular format which is stored in a separate database.

In one embodiment user application is software application provided by the cloud services system for use by a customer or user. In other embodiments user application is provided by the customer of the cloud services system or by a third party. User application typically runs on top of an operating system such as Linux Windows etc.

User application submits to cloud manager a request for a specified amount of processing capacity and a specified amount of storage capacity. In the illustrative embodiment user application requests an amount of processing capacity specified as X and an amount of storage capacity specified as Y. The user may also specify one or more desired performance characteristics for the storage capacity including latency IOPS bandwidth etc. In some embodiments the user application may specify what type of storage is requested for example the request may specify that all of the storage capacity is to be class I or may specify that all of the storage capacity is to be class II or that a combination of class I storage and class II storage is desired.

Cloud manager receives the request from user application and in response to the request generates a compute instance. Cloud manager also allocates CPU resources and storage resources to the compute instance based on the specified amount of processing capacity and the specified amount of storage capacity indicated by the request. In the illustrative embodiment cloud manager generates a compute instance and allocates a processing capacity X and a storage capacity Y to compute instance .

In some embodiments a cloud service provider may use server virtualization technologies to allocate virtual CPUs. Cloud services may be built on top of server virtualization. Server virtualization allows a physical computer to be used as one or more virtual machines and maximizes computer resource utilization. Server virtualization is achieved using a thin software layer hypervisor and appropriate hardware CPUs etc .

In some embodiments storage virtualization technologies are used for provisioning storage resources. Storage virtualization allows consolidation of physical storage resources into virtual storage pools. Storage resources of any size are then allocated from the virtual storage pools. The storage resources are attached to CPU resources using virtualized networks.

In some embodiments Application Programming Interface API enables third party developers to create a compute instance and storage resources. For example in one embodiment cloud manager may call aws create instance to create a compute instance. Additional parameters may be passed to other commands to specify CPU resources and storage resources .

Cloud manager allocates a sufficient number of CPU resources to compute instance to provide the requested processing capacity X. After certain CPU resources have been allocated to compute instance compute instance may access and utilize the allocated CPU resources. Referring to allocations of CPU resources are represented by links . Thus links indicate that CPU resources D E and F are allocated to compute instance . In the illustrative example CPU resources A B and C are not allocated to compute instance .

Similarly cloud manager allocates a sufficient number of storage resources to provide the requested storage capacity Y. If the user application requested a particular class of storage resources cloud manager complies with the request and allocates the requested type of storage resource to compute instance . After certain storage resources have been allocated to compute instance compute instance may access and utilize the allocated storage resources. Referring to allocations of storage resources are indicated by links . Thus links indicate that storage resources A B C and A B and C are allocated to compute instance .

Compute instance is a virtual machine and appears to a user and to user application as a device or system having the specified amount of processing capacity and the specified amount of storage capacity and performance. Compute instance is associated with user application . Accordingly user application may access compute instance and utilize the resources that are associated with compute instance . In some embodiments compute instance is constructed such that user application resides and operates on compute instance .

In accordance with an embodiment a cloud services system includes an optimization module adapted to optimize the utilization of storage resources by a compute instance. For this purpose an agent is installed in the compute instance. The agent monitors utilization of storage resources by the compute instance. The agent collects storage resource utilization data and provides the information to the optimization module. The optimization module analyzes the utilization of storage resources by the compute instance and adjusts the allocation of storage resources to the compute instance based on one or more optimization policies.

In one embodiment the customer or user installs the agent on the compute instance. In other embodiments another entity or another component may install an agent on the compute instance.

Optimization module collects information concerning utilization by a compute instance of storage resources allocated thereto and may from time to time adjust the allocation of storage resources to optimize the utilization of resources. In order to facilitate the collection of storage resource utilization data optimization module communicates with the agent residing on a compute instance. Optimization module may require registration of a compute instance prior to installation of an agent and collection of storage resource utilization data.

In other embodiments an agent may be installed in a compute instance by cloud manager or by another component. For example cloud manager may install an agent on the compute instance when the compute instance is created.

In the illustrative embodiment of an agent is installed in compute instance . Agent monitors utilization of storage resources by compute instance . Agent communicates with optimization module . In particular agent collects storage resource utilization data and provides the storage resource utilization data to optimization module . Storage resource utilization data may include data indicating or relating to allocated capacity used capacity and I Os per second of storage resources . Allocated capacity is the total capacity provisioned by the cloud service provider. Allocated capacity is typically measured in Gigabytes GB Terabytes TB or Petabytes PB . Used capacity is space used by applications such as user applications to store data. Typically applications use file systems such as ext4 xfs zfs on Linux or NTFS on Windows to organize and store data. Used capacity includes user data and the metadata overhead from file systems. I Os per second measures the number of read write I O operations to storage resources. Higher IOPS are associated with storage resources with higher performance capability. Typically magnetic disk systems may be associated with a few hundred IOPS per magnetic disk solid state disks are associated with more than 10 000 IOPS.

Historical IOPS information is also collected from the agent. Historical IOPS information is used to determine whether a performance based optimization action i.e. an adjustment to the allocation of storage resources is needed. For example if the maximum IOPS utilization is below a predetermined limit over a selected period e.g. a period of three 3 days optimization module may determine that a storage resource allocation adjustment may be required.

In accordance with an embodiment optimization module analyzes the utilization of storage resources by compute instance and adjusts the amount and or type of storage resources allocated to compute instance based on one or more optimization policies. Advantageously adjustments to the allocation of storage resource capacity and or type are performed transparently and automatically and without user input in such a manner that neither the customer user nor user application is aware of the adjustment s .

As discussed above CPU resources and storage resources may be arranged in any suitable arrangement. Similarly cloud manager optimization module user application and compute instance may be arranged in any suitable arrangement. For example cloud manager optimization module user application and compute instance may reside and operate on a single computer. Alternatively each of these components may reside and operate independently on a different respective computer.

System also includes a fourth server and a fifth server each of which is connected to network . Optimization module resides and operates in fourth server . User application and compute instance reside in fifth server . Each of fourth server and fifth server may be a server computers or another type of processing device for example.

In the illustrative embodiment of user application runs on compute instance . In other embodiments user application runs separately from compute instance .

In another embodiment components including CPU resources storage resources an optimization component and one or more compute instances each having a respective agent component reside in a single server computer or other processing device. Such an arrangement may be used to provide storage resources within a cloud services system for example. shows an arrangement of CPU resources storage resources storage resources cloud manager optimization module user application and compute instance in accordance with another embodiment. A cloud services system includes server in which cloud manager resides and operates. Cloud services system also includes a server which includes CPU resources storage resources storage resources and optimization module . Cloud services system further includes a plurality of clients including clients A B etc. Each client may be a computer a processing device a software application etc. Each respective client utilizes a respective user application residing and operating in server . Cloud manager creates a respective compute instance for each client.

Thus in the illustrative embodiment client A utilizes user application and cloud manager generates compute instance for client A. Compute instance resides and operates on server and has processing capacity X and storage capacity Y . User application resides in compute instance and uses the resources of compute instance . Cloud manager allocates CPU resource D and storage resource A to compute instance . Agent is installed on compute instance . In a manner similar to that described herein optimization module communicates with agent collects and monitors storage resource utilization information relating to utilization by compute instance of its storage resources and may adjust the allocation of storage resources in order to optimize the utilization of such resources.

Similarly client B utilizes a user application that resides and operates on server . Cloud manager generates a compute instance for client A. Compute instance resides and operates on server and has processing capacity X and storage capacity Y . User application resides and operates in compute instance and uses the resources of compute instance . Cloud manager allocates CPU resource A and storage resource B to compute instance . An agent is installed on compute instance . In a manner similar to that described herein optimization module communicates with agent collects and monitors storage resource utilization information relating to utilization by compute instance of its storage resources and may adjust the allocation of storage resources in order to optimize the utilization of such resources.

Database stores various types of data. In other embodiments optimization module may store data in other forms and using other techniques. For example data may be stored in the form of files or objects.

Registration information for various compute instances is stored as compute instance registration information . Thus optimization module maintains information for each compute instance that it is currently monitoring.

Storage resource utilization data relating to various compute instances is stored as storage resource utilization data . Thus when optimization module receives storage resource utilization data from agent the storage resource utilization data is stored in database .

Policy engine applies one or more predetermined rules to the storage resource utilization data obtained from agent to determine whether or not storage resources currently allocated to a compute instance are over allocated or under allocated and or if a different class or type of storage resource should be allocated to the compute instance. Rules may be established by an administrator or other person or entity for example. In the illustrative embodiment of rules are stored in database as rules . Advantageously because rules are stored within database and separately from policy engine the rules may be modified independently of policy engine . In another embodiment rules may be contained within policy engine itself.

The rules applied by policy engine may reflect any goals or priorities desired by an administrator manager owner or other entity. Rules may be few or numerous. For example in one embodiment rules may be established to reduce costs associated with data storage. In another embodiment rules may be established to prioritize access to certain types of data over access to other types of data. In another embodiment rules may be established to optimize the security of certain data. In another embodiment rules may be established to maximize safety and redundancy of data. Several examples of rules that may be used are described herein however these examples are illustrative only and are not limiting.

In some embodiments a user may provide input that is then used to define certain rules. For example a user may specify a percentage of allocated storage capacity to be used to determine whether or not storage capacity is overallocated. Similarly a user may specify a threshold to be used to determine if storage capacity is underallocated. Other criteria may be specified by a user.

Advantageously during operation policy engine analyzes storage resource utilization data applies rules to the storage resource utilization data and makes determinations as to underallocation of resources overallocation of resources etc. in a transparent manner and without user input. Such analysis and determinations are made transparently and automatically in such a manner that neither the customer user nor user application is aware of the analysis or of any determination resulting from the analysis.

In other embodiments rules intended to reduce the costs associated with data storage may be defined. Such rules may be defined by a user by an administrator or by default. For example a rule may specify that if a high cost data resource allocated to a compute instance receives less than a predetermined number of I O requests then the storage resources are over allocated and a lower cost storage resource should be allocated and the data should be migrated to the lower cost storage resource.

In another embodiment rules intended to address the expected life cycle of stored data may be defined. Such rules may be defined by a user by an administrator or by default. Supposing for example that a particular user application runs on a particular compute instance to which a high performance storage resource is initially allocated a rule may specify that after a predetermined period e.g. one year a lower performance storage resource should be allocated and the data stored in the higher performance storage resource should be migrated to the lower performance storage resource and that the higher performance storage resource should then be de allocated.

In accordance with an embodiment allocated storage resources are adjusted in response to a determination that allocated storage capacity is over provisioned. include a flowchart of a method of adjusting allocated storage resources in response to a determination that allocated storage resources are over provisioned in accordance with an embodiment. The method of is discussed with reference to .

Referring to at step a request for a compute instance having a specified processing capacity and a specified storage capacity is received. At step a compute instance having the specified processing capacity and the specified storage capacity is generated in response to the request.

In the illustrative embodiment a user application submits to cloud manager a request for a compute instance having processing capacity X and storage capacity Y. Cloud manager receives the request and in response generates a compute instance having a processing capacity X and a storage capacity Y .

Cloud manager determines that CPU resources A B C are sufficient to provide the specified amount of processing capacity and therefore allocates CPU resources A B C to compute instance . Thus processing capacity X of compute instance is associated with CPU resources A B C. The allocation of CPU resources is represented in by links .

Cloud manager determines that storage resources B C and D are sufficient to provide the desired storage capacity and therefore allocates storage resources B C and D to compute instance . Thus storage capacity Y of compute instance is associated with storage resources B C and D. The allocation of storage resources is represented in by links . In this illustrative embodiment storage resource A is not at this time allocated to compute instance . Also in this illustrative embodiment only Class I storage resources are allocated to compute instance .

At step a compute instance is registered with an optimization module. Compute instance submits a request for registration. In response optimization module registers compute instance .

At step an agent is installed in the compute instance. For example agent may be installed in compute instance by a customer or user. Agent begins to monitor the utilization by compute instance of storage resources B C and D. Agent transmits the storage resource utilization data to optimization module .

At step the optimization module collects and stores storage resource utilization data concerning the utilization by the compute instance of first storage resources currently allocated to the compute instance. In the illustrative embodiment optimization module receives from agent storage resource utilization data indicating utilization by compute instance of storage resources B C and D and stores the storage resource utilization data in database .

At step the optimization module determines whether the first storage resources currently allocated to the compute instance are over provisioned based on the storage resource utilization data. In the illustrative embodiment policy engine of optimization module applies predetermined rules to determine whether the storage resources allocated to compute instance are over provisioned. For example policy engine may apply the rules shown in to determine whether the storage capacity actually used by compute instance is less than the storage capacity of storage resources B C and D which are allocated to compute instance .

In accordance with block if the first storage resources currently allocated to the compute instance are not over provisioned the routine returns to step and optimization module continues to collect and monitor storage resource utilization data. If the first storage resources currently allocated to the compute instance are over provisioned the routine proceeds to step . Supposing that policy engine of optimization module determines that the storage capacity actually used by compute instance is less than the storage capacity of storage resources B C and D policy engine therefore concludes that the first storage resources currently allocated to compute instance are over provisioned and proceeds to step .

At step second storage resources that have a storage capacity lower than that of the first storage resources are allocated to the compute instance. Preferably second storage resources having a storage capacity lower than that of the first storage resources and equal to or greater than the storage capacity actually utilized by the compute instance are allocated to the compute instance. In the illustrative embodiment optimization module communicates with cloud manager and causes cloud manager to allocate storage resource A to compute instance . For example cloud manager may provide APIs that can be used for resource allocation optimization module uses the APIs to interact with cloud manager and request that storage resource A be allocated to compute instance . As a result storage resource A B C and D are now allocated to compute instance .

In the illustrative embodiment storage resource A has a storage capacity lower than the total storage capacity of storage resources B C and D.

At step the optimization module informs the agent that the second storage resources have been allocated to the compute instance. Policy engine of optimization module informs user mode module of agent that storage resource A has been allocated to compute instance . User mode module of agent instructs kernel driver of agent to utilize the newly allocated storage resource A.

At step the agent migrates data stored on the first storage resources to the second storage resources. In the illustrative embodiment kernel driver of agent migrates the data stored in storage resources B C and D to storage resource A. When the migration is complete kernel driver of agent notifies user mode module of agent .

Advantageously the allocation of the second storage resources and the migration of data from the first storage resources to the second storage resources are performed transparently automatically and without user input in such a manner that neither the user nor user application is aware of the allocation of the second storage resources or of the migration of data.

At step the compute instance stops using the first storage resources to store data and begins to use the second storage resources to store data after the migration of data from the first storage resources to the second storage resources is complete. In the illustrative embodiment compute instance stops storing data in storage resources B C and D and stores new data in storage resource A.

At step the agent informs the optimization module when the migration is complete. User mode module of agent now informs optimization module that the migration is complete.

At step the optimization module causes the cloud manager to remove the first storage resources from the allocated storage resources of the compute instance. Optimization module causes cloud manager to de allocate remove storage resources B C and D from the set of storage resources allocated to compute instance . In response cloud manager de allocates removes storage resources B C and D from the set of storage resources that are allocated to compute instance . For example optimization module may use APIs provided by cloud manager to request that cloud manager remove storage resources B C. D from the set of storage resources allocated to compute instance .

Advantageously the de allocation of storage resources B C and D is performed transparently automatically and without user input in such a manner that neither the user nor user application is aware of the de allocation.

The routine now returns to step and the optimization module resumes monitoring the utilization of allocated storage resources by the compute instance. Agent now monitors the utilization by compute instance of its allocated storage resources i.e. storage resource A and transmits storage resource utilization data to optimization module . Optimization module continues to analyze the storage resource utilization data and may further adjust the allocation of storage resources as necessary to optimize the utilization thereof.

In accordance with an embodiment allocated storage resources are adjusted in response to a determination that allocated storage resources are under provisioned. include a flowchart of a method of adjusting allocated storage resources in response to a determination that allocated storage resources are under provisioned in accordance with an embodiment. The method of is discussed with reference to .

Referring to at step a request for a compute instance having a specified processing capacity and a specified storage capacity is received. At step a compute instance having the specified processing capacity and the specified storage capacity is generated in response to the request.

In the illustrative embodiment a user application submits to cloud manager a request for a compute instance having processing capacity X and storage capacity Y. In response to the request cloud manager generates a compute instance having a processing capacity X and a storage capacity Y .

Cloud manager determines that CPU resources B and C are sufficient to provide the specified amount of processing capacity and therefore allocates CPU resources B and C to compute instance . Thus processing capacity X of compute instance is associated with CPU resources B and C. The allocation of CPU resources is represented in by links . In this illustrative embodiment CPU resource A is not allocated to compute instance .

Cloud manager determines that storage resources C and D are sufficient to provide the desired storage capacity and therefore allocates storage resources C and D to compute instance . Thus storage capacity Y of compute instance is associated with storage resources C and D. The allocation of storage resources is represented in by links . In this illustrative embodiment only Class I storage resources are allocated to compute instance .

At step a compute instance is registered with an optimization module. Compute instance submits a request for registration. In response optimization module registers compute instance .

At step an agent is installed in the compute instance. For example a customer or user may install agent on compute instance . Agent begins to monitor the utilization by compute instance of storage resources C and D. Agent transmits the storage resource utilization data to optimization module via network for example .

At step the optimization module collects and stores storage resource utilization data concerning the utilization of first storage resources currently allocated to the compute instance. In the illustrative embodiment optimization module receives from agent storage resource utilization data concerning the utilization by compute instance of storage resources C and D and stores the storage resource utilization data in database .

At step the optimization module determines whether the first storage resources currently allocated to the compute instance are under provisioned based on the storage resource utilization data. For example in the illustrative embodiment policy engine of optimization module may apply the rules shown in to determine whether the storage resources allocated to compute instance are under provisioned. Specifically policy engine determines whether the storage capacity actually used by compute instance is greater than the storage capacity of storage resources C and D which are allocated to compute instance .

In accordance with block if the first storage resources currently allocated to the compute instance are not under provisioned the routine returns to step . If the first storage resources currently allocated to the compute instance are under provisioned the routine proceeds to step . Supposing that policy engine of optimization module determines that the storage capacity actually used by compute instance is greater than the storage capacity of storage resources C and D policy engine therefore concludes that the first storage resources currently allocated to compute instance are under provisioned and proceeds to step .

At step second storage resources which when added to the first storage resources currently allocated to the compute instance produce a storage capacity equal to or greater than the storage capacity actually utilized by the compute instance are allocated to the compute instance. In the illustrative embodiment optimization module communicates with cloud manager and causes cloud manager to allocate storage resource A and storage resource B to compute instance . For example optimization module may use APIs provided by cloud manager to request that cloud manager allocate storage resource A and B to compute instance . As a result now storage resources A B C and D are all allocated to compute instance .

At step the optimization module informs the agent that the second storage resources have been allocated to the compute instance. Policy engine of optimization module informs user mode module of agent that storage resource A and B have been allocated to compute instance . User mode module of agent instructs kernel driver of agent to utilize the newly allocated storage resources A and B. Accordingly at step compute instance begins to use the second storage resources to store data. Subsequently compute instance utilizes storage resources A B C and D.

Advantageously the allocation of second storage resources is performed transparently automatically and without user input in such a manner that neither the user nor user application is aware of the allocation of the second storage resources.

The routine now returns to step and the optimization module resumes monitoring the utilization of allocated storage resources by the compute instance. Agent now monitors the utilization by compute instance of its allocated storage resources i.e. storage resources A B C and D and transmits storage resource utilization data to optimization module . Optimization module continues to analyze the storage resource utilization data and may further adjust the allocation of storage resources as necessary to optimize the utilization thereof.

In accordance with an embodiment allocated storage resources are adjusted in response to a determination that a different type of storage resource is needed to optimize storage resource utilization. include a flowchart of a method of adjusting allocated storage resources in response to a determination that a different type of storage resource is needed to optimize storage resources utilization in accordance with an embodiment. The method of is discussed with reference to .

Referring to at step a request for a compute instance having a specified processing capacity and a specified storage capacity is received. At step a compute instance having the specified processing capacity and the specified storage capacity is generated in response to the request.

In the illustrative embodiment a user application submits to cloud manager a request for a compute instance having processing capacity X and storage capacity Y. In response to the request cloud manager generates a compute instance having a processing capacity X and a storage capacity Y .

Cloud manager determines that CPU resource A is sufficient to provide the specified amount of processing capacity and therefore allocates CPU resource A to compute instance . Thus processing capacity X of compute instance is associated with CPU resource A. CPU resources B and C are not allocated to compute instance . The allocation of CPU resource A to compute instance is represented in by link .

Cloud manager determines that storage resources C and D are sufficient to provide the desired storage capacity and therefore allocates storage resources C and D to compute instance . Thus storage capacity Y of compute instance is associated with storage resources C and D. The allocation of storage resources is represented in by links . In this illustrative embodiment storage resources A and B are not at this time allocated to compute instance . Also in this illustrative embodiment only Class I storage resources are at this time allocated to compute instance .

At step a compute instance is registered with an optimization module. Compute instance submits a request for registration. In response optimization module registers compute instance .

At step an agent is installed in the compute instance. For example a customer or user may install agent on compute instance . Agent begins to monitor the utilization by compute instance of storage resources C and D. Agent transmits the storage resource utilization data to optimization module .

At step the optimization module collects and stores storage resource utilization data concerning the utilization by the compute instance of first storage resources currently allocated to the compute instance. In the illustrative embodiment optimization module receives from agent storage resource utilization data indicating utilization by compute instance of storage resources C and D and stores the storage resource utilization data in database .

At step the optimization module determines whether a different type or class of storage resource needs to be allocated to the compute instance based on the storage resource utilization data. For example in the illustrative embodiment policy engine of optimization module may apply one or more predetermined rules e.g. the rules shown in to determine whether a higher class of storage resource needs to be allocated to compute instance . Alternatively policy engine may apply one or more predetermined rules e.g. the rules shown in to determine whether a lower class of storage resource needs to be allocated to compute instance .

Suppose in an illustrative embodiment that policy engine examines the rules shown in and examines the storage resource utilization data of compute instance and determines that a different type or class of storage resource needs to be allocated to compute instance . In particular suppose that policy engine determines that certain bandwidth requirements associated with the data stored in storage resource C require a higher bandwidth performance than storage resource C is currently capable of providing and that this data should therefore be stored in a Class II storage device instead of in a Class I storage device . Accordingly policy engine determines that a class II storage resource needs to be allocated to compute instance .

Referring to block if there is no need to allocate a different type or class of storage resource to the compute instance the routine returns to step . If a different type or class of storage resource needs to be allocated to the compute instance the routine proceeds to step . In the illustrative embodiment because policy engine has determined that a higher class of storage resources needs to be allocated to the compute instance policy engine proceeds to step .

At step second storage resources of a type or class different from the first storage resources are allocated to the compute instance. In the illustrative embodiment optimization module communicates with cloud manager and causes cloud manager to allocate storage resource A which is a Class II storage device to compute instance . For example optimization module may use APIs provided by cloud manager to request that cloud manager allocate storage resource A to compute instance . As a result storage resource A C and D are now allocated to compute instance .

Advantageously the allocation of the second storage resources is performed transparently automatically and without user input in such a manner that neither the user nor user application is aware of the allocation of the second storage resources.

At step the optimization module informs the agent that the second storage resources have been allocated to the compute instance. Policy engine of optimization module informs user mode module of agent that storage resource A has been allocated to compute instance . User mode module of agent instructs kernel driver of agent to utilize the newly allocated storage resource A.

At step the agent migrates data stored on the first storage resources to the second storage resources. In the illustrative embodiment kernel driver of agent migrates the data stored in storage resources C to storage resource A. When the migration is complete kernel driver of agent notifies user mode module of agent .

At step the compute instance stops using the first storage resources to store data and begins to use the second storage resources to store data after the migration of data from the first storage resources to the second storage resources is complete. In the illustrative embodiment compute instance stops storing data in storage resource C and begins to store data in storage resource A.

At step the agent informs the optimization module when the migration is complete. User mode module of agent now informs optimization module that the migration is complete.

At step the optimization module causes the cloud manager to de allocate remove the first storage resources from the allocated storage resources of the compute instance. Optimization module causes cloud manager to remove storage resource C from the set of storage resources allocated to compute instance . In response cloud manager removes storage resources C from the set of storage resources that are allocated to compute instance . For example optimization module may use APIs provided by cloud manager to request that cloud manager remove storage resource C from the set of storage resources allocated to compute instance .

Advantageously de allocation of the first storage resources from the set of storage resources allocated to compute instance is performed transparently and automatically and without user input in such a manner that neither the customer user nor the user application is aware of the de allocation.

The routine now returns to step and the optimization module resumes monitoring the utilization of allocated storage resources by the compute instance. Agent now monitors the utilization by compute instance of its allocated storage resources i.e. storage resources A and D and transmits storage resource utilization data to optimization module . Optimization module continues to analyze the storage resource utilization data and may further adjust the allocation of storage resources as necessary to optimize the utilization thereof.

In other embodiments a method similar to that of may be used to determine that storage resources having lower performance capabilities should be allocated to a compute instance and to allocate a storage resource having lower performance capabilities to the compute instance. Data may be migrated from a storage resources having higher performance capabilities to the new storage resource and the allocation of storage resources may be changed to include the new storage resource with lower performance capabilities and to remove the now unnecessary storage resources with higher performance capabilities.

Thus in other embodiments a first performance class may be associated with a first performance attribute defining an aspect of performance of a storage resource e.g. a specific storage capacity a specific cost a specific IOPS a specific latency a specific bandwidth etc. . In one embodiment allocated storage resources include one or more first storage resources having the first performance attribute. The optimization module may determine that a change to the allocated storage resources is necessary for example in response to a determination that a discrepancy mismatch inconsistency or conflict exists between the first performance attribute and the actual utilization of the allocated storage resources. For example the optimization module may determine that the first performance attribute does not satisfy requirements associated with actual utilization of the allocated storage resources. Alternatively the optimization module may determine that a change to the allocated storage resources is necessary in response to a determination that a measure of actual utilization of the first performance attribute is less than a first predetermined threshold or greater than a second predetermined threshold. In response to the determination a second storage resource having a second performance attribute may be added to the allocated storage resources. The one or more first storage resources may be removed from the allocated storage resources.

In other embodiments different classes of storage resources may be defined based on one or more cost attributes of the storage resources. For example a first class of storage resource having a first cost attribute e.g. higher cost and a second class of storage resource having a second cost attribute e.g. lower cost may be defined. In an illustrative embodiment storage resources from the first class of storage resources having the first cost attribute higher cost may be initially allocated to a compute instance and data is stored in the allocated storage resources. Storage resource utilization data is collected and methods similar to those of and may be used to determine whether storage resources of a different class having a different cost attribute should be allocated to the compute instance. For example a user may define one or more rules controlling whether data is to be stored in the first class of storage resource having the first cost attribute e.g. higher cost or in the second class of storage resource having the second cost attribute e.g. lower cost . After the initial allocation of storage resources having the first higher cost attribute optimization module monitors the utilization of storage resources and determines based on the rules whether a different class of storage resources should be allocated. If a determination is made that a different class of storage resources should be allocated optimization module may adjust the allocation of storage resources. For example optimization module may allocate based on the rules a second storage resource from the second class of storage resources having the second cost attribute lower cost . The allocation of storage resources is changed to include the second lower cost storage resource with the second lower cost attribute. Data may be migrated from the first storage resources having the first higher cost attribute to the second storage resources having the second lower cost attribute if necessary. The first storage resources with the first higher cost attribute may be de allocated removed if necessary.

Alternatively an initial allocation of the storage resources from the second class of storage resources having the second lower cost attribute may be made and data may then be stored in the allocated storage resources. Optimization module may then monitor the utilization of storage resources and determine based on the rules whether a different class of storage resources should be allocated. If a determination is made that a different class of storage resources should be allocated optimization module may adjust the allocation of storage resources by for example allocating storage resources from the first class of storage resources having the first cost attribute e.g. higher cost . The allocation of storage resources is changed to include the storage resources having the first higher cost attribute. If necessary data may be migrated from the storage resources having the second lower cost attribute to the storage resources having the first higher cost attribute. If necessary the storage resources with the second lower cost attribute may be de allocated.

In other embodiments different classes of storage resources may be defined based on the life cycle of data. For example a first class of storage resource offering a high level of availability of data e.g. instantaneous access a second class of storage resource offering a medium level of availability of data e.g. some delay in access and a third class of storage resource offering a low level of availability e.g. substantial delay in access may be defined. An initial allocation of storage resources may be determined and methods similar to those of and may be used to determine that storage resources having a different cost attribute should be allocated to a compute instance. For example a user may define one or more criteria controlling whether data is to be stored in a first class of storage resource having a first life cycle attribute e.g. high level of availability in a second class of storage resource having a second life cycle attribute e.g. medium level of availability or in a third class of storage resource having a third life cycle attribute e.g. low level of availability . In an illustrative embodiment an initial allocation of storage resources having the first life cycle attribute is determined and data is stored in the allocated storage resources. Optimization module may then monitor the utilization of storage resources and determine based on one or more rules whether a different class of storage resources should be allocated. Rules may be defined by a user or a default set of rules may be used for example. If a determination is made that a different class of storage resources should be allocated optimization module may adjust the allocation of storage resources by for example allocating a second storage resource having a second life cycle attribute e.g. medium level of availability . The allocation of storage resources is changed to include the second storage resource with the second life cycle attribute. Data may be migrated from the first storage resources having the first life cycle attribute to the second storage resources having the second life cycle attribute if necessary. The first storage resources with the first life cycle attribute are de allocated if necessary.

In various embodiments the method steps described herein including the method steps described in and or B may be performed in an order different from the particular order described or shown. In other embodiments other steps may be provided or steps may be eliminated from the described methods.

Systems apparatus and methods described herein may be implemented using digital circuitry or using one or more computers using well known computer processors memory units storage devices computer software and other components. Typically a computer includes a processor for executing instructions and one or more memories for storing instructions and data. A computer may also include or be coupled to one or more mass storage devices such as one or more magnetic disks internal hard disks and removable disks magneto optical disks optical disks etc.

Systems apparatus and methods described herein may be implemented using computers operating in a client server relationship. Typically in such a system the client computers are located remotely from the server computer and interact via a network. The client server relationship may be defined and controlled by computer programs running on the respective client and server computers.

Systems apparatus and methods described herein may be used within a network based cloud computing system. In such a network based cloud computing system a server or another processor that is connected to a network communicates with one or more client computers via a network. A client computer may communicate with the server via a network browser application residing and operating on the client computer for example. A client computer may store data on the server and access the data via the network. A client computer may transmit requests for data or requests for online services to the server via the network. The server may perform requested services and provide data to the client computer s . The server may also transmit data adapted to cause a client computer to perform a specified function e.g. to perform a calculation to display specified data on a screen etc.

Systems apparatus and methods described herein may be implemented using a computer program product tangibly embodied in an information carrier e.g. in a non transitory machine readable storage device for execution by a programmable processor and the method steps described herein including one or more of the steps of and or B may be implemented using one or more computer programs that are executable by such a processor. A computer program is a set of computer program instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

A high level block diagram of an exemplary computer that may be used to implement systems apparatus and methods described herein is illustrated in . Computer includes a processor operatively coupled to a data storage device and a memory . Processor controls the overall operation of computer by executing computer program instructions that define such operations. The computer program instructions may be stored in data storage device or other computer readable medium and loaded into memory when execution of the computer program instructions is desired. Thus the method steps of and or B can be defined by the computer program instructions stored in memory and or data storage device and controlled by the processor executing the computer program instructions. For example the computer program instructions can be implemented as computer executable code programmed by one skilled in the art to perform an algorithm defined by the method steps of F G H A B A B A and or B. Accordingly by executing the computer program instructions the processor executes an algorithm defined by the method steps of and or B. Computer also includes one or more network interfaces for communicating with other devices via a network. Computer also includes one or more input output devices that enable user interaction with computer e.g. display keyboard mouse speakers buttons etc. .

Processor may include both general and special purpose microprocessors and may be the sole processor or one of multiple processors of computer . Processor may include one or more central processing units CPUs for example. Processor data storage device and or memory may include be supplemented by or incorporated in one or more application specific integrated circuits ASICs and or one or more field programmable gate arrays FPGAs .

Data storage device and memory each include a tangible non transitory computer readable storage medium. Data storage device and memory may each include high speed random access memory such as dynamic random access memory DRAM static random access memory SRAM double data rate synchronous dynamic random access memory DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices such as internal hard disks and removable disks magneto optical disk storage devices optical disk storage devices flash memory devices semiconductor memory devices such as erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM compact disc read only memory CD ROM digital versatile disc read only memory DVD ROM disks or other non volatile solid state storage devices.

Input output devices may include peripherals such as a printer scanner display screen etc. For example input output devices may include a display device such as a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to computer .

Any or all of the systems and apparatus discussed herein including for example and without limitation cloud manager optimization module user application compute instance agent server server server server server CPU resources storage resources storage resources storage device storage device storage device storage device and storage system and components thereof may be implemented using a computer such as computer .

One skilled in the art will recognize that an implementation of an actual computer or computer system may have other structures and may contain other components as well and that is a high level representation of some of the components of such a computer for illustrative purposes.

The foregoing Detailed Description is to be understood as being in every respect illustrative and exemplary but not restrictive and the scope of the invention disclosed herein is not to be determined from the Detailed Description but rather from the claims as interpreted according to the full breadth permitted by the patent laws. It is to be understood that the embodiments shown and described herein are only illustrative of the principles of the present invention and that various modifications may be implemented by those skilled in the art without departing from the scope and spirit of the invention. Those skilled in the art could implement various other feature combinations without departing from the scope and spirit of the invention.

