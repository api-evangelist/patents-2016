---

title: Cross-site, TOTP-based two factor authentication
abstract: A host machine has a web browser. A user of the host machine also has a mobile device. A time-based, one-time password (TOTP) authentication scheme leverages a plug-in associated with the browser to automatically inject a received TOTP code into an element of an HTML-based TOTP authentication page, and to programmatically submit the HTML form (e.g., by mimicking the “click to submit” button on the TOTP form). Typically, the TOTP code is obtained following a successful completion of a push notification interaction between a cloud service, which stores TOTP shared secrets that are used to generate the TOTP codes, and the user of the mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596223&OS=09596223&RS=09596223
owner: LogMeIn, Inc.
number: 09596223
owner_city: Boston
owner_country: US
publication_date: 20160510
---
Two factor authentication also known as 2FA is a technology that provides identification of users by combining two different components such as something that the user knows e.g. username password PIN and something that the user possesses USB stick with a secret token a bank card a key or something that is inseparable from the user e.g. a fingerprint iris voice typing speed pattern in key press intervals etc. . If in an authentication attempt at least one of the components is missing or supplied incorrectly the user s identity is not established and access to the resource being protected by two factor authentication is denied. The something possessed by the user may be a mobile device itself.

A number of two factor authentication schemes use a Time based One time Password TOTP scheme as defined Internet RFC 6238. TOTP is an algorithm that computes a one time password from a shared secret key and the current time. TOTP is an example of a hash based message authentication code HMAC . It combines a secret key with the current timestamp using a cryptographic hash function to generate a one time password. The timestamp typically increases in 30 second intervals such that passwords generated close together in time from the same secret key are the same. In a typical two factor authentication application a user enters his private credential e.g. username and password into a website generates a one time password OTP for the site using TOTP running locally on a smartphone and types the OTP into the server as well. The server runs the same TOTP algorithm to verify the one time password entered. The approach requires that a single secret key be shared between the server and the user s device over a secure channel ahead of time.

While TOTP based two factor authentication works well to date the known solutions have been tied to individual sites and their associated mobile apps. This is cumbersome to configure and use in practice as end users have to manually enter the TOTP code. This approach also requires the user to maintain a dedicated mobile app for each site that uses the authentication scheme.

A TOTP based 2FA scheme works across web sites without requiring the end user to manually enter codes or to have a dedicated mobile app for each particular site. In this approach an end user leverages a cloud based service as a repository for maintaining and securing the TOTP secrets i.e. a TOTP shared secret per user per site that are generated as the end user interacts with various TOTP setup pages via a mobile device authenticator app. The cloud service is accessed when the end user subsequently attempts a TOTP based login from a client browser to one of the sites whose TOTP shared secret is already maintained in the repository . The client browser executes in a computing machine e.g. a laptop distinct from the end user s mobile device. To effect login the end user opens the browser to a TOTP authentication page. The TOTP based login attempt from the client browser is detected by a browser plug in and this detection initiates a push notification mechanism. In particular the browser plug in issues a request to the cloud service which responds by sending a push notification to the end user mobile device authenticator app. If the end user responds to the push notification e.g. within a given timeout the cloud service uses the TOTP secret stored in the repository to generate the TOTP code which code is then sent back to the browser plug in. The browser plug in then injects that code into an HTML login form of the TOTP authentication page and then automatically submits the form. Thus the user does not have to manually enter the TOTP code. The user is then logged in automatically to complete the process. This approach works for any site for which the cloud service maintains the TOTP shared secret for the end user. Thus the cloud service enables the end user to access secure resources without requiring manual entry of TOTP codes and by using just a single authenticator app instead of having to configure and use multiple different mobile apps across different web sites that implement this form of authentication.

The foregoing has outlined some of the more pertinent features of the subject disclosure. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed subject matter in a different manner or by modifying the subject matter as will be described.

The technique of this disclosure enables an end user to access a set of sites using a conventional TOTP based two factor authentication 2FA scheme but without requiring the user to manually enter TOTP codes in a mobile device or to configure and maintain separate mobile applications apps for each site. As used herein the term site typically refers to a website or some protected portion thereof but the reference to a site should be broadly construed to refer to any protected resource available from a server or other computing entity. Typically the end user has associated therewith both a mobile device running a mobile authenticator app as well as a second computing machine such as a laptop or desktop running a web browser. The mobile authenticator app need not be a dedicated mobile app for the site or that corresponds to the site s origin. The mobile device may be a smartphone tablet or wearable e.g. Apple iPhone and iPad tablet iWatch Google Glass and others an IoT device or appliance or the like. The mobile authenticator app be downloaded and installed via a mobile application delivery service such as the Apple App Store Google Play Store or equivalents or it may be provided as a native application on the mobile device.

Referring now to the technique of this disclosure involves a set of computing elements an end user mobile device running a generic authenticator app a computing entity running a web browser and a cloud service having an identity manager . The identity manager includes a data repository that stores TOTP secrets namely a TOTP shared secret per user per site . Each of the mobile device and are enabled to provide TOTP based 2FA. As also depicted and according to a feature of this disclosure web browser is augmented with a browser plug in that facilitates various operations to facilitate cross site TOTP based 2FA. Although a browser plug in is a preferred implementation the functions of this plug in may also be implemented in other ways e.g. an applet an ActiveX control JavaScript native code or the like. As will be seen the plug in obviates manual entry by the end user of the TOTP code thereby significantly increasing ease of authentication to sites using the described scheme.

In one non limiting embodiment the cloud service is implemented in associated with a remote access architecture such as LogMein .

According to this disclosure a TOTP based 2FA scheme works across sites without requiring the end user to manually enter TOTP codes or to have a dedicated mobile app for each particular site. In this approach an end user leverages the cloud based service as a repository for maintaining and securing the TOTP secrets i.e. a TOTP shared secret per user per site that are generated as the end user interacts with various TOTP setup pages via the generic mobile device authenticator app . The notion of generic here is not intended to be limiting it just refers to the fact that the end user need use a distinct mobile app for each site that is enabled for access using TOTP based authentication. A TOTP code typically is based on the TOTP secret and other factors such as current date and time.

The cloud service is accessed when the end user subsequently attempts a TOTP based login from the client browser to one of the sites whose TOTP shared secret is already maintained in the repository . As noted the client browser executes in a computing machine e.g. a laptop distinct from the end user s mobile device . To effect TOTP based login the end user opens the browser to a TOTP authentication page. The login attempt from the client browser is detected by the browser plug in and this detection initiates a push notification mechanism. In particular and in a preferred embodiment the browser plug in issues a request to the cloud service which responds by sending a push notification to the end user mobile device authenticator app . If the end user responds to the push notification e.g. within a given timeout the cloud service identity manager uses the TOTP secret stored in the repository to generate the TOTP code which code is then sent back to the browser plug in . Conveniently the browser plug in then automatically injects that code into an HTML login form of the TOTP authentication page and then automatically submits the form. Thus the user does not have to manually enter the TOTP code or take an affirmative physical action to even submit the form that has been filled in with the TOTP code. Rather according to this disclosure once the user responds to the push notification both the TOTP code entry and form submission occur in an automated manner under the control of the plug in. The user is then logged in automatically to complete the process.

The above described approach works for any site for which the cloud service maintains the TOTP shared secret for the end user. In this manner the cloud service enables the end user to access secure resources without tedious end user physical interaction with the mobile app. In addition the approach enables the end user to obtain these advantages using just a single authenticator app running the TOTP authentication scheme instead of having to configure and use multiple different mobile apps across different web sites that implement this form of authentication.

The routine begins at step with the user opening his or her browser to the site s TOTP authentication page which may require a previous login. At step the browser plug in detects the TOTP authentication page being rendered in the browser . At step the browser plug in calls an application programming interface API of the cloud service to request push authentication. At step the cloud service sends a push notification to the end user s mobile device authenticator app which is the same app used during the setup flow. At step the user confirms the authentication request. At step the authenticator app notifies the cloud service that the user has approved the authentication request. The cloud service then uses the stored TOTP shared secret for the user for the site to generate a TOTP code that will remain valid for a given time e.g. 30 seconds . At step the cloud service sends that TOTP code back to the browser plug in .

At step and according to this disclosure the browser plug in automatically injects the received TOTP code into the appropriate element of the HTML DOM document object model of the TOTP authentication page. Typically this element is an HTML fill in form. In this manner the user does not need to type in the TOTP code manually rather at step the browser plug in also programmatically submits the HTML form e.g. by mimicking the click to submit button on the TOTP form and by this action the user is logged in at step automatically. This completes the process for the user s TOTP authentication to this site.

Using just the single mobile device authenticator app a similar login process may then be carried out at any other site for which the cloud service maintains the TOTP shared secret for the user.

Thus according to this technique the cloud service is augmented to store a TOTP shared secret per user per site. The cloud service also is enabled e.g. through a cloud service API to send back to the browser plug in calculated TOTP codes. The authenticator app is augmented to provide the capability to call the cloud service API to store the TOTP shared secret per user per site in the cloud repository. The browser is augmented to include the browser plug in or equivalent code which provides various functions to automate and streamline the TOTP mechanism namely the ability to detect if the user is visiting a TOTP authentication page the ability to call the cloud service API to send out a push notification to the authenticator app the ability to poll the cloud service e.g. through a web API to determine if the user confirmed allowed the authentication request the ability to inject the TOTP code to the proper HTML element of the TOTP authentication page and the ability to mimic the click on submit button of the TOTP form.

Once the user selects allow thus accepting the push notification depicts that browser plug in operation by which the TOTP code is automatically populated in the HTML fill in form and the form submitted to complete the programmatic login.

The solution enables push notification based TOTP authentication even for cloud applications that do not otherwise support two factor authentication.

A mobile device comprises a CPU central processing unit computer memory such as RAM and a drive. The device software includes an operating system e.g. Apple iOS Google Android or the like and generic support applications and utilities. The device may also include a graphics processing unit GPU . It also includes a touch sensing device or interface configured to receive input from a user s touch and to send this information to processor. The touch sensing device typically is a touch screen. The touch sensing device or interface recognizes touches as well as the position motion and magnitude of touches on a touch sensitive surface gestures . The device typically also comprises a high resolution camera for capturing images e.g. QR codes an accelerometer a gyroscope and the like.

The push notification may be provided to the mobile device in any convenient manner e.g. Apple Push Notification APN Service APN Google push notification services for iOS or Android or the like.

The authenticator app may be the LastPass mobile password manager authenticator app or equivalent which is augmented to include the capability to call the cloud service to store the TOTP shared secret per user per site as described above.

The TOTP secrets per site per user are securely stored in the cloud service using a secure repository such as LogMeIn Cubby or equivalent.

The cloud service may be associated with a remote access technology platform and service such as LogMeIn.

In one embodiment a cloud service provider provides the cloud service the mobile device authenticator app and the browser plug in.

In another embodiment the cloud service provider provides the cloud service and the mobile device authenticator app.

The cloud service is a technology platform that may comprise co located hardware and software resources or resources that are physically logically virtually and or geographically distinct. Communication networks used to communicate to and from the platform services may be packet based non packet based and secure or non secure or some combination thereof.

More generally the cloud service comprises a set of one or more computing related entities systems machines processes programs libraries functions or the like that together facilitate or provide the described functionality described above. In a typical implementation a representative machine on which the software executes comprises commodity hardware an operating system an application runtime environment and a set of applications or processes and associated data that provide the functionality of a given system or subsystem. As described the functionality may be implemented in a standalone machine or across a distributed set of machines.

The computing entity on which the browser and its associated browser plug in run may be any network accessible computing entity that is other than the mobile device that runs the authenticator app itself. Representative entities includes laptops desktops workstations other mobile devices or machines associated with such other mobile devices and the like.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

While the disclosed subject matter has been described in the context of a method or process the subject disclosure also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including an optical disk a CD ROM and a magnetic optical disk a read only memory ROM a random access memory RAM a magnetic or optical card or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

While given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

The described commercial products systems and services are provided for illustrative purposes only and are not intended to limit the scope of this disclosure.

The described technique may include other variants. In yet another alternative the TOTP secret need not be maintained in the cloud service but rather is maintained at the host e.g. in a secure data store . After the push notification the locally stored secret is then used to generate the TOTP code which is then populated once again by the plug in into the fill in form. In this example variant the various operations involving the cloud service are not required.

In another variant the dynamic generation and injection of the TOTP code derived from the shared secret occurs in a single device solution in which case even the push notification may not be required.

The techniques herein provide for improvements to technology or technical field namely cloud based access control as well as improvements to various technologies such as secure authentication and the like all as described.

