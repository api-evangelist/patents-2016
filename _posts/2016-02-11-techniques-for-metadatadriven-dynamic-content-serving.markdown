---

title: Techniques for metadata-driven dynamic content serving
abstract: Techniques for metadata-driven dynamic content serving. Metadata content is stored as a source instance. The metadata content is utilized to provide dynamically-constructed pages. The metadata content is published to runtime pods communicatively coupled to receive the metadata content. The source instance includes a metadata definition repository and is a primary source of dynamic data for serving pages in the runtime pods. The runtime pods are groups of multiple servers that act as a single entity to dynamically generate metadata-driven content in response to requests received from client devices. A request for content is received with a selected one of the runtime pods for a specific site. The specific site is mapped to a user identified by a user identifier. The user identifier is utilized to retrieve site metadata from a site metadata server. Content is provided in response to the request with the selected runtime pod utilizing the metadata content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09525720&OS=09525720&RS=09525720
owner: salesforce.com, inc.
number: 09525720
owner_city: San Francisco
owner_country: US
publication_date: 20160211
---
This United States continuation patent application is related to and claims priority to U.S. patent application Ser. No. 14 592 804 entitled TECHNIQUES FOR METADATA DRIVEN DYNAMIC CONTENT SERVING filed Jan. 8 2015 which is a continuation of U.S. patent application Ser. No. 13 248 459 entitled TECHNIQUES FOR METADATA DRIVEN DYNAMIC CONTENT SERVING filed Sep. 29 2011 and issued as U.S. Pat. No. 8 935 360 on Jan. 13 2015 which claims the benefit of U.S. Provisional Patent Application No. 61 419 611 entitled A CONTENT MANAGEMENT SYSTEM FOR DEVELOPING AND INTERACTING WITH WEBSITES filed Dec. 3 2010 the entire contents of which is incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Embodiments relate to techniques for providing metadata driven content. More particularly embodiments relate to techniques for hosting content in a manner that supports use of multiple servers to provide metadata driven dynamic content.

Servers that provide content in the form of pages to requesting devices generally cannot provide constant uptime availability. This may be the result of various conditions including routine maintenance operations system upgrades content changes etc. This is a less than optimal situation for providing content.

In the following description numerous specific details are set forth. However embodiments of the invention may be practiced without these specific details. In other instances well known circuits structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

In various embodiments of architectures described herein combinations of one or more servers are utilized to host metadata driven dynamic pages. These architectures may be referred to as Runtime Pods that may be configured to provide constant 100 uptime availability. Embodiments of runtime pods utilize a collection of servers that may include but are not limited to reverse proxy servers web application servers and or database servers. In some embodiments the servers operate as a single unit to host metadata driven dynamic pages. In one embodiment these runtime pods are stateless.

In some embodiments the runtime pod hosting is located and isolated away from a source instance of the content. The source instance refers to a metadata definition repository and is a primary source of dynamic data for serving pages. In one embodiment page metadata is created and maintained on the source instance. This allows the architecture to remain active when the source instance is down for any reason.

In one embodiment a runtime pod may be utilized a version aware application programming interface API to create read update and delete data from the source instance. The API is versioned so that the source instance and runtime pod s may be on different versions. If the source instance is down the pages may still be available even if dynamic data from the source instance may not be show or alternatively a cached version of the data may be served.

As discussed above source instance refers to a metadata definition repository and is a primary source of dynamic data for serving pages. Source instance may be data stored by one or more databases that are interconnected and or are communicatively coupled with runtime pod . In one embodiment page metadata is created and maintained on source instance . The page metadata that is used to serve pages is published to runtime pod after creation. When source instance is updated the updated metadata and or other data may be published to runtime pod .

Runtime pod operates to provide metadata driven dynamic content to devices that request data not illustrated in . In one embodiment modifications e.g. Create Read Update Delete operations or CRUD may be accomplished using API calls to source instance . In one embodiment the API is versioned so that the source instance and runtime pod s may be on different versions.

In one embodiment runtime pod includes firewall which operates to permit or deny network transmissions based upon a set of rules to protect runtime pod from unauthorized access while permitting legitimate communications to pass. In one embodiment runtime pod further includes load balancer which operates to distribute requests across components of runtime pod .

In one embodiment runtime pod includes one or more proxy servers e.g. which operate to a proxy server is a server a computer system or an application that act as an intermediary for requests from clients not illustrated in seeking resources from application servers e.g. . A request from a client is received by the proxy server e.g. that requests some service such as a file connection web page or other resource available from an application server. The proxy server evaluates the request according to its filtering rules.

In one embodiment runtime pod includes multiple application servers e.g. which may be hardware servers and or software servers that provide services to respond to requests received from client devices. The application servers utilize database to provide content in response to requests from client devices.

Runtime pod receives content from a source instance as described above with respect to . The metadata and or other information may be stored and or utilized by the components of runtime pod to respond to requests from client devices even when the source instance is unavailable to the client devices. In one embodiment runtime pod operates as a single server device to respond to requests. As discussed above runtime pod may provide a different version of data as compared to the source instance under certain conditions but may function to provide 100 uptime availability.

In one embodiment at least two runtime pods e.g. are each maintained in an active state e.g. an ACTIVE ACTIVE configuration . That is each of at least two runtime pods is capable of serving pages at any time. In one embodiment the runtime pods are set up in a Global Server Load Balancing GSLB configuration.

Client device may perform a domain lookup with Domain Name System DNS which may return an address e.g. IP address of one of the active runtime pods e.g. . Client device may then use the address to send a request to one of the runtime pods which may function as described above.

Metadata and or other data may be developed for a site and stored in the source instance . The metadata and or other data is utilized to dynamically construct pages of content in response to requests received from client devices.

The metadata is published to one or more runtime pods . As described above the runtime pods are groups of multiple servers that act as a single entity to dynamically generate metadata driven content in response to requests received from client devices. When the runtime pods received the published metadata the data is transformed and stored in the runtime pod database s . This allows the runtime pod s to have the necessary metadata to respond to requests from client devices.

When the databases have been updated the runtime pod s may respond to requests utilizing the metadata . If the runtime pod has a previous version of the metadata the previous version may be utilized until the newly published metadata can be processed and ready for use by the runtime pod s .

In one embodiment a single runtime pod is capable of serving many individual sites from many different customers. The load from any site may be spread across the runtime pod. This may result in a more full utilization of hardware resources as well as simplification of management and deployment.

In one embodiment a site definition is stored as metadata in a runtime pod database. For example each site s metadata may be stored according to the site s identifier e.g. primary key . The primary key of the site can be retrieved by looking it up in a domain mapping table by the domain of a request. The metadata may be retrieved and converted to a specific format indicated by the request. The result can be sent back to the requesting device as a response e.g. HTTP response . In one embodiment the metadata and or response may be cached for subsequent requests.

In one embodiment a multi tenant database system utilizes tenant identifiers IDs within a multi tenant environment to allow individual tenants to access their data while preserving the integrity of other tenant s data. In one embodiment the multitenant database stores data for multiple client entities each identified by a tenant ID having one of one or more users associated with the tenant ID. Users of each of multiple client entities can only access data identified by a tenant ID associated with their respective client entity. In one embodiment the multitenant database is a hosted database provided by an entity separate from the client entities and provides on demand and or real time database service to the client entities.

A request is received from a client device for a specific site e.g. example.com . In one embodiment runtime pod includes domain mapping server that operates to map the site from which the request comes e.g. example.com to a tenant identifier that may be used within the multitenant environment.

The tenant ID is then used to retrieve site metadata from site metadata server . The site metadata may then be used by render engine to generate a response to be sent back to client device . In one embodiment the response is provided in the form of an http response however other response formats may also be supported.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein.

A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator.

In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared.

In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network .

Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units.

A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B .

As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks.

As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data.

Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API .

A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 40 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers .

In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields.

For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

