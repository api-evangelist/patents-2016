---

title: Management and authentication in hosted directory service
abstract: A user, group, and device management and authentication system allows administrators to manage one or more directories with devices that are not associated with a domain of the one or more directories via a set of APIs. The system also allows applications and services that do not have direct access to a list of directory users to access the one or more directories. The user, group, and device management and authentication system may be an add-on system that works in conjunction with a centrally-managed directory service to provide such functionality. For example, the system may generate an access token associated with a particular directory that can be used by a service accessed by an administrator to call an API provided by the system. The API call may be translated into a directory-specific API call that can be used to perform an action in the particular directory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596233&OS=09596233&RS=09596233
owner: Amazon Technologies, Inc.
number: 09596233
owner_city: Seattle
owner_country: US
publication_date: 20160303
---
This application is a continuation of U.S. patent application Ser. No. 14 500 865 entitled MANAGEMENT AND AUTHENTICATION IN HOSTED DIRECTORY SERVICE and filed on Sep. 29 2014 which is hereby incorporated by reference herein in its entirety.

Administrators may utilize directory services to create and maintain a directory for user group device and or computing resource management and or for providing access to a variety of computing resources e.g. file systems files users security policies network resources applications system storage etc. . For example the directory service may be implemented in a data server operated by an administrator e.g. on premises . The administrator may also operate a plurality of client devices each of which shares a network or domain with the data server. To keep client devices secure and to ensure compatibility across the domain the data server may assign and enforce security policies on the client devices and install or update software running on the client devices.

However installing maintaining and operating the data server can be burdensome. The data server itself may include several computing systems thus requiring the purchase of expensive hardware and the configuring of complex software. In some cases dedicated facilities for powering and cooling the data server may be needed as well. Establishing and maintaining connectivity between the data server and the client devices may require the installation of expensive network equipment. Furthermore additional hardware and or software may be needed to implement backup and recovery procedures in case the data server fails or data is otherwise lost.

As described above on premises data servers that implement directory services can be burdensome. Thus in some conventional systems a managed directory service e.g. a system that stores organizes and provides access to information in a computer operating system s directory such as MICROSOFT ACTIVE DIRECTORY can be implemented by a centrally managed data server that is located remotely and shared by a plurality of administrators and or organizations. The managed directory service may manage a plurality of directories. The centrally managed data server may provide access to the managed directory service via a network e.g. the Internet and an administrator may use existing network enabled client devices to manage the directory. For example the administrator may establish an account with the entity providing the centrally managed data server. When accessing the account the administrator can create one or more directories create a domain e.g. a computer network in which all user accounts and computing resources such as computers printers scanners services processes threads etc. are registered with a single directory service within a directory and add member servers e.g. a server that implements lightweight directory access protocol LDAP Kerberos a domain name system DNS service or other Active Directory tools to manage records in a directory to the domain. Using a member server added to the domain the administrator can create and manage domain users. Accordingly the administrator can implement a directory service without having to install or maintain the infrastructure normally used to implement the directory service.

However existing managed directory services have several limitations. For example as described above user management may be performed using a member server added to the domain. Some administrators though may not have access to a member server or may not wish to operate a member server e.g. web developers application developers mobile application developers etc. and thus may not be able to perform any user management or otherwise manage the resources of a directory. As another example an administrator may have created multiple directories but the managed directory service may only allow the administrator to access and manage one directory at a time. Applications or services whether running on a user s device or accessible via a network that do not have direct access to the list of created users in a domain or directory may not be able to access the domain or directory. Thus it may not be possible for an administrator or user using an application or service associated with one domain or directory to share resources or content with another domain e.g. a domain that does not share the same tree or forest as the domain associated with the application or service or directory.

Accordingly the embodiments described herein present a user management and authentication system that 1 allows administrators to perform user management with devices that are not associated with a domain and to access a plurality of directories or domains via a set of application programming interfaces APIs and 2 provides authorization and authentication mechanisms for allowing applications and services that do not have direct access to a list of created users to access a domain or directory. The user management and authentication system may be an add on system that works in conjunction with the managed directory service to provide the functionality described herein. For example the user management and authentication system may generate a set of login pages e.g. content or network pages such as web pages that can be accessed by a device associated with an administrator. The administrator can enter his or her credentials a client identification that identifies an application or service that is requesting access to a domain a redirect page e.g. a page associated with an application or service that the user management and authentication system should instruct the user device to access once login is complete and or a directory identifier or domain identifier . The user management and authentication system may transmit the credentials to the directory associated with the directory identifier and the directory may determine whether the credentials can be authenticated e.g. whether the administrator has access to the directory . If the credentials can be authenticated the user management and authentication system is notified and generates an authentication code e.g. an OAuth code .

The authentication code may be transmitted by the user management and authentication system to the user device along with an instruction to access the redirect page. The authentication code may be a single use code that is valid for a set period of time e.g. 10 minutes 1 hour etc. and before expiration of the authentication code may be used by the application or service associated with the redirect page to initiate access to the directory associated with the directory identifier. For example the user management and authentication system may include a getToken API. The application or service may call the getToken API passing the authentication code as a parameter.

The getToken API may generate an access token and or a refresh token in response to receiving a valid authentication code and provide the tokens to the application or service. The access token and or the refresh token may be generated based on the credentials and or the directory identifier. For example the access token and or the refresh token may include the credentials and or the directory identifier in a secure format. The access token may allow the application or service to access and or manage the directory indicated by the directory identifier via a set of APIs and may be valid for an administrator defined or preset period of time e.g. 1 hour 1 day etc. . The refresh token may be valid for an administrator defined or preset period of time e.g. 1 week 1 month etc. and can be used by the application or service to receive a new access token once the previous access token expires. In some embodiments the refresh token may be valid for no amount of time e.g. the access token may not be refreshed once it expires .

In an embodiment the user management and authentication system provides several APIs. Such APIs may include user APIs group APIs organizational unit APIs password APIs access token APIs and or service APIs. User APIs may include a createUser API e.g. to create a user in a directory a describeUsers API e.g. to list all or any number of users within a directory and their attributes an updateUser API e.g. to update the attributes of a user in a directory a deleteUser API e.g. to delete a user from a directory and or a listGroupsForUser API e.g. to list all or any number of users within a directory and their groups . Group APIs may include a createGroup API e.g. to create a new group within a directory a describeGroups API e.g. to list groups and attributes of the groups within a directory an updateGroup API e.g. to update an existing group in a directory a deleteGroup API e.g. to delete a group from a directory a listMembersInGroup API e.g. to list the members of groups in the directory an addMemberToGroup API e.g. to add members users or groups to a group in a directory and or a removeMemberFromGroup API e.g. to remove a member from a group in a directory . Organization unit APIs may include a describeOrganizationalUnits API e.g. to list all or any number of organizational units within a directory and their attributes . Password APIs may include an authenticateUser API e.g. to authenticate a user in the directory and return an authentication code an authenticateKerberosUser API e.g. to authenticate a user in the directory and return an authentication code an authenticateRadiusUser API e.g. to authenticate a user against a radius server associated with a directory and return an authentication code a resetPassword API e.g. to reset a user s password and or a changePassword API e.g. to change a user s password . Access Token APIs may include a createAnonymousToken API e.g. to create an anonymous token to store a getToken API e.g. to generate an access and or refresh token based on an authentication code a validateToken API e.g. to verify that a previously issued access token or anonymous token is still valid a refreshToken API e.g. to generate a new access token using a previously issued refresh token and or a revokeToken API e.g. to invalidate a previously issued access anonymous or refresh token . Service APIs may include a getServiceAccountCreds API e.g. to allow a registered application or service to retrieve domain join credentials .

The application or service can use the access token to call any of the APIs supported by the user management and authentication system. For example the access token and or other operation specific parameters can be provided to the user management and authentication system via an API to manage a directory. As described above the access token may be generated based on the authentication code and or the directory identifier. Thus when unwrapped by the user management and authentication system upon reception via the API the access token may identify the authentication code and thus the administrator that is performing the action and or the directory that the action is to be performed on. Accordingly the application or service may not separately identify the directory to be accessed and or managed. Not separately identifying the directory may provide an additional level of security not found in conventional systems. In conventional systems which generally involve accessing and managing a single directory an administrator may manage the directory simply by providing a directory identifier and or other operation specific parameters. However in the embodiments disclosed herein a user or administrator may not be able to access and manipulate a directory in an unauthorized manner simply by providing a directory identifier and or other operation specific parameters. Rather the access token is needed to access and or manipulate a specific directory and the user or administrator may obtain the access token only after his or her credentials can be verified with the specific directory e.g. after the authentication code is received as described herein.

In an embodiment when generating the access token the user management and authentication system may map the access token to a directory service token e.g. a Kerberos token other directory specific credentials etc. that normally could be used by a member server to access the directory identified by the directory identifier. Thus when an application or service calls an API using the access token the user management and authentication system may access a database to determine the token that maps to the access token and pass the mapped token and or other operation specific parameters provided by the application or service to the managed directory service to perform the action or operation requested via the calling of the API. In some embodiments the validity of the refresh token may be tied to the validity of the mapped token e.g. the lifetime of which can be preset or defined by an administrator . Results if any may be returned by the managed directory service to the user management and authentication system and the user management and authentication system may forward the results to the application or service.

The application or service can repeat this process to generate access tokens for one or more directories operated by the administrator. Thus the administrator using an application or service can access and or manage a plurality of directories.

In some embodiments a directory service and a user management and authentication system is assigned to a region e.g. a physical location . A plurality of directory services and user management and authentication systems may be present separated by regions. The directory service in one region may not interact with or access a directory service or user management and authentication system in another region. Likewise the user management and authentication system in one region may not interact with or access a directory service or user management and authentication system in another region. In other embodiments a directory service and a user management and authentication system is assigned to a region but the directory service and or the user management and authentication system may interact with directory services and or user management and authentication systems in other regions.

In further embodiments the user management and authentication system supports single factor authentication and or multi factor authentication. The user management and authentication system may support either type of authentication via user interfaces and or APIs. The user management and authentication system may also support single sign on e.g. an administrator may be able to login once and gain access to all appropriate directories without being prompted to log in again each time a directory is accessed .

As shown the network environment includes various user devices a computing resource service provider system organizations and third party application servers in communication via one or more networks . The computing resource service provider system can provide applications directory management services user group and device management and authentication services and or other network based services to various organizations or other customers. Organizations A C or other customers can employ the computing resource service provider system to provide application access to users associated with the organizations manage the organizations directories etc. Individual users can use user devices to access applications hosted by the computing resource service provider system or third party application servers using credentials from their respective organizations A C. In addition the computing resource service provider system can provide the applications with access to the directories of the various organizations A C at the discretion of the respective organizations.

The user devices can correspond to a wide variety of computing devices including desktop computing devices laptop computing devices terminal devices mobile phones tablet computing devices media players wearable computing devices e.g. smart watches smart eyewear etc. and various other electronic computing devices and appliances having one or more computer processors computer readable memory and network access capabilities. Some user devices may be associated with a particular organization A C. For example an organization may have various user devices that remain on premises or that are used off premises primarily by employees administrators or other users associated with the organization. In some embodiments some or all of the user devices may be separate from any organization such as public computers or home computers that are used by any number of users to perform various tasks which may include managing directories or accessing applications using credentials associated with a particular organization A C or other customer of the computing resource service provider system .

Individual user devices may execute an application to communicate via the network with the computing resource service provider system in order to manage one or more directories and or to access provided applications or services. For example the application may be a stand alone application that is installed on the user device . As another example the application may be a browser e.g. a web browser that accesses an application or service e.g. a web service hosted by the computing resource service provider system the third party application server and or another computing system not shown .

The computing resource service provider system can be a computing system configured to host or otherwise provide access to applications word processing applications photo editing applications electronic mail applications etc. manage directories for separate customer organizations A C and or provide other network based services and resources e.g. document sharing services virtual machine services etc. . For example the computing resource service provider system can be a server or group of servers that may be accessed via a communication network . The computing resource service provider system can include a number of components to provide various features described herein such as a managed directory system or service a user management and authentication module and one or more applications or application servers that can be accessed by organizations and user devices . The computing resource service provider system may also store various off premises directories such as an off premises directory for organization B as described below. In some embodiments the computing resource service provider system may include additional or fewer components than illustrated in to provide the features described above and in greater detail below.

As used herein the term off premises directory refers to a directory that is remote from the organization with which it is associated in order to distinguish such a directory from a directory that is located on an organization s premises. Thus although a directory may be physically stored on the premises of a computing resource service provider system the directory may nevertheless be referred to as an off premises directory because it is off premises with respect to the organization with to which it belongs e.g. the organization that owns or operates the network described by the directory . Additionally although a directory may be physically stored off the premises of the computing resource service provider system the directory may nevertheless be referred to as an on premises directory because it is on premises with respect to the organization to which it belongs.

Illustratively an administrator may use the application executed by the user device to manage one or more directories owned or operated by the administrator s organization such as one of organizations A C. The application may interact with the managed directory service and or the user management and authentication module . The managed directory service may be a computing system that implements a managed directory service. In an embodiment the managed directory service is configured to create monitor and manage one or more directories. For example the managed directory service may be in communication with and manage the off premises directory and or the on premises directories . As described above an administrator may use the managed directory service to create monitor and or manage a directory if the user device is a member server. However if the user device is not a member server the administrator may create monitor and or manage the directory via APIs provided by the user management and authentication module .

The user management and authentication module may be a computing system that implements a user group and device management and authentication system. In an embodiment the user management and authentication module allows administrators to manage one or more directories with user devices that are not member servers e.g. that are not associated with a domain of the respective directory via a set of APIs such as the APIs described above. The user management and authentication module may also provide authorization and authentication mechanisms for allowing the application executed by the user device or applications or services accessed by the executed application to access content or resources in a directory even if the executed application or the accessed applications or services do not have direct access to a list of created users of the directory. For example the user management and authentication module may be in communication with the managed directory service and may serve as an interface between the user device and the managed directory service such that the user device can manage one or more directories managed by the managed directory service . The user device can call an API provided by the user management and authentication module and the user management and authentication module can instruct the managed directory service to perform an action indicated by the called API. The interaction between the user device the managed directory service and the user management and authentication module is described in greater detail below with respect to .

In further embodiments the user management and authentication module supports single factor authentication and or multi factor authentication. The user management and authentication module may support either type of authentication via user interfaces and or APIs. The user management and authentication module may also support single sign on e.g. an administrator may be able to login once and gain access to all appropriate directories without being prompted to log in again each time a directory is accessed .

In an embodiment applications or services provided by the third party application servers or the computing resource service provider system that have registered with the computing resource service provider system may access the features described herein. Applications or services that have not registered with the computing resource service provider system and or that have not been approved by administrators of the computing resource service provider system may be barred from accessing the features described herein.

The computing resource service provider system may be a single computing device or it may include multiple distinct computing devices such as computer servers logically or physically grouped together to collectively operate as a server system. The components of the computing resource service provider system can each be implemented in application specific hardware e.g. a server computing device with one or more ASICs such that no software is necessary or as a combination of hardware and software. In addition the modules and components of the computing resource service provider system can be combined on one server computing device or separated individually or into groups on several server computing devices.

In addition multiple e.g. two or more computing resource service provider systems may be used. For example computing resource service provider systems may be located in separate regions and may or may not interact with each other. The separate computing resource service provider systems may be located so that they are close in either a geographical or networking sense to groups of current or potential user devices or organizations A C.

In some embodiments the features and services provided by the computing resource service provider system may be implemented as web services consumable via the communication network . In further embodiments the computing resource service provider system is provided by one more virtual machines implemented in a hosted computing environment. The hosted computing environment may include one or more rapidly provisioned and released computing resources which computing resources may include computing networking and or storage devices. A hosted computing environment may also be referred to as a cloud computing environment.

The organizations A C can correspond to various customers of the computing resource service provider system . Although the term organization is used herein the features involving such organizations may additionally or alternatively involve any customer having a directory whether on premises or off premises and wishing to use the computing resource service provider system to manage the directory and control access to the directory by applications hosted by the computing resource service provider or third party application servers .

Organizations that maintain on premises directories may have one or more servers on which the directories are stored. For example organization A may have a data center that includes various servers and an on premises directory may be stored on one or more of the servers. Organizations that maintain off premises directories may employ the services of the computing resource service provider system which may store the off premises directory in an off premises directory data store . For example organization B may not maintain an on premises directory at all but may rely instead on the computing resource service provider system to maintain the organization s directory . Some organizations may choose to maintain multiple directories on premises and or off premises. For example organization C may store multiple on premises directories each in a manner similar to organization A described above and the organization C may also choose to employ the computing resource service provider system to maintain an off premises directory . The directory maintained by the computing resource service provider system in this example may be a mirror or subset of the on premises directory e.g. for backup or disaster recovery purposes or it may be a separate directory altogether e.g. a directory of computing resources in a different region from the on premises directory .

The communication network may be a publicly accessible network of linked networks possibly operated by various distinct parties such as the Internet. In some embodiments the communication network may be or include the Internet a private network personal area network local area network wide area network cable network satellite network cellular telephone network etc. or combination thereof.

In an embodiment each agent A B is associated with one or more separate directories and directly interfaces with its associated directories for management purposes. The agents A B may be associated with and communicate with on premises and or off premises directories. For example the agent A may be associated with the off premises directory and the agent B may be associated with the on premises directory . The managed directory service may be configured to create monitor and or manage the agents A B. While two agents A B are illustrated this is not meant to be limiting. The computing resource service provider system may include any number of agents e.g. a number of agents sufficient to handle all directories managed by the managed directory service .

The agents A B may receive translated versions of API calls made to the user management and authentication module . The translated versions of the API calls made to the user management and authentication module may be directory specific API calls e.g. LDAP Kerberos DNS etc. that can be executed by the managed directory service . As an example translation of the API calls may include mapping an access token to a directory service token e.g. a Kerberos token a username and password pair an NT LAN manager NTLM hash etc. .

In an embodiment the user management and authentication module includes a console a control plane and load balancers and . The console may be configured to generate user interfaces that are transmitted to the user devices . The user interfaces may be login pages that may be transmitted to a user device when a user device calls an API provided by the user management and authentication module to login reset a password change a password and or perform other operations described herein. The console may also generate a link e.g. a uniform resource locator URL that can be transmitted to the user device such as for example when a new user is created. The link may be valid for a finite period of time e.g. 7 days 2 weeks etc. and when selected may redirect the application executed by the user device to a content page that allows the administrator to enter additional information such as user profile information. The console may also transmit an electronic message e.g. email text message etc. that includes the link to an account associated with an administrator when a user device calls an API provided by the user management and authentication module to reset a password. The electronic message may include a one time user token that can be used by the user device to complete the password reset process.

The control plane may be configured to expose APIs to the user devices . For example the control plane may expose APIs like the APIs described herein. The control plane may also be configured to interact with the agents A B. For example the control plane may translate the API calls received from the user devices into directory specific API calls that can be executed by the managed directory service and provide the directory specific API calls to the appropriate agent A B e.g. the agent associated with the directory on which an action is to be performed according to the API call . The control plane is described in greater detail below with respect to .

The console and the control plane may each be behind a load balancer or . The console and the control plane may each include multiple computing resources and the load balancers and may distribute workloads across the multiple computing resources to optimize resource use to maximize throughput and or to minimize the risk that any single resources becomes overloaded. For example the load balancers and may receive API calls from the user device and distribute the API calls to the appropriate computing resources of the console or the control plane .

At 1 an administrator via the user device may first communicate with the load balancer to authenticate his or her credentials. The load balancer may forward the authentication request and credentials to the console which may forward the authentication request and credentials to the load balancer . The load balancer may forward the authentication request and credentials to the control plane . The control plane may determine a directory associated with the credentials and transmit the authentication request and credentials to the appropriate agent A or B. Once the appropriate agent A or B receives the authentication request and credentials the agent A or B may perform the authentication by contacting its associated directory e.g. off premises directory or on premises directory .

At 2 in response to a determination that the administrator s credentials can be authenticated the control plane generates an authentication code. The control plane transmits the authentication code to the load balancer for forwarding to the user device .

At 3 the user device accesses a service provided by the third party application servers . In alternative embodiments not shown the user device accesses an application in the applications provided by the computer resource service provider system .

At 4 the accessed service transmits the authentication code to the load balancer for the purpose of receiving an access token and or a refresh token. The load balancer may forward the authentication code to the control plane .

At 5 the control plane generates the access token and or the refresh token based on the received authentication code. The control plane may generate the access token if the authentication code is received before expiration. The control plane may transmit the access token and or the refresh token to the load balancer for forwarding to the accessed service.

The authentication API module may generate an authentication code a refresh token and or an access token. For example the authentication API module may receive administrator credentials a client identification that identifies an application or service hosted by the applications server that is requesting access to a domain a redirect page e.g. a page associated with an application or service that the user management and authentication module should instruct the user device to access once authentication is complete and or a directory identifier or domain identifier . The authentication API module may transmit the credentials to the agent A or B that corresponds with a directory associated with the directory identifier. The agent A or B may pass the credentials to the directory service module to determine whether the credentials can be authenticated e.g. whether the administrator has access to the directory . If the credentials can be authenticated the authentication API module is notified and generates an authentication code e.g. an OAuth code .

At 1 as described above the authentication code may be a single use code that is valid for a finite period of time e.g. 10 minutes 1 hour etc. . The authentication API module may transmit the authentication code to the user device . The authentication API module may also transmit to the user device an instruction to access the redirect page.

At 2 the user device accesses a service provided by the third party application servers . In alternative embodiments not shown the user device accesses an application in the applications provided by the computer resource service provider system .

At 3 the authentication API module receives the authentication code from the accessed service e.g. accessed via a browser . For example the authentication API module may receive the authentication code if the getToken API is called e.g. the authentication code may be included as parameter .

If an unexpired authentication code is received the authentication API module may generate an access token and or a refresh token. The access token and or the refresh token may be generated based on the credentials and or the directory identifier. For example when unwrapped the access token and or the refresh token may indicate the authentication code and thus the credentials and administrator associated with the credentials and the directory identifier associated with the token. The access token may allow the accessed service to manage the directory indicated by the directory identifier via a set of APIs provided by the user group and password APIs module . The access token may be valid for an administrator defined or finite period of time e.g. 1 hour 1 day etc. . The refresh token may be valid for an administrator defined or finite period of time e.g. 1 week 1 month etc. and can be used by the user device and or the accessed application or service to receive a new access token once the previous access token expires. In some embodiments the refresh token may not be valid for any period of time e.g. the access token may not be refreshed once it expires.

At 4 in some embodiments the authentication API module transmits the access token the refresh token the credentials and or the directory identifier to the authentication token to credential mapper module . The authentication token to credential mapper module may use underlying directory logic to map the credentials and or the directory identifier to the access token and or the refresh token and store this mapping in the directory database .

At 5 the authentication API module may also transmit the access token and or the refresh token to the accessed service. The user group and password APIs module may provide one or more of the APIs described above and the accessed service may use the access token and or other operation specific parameters to call one or more of the provided APIs. In some embodiments not shown the authentication API module transmits the access and or refresh tokens to the accessed service before performing the operations discussed with respect to 4 .

At 6 in an embodiment upon receiving an API call that includes an access token from a calling service the user group and password APIs module identifies a directory associated with the access token by querying the directory lookup module . For example the directory lookup module may pass the access token to the directory database and identify a directory associated with the access token transmitting the identified directory back to the user group and password APIs module .

At 7 the user group and password APIs module may then identify an agent A or B associated with the identified directory translate the API call into a directory specific API call and pass the directory specific API call and its operation specific parameters to the appropriate agent A or B. The user group and password APIs module may determine how to translate the API call into a directory specific API call based on information provided by the directory lookup module . In alternate embodiments not shown the user group and password APIs module directly identifies a directory associated with the access token without querying the directory lookup module e.g. via an internal lookup table or database .

As described above the agents A B may receive directory specific API calls translated from API calls received by the user group and password APIs module . As an example the user group and password APIs module may map the access token received by the user group and password APIs module to a directory service token e.g. a Kerberos token and the directory service token may be provided to the agents A B to access the appropriate directory.

At 8 results if any may be received by the agents A B from the managed directory service and forwarded to the user group and password APIs module . The user group and password APIs module may then transmit the results to the calling service.

The service health monitoring module may be a computing system that monitors the health of a directory service. For example the service health monitoring module may monitor the health of the directory service module .

The authentication lifetime management reaper module may perform maintenance on the directory database . For example the authentication lifetime management reaper module may reap out or remove access tokens and or refresh tokens that have expired and their associated credentials and directory identification .

At block a credential and a directory identifier associated with a first directory in a plurality of directories are received from a user device. In an embodiment a client identification that identifies a service that is not associated with the first directory is also received.

At block whether the credential can be authenticated is determined. In an embodiment the credential is authenticated by passing the credential to the first directory.

At block in response to a determination that the credential can be authenticated an authentication code is generated. The authentication code may be an OAuth code and may be valid for a finite period of time.

At block the authentication code is transmitted to the user device. For example the authentication code is received by an application e.g. browser executed by the user device. In other embodiments the authentication code is transmitted to an application or service hosted by an applications server and accessed by the user device.

At block the authentication code is received from a calling service accessed by the user device. The calling service be an application or service that the user device has accessed e.g. via the browser . The authentication code may be received before the authentication code expires.

At block an access token is generated based on the authentication code and or the directory identifier. For example when unwrapped the access token may identify the authentication code e.g. which may include the credential that identifies the administrator and the directory identifier. The access token may be valid for a finite period of time. In some embodiments a refresh token is also generated. The refresh token may be valid for a finite period of time and may be used to generate a new access token when the previous access token expires.

At block the access token is transmitted to the calling service accessed by the user device. In an embodiment the user device uses the access token to allow an administrator to manage the directory corresponding to the directory identifier e.g. the first directory via the calling service. After the access token is transmitted to the calling service the authentication process may be complete as shown in block .

At block a call for an operation from an application service in communication with a user device is received where the call includes an access token and an operation specific parameter. For example the user device via an application or service may call an API such as the createUser API passing the access token and a username as operation specific parameters. The operation specific parameters passed via the API may include all operation specific parameters required by the API schema associated with the called operation.

At block the access token usage process determines whether the access token is valid. For example the access token usage process determines whether the access token is valid in time e.g. determines whether the access token has expired and if the access token is valid in time whether the access token is valid for the application or the service that the user device is attempting to access e.g. the managed directory service . If the access token is valid the access token usage process proceeds to block . Otherwise the access toke usage process finishes at block .

At block a directory associated with the access token may be determined. In an embodiment the access token is mapped to a directory when the access token is generated and the mapping is stored in a database such as the directory database . A directory lookup module such as the directory lookup module may query the directory database to determine a directory associated with the received access token.

At block an indication of the operation and the operation specific parameter are transmitted to an agent associated with the determined directory. In further embodiments the user management and authentication module maps the access token to a directory service token e.g. a Kerberos token a username and password pair an NTLM hash etc. and the directory service token is also provided to the agent. In an embodiment an agent is associated with a directory. The directory service token an indication of the operation and or the operation specific parameter may then be transmitted to the appropriate agent. The agent may use the received data to instruct the managed directory service such as the managed directory service to perform the operation specified by the called API.

At block results from the agent are received. The results may be data received from the agent once the operation specified by the API call is complete.

At block the received results are transmitted to the application service. After the received results are transmitted to the application service the access token usage process may be complete as shown in block .

All of the methods and tasks described herein may be performed and fully automated by a computer system. The computer system may in some cases include multiple distinct computers or computing devices e.g. physical servers workstations storage arrays cloud computing resources etc. that communicate and interoperate over a network to perform the described functions. Each such computing device typically includes a processor or multiple processors that executes program instructions or modules stored in a memory or other non transitory computer readable storage medium or device e.g. solid state storage devices disk drives etc. . The various functions disclosed herein may be embodied in such program instructions and or may be implemented in application specific circuitry e.g. ASICs or FPGAs of the computer system. Where the computer system includes multiple computing devices these devices may but need not be co located. The results of the disclosed methods and tasks may be persistently stored by transforming physical storage devices such as solid state memory chips and or magnetic disks into a different state. In some embodiments the computer system may be a cloud based computing system whose processing resources are shared by multiple distinct business entities or other users.

Depending on the embodiment certain acts events or functions of any of the processes or algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described operations or events are necessary for the practice of the algorithm . Moreover in certain embodiments operations or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

The various illustrative logical blocks modules routines and algorithm steps described in connection with the embodiments disclosed herein can be implemented as electronic hardware e.g. ASICs or FPGA devices computer software that runs on general purpose computer hardware or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as specialized hardware versus software running on general purpose hardware depends upon the particular application and design constraints imposed on the overall system. The described functionality can be implemented in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.

Moreover the various illustrative logical blocks and modules described in connection with the embodiments disclosed herein can be implemented or performed by a machine such as a general purpose processor device a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor device can be a microprocessor but in the alternative the processor device can be a controller microcontroller or state machine combinations of the same or the like. A processor device can include electrical circuitry configured to process computer executable instructions. In another embodiment a processor device includes an FPGA or other programmable device that performs logic operations without processing computer executable instructions. A processor device can also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Although described herein primarily with respect to digital technology a processor device may also include primarily analog components. For example some or all of the rendering techniques described herein may be implemented in analog circuitry or mixed analog and digital circuitry. A computing environment can include any type of computer system including but not limited to a computer system based on a microprocessor a mainframe computer a digital signal processor a portable computing device a device controller or a computational engine within an appliance to name a few.

The elements of a method process routine or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor device or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of a non transitory computer readable storage medium. An exemplary storage medium can be coupled to the processor device such that the processor device can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor device. The processor device and the storage medium can reside in an ASIC. The ASIC can reside in a user terminal. In the alternative the processor device and the storage medium can reside as discrete components in a user terminal.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without other input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

Disjunctive language such as the phrase at least one of X Y Z unless specifically stated otherwise is otherwise understood with the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y or at least one of Z to each be present.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it can be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As can be recognized certain embodiments described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others. The scope of certain embodiments disclosed herein is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

