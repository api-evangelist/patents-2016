---

title: Management of application state data
abstract: Disclosed are various embodiments for synchronizing application state information across devices. More specifically, embodiments of the disclosure are related to generating and storing of application state information. Key-value pairs are stored on a client device and synchronized with an application synchronization service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411872&OS=09411872&RS=09411872
owner: Amazon Technologies, Inc.
number: 09411872
owner_city: Seattle
owner_country: US
publication_date: 20160119
---
This application is a continuation of and claims the benefit of U.S. patent application Ser. No. 13 921 503 entitled MANAGEMENT OF APPLICATION STATE DATA and filed Jun. 19 2013 issued as U.S. Pat. No. 9 244 993 which is hereby incorporated by reference in its entirety.

Applications that are distributed via an application marketplace are often installed on multiple devices by a user. A developer of an application may wish to synchronize state information across the multiple installations across various devices of a particular application. The state information is generated by the various instances of the application executing on the client devices that are associated with a particular user.

The present disclosure relates to synchronizing data associated with the state of an application between multiple devices that may be associated with a user. Applications that are distributed via an application marketplace are often installed on multiple devices associated with a user account. For example a user may own a tablet device as well as a smartphone and install an application distributed by the application marketplace on both devices. Accordingly embodiments of the disclosure can facilitate synchronization of data relating to the application across the various devices associated with the user by employing an application synchronization service to which applications report application state information which can in turn facilitate synchronization of application state information across multiple devices of the user.

When an application is a game application application state information can comprise for example information that is related to game applications such as scoring data game progress game achievements game timing information time stamps and any other information relating to execution of a game. Application state information can also related to media such as books movies music etc. that are rendered or consumed via a media player application. In this scenario the application state information can relate to a page number and or time code within media that a user last viewed and or consumed. Application state information can also include information related to an accumulated value such as a report indicating the user s accumulation and or usage or spending of coins or points during a gameplay session. Therefore embodiments of the present disclosure provide mechanisms for caching and storage of application state information on a client device executing the application.

With reference to shown is an example scenario in which an application executed by client devices and . In the scenario shown in the application can be distributed by an application marketplace. In the example of the client devices and are associated with a particular user account. In other words the user or other entity has installed the same application on multiple devices. An application synchronization service can be associated with the application marketplace and or independent from an application marketplace and facilitates synchronization of game state data.

As shown in the example of an application instance is executed by the client device can incorporate functionality in which a user may utilize an account held with a third party service for the purpose of tracking accumulation of coins or points tracking achievements game progress game scores or any other data related to the state of an application that can be saved. Accordingly an application can be bundled with a software library and or code fragments related to an application marketplace and or application synchronization service that facilitate the creation of application state information in a data structure that can be transmitted to a synchronization service. As shown in the client device that is also associated with the user another application instance corresponding to the same application may be executed by another device associated with the user.

Accordingly each application instance may report for example scoring information that is synchronized across all instances of execution of the application that are associated with a particular user account. Accordingly as shown in the scenario of the user may earn points in a gameplay session on a first device as well as on a second device with the scoring information being synchronized across the devices of the user that is facilitated by embodiments of the disclosure.

Accordingly to facilitate such synchronization applications may be instrumented to store information pertaining to events that occur during execution of the application such as the accumulation of points high scores and other state information as can be appreciated. Information about events can be stored in the form of key value pairs that are generated by the application stored locally within the client device and synchronized via an application synchronization service as will be described in further detail herein. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system application synchronization service and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system may communicate with the client device using various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network .

The application marketplace system is executed to provide functionality relating to an application marketplace in which a multitude of applications may be submitted by developers and made available for purchase and or download by users. The application marketplace system may include functionality relating to electronic commerce e.g. shopping cart ordering and payment systems. The application marketplace system may support searching and categorization functionality so that users may easily locate applications that are of interest. The application marketplace system may include functionality relating to verification of compatibility of applications with various clients .

The application synchronization service is executed to synchronize application state information associated with instances of applications executed by various client devices that are associated with a user account. Application state information can include information relating to application usage that is associated with an application instance executed by a client device . For example application state information can include a score or achievement achieved by a user in an application instance. Application state information can also include saved game data or a score level or other state information from which a user may resume gameplay at a later point in time on the same client device or another client device .

The data stored in the data store includes for example applications saved state data relating to applications that are executed by client devices application marketplace data and potentially other data. The applications correspond to those applications that have been submitted by developers and or others for example for inclusion in the application marketplace. The application may correspond for example to a game or other types of applications. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games.

The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications. Where game applications are mentioned in the following text it is understood that game applications are merely examples of the many different types of applications .

The application when executed by a client device may expect to access one or more resources of the client device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources. Each application may include for example object code binary code source code metadata and or other data. The object code corresponds to code that is executable by clients either natively by a processor or by way of a virtual machine executed by the processor.

The saved state data that is maintained by the application marketplace system includes various data relating to execution of applications by client devices that are associated with a particular user account. For example the saved state data may include one or more accumulated totals such as a coin balance or point balance information about progress of a user within execution of an application by users such as a level at which a user has progressed within a game scoring information achievement information relating to a game etc. Saved state data can be organized into various keys and corresponding values . Accordingly a key can represent an event name of an event occurring in an application executed by a client device that an application developer may wish to synchronize across the various devices of a user. The key can also take the form of an event name or event identifier that is combined with a synchronization rule. The value can represent the value associated with the event such as a coin balance point balance score lap time level page number or any other data about application state that a developer wishes to synchronize across the various devices of a user.

The data associated with the application marketplace data includes for example download information categories application usage data and or other data. The download information indicates the popularity either in terms of absolute number of downloads or in terms of relative popularity of the applications offered by the application marketplace data . The download information can also identify users either individually by a user account and or on an aggregate basis according to demographic category who have downloaded a particular application . The categories correspond to groupings of applications that may indicate similar applications and may be employed by users to more easily navigate the offerings of the application marketplace data . Non limiting examples of categories may include social networking applications mapping applications movie information applications shopping applications music recognition applications and so on. The application marketplace data can also include information about users such as user profile data user authentication information usage data of users with regard to application e.g. game progress high scores and achievements .

The application marketplace data can also include information about the various client devices that are registered to user accounts of the application marketplace system . Accordingly the application marketplace data can relate a device identifier with a user account so that the application synchronization service may determine which client device corresponds to a given key and or value that is stored in the data store .

The client device is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client device may include a display device. The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client device may include one or more input devices. The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user.

The client device may be configured to execute various applications that are distributed via the application marketplace system . An application executed by a client device as is noted above can be instrumented to generate data related to the occurrence of events during execution of the application . The data generated by the application can be synchronized by the application synchronization service across the various client devices that are registered to a particular user account. To this end the application or a software library or other code fragment that is invoked by the application can generate a key and a value that are associated with a particular event occurring within an application .

The client device is configured with an application state cache that can cache key value pairs associated with an event occurring within an application . The application state cache can be maintained and or stored in memory. The client device is also configured with client device storage which can comprise a mass storage device such as disk storage flash memory storage non volatile memory or any other type of mass storage device. The client device storage includes application state storage which can store information pertaining to events occurring during execution of an application . For example the application state storage can store a key that corresponds to a particular event occurring within an application . Each key can also have a corresponding value that represents a particular value associated with the event. Additionally the application can also be configured to generate a timestamp that corresponds to an event occurring during execution of the application . In some embodiments the application can generate and or set a status flag that corresponds to the event. The status flag can indicate whether a value corresponding to a particular key has changed since a most recent synchronization event.

The application state storage can take the form of various data structures such as a map hash table tree or any other data structure in which key value pairs or other data can be stored. Accordingly a key and value that are generated and or updated by the application in response to the occurrence of an event during execution of the application are first cached within the application state cache . Then key value pairs that are generated by the application and cached in memory within the application state cache are stored by the application within the application state storage of the client device . The key and value can be stored in association with a timestamp as well as potentially a status flag that indicates whether the key and or value has been transmitted to the application synchronization service for storage in the data store .

To transmit state information corresponding to an application to the application synchronization service the application can generate application state information that includes data related to one or more events occurring within one or more applications executed by the client device for transmission to the application synchronization service . The application state information can comprise a data structure that includes data associated with an event occurring during execution of an instance of one or more applications . For example application state information can include data related to an accumulated value such as a coin balance of a user associated with execution of the application by a client device a high score of a user within a game application game progress status of a user related to a game application and any other events that might be generated within the application and which the application is instrumented to synchronize data with the application synchronization service .

Various techniques relating to synchronization of application state information are described in U.S. patent application Ser. No. 13 850 119 entitled RESOLVING CONFLICTS WITHIN SAVED STATE DATA filed Mar. 25 2013 and U.S. Patent Application entitled IDEMPOTENCY OF APPLICATION STATE DATA filed Jun. 19 2013 both of which are incorporated herein by reference in their entirety.

Next a general description of the operation of the various components of the networked environment is provided. As noted above an application executing by a client device can be instrumented upon the occurrence of an event during execution of an application instance to generate application state information containing information about the event. For example when a certain level and or achievement within a game application are reached the application can generate information about the event which can be cached within the application state cache . As a user reaches certain milestones or accomplishes tasks within an application the application can be configured to award coins points or any other reward balance. Additionally the user may spend these rewards to unlock portions of an application and or obtain other rewards or items which cause a decrease in the accumulated total associated with the user. As yet another example the user s progress within a game application can also be tracked and application state information identifying scores times e.g. lap times time to complete levels time to reach milestones etc. or other state information associated with the application can be generated.

The application can generate application state information by utilizing a software library having an application programming interface API provided by and or associated with the application synchronization service so that the application state information can be created in a standardized data format. In other embodiments the application can be instrumented to generate application state information in a standardized data format.

The data format corresponding to application state information can be implemented as a text based data interchange format such as JavaScript Object Notation JSON or any other standardized or proprietary data interchange format that can allow for the exchange of structured data. Accordingly the application executed by a client device can generate and transmit application state information to the application synchronization service which can extract and store the application state information as saved state data .

Application state information may be transmitted by the application to the application synchronization service asynchronously from multiple client devices when a particular client device has the capability to transmit data via the network . For example the application can cache application state information in the application state cache in the client device transmit the application state information upon the occurrence of an event such as termination of the application network accessibility the reaching of a level and or achievement within an application a size of the application state cache and or application state storage reaching a threshold size after the passage of a threshold amount of time since a most recent generation and transmission of application state information to the application synchronization service or in response to any other event or threshold. Application state information can also be generated in real time as and when events are generated within an application instance corresponding to the application or upon the occurrence of other events.

Accordingly because a client device may execute multiple applications that employ the services the application synchronization service a software library invoked by the application may provide any or all of the functionality described herein. Additionally the application state cache may be generated by such a software library and maintained in memory on the client device for use by various applications executed by the client device . Similarly the application state storage can be generated by such a software library and maintained in the client device storage for use by various applications executed by the client device .

Therefore when an application is executed by the client device an event may occur for which the application is instrumented to generate a corresponding key and value e.g. event name and event value . The application can also generate a corresponding status flag and or timestamp. As noted above the status flag can indicate that the key and value have been updated since a most recent synchronization with the application synchronization service or a synchronization event. The key value and timestamp can be initially stored in the application state cache by the application . Upon expiration of a predetermined waiting period after storing of the data in the application state cache the application can then store the key value and status flag in the application state storage . Some applications may be instrumented to generate multiple events and corresponding key value pairs within close temporal proximity to one another. For example upon completion of a level within a game application by a user the application may be instrumented to generate various events relating to scoring information progress data achievement accumulation and various other events associated with the completion of a level and for which key value pairs are generated within close temporal proximity.

Therefore the predetermined waiting period allows multiple possible key value pairs to be stored into the application state cache and in turn allows these key value pairs to be batch submitted to storage in the application state storage . Batch submission of key value pairs from the application state cache can reduce resource consumption on the client device by potentially limiting numerous accesses to the mass storage resources of the client device . The predetermined waiting period can be for example 100 milliseconds or any other waiting period that provides a sufficient buffer or waiting period for the application to potentially generate additional events and corresponding key value pairs. Additionally in some embodiments the application also stores a status flag that provides an indication regarding whether a given key and or value was created changed or updated by the application within the application state storage since a most recent synchronization event.

The status flag can have various possible values. For example the status flag can have a value that corresponds to a synchronized state. Such a state corresponds to a condition in which the corresponding key and value do not require synchronization with the application synchronization service . The status flag can also have a value that corresponds to a dirty state. Such a state corresponds to a condition in which the corresponding key and value have been created and or modified since a most recent synchronization event. The status flag can also have a value that corresponds to a synchronizing state. Such a state corresponds to a condition in which the corresponding key and value are in the process of being transmitted from the client device to the application synchronization service . Therefore when a given key value pair is created and or updated the status flag can also be updated by the application to indicate that the key value pair is in a dirty state.

Should an additional event occur within the application during the above referenced waiting period and should an additional key value pair be generated during the predetermined waiting period the additional key value pair can also be stored within the application state cache . In some embodiments the predetermined waiting period can be reset or restarted by the application when an additional event occurs during the predetermined waiting period for which a key value pair is stored in the application state cache by the application .

The application is also instrumented to periodically report information related to its state e.g. key value pairs in the form of application state information . In some embodiments the application can report information about multiple events that are assembled into a data structure that is presented in a data interchange format such as JavaScript Object Notation JSON and transmitted to the application synchronization service as application state information . In some embodiments the application can periodically generate and transmit application state information to the application synchronization service according to a predefined schedule.

In other embodiments the application can generate application state information as and when key value pairs are stored in application state storage . In other embodiments the application can generate application state information and transmit the application state information to the application synchronization service upon expiration of another predetermined waiting period that begins when a given key and value are stored in the application state storage . Should an additional key and value be stored within the application state storage during the other predetermined waiting period the additional key value pair can also be included in an application state information data structure generated by the application . In some embodiments the predetermined waiting period can be reset or restarted by the application when an additional key value pair is stored in the application state storage during the other waiting period.

The application can also be configured to generate application state information that only includes those items e.g. key value pairs that have changed since a most recent synchronization with the application synchronization service . In other words the application state information can be generated to include the items that have changed since the most recent transmission of application state information to the application synchronization service . Accordingly the application can generate application state information that includes those items having a status flag in a dirty state. The application can exclude from the application state information those items having a status flag in a synchronized state as these items do not require synchronization with the application synchronization service . Additionally the application can also modify the status flag of those items included within the application state information to a synchronizing state until the application transmits application state information including the items to the application synchronization service and or receives a response from the application synchronization service indicating successful receipt of the application state information whereupon the application can then modify the status flag of the items corresponding to the application state information to synchronized. In this way the application can avoid duplicate transmission of information about items to the application synchronization service during a subsequent synchronization event.

Therefore the application and or software library that facilitates synchronization with the application synchronization service can identify those values within the application state storage that have been created updated and or changed since a most recent synchronization event and generate application state information that includes those values as well as other information such as a timestamp key synchronization rule and other data. In some embodiments each time that the application generates and transmits application state information to the application synchronization service the application can store a timestamp corresponding to when the synchronization event occurred. Such a timestamp can be stored within the client device storage . Therefore the application can identify those values that have changed within the application state storage since a most recent synchronization event by identifying values associated with a timestamp that is later than the timestamp associated with the synchronization event. In other embodiments the application can identify those values that have a status flag that corresponds to a dirty state.

Accordingly the application can identify those items associated with a status flag indicating that the key and or value has not been synchronized with the application synchronization service and include data relating to the key and value in an application state information that is generated and transmitted to the application synchronization service . When the application obtains a response from the application synchronization service indicating that information about a particular key and or value corresponding to a dirty status flag has been successfully received by the application synchronization service the application can then modify the status flag to synchronized. 

Referring next to shown is a flowchart that provides one example of execution of an application executed by a client device to generate application state information or a portion of application state information . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client device that reports application state information to the application synchronization service for synchronization of state information across multiple devices of a user according to one or more embodiments.

First in box the application executes functionality associated with the application in a client device . As described above the application has been instrumented by a developer to generate application state information corresponding to events that the developer wishes to synchronize across multiple devices associated with a user account. In box the application determines whether an event occurs during execution of the application for which data is synchronized by the application synchronization service . If so then in box the application generates a value corresponding to the event. At box the value corresponding to the event is stored in the application state cache . As noted above the application state cache can be maintained in memory of the client device . At box the application imposes a waiting period to determine whether additional events occur during execution of the application at box

If an additional event for which a value is generated occurs during the waiting period then the process returns to box where the additional value is also stored in the application state cache . If no additional events occur during the waiting period then at box the application state data stored in the application state cache is stored in the application state storage . At box another waiting period is imposed while the application determines whether additional data is stored into the application state storage from the application state cache . If additional state data is stored into the application state storage then the process returns to box . Otherwise the application may generate application state information that is transmitted to the application synchronization service .

Referring next to shown is a flowchart that provides one example of execution of an application executed by a client device to generate application state information or a portion of application state information by determining what items within application state storage have changed and generating application state information corresponding to the items that have been modified since a most recent synchronization event. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client device that reports application state information to the application synchronization service for synchronization of state information across multiple devices of a user according to one or more embodiments.

First in box the application executes functionality associated with the application in a client device . At box the application determines whether a synchronization event occurs. As noted above data can be synchronized with the application synchronization service periodically upon the occurrence of an event upon the storage of data with the application state storage etc. At box the application can identify the changed values within application state storage based upon whether the timestamp of a particular key and or value indicates that a previous synchronization event occurred before the value was synchronized with the application synchronization service . As noted above the application may also identify those items that have changed within application state storage by identifying those items that are associated with a status flag indicating that the items have not been synchronized with the application synchronization service .

At box the application generates application state information that includes the values and or keys as well as any other data related to the value that have changed since a most recent synchronization with the application synchronization service . At box the application transmits the application state information to the application synchronization service .

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the application marketplace system application synchronization service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are an application and potentially other applications and or software. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the application marketplace system application synchronization service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application synchronization service and or application executed by a client device . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in flowcharts of may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in flowcharts of may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the application synchronization service application or any other application or service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

