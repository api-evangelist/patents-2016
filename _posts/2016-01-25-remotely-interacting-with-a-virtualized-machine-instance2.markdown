---

title: Remotely interacting with a virtualized machine instance
abstract: A system and method for remotely interacting with a virtualized machine instance (VMI) through a trigger mechanism resident at the VMI. When the VMI receives a request via the trigger mechanism, the VMI responds to the request, such as by obtaining a program and executing the program locally at the VMI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652279&OS=09652279&RS=09652279
owner: Amazon Technologies, Inc.
number: 09652279
owner_city: Seattle
owner_country: US
publication_date: 20160125
---
This application is a continuation of and claims priority to commonly owned U.S. patent application Ser. No. 13 563 940 filed Aug. 1 2012 now U.S. Pat. No. 9 244 743 entitled REMOTELY INTERACTING WITH A VIRTUALIZED MACHINE INSTANCE the entirety of which is herein incorporated by reference.

Large scale network based computing represents a paradigm shift from traditional client server computing relationships. With large scale network based computing platforms e.g. data centers customers are able to leverage shared resources on demand by renting resources that are owned by third parties and that reside in the cloud. With these resources customers of the platform are able to launch and maintain large applications without actually owning or servicing the underlying infrastructure necessary for these applications. As such network accessible computing platforms often referred to as cloud computing platforms or cloud computing environments have expanded the class of individuals and companies able to effectively compete in the realm of computing applications.

Generally customers of a network based computing platform launch and maintain large applications within the network based computing platform through the use of one or more virtualized machine instances VMI . VMIs can be created by the network based computing platform and many VMIs can be instantiated and controlled by a single network based computing platform. The VMIs can be in continuous operation for a customer within the cloud and thus can be critical in operation to the customer such that failure of a VMI would have serious repercussions to the customer.

However just like the software on actual computers the software functionality in the VMI must be updated and maintained. Typically this is accomplished by connecting to the VMI through a network or other data transfer route into the VMI such that the code such as a patch or script can be loaded into the VMI through the standard data intake mechanism and then executed to update the VMI. One problem arises however in that the VMI must devote resources for the data transfer operations where such resources are also being allocated for typical usage in the operation of the VMI. Moreover should a large number of VMIs need updating the time frame for the update is delayed until the VMIs can allocate the resources to effect the code import and execute it. If the update is extremely urgent then any delay in getting the instantiated VMIs updated could prove detrimental to the operation of the VMIs and harmful to the customers that use them.

This disclosure describes a system and method for remotely interacting with a virtualized machine instance VMI through a trigger mechanism resident at the VMI. When the VMI receives a request via the trigger mechanism the VMI responds to the request such as by obtaining a program and executing the program locally at VMI or otherwise alters functionality based upon the trigger. In one embodiment the system for remotely triggering a function on one or more virtualized machine instances VMIs includes a computer platform that selectively provides one or more VMIs that are accessible to one or more client devices across a network. A VMI manager is resident on the computer platform that at least maintains the operation of the one or more VMIs and the VMI manager is configured to instantiate a VMI such that the VMI includes at least a trigger mechanism configured to selectively receive one or prompts from the VMI manager to alter VMI functionality.

In one embodiment the trigger mechanism polls the VMI manager to determine if VMI functionality requires alteration the VMI manager pushes a notification that causes the trigger mechanism to poll the VMI manager and or the VMI manager pushes information to the VMI. In an example embodiment the trigger mechanism is an application programming interface API to the VMI manager. The trigger mechanism can be configured to alter the VMI through obtaining and executing one or more computer programs or alternately can change functionality at the VMI. In another embodiment the VMI manager is further configured to instantiate the VMI such that the VMI indicates to the VMI manager that at the VMI has been altered thus confirming the successful execution of the trigger mechanism.

The system can include a server or other computer platform that selectively hosts one or more application programming interfaces APIs accessible on a network. The APIs are accessible to the one or more client devices across a network such that each API can be invoked and one or more messages can be sent to the server that hosts the VMI. A VMI manager running on the host can receive the one or more messages and selectively interact with a trigger mechanism at the VMI.

In accordance with various embodiments the shared computing environment is a network accessible computing platform commonly referred to as a cloud computing environment . For instance one or more entities may host and operate a network accessible computing platform that includes different types of network resources such as a storage service a load balancing service a compute service a security service or any other similar or different type of network accessible service. The services are performed using various computing devices wherein the computing devices include one or more processors that each includes one or more processing cores.

As illustrated each of the servers may include a virtualization layer such as a hypervisor or a VMI manager VMM that can create one or more virtual machine images VMI . . . N for sharing resources of the server if creation of the one or more virtual machine images is needed. As illustrated the virtualization layer may also include a scheduler . The scheduler may generally control processing cores of processors to perform various functions and execute various instructions within the network accessible computing platform on behalf of the virtual machine images . While illustrates the scheduler as residing within the virtualization layer the scheduler may reside in other locations in other implementations.

Each of the servers also generally includes one or more processors and memory which may comprise any sort of computer readable storage media and may store one or more applications . The servers may also include one or more other components typically found in computing devices such as communication connections input output I O interfaces and the like. The hypervisor VMM or any of the software management layers shown herein can be uniformly executed in the same program space on the same server or can be broken out individually based upon functionality and the programs can be resident on several servers.

One or more client devices . . . N communicate and interact with the network accessible computing platform in order to obtain computing services from the network accessible computing platform . The client devices communicate with the network accessible computing platform via a network such as for example the Internet and communication connections and I O interfaces. Generally the computing services from the network accessible computing platform are available to the client devices in scalable increments or amounts which can be dynamically increased or decreased in response to usage and or demand. Service fees may be tied to the amount of the resources that are actually used.

Generally the client devices are in the form of one or more servers . However this is not meant to be limiting and it is presented as such for ease and clarity. Similar to the network accessible computing platform each of the one or more servers that make up a client device generally includes one or more processors and memory . The memory generally has stored therein one or more applications . These various modules and associated techniques will be further described in more detail herein.

The computing services available from the network accessible computing platform may include functional elements or services. Functional elements or services may comprise applications or sub applications that are used as building blocks for client device applications. For example the network accessible computing platform may provide predefined database functionality in the form of a discrete service that can be instantiated on behalf of a client device. Functional components may relate to network communications and other services or activities. Network related services may for example include firewalls load balancers filters routers and so forth. Additional functional components may be available for such things as graphics processing language translation searching etc.

The computing services may also be characterized by service types or categories such as by the types or categories of services they provide. Different types or categories of services may include database services web servers firewalls file replicators storage services encryption services authentication services and so forth. In some embodiments services may be categorized at a relatively high level. For example a database services category may include various different implementations of database services. In other embodiments services may be categorized more specifically or narrowly such as by type or family of database services. In embodiments such as this for example there may be different categories for relational databases services and non relational database services and for SQL and other implementations of databases services.

Service parameters for the computing services provided by the network accessible platform may correspond to options configuration details speeds capacities variations quality of service QoS assurances guaranties and so forth. In the example of a database service the service parameters may indicate the type of database relational vs. non relational SQL vs. Oracle etc. its capacity its version number its cost or cost metrics its network communication parameters and so forth.

With reference to the present system in one embodiment instantiates the VMIs N such that programmatic interaction of VMIs is available with a computer platform such as network accessible computing platform that selectively provides one or more VMIs that are each accessible to one or more client devices across a network. Such interaction can be the execution of a program such as a patch code or update or can be changing the operational characteristics of the VM resetting passwords or other security gathering operational metrics of the VMI or causing reconfiguration of the operational components.

The computer platforms can be resident on one or more servers which can be in a data center and managed as cloud computing resources as are known in the art. A VMI manager such as a hypervisor or virtualization layer resident on or accessible to the computer platform that at least maintains the operation of the one or more VMIs on behalf of one or more customers. The VMI manager will instantiate each VMI N such that the VMI includes at least one trigger mechanism such as an application programming interface API or an agent. In an example embodiment the trigger mechanism can be used to interact with operating systems or applications running in the VMI so as to for example selectively receive one or more computer programs such as a patch or script from the VMI manager virtualization layer that can be executed within the VMI. The trigger mechanism can also be implemented as an event channel common data store a hyper call or other command level access between the VMI and the VMI manager.

In one embodiment the API of the VMI N can be used to poll the VMI manager to determine if there are any trigger prompts such as prompts indicating one or more computer programs are to be received and executed within the instantiated VMI. For example the VMM can run a web server and a program running in the VMI N can periodically issue web service calls to the web server to determine if there are any trigger prompts. Alternately the VMI manager can push prompts out to the VMI. Furthermore VMI can report information to the VMI indicating to the VMI manager that the functionality at the VMI has been altered as requested.

The system and method accordingly provide the ability for the instantiated VMI N to be patched updated or otherwise have programs selectively executed without needed to open a data port or other data path access to the VMI. Thus no network traffic needs to be passed to the VMI as all communication is inherently secured locally in the hypervisor virtualization layer .

Moreover communication can even occur if the VMI N is off the network or if the firewall of the VMI is set to allow no communications. In one embodiment when the VMI is instantiated it will contain the code that causes an API to be the trigger mechanism for updating code such as patching enabling or disabling network adaptors or performing configurations that would otherwise require a physical console or the VMI to be reachable on the network. The system can also be embodied to allow customers such as client devices to remotely patch their VMIs without having to open up any ports as is shown in herein. And importantly an emergency roll out of updates to VMIs can occur quickly without waiting for the VMI to have the requisite ability to invoke the standard data communication paths.

In the system is shown as embodied with a common data store that has a resident program that is to be obtained and executed by the VMI. Thus this architecture would correspond to the process illustrated in where the client will have the VMI instance look to another network location for a program or other command or data. In one embodiment the trigger mechanism itself can be the common data store wherein the mere presence of a program etc. is the triggering event. Thus in operation the provision server would push the program data etc. to the data store and such would serve as a prompt to the VMI. The VMI in this embodiment would thus periodically check the data store to see if any data is present.

Alternately the trigger mechanism interface can allow the VMM to deliver a bit to the agent that indicates that a prompt has arrived. This causes the agent to check the data store to get the request. The agent can obtain the prompt and optionally the program to be applied from the shared data store . The agent can then otherwise take an action in the VMI in response to the prompt such as applying patches to the VMI OS disabling network cards or other data paths gather performance metrics etc.

It should be noted that the system can be embodied such that the client uses a software development kit such that the client can programmatically invoke the commands instead of doing it through a browser as described above. The customer interface is merely shown as illustrative of one embodiment where the client can have command level access to instantiated VMIs.

In this embodiment then VMI manager then pushes out the program s that are to be executed in the instantiated VMI as shown at step . Thus here the VMI manager is causing the trigger and pushing out programs for updating. Then a determination is made as to whether the VMI has confirmed that the program s has been received and executed at the VMI as shown at decision . If confirmation has been received at decision then the process iterates to decision to await further updating of the program s at the VMIs. Otherwise if confirmation is not received at decision then an error is output to the VMI manager as shown at step indicating that the update was not successful and the process again iterates to decision to await further updating.

It should be noted that several functionalities are included in the process of that are merely shown for illustration such as the sending of programs at step and the confirmation receipt of decision . Other functionalities can likewise be added to the process of to enhance the ability to update the VMI s without causing a data port or other communication pathway to necessarily open.

If the program needs to be retrieved at another location at decision then the program is retrieved from the location as shown at step . Otherwise if the program does not need to be retrieved from another location or once the program is retrieved at step a determination is made as to whether the program has been received as shown at decision . If the program needed for updating has not been received by the VMI at decision then an error is returned to the VMI manager as shown at step and then the process iterates to again periodically poll the VMI manager at step .

Otherwise if the program for updating has been received at decision then the received program is executed as shown at decision and a determination is made as to whether the program was successfully executed at the VMI as shown at decision . If the program was not successfully executed at decision then an error is returned to the VMI manager at step and the process iterates to periodically poll the VMI manager as shown at step . Otherwise if the program was successfully executed at the VMI at decision the successful execution is indicated to the VMI manager as shown at step and the process iterates to periodically poll the VMI manager at step . In this embodiment the confirmation from the VMI of program execution at step will interface with the confirmation determination of the VMI manager at decision in .

Thus in this embodiment the server N can either directly locate the server of the VMI and prompt the trigger mechanism or can notify another device to cause the trigger mechanism to be prompted. It should be noted that either of these paths can be the sole mechanism to attempt to prompt the trigger mechanism at the VMI.

Thus if another computer device needs to prompt the VMI trigger mechanism at decision then the other device is notified to prompt the VMI trigger mechanism as shown at step . Otherwise if the direct triggering of the VMI is possible at decision then the trigger mechanism is directly prompted as shown at step . Once the other device is notified at step or the trigger mechanism has been prompted at step a determination is made as to whether the action was effected at the VMI as shown at decision .

If the action has not been effected the VMI at decision then an error is returned to the VMI manager as shown at step and then the process iterates to again await another request from a client device N at step . Otherwise if the action has been successfully effected at decision the successful execution is indicated to the VMI manager as shown at step and the process iterates to await further requests from the client device N at step .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claims.

