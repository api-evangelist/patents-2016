---

title: Tracking user interactions with a mobile UI to facilitate UI optimizations
abstract: The disclosed embodiments relate to an apparatus or system for tracking and analyzing user interactions with a mobile user interface (UI). During operation, the apparatus collects data while a user interacts with the mobile UI through a touchscreen, wherein the data includes tap-attempt data that specifies coordinates for touchscreen locations that the user has tapped while interacting with the mobile UI. Next, the apparatus compares the tap-attempt data with locations of tappable elements in the mobile UI, wherein each tappable element has an associated tap target size. For each tappable element, the apparatus uses results of the comparison to determine a percentage of tap attempts that have succeeded or failed for the associated tap target size. Finally, the apparatus makes the percentage information available to a UI designer to enable the UI designer to adjust tap target sizes for the mobile UI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448710&OS=09448710&RS=09448710
owner: LinkedIn Corporation
number: 09448710
owner_city: Mountain View
owner_country: US
publication_date: 20160119
---
This application is a continuation of and claims priority under 35 U.S.C. 120 to pending U.S. patent application Ser. No. 14 162 526 filed Jan. 23 2014.

The disclosed embodiments generally relate to the design of user interfaces UIs for mobile computing devices such as smartphones. More specifically the disclosed embodiments relate to techniques for tracking and analyzing user interactions with a mobile UI to facilitate optimizations to the mobile UI.

As mobile computing devices such as smartphones and tablet computers continue to proliferate they are rapidly becoming the platform of choice for users who access online applications. However the process of interacting with a mobile application can be challenging because mobile applications typically have a much smaller amount of screen real estate to work with than desktop applications which makes it hard to display a large number of application control elements such as buttons or sliders to a user.

Moreover users typically interact with these control elements by using a finger to tap or swipe associated regions on a touchscreen. However a user s finger is a relatively blunt instrument in comparison to a cursor in a desktop user interface UI . Hence the targets for touchscreen taps or swipes need to be larger than corresponding targets for cursor selections in a desktop UI. This means that fewer control elements can be presented through a mobile application UI because each control element takes up more screen real estate than a similar control element in a desktop UI.

The designer of a mobile UI needs to carefully size the tap targets for control elements. If a tap target is too small a user who attempts to activate the tap target is likely to fail which requires the user to try again and thereby degrades the user s experience. On the other hand if the tap target is too large the user may inadvertently activate the tap target which also leads to an unsatisfactory user experience.

Hence what is needed is a mechanism that helps a UI designer to determine the optimal size for a tap target.

The following description is presented to enable any person skilled in the art to make and use the disclosed embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the disclosed embodiments. Thus the disclosed embodiments are not limited to the embodiments shown but are to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computing device system or apparatus. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing code and or data now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored on a non transitory computer readable storage medium as described above. When a device system or apparatus reads and executes the code and or data stored on the non transitory computer readable storage medium it performs the methods and processes embodied as data structures and code and stored within the non transitory computer readable storage medium.

Furthermore the methods and processes described below can be included in hardware modules. For example the hardware modules can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs and other programmable logic devices now known or later developed. When the hardware modules are activated the hardware modules perform the methods and processes included within the hardware modules.

The disclosed embodiments relate to a system or an apparatus or device for tracking user interactions with a mobile user interface UI . During operation the system collects data while a user interacts with the mobile UI through a touchscreen wherein the data includes tap attempt data that specifies coordinates for touchscreen locations that the user has tapped while interacting with the mobile UI. Next the system compares the tap attempt data with locations of tappable elements in the mobile UI wherein each tappable element has an associated tap target size. Note that the tap target size can be larger or smaller than the associated graphical image or icon that is used to represent the associated control element. For each tappable element the system uses results of the comparison to determine a percentage of tap attempts that have succeeded or failed for the associated tap target size. Finally the system makes the percentage information available to a UI designer to enable the UI designer to adjust tap target sizes for the mobile UI.

Before describing how the system collects and analyzes tap attempts and other gestures we first describe a computing environment in which the system operates.

More specifically mobile devices and which are operated by users and respectively execute mobile applications that function as portals to an online application which is hosted on mobile server . Note that a mobile device can generally include any type of portable electronic device that can host a mobile application including a smartphone a tablet computer a network connected music player a gaming console and possibly a laptop computer system.

Mobile devices and communicate with mobile server through one or more networks not shown such as a Wi Fi network a Bluetooth network or a cellular data network. During operation the mobile applications send various types of user interaction data which are described in more detail below to mobile server . Mobile server in turn forwards this user interaction data through a proxy onto a communications bus . The user interaction data is ultimately stored in a user interaction data store within storage system . Although the illustrated embodiment shows only two mobile devices in general there can be a large number of mobile devices and associated mobile application instances possibly thousands or millions that simultaneously send user interaction data through communications bus to storage system .

In some embodiments the user interaction data is sent to mobile server whenever it is generated. Alternatively the user interaction data can be aggregated on mobile devices and and can be sent periodically to mobile server in larger blocks.

As mentioned above the disclosed embodiments can also analyze user interaction data for desktop UIs. For example desktop systems and which are operated by users and respectively can periodically transmit user interaction data to desktop server and desktop server can forward this user interaction data to communications bus . This user interaction data from desktop systems and can similarly be stored in user interaction data store within storage device .

Note that communications bus proxy and storage device can be located on one or more servers distributed across a network. Also mobile server desktop server proxy communications bus and storage device can be hosted in a virtualized cloud computing system.

User interaction data from user interaction data store feeds into a UI analysis tool which generates and displays information about user interactions with a mobile UI e.g. success rates for tap attempts . Note that UI analysis tool can be implemented as a web client. UI analysis tool is described in more detail below but first we describe an exemplary mobile device.

Mobile device also includes various software components including an operating system which can be used to execute various mobile applications . For example these mobile applications possibly output various types of user interaction data as is described in more detail below. Furthermore the operating system can include the Android operating system distributed by Google Inc. of Mountain View Calif. the iOS operating system distributed by Apple Inc. of Cupertino Calif. the Windows Phone operating system distributed by Microsoft Corporation of Redmond Wash. or the BlackBerry OS distributed by BlackBerry Ltd. of Waterloo Ontario Canada. Moreover mobile applications can include mobile applications that can run on the Android iOS Windows Phone or BlackBerry OS operating systems.

Next the system stores the collected data locally on a mobile device associated with the mobile UI step . For example the collected data can be stored in a temporary cache or a local file in the mobile device. Moreover these storage operations can be performed using a background process so that the data collection process does not interfere with other applications on the mobile device. Then the system periodically aggregates and sends the collected data from the mobile device to a server such a mobile server which stores the collected data in a storage device step . For example this aggregation and sending process can take place once a week.

The same collection process can also take place for a desktop UI in a desktop computer system . However instead of collecting information about the coordinates of touch locations on a touchscreen the system can collect information about specific cursor locations when an associated pointing device button e.g. mouse button is depressed. In this way the system can similarly collect information about how frequently specific UI elements are selected.

During operation the system periodically retrieves user interaction data from a server step . For example in the system illustrated in UI analysis tool periodically retrieves data from user interaction data store in storage device .

Next the system associates tap attempts with proximate tappable elements in the mobile UI step . In some embodiments the server stores metadata for each page of the mobile UI wherein the metadata for a given page includes metadata associated with each tappable element in the given page. The metadata for each tappable element can include 1 an identifier for the tappable element 2 a screen position of the tappable element 3 a current tap target size for the tappable element and 4 a screen image for the tappable element. This metadata for tappable elements can be used to associate each tap attempt with a proximate tappable element or possibly with a proximate non tappable element as is described in more detail below. This association can be based on proximity. Hence if a tap attempt falls within a threshold distance of a UI element it will be associated with the UI element.

Then for each tappable element the system determines whether the associated tap attempts have succeeded or failed based on the tap target size for the tappable element step . This involves simply determining whether each tap attempt falls within the borders of the tap target or not. Next for each tappable element the system uses results of the comparison to determine a percentage of tap attempts that have succeeded or failed for the associated tap target size step . Finally the system makes the percentage information available to a UI designer to enable the UI designer to adjust tap target sizes for the mobile UI step .

At the start of this process the system examines the tap attempt data to identify a cluster of tap attempts that are proximate to a non tappable element in the mobile UI step . For example the system can look to see if a group of tap attempts is within a threshold distance of a non tappable element. If such a cluster is identified the system notifies the designer about the cluster of tap attempts that are proximate to the non tappable element step . This enables the UI designer to make corrective adjustments to the mobile UI. For example the UI designer can change the appearance of the non tappable element to more clearly indicate that the non tappable element is not tappable. This can involve changing the size color or appearance of the non tappable element. Alternatively the UI designer can make the non tappable element tappable if there is a function that users are expecting the non tappable element to activate.

At the start of this process the system compares swipe attempt data with locations of swipable elements in the mobile UI step . Next for each swipable element the system uses results of the comparison to determine a percentage of swipe attempts that have succeeded or failed for the associated swipe target size step . Finally the system makes this percentage information available to a UI designer to enable the UI designer to adjust swipe target sizes for the mobile UI accordingly step .

Note that the above described process can generally be applied to any type of user gesture and is not meant to be limited to swipe attempts or tap attempts.

The UI that appears on the left hand side of is the same as the UI on the right hand side of except that tap attempt and swipe attempt data has been overlaid on top of the UI. In particular the green dots represent touch down locations for successful tap attempts assuming a given tap target size and the red dots represent touch down locations for unsuccessful tap attempts. Moreover the blue lines connect touch down locations with associated touch up locations for swipe gestures. The tappable elements are associated with a number of successful tap attempts as indicated by the green dots and a number of unsuccessful tap attempts as indicated by the surrounding red dots. Moreover the slider is associated with a number of successful swipe attempts which are indicated by red dots attached to blue lines.

The system can also make recommendations to the UI designer based on this data. For example the system might say the following.

Clicking on the Fix it link directs the user to a tap target sizing tool which is described in more detail below.

The foregoing descriptions of disclosed embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the disclosed embodiments to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the disclosed embodiments. The scope of the disclosed embodiments is defined by the appended claims.

