---

title: Assigning communication paths among computing devices utilizing a multi-path communication protocol
abstract: A method for routing communication paths among computing devices. The method includes a one or more computer processors identifying a computing entity and a data storage entity that transfer data. The method further includes determining a plurality of communication ports that the data storage entity utilizes to transfer data to the computing entity. The method further includes identifying a plurality of computing resources respectively associated with the determined plurality of communication ports that the data storage entity utilizes to transfer the data to the computing entity. The method further includes generating a list of tuples for the data storage entity based, at least in part, on the identified plurality of computing resources and the determined plurality of communication ports.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09461867&OS=09461867&RS=09461867
owner: International Business Machines Corporation
number: 09461867
owner_city: Armonk
owner_country: US
publication_date: 20160203
---
The present invention relates generally to the field of network communications and more particularly to controlling the network connections utilized by multi path data transmissions protocols.

In a distributed computing environment large volumes of information can be stored on systems that are optimized for data storage such as a network attached storage NAS system and or a storage area network SAN . The execution of software and programs can be deployed to hardware that supports virtual systems e.g. virtual machines . In addition various components within a computing system can be virtualized such as network switches and communication adapters. A virtual machine e.g. an application server can be dynamically configured e.g. computational speed multitasking high volume network traffic response time reliability etc. and optimized for the applications executed on the virtual machine VM . In contrast some objectives of utilizing NAS and or SAN systems as opposed to integrating data storage on a computing system hosting VMs are improved availability e.g. fault tolerance improved performance e.g. bandwidth improved scalability and improved maintainability e.g. disaster recovery processes .

Various network topologies exist that can enable the communication between a computing system hosting VMs and a SAN storing the information utilized by a VM. A mesh network topology provides at least two nodes with two or more communication paths between the nodes which provides redundant paths for the communications. In addition various communication protocols can be utilized within a communication network. Some networking protocols e.g. Fibre Channel Protocol FCP are implemented on the communication adapters e.g. host bus adapters which reduces the resource demands on central processing units CPUs within a computing system and or a SAN. Other networking protocols can take advantage of the redundant paths within some networks to increase the bandwidth of information transfer. Two such protocols are Stream Control Transmission Protocol SCTP and Multi path Transmission Control Protocol MPTCP . In addition various virtualization technologies can be applied to communication ports of a computing system and or a SAN. In one instance virtualizing port IDs improves the isolation of VMs utilizing the same physical port on a SAN.

Aspects of an embodiment of the present invention disclose a method computer program product and computing system for routing communication paths among computing devices. The method includes one or more computer processors identifying a computing entity and a data storage entity that transfers data. The method further includes determining a plurality of communication ports that the data storage entity utilizes to transfer data to the computing entity. The method further includes identifying a plurality of computing resources respectively associated with the determined plurality of communication ports that the data storage entity utilizes to transfer the data to the computing entity. The method further includes generating a list of tuples for the data storage entity based at least in part on the identified plurality of computing resources and the determined plurality of communication ports.

Embodiments of the present invention recognize that virtual environments for application servers as well as storage systems is an area of growth for some businesses. Data center decentralization and Cloud computing are two factors that contribute to this growth. To ensure that the transmission of data among application servers and SAN and or NAS systems is reliable and low latency multi path information transfer may be utilized. Some networking technologies utilize a World Wide Name WWN as a unique identifier for a storage technology. Some storage technologies that utilize WWNs are Fibre Channel FC serial attached virtual Small Computer Serial Interface SAS and Advanced Technology Attachment ATA . In one instance a WWN may be used as a World Wide Node Name WWNN to identify a switch. In another instance a World Wide Port Name WWPN may be utilized to identify a port on a switch e.g. communication adapter . To reduce the number of physical ports required on communication adapters e.g. host bus adapters HBA of a computing system SAN and or a NAS N Port ID Virtualization NPIV may be utilized. In addition without NPIV the logical unit number LUNs e.g. storage devices zoned to a specific physical N Port ID would be visible to any VM that is connected to that N Port ID. NPIV enables multiple WWPNs to be assigned to a single physical N Port. Different LUNs can be assigned to each WWPN rendering a LUN visible only to the VM that is zoned to a specific WWPN.

Embodiments of the present invention recognize that in a computing system that utilizes virtualization e.g. hypervisor based a large number of VMs may be provisioned. The communication ports on the computing system are initiators of the communication with a storage system. By utilizing I O and port virtualization the total number of possible communication paths that can be created between the VMs and a network in some instances may exceed 10 000 paths. Similarly a storage system e.g. a SAN can present a large number of possible connections targets to a network. This large number of possible connection paths e.g. routes may provide connection redundancy between a VM and a storage device however this does not preclude creating bottle necks at the physical ports of a storage device. Embodiments of the present invention recognize that simply limiting the number of connection paths may result in a limited number of hardware components and ports being utilized generating hot spots or congestion while other hardware components and ports are not utilized.

Embodiments of the present invention provide redundancy and load balancing for VMs of a computing system that communicate information over a network to a storage system utilizing a multi path communication protocol. Embodiments of the present invention determine the communication resources e.g. servers HBAs physical ports physical port IDs virtual port IDs etc. available on a storage system and the requirements e.g. LUNs bandwidth timeout constraints fault tolerance etc. of the VMs and associated software executing on the VMs of a computing system that communicate with the storage system. The computing resources of a storage system are identified and a sorted list of the computing resources is generated in accordance with an embodiment of the present invention. In some embodiments of the present invention computing resources of a storage system are cyclically distributed based on a hardware hierarchy as a method to minimize the effects of faults that may occur on a storage system. The sorted list includes the targets e.g. port IDs WWPNs on the storage system. The targets are distributed among the initiators e.g. port IDs WWPNs utilized by one or more VMs of a computing system. In addition embodiments of the present invention recognize that a computing system and or a storage system may reserve one or more system e.g. computing resources. In an embodiment of the present invention a computing system includes a communication routing program that utilizes information associated with the initiator target assignments for negotiating e.g. handshaking the communication paths between a computing system and a storage system.

In one embodiment a percentage of the total possible targets is assigned to each initiator. In another embodiment the number of targets assigned to an initiator is related to the bandwidth associated with a VM and or software application executing on a VM. In addition embodiments of the present invention recognize that VMs of a computing system may be dynamically created e.g. provisioned paused stopped and destroyed. Limiting the distribution of the total number of targets provides a method to assign e.g. allocate targets to new initiators without generating a new sorted target list and renegotiating a plurality of communication paths between a computing system and a storage system. In some embodiments of the present invention one or more communication paths between a computing system and a storage system are monitored. In an embodiment the monitoring of one or more communication paths is utilized to detect communication faults. In another embodiment the monitoring of one or more communication paths is utilized to verify that sufficient bandwidth e.g. communication paths is assigned to an initiator.

Embodiments of the present invention also recognize that a VM of a computing system may execute various software programs where each software program may utilize one or more initiators to communicate with a storage system. In some embodiments each initiator utilized by a VM may be assigned a different number of targets on a storage system. In other embodiments a software program is determined to have timeout constraints that may affect the routing selection method routing selection delay and target assignments. For example a software program that includes a timeout constraint may fail abort and or produce an error message when requested information requested from data storage is not received within a period of time dictated by the code of the software program.

An alternate embodiment of the present invention recognizes that multi path communications may also exist within computing systems hosting application servers and data storage systems as part of input output I O virtualization. Some embodiments of the present invention may be utilized by internal communication networks to handle redundancy and load balancing issues.

The present invention will now be described in detail with reference to the Figures. illustrates distributed computing environment which includes computing system storage and network . An embodiment of distributed computing environment includes computing system and storage interconnected over network . Many modifications to the depicted environment may be made by those skilled in the art without departing from the scope of the invention as recited by the claims.

In some embodiments computing system is comprised of physical and virtualized systems. Physical systems can be a stand alone computer or alternatively a computing system utilizing clustered computers and components. Virtual systems are independent operating environments that use virtual resources made up of logical divisions of physical resources such as processors disks network cards e.g. input output I O adapters and memory . Hypervisor provides the ability to divide physical computing system resources into isolated logical partitions. Each logical partition operates like an independent computing system running its own operating system e.g. a virtual system . The independent operating environments controlled by a hypervisor may be structured in various schemes and hierarchies e.g. logical partitions LPAR servers . In some embodiments hypervisor interfaces with communication routing program as the status of one or more VM changes e.g. provisioned destroyed etc. .

In some embodiments in addition to creating and managing the logical partitions and associated VMs hypervisor manages communication between the logical partitions and other systems within computing system via one or more virtual switches not shown . In an embodiment some virtual switches and internal network communications are represented by bus . To facilitate communication each logical partition may include one or more virtual adaptors for communication between the VMs within a logical partition and VMs or other systems outside of the LPAR. For example LPAR includes virtual adapters and associated with VM VM and VM respectively. The type of the virtual adapter depends on the operating system used by the logical partition. Examples of virtual adapters include virtual Ethernet adapters virtual fiber channel adapters virtual small computer serial interface SCSI adapters and virtual serial adapters. Some of the virtual adapters utilize bus to facilitate communications. In an embodiment bus may be configured to create as a Virtual Local Area Network VLAN within computing system . In another embodiment computing system may utilize other technologies such as Virtual Machine Communication Interface VMCI protocol or virtual network interface cards VNIC to enhance the communications among virtual adapters. Physical and virtual adapters within computing system may utilize protocols that support communication via virtual port IDs e.g. NPIV WWPNs .

In some embodiments computing system is divided into logical partitions LPARs that include LPAR and LPAR with each LPAR executing an independent operating environment such as an operating system OS . In an embodiment LPAR contains an OS that supports a virtual I O server VIOS . The VIOS LPAR i.e. LPAR includes I O server and I O server with the I O servers respectively including communication adapters e.g. host bus adapters HBA and or and and or . In another embodiment LPAR includes VM VM and VM executing a shared OS. In other embodiments at least one of I O server and I O server are physical computer servers e.g. blade servers network servers etc. that communicate with various portions of computing system via an internal communication system bus .

In an embodiment communications from network are routed through communication adapters e.g. HBAs network interface cards NIC etc. and and and of I O server and I O server respectively on logical partition to bus . Communications from virtual adapters and in logical partition may be routed through bus to network in accordance with an embodiment of the present invention. In one embodiment one or more of communication adapters and are physical adapters included in network cards . In another embodiment one or more of communication adapters and are virtual adapters derived from network cards . In an alternative embodiment one or more physical network adapters are allocated to logical partition for VM and to function in place of instances of virtual adapters and .

In an embodiment computing system communicates through network to storage e.g. a storage area network . One or more connections of computing system to network occur via ports herein identified as initiators. One or more connections of storage to network occur via ports herein identified as targets. Network can be for example a local area network LAN a telecommunications network a wireless local area network WLAN a wide area network WAN such as the Internet or any combination of the previous and can include wired wireless or fiber optic connections. In general network can be any combination of connections and protocols that will support communications between computing system and storage in accordance with embodiments of the present invention. In another embodiment network operates locally via wired wireless or optical connections and can be any combination of connections and protocols e.g. NFC laser infrared etc. . Network may be configured in various topologies e.g. bus tree mesh hybrid fabric switched fabric etc. .

Communication routing program utilizes various communication protocols to communicate data between computing system and storage based on the networking technologies utilized by network and the protocols supported by instances of physical and or virtualized network adapters utilized by computing system and storage . In one embodiment communication routing program utilizes one or more protocols that support multi path data communication between computing system and storage . In some embodiments communication routing program may establish e.g. negotiate a plurality of connections e.g. communication paths between computing system and storage and communicate information associated with the connections e.g. initiator IDs target IDs to path generation program . In another embodiment communication routing program dictates the assignment of the target ports on storage based on a sorted list of targets generated by path generation program . In an example communication routing program receives initiator target assignment from path generation program for initiator ports of computing system e.g. referencing target port list for storage . In other embodiments communication routing program utilizes one or more networking utilities to determine information associated with a communication path. Information determined by communication routing program may include a status a retry rate a packet loss rate a queuing delay a propagation delay an error rate a fault and a handshaking error.

In a further embodiment communication routing program may utilize technologies such as N Port ID Virtualization NPIV and N Port Virtualization NPV to enable one or more ports of I O server and I O server to be identified by more than one instance of a WWPN. In a different embodiment communication routing program enables multi path communication e.g. multi path I O via I O virtualization within computing system . For example communication routing program enables multi path communication between VM e.g. processors utilizing virtual adapter e.g. network cards and disks .

Environment includes I O server communication adapter communication adapter bus and connections to network . Environment is described in further detail with respect to .

Path generation program determines which physical or virtual initiators e.g. communication adapter ports of computing system communicate with storage utilizing a multi path communication protocol. Multiple instances of path generation program may execute concurrently. Path generation program may execute concurrently with alternate path selection program . In some embodiments another instance of path generation program may execute when a new VM activates. In an embodiment path generation program determines the number of targets available on storage and the physical relationships e.g. communication adapter address server supporting a communication adapter of those targets on storage . Path generation program utilizes this information to determine the number of connections that may be utilized by each initiator and a group of targets that are assigned to each initiator. Path generation program communicates groups of targets that are assigned to each initiator to communication routing program which subsequently generates the connection paths between computing system and storage via network utilizing a multi path communication protocol. In other embodiments path generation program communicates with hypervisor to determine when a new VM is provisioned and which initiators are utilized by the provisioned VM. In addition path generation program communicates with hypervisor to determine when the status of a VM changes for example when a VM de provisions and which initiators are associated with the de provisioned VM.

In a further embodiment path generation program may monitor a communication path between an initiator and a target. In a scenario if path generation program detects a problem with a communication path e.g. connection path generation program may activate alternate path selection program . In another embodiment path generation program may also determine which VM within LPAR utilizes the initiator of the affected communication path.

Alternate path selection program responds to faults detected in storage . Alternate path selection program determines which targets e.g. ports port IDs WWPNs WWNNs on storage are associated with a fault detected on storage . Based on the sorted list of targets generated by path generation program alternate path selection program determines which initiators are assigned e.g. connected to the affected targets. In one embodiment alternate path selection program may communicate with communication routing program and flag the affected connection to prevent further use of the flagged connection while the communication fault is present on storage . In another embodiment if sufficient connections between an initiator and storage are affected that degrade the communication bandwidth for a VM alternate path selection program may activate path generation program to generate a new list of connections for the affected VM. In a further embodiment alternate path selection program may utilize information associated with a VM of an affected initiator determined by path generation program step to determine if software executing on the VM includes timeout constraints which may be triggered by the affected communication connection.

Storage includes data and information utilized by VM VM and VM . The data and information contained within storage may include text files video files audio files numerical data e mail files databases etc. In one embodiment storage is a storage area network SAN . In another embodiment storage is network attached storage NAS system. In some embodiments storage may be a SAN NAS hybrid system. In addition storage may utilize storage virtualization to enable additional functionality and more advanced features within a computer data storage system.

In a different embodiment storage utilizes I O virtualization and multi path communication within storage . For example servers and may have HBAs that communicate with the controllers of the storage devices not shown via storage virtualization utilizing NPIV and NPV. Some protocols utilized within storage may include Fibre Channel protocol FCP Internet SCSI iSCSI SAS Fibre Channel over Internet Protocol FCIP ATA over Ethernet AoE and Fibre Channel over Ethernet FCoE .

In step path generation program determines which initiators of a computing system communicate with a storage system utilizing a multi path communication protocol. In one embodiment path generation program determines which initiators of computing system communicate with storage by the protocol utilized by a communication connection. In an example path generation program may communicate with communication routing program to determine which initiators of computing system communicate with storage via MPTCP SCTP and or FCP. In another example path generation program utilizes handshaking information determined by communication routing program to determine which initiators utilize a multi path communication protocol. In another embodiment path generation program determines which initiators of computing system utilize a multi path communication protocol based on configuration information associated with a VM e.g. VM . In one scenario path generation program may determine that an initiator e.g. P utilizes a multi path communication protocol based on the middleware and or application programming interfaces APIs not shown executed by a VM e.g. VM that utilizes the initiator e.g. P . In another scenario path generation program determines which initiators utilize a multi path communication protocol based in the provisioning information associated with a VM e.g. VM .

In step path generation program determines a number of targets of a storage system that connect to each initiator. In an embodiment path generation program utilizes information determined by communication routing program obtained while establishing a plurality of connections between computing system and storage to determine the number of targets that are connected to each initiator. In a further embodiment path generation program communicates with storage to determine the number of targets e.g. ports port IDs that are utilized by computing system and which targets are reserved e.g. inactive on storage .

In step path generation program generates a sorted list of targets. Path generation program generates a sorted list of targets e.g. port ID s WWNNs WWPN for storage based on physical and virtual computing resources related to the targets. In an embodiment the resources of storage include one or more servers where each server further includes one or more communication adapters and each communication adapter further includes one or more ports.

In one embodiment path generation program generates a sorted list that may be described as a series of tuples in the format of S C P where S C and P respectively identify a server a communication adapter and a communication port e.g. a port ID . Each element within the tuple format of S C P is cyclically utilized. In this embodiment path generation program prioritizes the sort based on a hardware hierarchy e.g. servers affect communication adapters communication adapters affect ports . In an example referring to the elements within utilizing the S and C elements of the tuple format an instance of path generation program generates the series A A A A A and A . In some scenarios the length of the series generated by path generation program is based on the total number of target ports on storage . In other scenarios the length of the series generated by path generation program is based on the number of target active ports on storage .

In some embodiments one or more components of storage may be virtualized. Referencing path generation program bases the sorted list on server server server and the communication adapters e.g. A A A A A A respectively associated with each server. Path generation program also cyclically distributes the respective communication ports physical and or virtual among each server communication adapter combination. Referencing the ports that are included in the list are VP VP P P P P P P P P P P and P. In another embodiment path generation program applies a sorting routing on the components depicted in to generate the target port list for storage depicted in .

Referring to step in other embodiments path generation program does not include WWPNs as port IDs when generating a sorted list of targets. Path generation program assigns the WWPN based on the LUNs that are utilized by a VM. In a different embodiment path generation program may create a sorted list of ports based on other factors. Such factors may include connection speed routing paths connection reliability etc.

In step path generation program defines a number of connections for each initiator and assigns targets to each initiator based on the sorted list of targets. Path generation program may utilize one or more rules e.g. determined by a system administrator dictated by a software program included in the provisioning of a VM etc. . In one embodiment path generation program identifies the bandwidth needed for the multi path communications of each initiator utilized by a VM e.g. VM VM and VM and determines a number of connections to storage e.g. targets to support the identified bandwidth. In an instance referring to the sorted list of initiators VP VP and VP utilize a similar bandwidth e.g. communication rate and path generation program assigns four connections e.g. communication paths to initiators VP VP and VP. In another instance path generation program determines that initiator P utilizes a higher bandwidth and path generation program assigns initiator P seven connections. In a different instance path generation program receives an indication from VM that a program executing on VM which utilizes initiator P includes timeout constraints. Path generation program may determine that the bandwidth utilized by P is similar to VP however path generation program also determines that the program of VM that utilizes P includes timeout constrains. Based on a timeout constraint associated with program associated with initiator P path generation program assigns seven connections to P as opposed to four connection. In some scenarios path generation program dynamically defines the number of connections assigned to each initiator. In one instance path generation program utilizes historical data from a load balancing program not shown to define the number of connections assigned to each initiator utilizing multi path communication. In another instance path generation program defines the number of connections assigned to each initiator based on the number of active VMs of computing system .

In another embodiment path generation program defines a uniform number of connections to each initiator utilizing a multi path communications. In one scenario path generation program utilizes information obtained from the administrator of computing system to define the number of connections that are assigned to each initiator utilizing multi path communications with storage . In another scenario path generation program defines a number of connections assigned to each initiator based on a percentage of the total available targets on storage rounded to a whole number of connections. For an example storage includes 1600 target port IDs and computing system has 200 initiators that utilize multi path communications. Path generation program assigns 40 of the target to the initiators engaged in multi path communications with storage . In this example path generation program assigns 3 connections 3.2 rounded to the nearest integer number of connections to each of the 200 initiators. In some scenarios path generation program utilizes unassigned targets of a sorted target list to assign targets to new initiators that utilize multi path communication. In other scenarios path generation program returns assigned targets to a sorted target list when an initiator utilizing multi path communication is not used e.g. VM utilizing the initiator is de provisioned .

Referring to step in further embodiment path generation program may communicate with storage to determine the number of targets e.g. ports port IDs WWPNs WWNNs available prior to assigning a number of connections to initiators on computing system . Based on the information communicated to path generation program by storage in some instances the reserved ports are excluded from the sorted list generation step . In other instances path generation program includes the reserved ports in the sorted port list however path generation program does not assign the reserved ports to an initiator. In some scenarios path generation program determines that storage reserves a portion of the available targets. For example path generation program determines that storage reserves targets P and P of communication adapter A on server . In one instance the reserved targets are released for during workload spikes. In another instance the reserved targets are released when a communication fault is identified on storage e.g. a HBA failure a communication adapter a networking cable failure a server failure etc. .

In step path generation program communicates the assigned targets for an initiator to communication routing program . Subsequently communication routing program utilizes the assigned targets for an initiator to modify the connection paths of network utilized by computing system to communicate with storage . In one embodiment path generation program may transfer a list of ports e.g. group associated with each initiator to communication routing program . For example path generation program communicates the list depicted in to communication routing program . In another embodiment path generation program may communicate changes associated with individual initiators to communication routing program . In an example VM which utilizes initiator VP is de provisioned. Path generation program communicates to communication routing program that initiator VP is not utilized. In another example path generation program determines that a new VM is provisioned and communicates a group of unassigned substantially sequential targets from the sorted list of targets to the initiator associated with the new VM to communication routing program . In some embodiments path generation program may assign multiple WWPNs to targets on storage when NPIV is utilized. Path generation program may utilize this strategy to zone specific LUNs of storage to a VM e.g. VM on computing system . Path generation program includes the WWPN assignments with the initiator target assignment communicated to communication routing program .

In step path generation program optionally monitors a communication path between an initiator and a target. In one embodiment path generation program may monitor one or more communication paths associated with an initiator to ensure that sufficient connections were assigned to meet a bandwidth dictate of an initiator. In another embodiment path generation program may monitor one or more communication paths for an initiator associated with a program that includes timeout constraints. In one scenario path generation program may execute alternate path selection program to determine if a communication path issue is related to a fault on storage . In another scenario path generation program may determine that a communication path issue is not associated with a fault on storage . In one instance path generation program may communicate with hypervisor to assign another initiator to a VM associated with the affected communication path. In another instance the path may fail due to another fault on computing system storage and or network . Examples of other issues that affect communication paths between computing system and storage are incorrect hardware setting duplicate IP addresses access authority errors in LUN masking and incorrect LUN zoning.

In decision step alternate path selection program identifies whether a communication fault is associated with a fault on a storage system. In one embodiment alternate path selection program receives information from communication routing program that one or more connection paths are not established with storage . In another embodiment alternate path selection program determines that there is a fault on storage from a communication e.g. status message between storage and computing system . Responsive to determining that a communication fault is identified on storage yes branch decision step alternate path selection program determines which targets are affected by a communication fault of a storage system step .

In step alternate path selection program determines which targets are associated with a communication fault of a storage system. In one embodiment alternate path selection program determines which targets e.g. port IDs are affected by a hardware fault. In one scenario alternate path selection program communicates with a monitoring program on storage to determine that a server is associated with an identified communication fault. In an example referring to if server is shutdown then alternate path selection program determines that targets e.g. ports P P P and P are affected. In another scenario if a communication fault on storage is associated with communication adapter A then alternate path selection program determines that targets P and or P may be affected. In this scenario alternate path selection program may require additional information from storage to determine whether one or both of targets P and P are affected by a fault on communication adapter A.

In another embodiment alternate path selection program determines which targets e.g. port IDs are affected by a software fault. In one scenario alternate path selection program communicates with a hypervisor of storage to determine whether internal communication occurs among storage systems and server server and server . In an example referring to if alternate path selection program determines that server is affected by an internal communication fault of storage then alternate path selection program determines that targets e.g. ports P P P and P are affected. In another scenario if alternate path selection program determines that NPID virtualization is associated with a communication fault on storage then alternate path selection program determines that targets VP and VP are affected.

Referring to step in a different embodiment alternate path selection program communicates with communication routing program to determine which targets of storage are affected by a communication fault based on one or more network diagnostics executed by communication routing program . In an example communication routing program may periodically utilize a traceroute function not shown to identify which connection paths cannot be accessed. In another example communication routing program may utilize a neighbor discovery protocol monitor not shown to identify which connection paths cannot be accessed.

In step alternate path selection program determines which initiators are assigned to affected targets. In an embodiment alternate path selection program communicates with communication routing program to determine the one or more initiators that are assigned to the affected targets. In another embodiment alternate path selection program communicates with path generation program to obtain the sorted list of targets and the initiator target assignments to determine the one or more initiators that are assigned to the affected targets.

In step alternate path selection program identifies a software program associated with an initiator that includes a timeout constraint. In one embodiment alternate path selection program communicates with path generation program to determine whether a software program executing on computing system that utilizes an affected target on storage includes a timeout constraint. In another embodiment alternate path selection program communicates with hypervisor to determine whether a software program executing on computing system that utilizes an affected target on storage includes a timeout constraint. In a further embodiment alternate path selection program determines from communications with path generation program that the initiator associated with a timeout constraint is also affected by varying bandwidth utilization.

In decision step alternate path selection program determines whether an initiator utilizes an affected target. In one embodiment alternate path selection program determines that an initiator is affected based on a determined timeout constraint of a VM and or program that utilizes a target that is affected by a fault. In another embodiment alternate path selection program determines that an initiator is associated with an affected target based on information obtained from path generation program . In one scenario alternate path selection program determines that an initiator is affected based on quality of service measurements e.g. error rates retry rates etc. obtained from path generation program . In another scenario alternate path selection program determines that sufficient communication paths do not exist for an initiator based on a bandwidth constraint of a VM and or software program.

In decision step in response to a determination that alternate path selection program determines that an initiator utilizes an affected target yes branch decision step alternate path selection program selects an alternative communication path for an affected initiator step .

In step alternate path selection program selects an alternative communication path for an affected initiator. In one embodiment alternate path selection program determines that the affected initiator is not associated with a software program that includes a timeout constraint. In one scenario alternate path selection program communicates to communication routing program which target of storage is affected and that communication routing program may proceed to another assigned target. Alternate path selection program may utilize various scheduling or queuing algorithms for selecting the other assigned target. Examples of queuing algorithms that alternate path selection program may utilize include round robin weighted round robin deficit round robin multilevel queuing and random. In addition alternate path selection program flags the affected target to communication routing program so that the affected target is excluded from subsequent multi path data communications. In another scenario alternate path selection program determines from communications with path generation program that an initiator has a bandwidth constraint. Alternate path selection program communicates the information related to the affected target to path generation program for path generation program to communicate a replacement target assignment to communication routing program .

In another embodiment alternate path selection program determines that the affected initiator is associated with a software program that includes a timeout constraint. In one scenario alternate path selection program communicates to communication routing program which target of storage is affected and that communication routing program may reduce the delay and or number of communication retries before proceeding to the next assigned target in round robin fashion. In addition alternate path selection program flags the affected target to communication routing program so that the affected target is excluded from subsequent multi path data communications.

Referring to step in another scenario alternate path selection program communicates with path generation program to replace the affected targets with a newgroup of target assignments from the sorted target list for storage . Subsequently path generation program communicates the replacement target assignments to communication routing program . In another scenario alternate path selection program determines that an affected initiator includes both a timeout constraint and variable bandwidth utilization. In an instance alternate path selection program communicates with path generation program to replace the affected targets with a new group of target assignments from the sorted target list for storage where the new group of targets is larger to support periods of higher bandwidth utilization. Subsequently path generation program communicates the new and larger group of target assignments to communication routing program .

Referring to decision step responsive to determining that a communication fault is not identified on storage no branch decision step alternate path selection program terminates.

Referring to decision step in response to a determination that alternate path selection program determines that an initiator does not utilizes an affected target no branch decision step alternate path selection program terminates.

In an example initiator P is assigned ports P P P P P and P. Row depicts an instance where alternate path selection program determines that communication adapter A stippled shading of storage is identified as having a communication fault. In an embodiment alternate path selection program may determine that there is no impact to initiator P. Alternate path selection program communicates with communication routing program to proceed with a round robin utilization of ports P P P P and P for multi path communication between computing system and storage .

In another example initiator P is assigned ports VP P P P P and P. Row and row depict an instance where alternate path selection program determines that server random stipple shading of storage is identified as having a communication fault. A fault in server affects targets P P P and P. In an embodiment alternate path selection program may determine based on communications with path generation program that initiator P is bandwidth constrained based on losing the communication paths associated with targets P and P. Alternate path selection program communicates with path generation program that additional targets are needed to maintain the bandwidth dictated by initiator P. In a scenario initiators VP VP VP P and P of computing system are engaged in multi path communication with storage . Based on the bandwidth constraint of initiator P path generation program assigns the next two target ports in sequence. The tuples that describes the two target ports in sequence are server communication adapter A port VP and server communication adapter A port P. However port P is affected by the fault in server therefore path generation program assigns a different target which is described by a tuple as server communication adapter A port VP.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM . In general memory can include any suitable volatile or non volatile computer readable storage media. Cache is a fast memory that enhances the performance of processor s by holding recently accessed data and data near recently accessed data from memory . With respect to computing system memory includes at least in part designated memory e.g. physical hardware depicted in to be shared among logical partitions.

Program instructions and data used to practice embodiments of the present invention may be stored in persistent storage and in memory for execution by one or more of the respective processor s via cache . In an embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device a read only memory ROM an erasable programmable read only memory EPROM a flash memory or any other computer readable storage media that is capable of storing program instructions or digital information. With respect to computing system persistent storage includes at least in part disks e.g. physical hardware depicted in to be shared among logical partitions.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage . Software and data are stored in persistent storage for access and or execution by one or more of the respective processor s via cache and one or more memories of memory . With respect to computing system software and data includes hypervisor communication routing program path generation program alternate path selection program and other programs.

Communications unit in these examples provides for communications with other data processing systems or devices including resources of computing system and processors . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. With respect to computing system hypervisor virtual adapter virtual adapter virtual adapter bus and program instructions and data used to practice embodiments of the present invention may be downloaded to persistent storage through communications unit . With respect to computing system communication unit includes at least in part one or more network cards e.g. physical hardware virtual adapter virtual adapter virtual adapter communication adapter communication adapter communication adapter and communication adapter depicted in to be shared among logical partitions.

I O interface s allows for input and output of data with other devices that may be connected to each computer system. For example I O interface s may provide a connection to external device s such as a keyboard a keypad a touch screen and or some other suitable input device. External device s can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to display device .

Display device provides a mechanism to display data to a user and may be for example a computer monitor. Display device can also function as a touch screen such as the display of a tablet computer or a smartphone.

It is understood in advance that although this disclosure discusses system virtualization implementation of the teachings recited herein are not limited to a virtualized computing environment. Rather the embodiments of the present invention are capable of being implemented in conjunction with any type of clustered computing environment now known e.g. cloud computing or later developed.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

