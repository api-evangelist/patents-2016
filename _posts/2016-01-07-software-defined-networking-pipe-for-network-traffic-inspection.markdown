---

title: Software defined networking pipe for network traffic inspection
abstract: A software defined networking (SDN) computer network includes an SDN controller and an SDN switch. The SDN controller inserts flow rules in a flow table of the SDN switch to create an SDN pipe between a sender component and a security component. A broadcast function of the SDN switch to the ports that form the SDN pipe may be disabled. The SDN pipe allows outgoing packets sent by the sender component to be received by the security component. The security component inspects the outgoing packets for compliance with security policies and allows the outgoing packets to be forwarded to their destination when the outgoing packets pass inspection. The SDN controller may also insert a flow rule in the flow table of the SDN switch to bypass inspection of specified packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09407579&OS=09407579&RS=09407579
owner: Trend Micro Incorporated
number: 09407579
owner_city: Tokyo
owner_country: JP
publication_date: 20160107
---
This application is a continuation of U.S. patent application Ser. No. 14 094 442 filed on Dec. 2 2013 which is incorporated herein by reference in its entirety.

The present invention relates generally to computer security and more particularly but not exclusively to software defined networking.

Software defined networking SDN is an emerging architecture for computer networking. Unlike traditional computer network architectures SDN separates the control plane from the data plane. This provides many advantages including relatively fast experimentation and optimization of switching and routing policies. SDN is applicable to both physical i.e. real and virtual computer networks.

The OpenFlow protocol is an open protocol for remotely controlling forwarding tables of network switches that are enabled for SDN. Generally speaking the OpenFlow protocol allows direct access to and manipulation of the forwarding plane of network devices such as switches and routers. A control plane of an OpenFlow protocol compliant computer network also referred to as an OpenFlow controller may communicate with OpenFlow switches i.e. network switches that are compliant with the OpenFlow protocol to set flow policies that specify how the switches should manipulate packets of network traffic. Example packet manipulation actions include forwarding a packet to a specific port modifying one or more fields of the packet asking the controller for action to perform on the packet or dropping the packet.

An OpenFlow switch serves as the data plane that forwards packets e.g. from an ingress port to an egress port according to flow tables maintained by the data plane. The data plane is a replacement of traditional switches. When the data plane does not know how to manipulate a specific packet the data plane may request the controller to receive a flow rule for the specific packet and store the flow rule in the flow tables. Other packets that meet the same condition as the specific packet will be processed in accordance with the flow rule. The control plane may also actively insert flow rules into the flow tables.

In one embodiment a software defined networking SDN computer network includes an SDN controller and an SDN switch. The SDN controller inserts flow rules in a flow table of the SDN switch to create an SDN pipe between a sender component and a security component. A broadcast function of the SDN switch to the ports that form the SDN pipe may be disabled. The SDN pipe allows outgoing packets sent by the sender component to be received by the security component. The security component inspects the outgoing packets for compliance with security policies and allows the outgoing packets to be forwarded to their destination when the outgoing packets pass inspection. The SDN controller may also insert a flow rule in the flow table of the SDN switch to bypass inspection of specified packets.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

The computer system is a particular machine as programmed with software modules . The software modules comprise computer readable program code stored non transitory in the main memory for execution by the processor . The computer system may be configured to perform its functions by executing the software modules . The software modules may be loaded from the data storage device to the main memory . An article of manufacture may be embodied as computer readable storage medium including instructions that when executed by a computer causes the computer to be operable to perform the functions of the software modules .

Network security vendors provide network security services such as firewall or deep packet inspection DPI . Generally speaking to provide network security services packets of network traffic are intercepted for inspection. One way of intercepting network traffic is to place the security service in the middle of the packet forwarding path. This is illustrated in where packets from a sender component e.g. a sender computer are received in an ingress port of a switch forwarded to an egress port of the switch and forwarded to the ingress port of a security component such as a security service. The security service may inspect the packets and forward the packets to an egress port of the switch toward the next hop which may be another switch or a destination component e.g. destination computer for example.

Another way of intercepting network traffic is to mirror the packets to be inspected on a switch that provides vendor specific mirroring application programming interface API as shown in . A user may make an API call such that particular packets that enter the ingress port of the switch are redirected or mirrored to the security service by way of a connection tunnel or a mirror port. The security service may forward the redirected or mirrored packets back to an egress port of the switch after inspection.

In a virtualized computing environment network traffic from a virtual machine may be intercepted as the network traffic passes through the hypervisor that runs the virtual machines. This is illustrated in where packets transmitted by virtual machines are intercepted at the virtualization hypervisor for redirection to a security service.

Referring now to there is shown a schematic diagram of an SDN computer network in accordance with an embodiment of the present invention. In one embodiment the SDN computer network is compliant with the OpenFlow protocol. Accordingly in one embodiment the SDN controller comprises an OpenFlow controller and the SDN switch comprises an OpenFlow switch. The SDN controller and the SDN switch comprise the control plane and data plane respectively of the SDN computer network . The SDN computer network may have a plurality of SDN switches but only one is shown for clarity of illustration. The SDN controller and the SDN switch are logically separate components.

In one embodiment the SDN computer network is a virtual computer network that allows for transmission of packets from one virtual machine to another. Accordingly the SDN controller may comprise a virtual OpenFlow controller and the SDN switch may comprise a virtual OpenFlow switch. The SDN computer network may be implemented in a computer system comprising one or more computers that host a virtualization environment. For example the SDN computer network may be implemented in the Amazon Web Services virtualization environment. The sender component may be a virtual machine in that embodiment.

The SDN computer network may also be implemented using physical or a combination of physical and virtual components. For example the SDN controller may comprise one or more computers that serve as a control plane for the SDN switch . In that embodiment the SDN switch may comprise an SDN compliant physical network switch such as an OpenFlow protocol enabled physical network switch. The sender component may be a computer coupled to a port of the physical network switch.

The SDN controller provides a logically centralized framework for controlling the behavior of the SDN computer network . This is in marked contrast to traditional computer networks where the behavior of the computer network is controlled by low level device configurations of switches and other network devices. The SDN controller may include a flow policy database . The flow policy database may comprise flow policies that are enforced by the controller on network traffic transmitted over the SDN computer network . The flow policies may specify security policies that govern transmission of packets over the SDN computer network . The flow policies may be enforced in terms of flow rules labeled as that are stored in the flow tables of the SDN switch . As a particular example a flow policy in the flow policy database may indicate inspection of particular packets e.g. those that meet one or more conditions by a security service . That flow policy may be implemented as a flow rule that forwards the particular packets received in an ingress port to the redirect port for inspection for example.

The SDN switch may comprise a plurality of ports i.e. etc. . The SDN switch may forward packets from one port to another port in accordance with flow rules in the flow tables . In the example of the port is coupled to a sender component . The port is referred to as an ingress port in that it is a port for receiving outgoing packets sent by the sender component . Similarly the port is referred to as an egress port in that it is a port for transmitting outgoing packets sent by the sender component . It is to be noted that any port may be employed as an ingress port egress port redirect port or re inject port. The aforementioned labels are used herein merely to illustrate processing of packets relative to the sender component . Packets going in the opposite direction i.e. incoming packets that are going to the sender component may be received in the egress port forwarded to the re inject port received in the redirect port and forwarded to the ingress port toward the sender component .

The SDN switch may comprise one or more flow tables . The flow tables may comprise one or more flow rules labeled as that indicate how to manipulate or process packets that are passing through the SDN switch . As a particular example a flow rule may indicate that a packet received in the ingress port is to be forwarded to the redirect port . Another flow rule may indicate that a packet received in the redirect port is to be forwarded to the ingress port . The just mentioned pair of flow rules are redirect flow rules that create an SDN pipe between the sender component and the security service allowing the security service to inspect packets sent by or going to the sender component . Table 1 shows an example flow table with flow rules that create an SDN pipe between the security service and the sender component .

A flow table may include columns that indicate one or more conditions a column that indicates an action to take when the conditions are met and a column for statistics. A row on the flow table may comprise a flow rule. In the example of Table 1 the Action column indicates an action to take when conditions are met and the Count column indicates statistics such as byte count. The rest of the columns of Table 1 indicate conditions. For example IN PORT MAC src media access control MAC address of the source of the packet MAC dst MAC address of the destination of the packet IP src Internet Protocol IP address of the source of the packet IP dst IP address of the destination of the packet etc. are conditions that identify a particular packet. When the conditions are met i.e. the particular packet is identified the action indicated in the corresponding Action column is performed on the packet. The asterisks in Table 1 indicate an irrelevant condition.

In the example of Table 1 the first and second rows are redirect flow rules for forming an SDN pipe between the sender component and the security service . More specifically the first row of Table 1 is a flow rule instructing the SDN switch to forward packets received in a port having the Ingress port ID e.g. ingress port to the redirect port e.g. redirect port . Similarly the second row of Table 1 is a flow rule instructing the SDN switch to forward packets received in a port having a Redirect port ID to the ingress port.

The SDN computer network may include a security component in the form of the security service . The security service may comprise a virtual machine that provides computer network security services such as packet inspection for the sender component and other virtual machines. For example the security service may comprise a virtual machine with a virtual network interface card that is coupled to the redirect port and re inject port of the SDN switch . The security service may inspect packets for compliance non compliance with security policies such as for presence of malicious code compliance with firewall rules and access control lists network intrusion detection and other computer network security services. The security service may employ conventional packet inspection algorithms. The security service may comprise the Trend Micro Deep Security service for example. The security service may also comprise a physical machine e.g. a server computer an appliance a gateway computer etc.

The security service may be connected to the SDN switch by a physical link i.e. using a wire a virtual link i.e. in a virtualized environment or by a software tunnel. As a particular example instead of using a physical link or a virtual link the security service may be connected to the SDN switch by a software tunnel using generic routing encapsulation GRE stateless transport tunneling STT or some other software tunneling protocol supported by the SDN switch . In that example the security service serves as a remote i.e. not in the same physical or virtual network service that is only logically connected the SDN switch by way of the software tunnel.

The SDN controller may insert flow rules in the flow tables see arrow to create an SDN pipe labeled as between the sender component and the security service . The SDN pipe allows outgoing packets sent by the sender component or incoming packets going to the sender component to be redirected to the security service for inspection before the packets are sent out of the SDN switch . In one embodiment the SDN pipe is created by creating a first flow rule that forwards packets received in the ingress port to the redirect port and a second flow rule that forwards packets received in the redirect port to the ingress port .

Once outgoing packets from the sender component are inspected by the security service and re injected by the security service back into the SDN switch through the re inject port and then forwarded out to the egress port the L2 switching logic of the SDN computer network which is controlled by the SDN controller remembers that packets destined for the sender component and entering the SDN switch by way of the egress port are to be forwarded to the re inject port . This allows the security service to also receive incoming packets going to the sender component for inspection.

In one embodiment the creation of the SDN pipe also includes disabling the broadcast function of the SDN switch to the ingress port and the redirect port . That is packets that are broadcast to all ports of the SDN switch will not be sent to the ports that form the SDN pipe. Instead packets that are broadcasted by the SDN switch are received by the security service only through the re inject port and forwarded by the security service to the sender component by way of the SDN pipe between the ingress port and the redirect port . The sender component receives broadcast packets only from the security service in that embodiment. In one embodiment the SDN controller disables the broadcast function to the ports forming the SDN pipe using the Open vSwitch database OVSDB management protocol which is an OpenFlow configuration protocol.

After the redirect flow rules for creating the SDN pipe are inserted in the flow tables any packet received by the SDN switch in the ingress port will be identified as to be forwarded to the redirect port and any packet received by the SDN switch in the redirect port will be identified as to be forwarded to the ingress port see arrow . This allows the security service to receive from the redirect port all outgoing packets sent by the sender component to the ingress port . The security service may inspect the outgoing packets for compliance with security policies. The security service may drop or perform other security response to packets that do not pass inspection e.g. packets that do not meet firewall policies packets containing prohibited payload packets with malicious content etc. . The security service may forward those packets that pass inspection toward their destination by re injecting the packets back into the SDN switch by way of the re inject port . Once back in the SDN switch by way of the re inject port the flow rules that govern packets received in the ingress port and the redirect port no longer apply. Accordingly the re injected packets are forwarded to the egress port or some other port toward the next hop in accordance with the L2 switching logic of the SDN computer network .

Incoming packets to the sender component that enter the SDN switch on the egress port are forwarded to the re inject port in accordance with the L2 switching logic of the SDN computer network . The security service receives the incoming packets from the re inject port inspects the incoming packets and transmits those incoming packets that pass inspection to the redirect port . The incoming packets are forwarded from the redirect port to the ingress port in accordance with the flow rules that form the SDN pipe. The sender component is connected to the ingress port and receives the incoming packets therefrom.

Re injecting packets that pass inspection consume bandwidth as the packets will have to be transmitted by the security service to the re inject port . For optimization the SDN switch may be configured to copy packets that are redirected to the security service for inspection. This way the security service simply has to inform the SDN switch an action to take on packets based on the result of the inspection see arrow . For example the security service may send an index identifying the packets and an action on how to manipulate the packets. The action may instruct the SDN switch to drop the copied packets forward the copied packets to their destinations quarantine the copied packets etc.

In one embodiment bypass flow rules are inserted in the flow tables such that particular packets that do not need to be inspected are not redirected to the security service . This embodiment is explained with reference to example flow tables of Tables 2 and 3.

In the example of Table 2 the bottom two rows are redirect flow rules for forming the SDN pipe between the sender component and the security service . Because the bypass flow rules are inserted in the flow tables with higher priority than the redirect flow rules the bypass flow rules are followed by the SDN switch before the redirect flow rules. Accordingly HTTP packets are not redirected for inspection by the security service . Other packets i.e. non HTTP packets are redirected to the security service per the redirect flow rules. Bypass flow rules and redirect flow rules may be set at different priority levels to meet particular packet inspection needs.

The bypass and redirect flow rules also allow for inspection of particular packets while allowing all other packets to bypass inspection. This is illustrated in the example flow table of Table 3.

In the example of Table 3 the top two rows are redirect flow rules for redirecting HTTP packets to the security service for inspection while the bottom two rows are bypass flow rules for all packets. Because the redirect flow rules are at higher priority than the bypass flow rules HTTP packets are sent through the SDN pipe formed in the SDN switch between the sender component and the security service . All other packets bypass the SDN pipe and are accordingly not inspected by the security service .

In the method of the SDN controller inserts one or more bypass flow rules in the flow table of an SDN switch that is controlled by the SDN controller step . The bypass flow rules may instruct the SDN switch to forward particular packets directly from one port to another port of the SDN switch without being redirected to a security component such as a security service for inspection. The bypass flow rules may be inserted at higher or lower priority than redirect flow rules for creating an SDN pipe that redirects packets to be inspected to the security service. The security service may comprise a physical or virtual machine that provides a security service by inspecting network traffic.

In the following two steps steps and an SDN pipe is created in the SDN switch by inserting redirect flow rules in the flow table of the SDN switch. In one embodiment the SDN pipe formed by the redirect flow rules allows for interception of packets sent by or transmitted to a virtual machine for inspection by the security service. The SDN controller inserts a first flow rule that instructs the SDN switch to forward packets received in an ingress port to a redirect port step . The ingress port may be a port of the SDN switch that is connected to the virtual machine and the redirect port may be a port of the SDN switch that is connected to the security service. The SDN controller also inserts a second flow rule that instructs the SDN switch to forward packets received in the redirect port to the egress port step . The SDN controller may also disable the broadcast function of the SDN switch to the ingress port and the redirect port step to prevent the same broadcast packets to be received multiple times by the virtual machine and the security service.

As can be appreciated the just described redirect rules allow packets received by the SDN switch on the ingress port or packets destined for the virtual machine and received by the SDN switch on the egress port to be received by the security service and packets received by the SDN switch on the redirect port to be forwarded to the virtual machine. Packets that have been redirected to the security service are inspected by the security service step . The security service forwards packets that pass inspection e.g. by re injecting packets that pass inspection back into the SDN switch step . The security service may perform a security response on packets that fail inspection step . For example the security component may drop packets that fail inspection.

Methods and systems for inspecting network traffic in SDN computer networks have been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

