---

title: System and method for full virtual machine backup using storage system functionality
abstract: A VM management server receives a request from a backup application server to back up a first VM. The VM management server determines a first of the host systems based on the request, wherein the first host system hosts the first VM. A first request is transmitted from the VM management server to a VMM of the first host system hosting the first VM via a VM application programming interface (VM API) over a network. The first request requests the VMM to capture a VM snapshot representing a consistent state of the first VM. In response to determining that the consistent state of the VM has been captured, a second request is transmitted to a first storage system associated with the first host system to send one or more VM disk images associated with the consistent state of the first VM to a second storage system over the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477415&OS=09477415&RS=09477415
owner: EMC Corporation
number: 09477415
owner_city: Hopkinton
owner_country: US
publication_date: 20160222
---
This application is a continuation of U.S. patent application Ser. No. 14 797 048 filed Jul. 10 2015 which is a continuation of U.S. patent application Ser. No. 13 631 774 filed Sep. 28 2012 which is related to U.S. patent application Ser. No. 13 436 454 filed Mar. 30 2012 now U.S. Pat. No. 8 719 286 issued May 6 2014 U.S. patent application Ser. No. 13 436 460 filed Mar. 30 2012 now U.S. Pat. No. 8 751 515 issued Jun. 10 2014 and co pending U.S. patent application Ser. No. 13 631 794 filed Sep. 28 2012. The disclosure of the above applications is incorporated by reference herein in its entirety.

Embodiments of the present invention relate generally to data storage systems. More particularly embodiments of the invention relate to virtual machine VM backup.

Organizations are increasingly deploying applications on virtual machines VMs to improve Information Technology IT efficiency and application availability. A key benefit of adopting virtual machines is that they can be hosted on a smaller number of physical servers VM servers . This results in higher server utilization but also means that there are fewer server resources available to perform backup and or restore. The problem is compounded by the unabated growth in data and applications which makes it ever more difficult to complete backup and or restore within the available time window.

One approach to backup and restore in a VM environment is to handle each VM as though it is a physical machine. This typically means installing and running a backup agent in each VM. This approach is server resource intensive and becomes unwieldy from a management perspective as the number of virtual machines increases.

Another approach is to back up a VM at the storage level by making a copy of the storage containers that contain the VM. Identifying exactly the storage containers that contain the VM and getting them to be in a consistent state are however challenging.

Another approach is to back up at the VM level. Virtualization vendors such as VMware provide a set of application programming interface API for a backup application. One may use a VM API such as VMware s vStorage APIs for Data Protection VADP to pull the data out of the virtual infrastructure and onto a backup system. This typically requires routing the data through a proxy server and consumes precious IT resources.

On incremental backup a backup software may walk the file system and find which of the files that has been changed. However walking the file system is slow and resource intensive. Another conventional method of incremental backup uses a changed block traning CBT feature provided by a virtual machine monitor or manager to keep track of data blocks changed since last backup. The CBT feature however imposes an overhead on the operation of the VM and may no track changes across unexpected system shutdowns. Furthermore not all virtualization vendors provide the feature of CBT which limit the effective usage of this approach.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiment a client has one or more virtual machine monitor or manager VMM and each hosts one or more VM. In this specification the terms VM monitor and VM manager are used interchangeably. The client has a storage system associated with it to store data and the client also contains a VM application programming interface VM API via which the VMs are managed. An example of VM API is VMware s vStorage APIs for Data Protection VADP . A request for backing up a VM is sent from a backup application server to the client. Through the VM API the VMM hosting the VM establishes a consistent state of the VM. In one embodiment this involves taking a snapshot of the VM which causes the VM to be quiesced and snapshots of the disks associated with the VM to be taken. The backup application server then identifies the disk snapshots via the VM API. After the disk snapshots are identified the backup application server notifies the storage system containing the identified disk snapshots to copy the snapshots to a target backup storage system. The storage system then copies the identified disk snapshots to the target backup storage system. Finally the backup application server uses VM API to ask VMM to delete the VM snapshot taken which causes the corresponding disk snapshots to be deleted.

According to another embodiment a virtual center VC manages multiple clients. Each client contains one or more VMs and each client has access to a storage system. The storage system stores content files of VMs in disks of the storage system. In one embodiment the VC stores a list of attributes associated with VMs and the list of attributes are stored as VM configuration information files. A backup application server may send backup request to back up a VM to the VC. The VC then remotely e.g. over a network such as the Internet requests a VMM hosting the VM to establish a consistent state of the VM. Afterward the backup process is similar to the embodiment where the request is sent to VMM directly.

In one embodiment the copied disk snapshots are parsed in the target backup storage system. Metadata in the disk snapshots are interpreted to determine information about the files contained in the disk snapshots. Such information includes file attributes such as file name access control information and information about layout of the file within the disk snapshots. Such information is then used to populate a backup catalog of the files in the backed up VM. The copied disk snapshots may further be deduplicated and stored in the backup storage system as deduplicated segments.

According to some embodiments a VM can be restored from a target backup storage system. The backup application server identifies the disk snapshots associated with a backup of the VM through the backup catalog. In one embodiment the backup application server then remotely requests a VMM to provision a new VM to be the target of the restoration via a VM API. In one embodiment provisioning a new VM to be the target of the restoration includes identifying the list of the attributes associated with the backup of the VM and provisioning the new VM using the identified list of the attributes. After new VM is provisioned the backup application server sends the identified disk snapshots from the target backup storage system to the storage system via a VM API. The copied disk snapshots are added to the newly provisioned VM via the VM API. The VM is then restored.

According to some embodiment a user may also utilize a backup application server for incremental backup of a VM. In one embodiment a request for incrementally backing up a VM is sent from a backup application server to a VMM of a client hosting the VM. The backup application server then remotely takes a snapshot of the VM through a VM API. This includes quiescing the VM and taking a VM snapshot which causes disk snapshots associated with the VM to be taken. The backup application server notifies the storage system containing the identified disk snapshots to copy the identified disk snapshots to a target backup storage system. The storage system then identifies the changes that have occurred since a last backup for example by comparing the disk snapshots of the VM with disk snapshots associated with a previous backup of the same VM. In one embodiment the storage system sends only the changes between the snapshots to the backup storage system without having to transmit the entire disk snapshots.

Backup storage system may include any type of server or cluster of servers. For example backup storage system may be a storage server used for any of various different purposes such as to provide multiple users with access to shared data and or to back up mission critical data. Backup storage system may be for example a file server e.g. an appliance used to provide NAS capability a block based storage server e.g. used to provide SAN capability a unified storage device e.g. one which combines NAS and SAN capabilities a nearline storage device a direct attached storage DAS device a tape backup device or essentially any other type of data storage device. Backup storage system may have a distributed architecture or all of its components may be integrated into a single unit. Backup storage system may be implemented as part of an archive and or backup storage system such as a de duplication storage system available from EMC Corporation of Hopkinton Mass.

In one embodiment backup application server includes but not limited to a backup engine which contains a backup catalog . Backup application server coordinates with backup storage system storage system and clients to run various backup operations. Backup engine may perform both backup and restore functions.

In one embodiment backup storage system includes but is not limited to deduplication storage engine and one or more storage units communicatively coupled to each other. Storage units may be implemented locally e.g. single node operating environment or remotely e.g. multi node operating environment via interconnect which may be a bus and or a network. In one embodiment one of the storage units operates as an active storage to receive and store external or fresh user data while the other storage unit operates as a target storage unit to periodically archive data from the active storage unit according to an archiving policy or scheme. Storage units may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magnetic tape storage magneto optical MO storage media solid state disks flash memory based devices or any other type of non volatile storage devices suitable for storing large volumes of data. Storage units may also be combinations of such devices. In the case of disk storage media the storage units may be organized into one or more volumes of Redundant Array of Inexpensive Disks RAID . Note that in one embodiment backup application server and backup storage system are integrated into one single system.

In response to a data file to be stored in storage units optional deduplication storage engine is configured to segment the data file into multiple segments according to a variety of segmentation policies or rules. Deduplication storage engine only stores a segment in a storage unit if the segment has not been previously stored in the storage unit. In the event that a segment has been previously stored metadata stores information enabling the reconstruction of a file using the previously stored segment. As a result segments of data files are stored in a deduplicated manner either within each of storage units or across at least some of storage units . Data stored in the storage units may be stored in a compressed form e.g. lossless compression Huffman coding Lempel Ziv Welch coding delta encoding a reference to a segment plus a difference subsegmenting a list of subsegments or references to subsegments etc. . In one embodiment different storage units may use different compression methods e.g. main or active storage unit from other storage units one storage unit from another storage unit etc. .

The metadata may be stored in at least some of storage units such that files can be accessed independent of another storage unit. Metadata of each storage unit includes enough information to provide access to the files it contains. When an active storage unit fails metadata contained in another storage unit may be utilized to recover the active storage unit. When one storage unit is unavailable e.g. the storage unit has failed or is being upgraded etc. the system remains up to provide access to any file not stored in the failed storage unit. When a file is deleted the metadata associated with the files in the system is updated to reflect that the file has been deleted.

In one embodiment the metadata information includes a file name a storage unit where the segments associated with the file name are stored reconstruction information for the file using the segments and any other appropriate metadata information. In one embodiment a copy of the metadata is stored on a storage unit for files stored on a storage unit so that files that are stored on the storage unit can be accessed using only the information stored on the storage unit. In one embodiment a main set of metadata information can be reconstructed by using information of other storage units associated with the backup storage system in the event that the main metadata is lost corrupted damaged etc. Metadata for a storage unit can be reconstructed using metadata information stored on a main storage unit or other storage unit e.g. replica storage unit . Metadata information further includes index information e.g. location information for segments in storage units .

In one embodiment the backup storage system as shown in may be used as a tier of storage in a storage hierarchy that comprises other tiers of storage. One or more tiers of storage in this hierarchy may utilize different kinds of storage devices and or may be optimized for different characteristics such as random update performance Files are periodically moved among the tiers based on data management policies to achieve a cost effective match to the current storage requirements of the files. For example a file may initially be stored in a tier of storage that offers high performance for reads and writes. As the file ages it may be moved into a tier of storage according to one embodiment of the invention. In various embodiments tiers include different storage technologies e.g. tape hard drives semiconductor based memories optical drives etc. different locations e.g. local computer storage local network storage remote network storage distributed storage cloud storage archive storage vault storage etc. or any other appropriate storage for a tiered data storage system.

Referring back to backup engine is configured to backup data from client systems and to store the backed up data in one or more of storage units of backup storage system where the data may be deduplicated by deduplication storage engine . In this example a user e.g. an administrator initiates a backup request directly or through a backup schedule of a VM such as VM within client . The user issues the request with the identification of the VM VM.

As shown in the to be backed up VM resides at client . Client includes one or more VMs hosted by VMM . VMM also includes an application programming interface API through which VMM manages VMs . In one embodiment the API is a VM API such as VMware s vStorage APIs for Data Protection VADP . In addition client is communicatively coupled with storage system .

Storage system may include any type of server or cluster of servers. For example storage system may be a storage server used for any of various different purposes such as to provide multiple users with access to shared data and or to back up mission critical data. Storage system may be for example a file server e.g. an appliance used to provide NAS capability a block based storage server e.g. used to provide SAN capability a unified storage device e.g. one which combines NAS and SAN capabilities a nearline storage device a direct attached storage DAS device or essentially any other type of data storage device. Storage system may have a distributed architecture or all of its components may be integrated into a single unit. Storage system may be implemented as part of a storage system available from EMC Corporation of Hopkinton Mass.

Storage system contains backup logic that manages both backup and restore processes within the storage system. Storage system also contains VM disk files that are the content files of the VMs. Note that a storage system of a client may also be called the primary storage of the client to distinguish the storage from backup storage systems.

A virtual machine represents a completely isolated operating environment with a dedicated set of virtual resources associated with it. A virtual machine may be installed or launched as a guest operating system OS hosted by a host OS or a hypervisor. Typically a host OS or hypervisor represents a virtual machine monitor VMM for managing the hosted virtual machines. A virtual machine can be any type of virtual machines such as for example hardware emulation full virtualization para virtualization and operating system level virtualization virtual machines. Different virtual machines hosted by a server may have the same or different privilege levels for accessing different resources. Here VMM manages both VM and VM .

Referring back to task boxes to illustrate the order in which operations are performed according to one embodiment of the invention. The process is initiated with a request to back up a VM. The request may come from a client based on a backup schedule or it may come from a user directly through a user interface. At task box backup engine sends out a request to backup with a VM identifier indicating VM in this example to VMM which hosts the to be backed up VM . Backup engine directs the request to VMM as backup application server knows VM location information. Backup application server may obtain VM information through various ways. For example backup application server may synchronize with VMM remotely. Onward to task box VMM then establishes a consistent state of VM. In one embodiment VMM establishes the consistent state of VM by taking a VM snapshot. The VM snapshot triggers the creation of one or more snapshots of the content files associated with the VM e.g. VM disk images in and or by storage system . Such snapshots are referred to as disk snapshots in this specification. In task box via API backup engine remotely identifies the consistent state of VM which includes a list of the disk snapshots created in storage system in one embodiment. Backup engine then requests storage system to send VM disk images associated with the consistent state of the VM to a target backup storage at task box . In one embodiment the VM disk images are disk snapshots resulting from VM snapshot initiated by VMM . Finally at task box backup logic then identifies the requested VM disk images. In this example they are represented by VM disk file . VM disk file may take a format of a virtual machine disk VMDK provided by VMware. Backup logic copies VM disk file associated with VM to backup storage system . In one embodiment the disk snapshots for VM are parsed and metadata in the disk snapshots are interpreted to determine information about the files contained in the disk snapshots. Such information includes file attributes such as file name access control information and information about layout of the files within the disk snapshot. The information is then used to populate a backup catalog of the files in the VM that was backed up. The disk snapshots are then saved as VM backup files in storage unit . According to one embodiment the backup content may be further deduplicated into deduplicated segments and the deduplicated segments are then stored in one or more physical disks of the backup storage system. In one embodiment backup storage system remotely requests VMM to delete the VM snapshot taken of VM which causes the corresponding disk snapshots of VM to be deleted. Note that in one embodiment the target backup storage system may be proxy server. In one embodiment a proxy server is utilized when storage system and backup storage system are not compatible.

In one embodiment storage system divides the disk snapshots into segments and copies only the segments that do not already exist in backup storage system when backup storage system is a deduplicating storage system. In one embodiment the segments are variable sized and the segment boundaries are defined by the content of the data. Such segments also referred to as chunks may be segmented within storage system using a predetermined chunking algorithm. For each of the segments a fingerprint is generated using a predetermined hash function. Storage system may initially transmit fingerprints of the segments to backup storage system without transmitting the actual segments. Based on the fingerprints received from storage system deduplication storage engine may determine which of the segments have already been stored in storage units for example by comparing the fingerprints received from storage system and those maintained locally within backup storage system . For those segments that have not been stored in storage units backup storage system transmits identifying information of the missing segments to storage system such as the fingerprints of the missing segments. In response storage system identifies the missing segments based on the identifying information received from backup storage system and only transmits the missing segments over to backup storage system .

In one embodiment via API backup engine collects attributes associated with the VM being backed up e.g. CPU memory disk configuration and stores the VM attributes in backup catalog . The attributes are subsequently used to provision a new VM to be the target of restoration.

Embodiments of the invention may also be used to restore a file within a backed up VM. is a flow diagram illustrating a method of restoration according to one embodiment of the invention. Method may be performed by backup application server more specifically backup engine . At block a request to restore a file within a VM is received at a backup application server the backup application server is communicatively coupled with a backup storage system that contains backup of the file. The request may come from a client based on a user request or it may come from a user directly through a user interface. A backup engine of the backup application server then identifies the VM disk images containing the requested file or deduplicated segments associated with the requested file through backup catalog. In one embodiment the VM disk images are disk snapshots associated with the VM. The disk snapshots may be stored in the storage units of the backup storage system for example storage unit as a part of VM backup files as shown in . The backup engine then determines the layout of the requested file through a backup catalog or other metadata such as fingerprints of the deduplicated segments at block . The identified file is then copied to a storage system associated with the requesting client at block . In one embodiment based on the layout of the requested file the file is reconstructed at the backup storage system and then sent over to the storage system. At the storage system the file is then copied to the specified location and the VM requesting the restoration then will be able to access to the file. In a deduplicated storage system the file may be reconstructed by deduplicated storage engine from the deduplicated segments using the metadata such as fingerprints. Alternatively the metadata may be transmitted to storage system and the file is reconstructed by the storage system based on the metadata. If storage system is a deduplicated storage system only the segments that do not exist in storage system may be transmitted from backup storage system .

According to one embodiment a storage system performs a comparison such as a diff operation of the identified VM disk images against the corresponding VM disk images associated with a previous snapshot of the VM to determine the changes since the last backup e.g. the delta between the VM disk image and the last backup . In one embodiment the VM disk image is a disk snapshot. In another embodiment the storage system tracks the changes to a disk since the last disk snapshot was taken and determines the changes since the last backup by using this tracking information.

The changes since the last backup are copied to the backup storage system for backup. In one embodiment the backup storage system creates a copy of the previous full backup in the backup storage system and applies the copied changes to the copy of the previous full backup to obtain a synthetic full backup. In another embodiment the storage system sends the changes since last backup together with recipes to the backup storage system to enable the backup storage system to create a synthetic full backup based on contents of the previous full backup.

At task box the VM disk images associated with the VM are identified. In one embodiment the VM disk images are disk snapshots based on VM snapshot taken by VMM . Backup logic identifies the VM disk images associated with the VM and they are represented by VM disk files . VM disk files may take a format of a virtual machine disk VMDK provided by VMware. For each identified VM disk image disk change tracker determines the changes since the last backup. In one embodiment disk change tracker performs a comparison such as a diff operation of the identified disk snapshot against the corresponding disk snapshot associated with a previous snapshot of the VM to determine the changes since the last backup. In another embodiment disk change tracker tracks the changes to a disk since the last disk snapshot was taken and determines the changes since the last backup by using this tracking information. At task box the identified changes of VM disk images are backed up to backup storage system . After completion of the backup optionally backup application server sends a request to VMM to delete the VM snapshot taken and causes storage system to deletes the corresponding disk snapshot when the VM disk images are disk snapshots based on VM snapshots in some embodiments. Note in one embodiment VMM may keep track of disk changes within the associated storage system. In the example VMM may keep track of disk changes within storage system .

The file s is are processed by segmenter and file system control . Segmenter breaks the file s into variable length segments based on a variety of rules or considerations. For example the file s may be broken into segments by identifying segment boundaries using a content based technique e.g. a function is calculated at various locations of a file when the function is equal to a value or when the value is a minimum a maximum or other value relative to other function values calculated for the file a non content based technique e.g. based on size of the segment or any other appropriate technique. In one embodiment a segment is restricted to a minimum and or maximum length to a minimum or maximum number of segments per file or any other appropriate limitation.

In one embodiment file system control processes information to indicate the segment s association with a file. In some embodiments a list of fingerprints is used to indicate segment s associated with a file. File system control passes segment association information e.g. representative data such as a fingerprint to an index not shown . The index is used to locate stored segments in storage units via storage unit interface . Duplicate eliminator identifies whether a newly received segment has already been stored in storage units . In the event that a segment has already been stored in storage unit s a reference to the previously stored segment is stored for example in a segment tree associated with the file instead of storing the newly received segment. A segment tree of a file may include one or more nodes and each node represents or references one of the deduplicated segments stored in storage units that make up the file. Segments are then packed by a container manager not shown into one or more storage containers stored in storage units . The deduplicated segments may be further compressed using a variation of compression algorithms such as a Lempel Ziv algorithm before being stored.

When a file is to be retrieved file service interface is configured to communicate with file system control to identify appropriate segments stored in storage units via storage unit interface . Storage unit interface may be implemented as part of a container manager. File system control communicates with an index not shown to locate appropriate segments stored in storage units via storage unit interface . Appropriate segments are retrieved from the associated containers via the container manager and are used to construct the requested file. The file is provided via interface in response to the request. In one embodiment file system control utilizes a tree e.g. a segment tree of content based identifiers e.g. fingerprints to associate a file with data segments and their locations in storage unit s . In the event that a segment associated with a given file or file changes the content based identifiers will change and the changes will ripple from the bottom to the top of the tree associated with the file efficiently since the appropriate content based identifiers are easily identified using the tree structure.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

