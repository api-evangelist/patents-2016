---

title: Secure execution environment services
abstract: Techniques for managing secure execution environments provided as a service to computing resource service provider customers are described herein. A request to launch a secure execution environment is received from a customer and fulfilled by launching a secure execution environment on a selected computer system. The secure execution environment is then validated and upon a successful validation, one or more applications are provided to the secure execution environment to be executed within the secure execution environment. As additional requests relating to managing the secure execution environment are received, operations are performed based on the requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521140&OS=09521140&RS=09521140
owner: Amazon Technologies, Inc.
number: 09521140
owner_city: Seattle
owner_country: US
publication_date: 20160119
---
This application is a continuation of U.S. patent application Ser. No. 14 476 569 filed Sep. 3 2014 entitled SECURE EXECUTION ENVIRONMENT SERVICES the content of which is incorporated by reference herein in its entirely.

Modern computer systems place a high importance on maintaining data and application security. In a modern distributed and or virtual computer system environment where a plurality of users services applications virtual machines controlling domains and hosts have access to a computer system maintaining data and application security may be a difficult problem. In a distributed and or virtual computer system environment for example where the computer system resources may be provided by a computing resource service provider customers may also wish for additional security for sensitive or restricted data protecting such data even from the computing resource service provider.

Encrypting data or applications may help ameliorate the security concerns but users often desire additional assurances. For example users may desire additional assurances that malicious applications are unable to temporarily obtain trusted status on a host machine thereby gaining access to the encryption keys and thus compromising the encryption security. Similarly a controlling domain or operating system on a virtual machine may always have trusted status and thus can read or write directly from computer system memory freely. Accordingly users may desire assurances of the security of data and applications operating within a computing resource service provider even against potential discovery by the computing resource service provider.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include systems processes and methods for providing secure execution environments such as enclaves discussed below as a service. A computing resource service provider provides compute capacity as a service such that the compute capacity is remotely and programmatically managed by customers of the computing resource service provider. The service allows customers to configure and control access to a secured execution environment hosted by the service provider. Customers may execute applications within secure execution environments provided by the service provider. Such secure execution environments may be configured to provide one or more services to authorized users processes applications and or modules.

A secure execution environment may be instantiated within a computer system provided by a computing resource service provider and applications or data may be installed within that secure execution environment. The secure execution environment may be instantiated by accessing a compute service operated by the computing resource service provider. The computing resource service provider may provide access to the compute service by exposing for example a web interface configured to receive secure execution environment instantiation requests. In response to a request to instantiate a secure execution environment the compute service may locate a suitable host computer system upon which to instantiate the secure execution environment. When a suitable host environment is located a secure execution environment may be instantiated by the compute service on the computer system. A secure execution environment may be instantiated on a computer system by sending a request referred to herein as a provisioning request to the selected computer system also referred to herein as the target computer system specifying how the secure execution environment may be configured and or how and where it may be instantiated.

A secure execution environment may be configured to permit applications internal to the secure execution environment to access the contents of the secure execution environment and to prevent applications external to the secure execution environment from accessing the contents of the secure execution environment. For example a secure execution environment may be configured such that even privileged applications of a virtualization platform may not access the secure execution environment contents. The secure execution environment may be configured to prevent access to unencrypted secure execution environment data i.e. data resident within the secure execution environment by any applications external to the secure execution environment by automatically encrypting any data stored within the secure execution environment. Additionally any data that exits the secure execution environment may be cleansed of any metadata that may refer to the memory addresses within the secure execution environment thus preventing external software from determining the location of secure execution environment protected data in computer system memory.

In some embodiments customers are able to verify that a secure execution environment remains in a valid state and that for example unauthorized code has not been introduced into the secure execution environment. The service provider may through the web interface provide access to a secure execution environment s ability to provide remote attestation as to the state of the secure execution environment. For example the secure execution environment may have a set of functions that when executed by a processor provide a cryptographically verifiable measurement indicating the current state of executable code and or data within the secure execution environment. The cryptographically verifiable measurement may be rooted in a root of trust separate and protected from outside entities. That is the secure execution environment may have cryptographic keys resident within the secure execution environment for digitally signing data output from the secure execution environment and by verifying the digital signature applications external to the secure execution environment may be configured to trust the output data. In this manner customers can verify the security of data and code in the secure execution environment.

When a secure execution environment is created by the provider for the customer the customer may receive an access key which may control access to the secure execution environment but which may not in some embodiments allow examination of the contents of the secure execution environment. Data may be installed in the secure execution environment and applications may be instantiated to run within the secure execution environment. Entities outside of the secure execution environment may not access data stored in the secure execution environment data sent to the applications the execution of the applications the output of the applications or any other data and or applications within the secure execution environment while such data and or applications remain within the secure execution environment. Data and or results of applications may be accessed only if they are sent out from the secure execution environment and may be encrypted and or cleansed of any identifying information prior to being sent out using one or more encryption keys. The encryption keys and any corresponding decryption keys may be made available to a user or process with proper credentials associated with the secure execution environment.

Secure execution environment functionality available to customers of the service provider may include functionality to create secure execution environments destroy secure execution environments measure gather metrics from secure execution environments populate secure execution environments generate keys send data receive data and or other functionality. Secure execution environment functionality may also include functionality to monitor resources within a secure execution environment using for example a resource monitor configured to monitor resource usage and generate requests for additional resources to be provided to the secure execution environment based on changes in resource demands. Access to such secure execution environment functionality may be provided by a library interface webservice application programming interface API or other access methodology. For example access to secure execution environment functionality may be provided by an application programming interface request also referred to herein as an API request configured to make API calls to request such access. With access to the interface a computing resource service provider may provide that access to a user of a computer system as a service as described herein. As may be contemplated the providers of secure execution environment functionality the types of secure execution environment functionality and the methods of providing access to secure execution environment functionality described herein are merely illustrative examples and as such other providers of secure execution environment functionality types of secure execution environment functionality and methods of providing access to secure execution environment functionality may be considered as within the scope of the present disclosure.

In an illustrative example a host computer system may provide secure execution environment functionality via the Intel Software Guard Extensions referred to herein as Intel SGX or more simply as SGX that may be enabled on the central processing unit CPU of the host computer system although the scope of the present disclosure extends to other secure execution environment types. A controlling domain may be running on that host computer system and may manage one or more virtual machine VM instances also running on that host computer system. An application or process running on the host computer system e.g. the host operating system a service running under the control of the host operating system the controlling domain a service running under control of the controlling domain a guest operating system running on a virtual machine instance VM instance a service running on a VM instance or a combination of these may provide an interface to the secure execution environment functionality. A user client service module or other entity with access to a VM instance on the host computer system may use that interface to the secure execution environment functionality to perform secure execution environment operations.

The provisioning request may include a specification for capabilities e.g. hardware capabilities that may indicate parameters for a suitable host environment for instantiating a secure execution environment. The suitable host environment may be located based on host availability level of security desired and or other factors. For example a provisioning request may specify a minimum level of security also referred to herein as a level of security indicator required in order to instantiate the secure execution environment. A level of security indicator is an indication of the level of security of a host environment that may be provided by a particular computer system based on the hardware software and or firmware that may be made available to that computer system. For example a computer system with one or more processors that implement the Intel SGX instruction set may be more secure i.e. have a higher level of security indicator than a computer system that has a processor that is configured to operate as a trusted platform module TPM . One or both of these computer systems that have such capabilities implemented in hardware may have a higher level of security indicator than a computer system that implements such capabilities in software e.g. a using a virtual TPM and or a virtual CPU that implements the Intel SGX instruction set.

A provisioning request may also include data and or metadata associated with the configuration of a secure execution environment and or with placement constraints on associated computer system resources. A provisioning request may be issued as a request e.g. web service request to a service such as a compute service an API call a library call or a combination of these and or other request types and such requests may include the placement constraints. The placement of any computer system resources associated with the provisioning request may be performed by a placement service of the computing resource service provider which may use one or more the placement constraints to make placement decisions. For example placement of computer system resources such as secure execution environment may be made based at least in part on proximity between a candidate location and one or more other resources associated with the requester of the secure execution environment. A customer may request the placement of a secure execution environment in close proximity to storage devices or other computer systems that are controlled by and or frequently used by the customer. The customer may also request the placement of a secure execution environment that is in far proximity from other resources to for example maximize redundancy of the computer system. Proximity between pairs of computer system resources may be defined by physical distance by network bandwidth availability by network latency by the number of network hops or by some other proximity measurement. Other hardware configuration criteria including CPU type CPU capabilities amount of memory storage availability hardware availability hardware cost system redundancy network availability client locations or other such factors may be included in computer system resource placement decisions.

The secure execution environment in an embodiment provides functionality to securely store sensitive data or applications by providing a hardware secured region within a host where data may be stored and applications may be executed but such data and applications may not be accessible outside of the secure execution environment. Hardware within the host ensures that data stored within a secure execution environment and applications running within a secure execution environment are not accessible to any entity outside of the secure execution environment. Data may be protected from outside access by using one or more encryption techniques such as key pairs certificates or other such encryption techniques. Such encrypted data items may be protected from unauthorized access by generating encryption information i.e. cryptographic keys and or storing decryption information within the secure execution environment. In some embodiments the secure execution environment may be configured using dedicated hardware which may implement a variety of security assurance methods such as microcode instructions on a central processing unit a trusted platform module or other security assurance methods.

Trusted users and services such as applications running within the secure execution environment may access the secure execution environment in order to use secure execution environment functionality. A user client service process application module or other such entity with access to a service and or access to the resources served by that service may use that secure execution environment functionality to further secure data and or applications associated with that service. Trusted users and services may have the ability to create secure execution environments populate secure execution environments with data and or applications obtain keys for decrypting results from secure execution environments measure secure execution environments start applications within secure execution environments retrieve data from secure execution environments and utilize other secure execution environment functionality.

Provider applications may also be restricted from accessing the secure execution environment and or the applications and data stored therein if such provider applications are not trusted by the secure execution environment. Provider applications are applications operating under the control of the computing resource service provider . Provider applications may be restricted from accessing the secure execution environment and or the applications and data stored within the secure execution environment . Provider applications which may be restricted from accessing the secure execution environment and or the applications and data stored within the secure execution environment may be operating on the same host machine as the secure execution environment and or the applications and data or may be operating on a different host machine than the host machine where the secure execution environment and or the applications and data are operating. In some embodiments provider applications may have permission to perform a subset of activities or commands in connection with the secure execution environment in accordance with one or more system policies. In some embodiments provider applications may be restricted from all access to the secure execution environment and may also be restricted from all access to the applications and data stored within the secure execution environment .

Host applications may also be restricted from accessing the secure execution environment and or the applications and data stored therein if such host applications are not trusted by the secure execution environment. Host applications are applications operating on the host which may be under the control of the computing resource service provider or may be under the control of some other entity such as the user . Host applications which may be restricted from accessing the secure execution environment and or the applications and data stored within the secure execution environment may be operating on the same host machine as the secure execution environment and or the applications and data or may be operating on a different host machine than the host machine where the secure execution environment and or the applications and data are operating. In some embodiments host applications may have permission to perform a subset of activities or commands in connection with the secure execution environment in accordance with one or more system policies. In some embodiments host applications may be restricted from all access to the secure execution environment and may also be restricted from all access to the applications and data stored within the secure execution environment .

The host may provide secure execution environment functionality to other applications operating within the host computer system via instructions enabled on the CPU of the host computer system. Secure execution environment functionality may be provided to the host by a specialized instruction set such as Intel SGX extensions by a module such as a TPM system microcode or by combinations of these and or other provisions. A secure execution environment provided by a service such as a compute service may be provided on a selected computer system which supports such specialized instruction sets. In some embodiments a secure execution environment may be provided as a service by selecting the host from a plurality of candidate systems which may be configured to support secure execution environment functionality. In such embodiments the host may be selected from a plurality of computer systems which may provide the hardware capabilities and or the level of security indicator required for the secure execution environment. The host may also be selected using secondary selection criteria associated with the computer system including resource availability proximity to users and or other secondary selection criteria. Data and or metadata associated with the hardware capabilities of a computer system may be stored by the resource provider as a hardware description of the computer system and may be stored in a data storage location such as a hardware capabilities database or hardware capabilities file.

The secure execution environment functionality may be provided to applications running within the secure execution environment on the host . For example a virtual computer system service running on the host may access the secure execution environment functionality to provide that functionality to VM instances running under control of a virtual computer system service. Similarly other services may include block level data storage services cryptography services on demand data storage services notification services authentication services policy management services task services and or other services may also access the secure execution environment functionality to provide that functionality resources associated with those services. In some embodiments secure execution environment functionality may also be provided to one or more customers of the computing resource service provider. A user with access to a service and or access to the resources served by that service may use that secure execution environment functionality to further secure data and or applications associated with that service. In an illustrative example a virtual computer system service as described herein and or a VM instance associated with that virtual computer system service may use the secure execution environment functionality to create a secure execution environment populate that secure execution environment with data and or applications obtain keys for decrypting results from the secure execution environment start the applications within the secure execution environment and receive updates.

Secure execution environment functionality may be provided to one or more other services within the computing resource service provider and or to one or more customers of the computing service resource provider using a variety of techniques. For example as described herein in response to a request to create a secure execution environment from a customer a secure execution environment may be created and may be initially populated with executable code which may be configured as an agent to provide access to secure execution environment functionality. The agent may be an application module process and or the like which may be configured to instantiate other applications within the secure execution environment may be configured to provide security keys from the host computer CPU may be configured to locate other resources within the computer system or may be configured to perform with other functionality. The agent also referred to herein as a bootloader is described in more detail in connection with .

A trusted user may access functionality associated with a secure execution environment operating on a computer system as described herein. A user may be or may become a trusted user by virtue of having possession of an access key associated with a secure execution environment as described herein. The access key may be provided to the trusted user at the time that a secure execution environment is created or as a result of having that key provided to the user or by some other mechanism. The trusted user may access functionality associated with the secure execution environment using a connection using a computer system client device . The computer system may be operating within a computing resource service provider . The computing resource service provider may provide a distributed virtualized and or datacenter environment within which one or more applications processes services virtual machines and or other computer system entities may be executed. The trusted user may be a person or may be a process running on one or more remote computer systems or may be some other computer system entity user or process.

The command or commands to initiate the connection to the computer system may originate from an outside computer system or may originate from an entity user or process in a remote network location or may originate from an entity user or process within the computing resource service provider or may originate from a user of the computer system client device or may originate as a result of an automatic process or may originate as a result of a combination of these and or other origin entities. In some embodiments one or more commands may be used to first initiate a connection to the computing resource service provider. The command or commands to initiate the connection to the computing resource service provider may be sent to the computing resource service provider without the intervention of the trusted user . The command or commands to initiate the connection to the computer system may originate from the same origin as the command or commands to connect to the computing resource service provider or may originate from another computer system and or server or may originate from a different entity user or process on the same or a different remote network location or may originate from a different entity user or process within the computing resource service provider or may originate from a different user of a computer system client device or may originate as a result of a combination of these and or other same and or different entities.

The trusted user may request connection to the computing resource service provider via a connection and in some embodiments via a network and or via entities associated therewith such as servers connected to the network either directly or indirectly. The computer system client device that may request access to the computer system may include any device that is capable of connecting with a computer system via a network including those discussed below. The network may be a network or combination of networks from network types discussed below.

The computing resource service provider may provide access to one or more host machines as well as provide access to computer services such as virtual machine VM instances automatic scaling groups file based database storage systems block storage services redundant data storage services data archive services data warehousing services user access management services content management services and or other computer system services as may be running thereon. The computing resource service provider may also provide access to computer system resources such as user resources policy resources network resources and or storage resources. In some distributed and or virtualized computer system environments the resources associated with the computer services may be physical devices virtual devices combinations of physical and or virtual devices or other device embodiments. In some embodiments the host machines may be physical machines located within the computer system environment. In some embodiments the host machines may be guest virtual machines operating on physical machines located within the computer system environment.

A secure execution environment may be operating within the computer system . The secure execution environment may contain and or otherwise administer access to one or more secure execution environments and may also contain and or otherwise administer applications and data stored within the secure execution environment . As described herein the secure execution environment may be configured to provide access to the secure execution environment functionality by trusted users and or services so that for example those trusted users and or services may access and use the functionality associated with the secure execution environment as described herein. A user client service process application module or other entity with access to a service and or access to the resources served by that service may use that secure execution environment functionality to further secure data and or applications associated with that service. Trusted users and or services may use the secure execution environment functionality to create secure execution environments populate secure execution environments with data and or applications obtain keys for decrypting results from secure execution environments measure secure execution environments start applications within secure execution environments retrieve data from secure execution environments and other such secure execution environment functionality. The trusted user may connect to the secure execution environment via the connection or via an additional connection such as a dedicated connection established to connect to the secure execution environment . The additional connection may share one or more characteristics in common with the connection as described herein. In some embodiments the connection to the secure execution environment may fail due to a failure of the secure execution environment and or due to a failure to validate the secure execution environment. Such failures may occur silently or may result in failure indications being sent to the service provider and or to one or more clients of the secure execution environment.

One or more trusted provider services operating within the computing resource service provider environment may access functionality associated with the secure execution environment using one or more connections . Trusted provider services may be operating on computer systems within the computing resource service provider environment. A provider service may become one of the trusted provider services by virtue of having possession of an access key associated with a secure execution environment as described herein. Access keys may be provided to the trusted provider services at the time that a secure execution environment is created or as a result of having that key provided to the provider service or by another mechanism. For example a provider service configured to provide database services may be configured to receive and store encrypted data from a secure execution environment . Such a database service may become a trusted provider service and may be provided with the access key so that the database service can receive encrypted data from the secure execution environment.

In some embodiments an untrusted user may connect to the computer system and or to another service operating within the computing resource service provider using a connection and may connect to the computer system and or to another resource within the computing resource service provider using a computer system client device . The untrusted user may be a person or may be a process running on one or more remote computer systems or may be some other computer system entity user or process. A user may be an untrusted user by virtue of not having possession of an access key associated with a secure execution environment . The command or commands to initiate the connection to the computer system and or to some other resource within the computing resource service provider may originate from an outside computer system and or server or may originate from an entity user or process in a remote network location or may originate from an entity user or process within the computing resource service provider or may originate from a user of the computer system client device or may originate as a result of an automatic process or may originate as a result of a combination of these and or other origin entities.

The command or commands to initiate the connection to the computer system and or to some other resource within the computing resource service provider may be sent to the computer system without the intervention of the untrusted user . The command or commands to initiate the connection to the computer system may originate from the same origin as the command or commands to connect to the computing resource service provider or may originate from another computer system and or server or may originate from a different entity user or process on the same or a different remote network location or may originate from a different entity user or process within the computing resource service provider or may originate from a different user of a computer system client device or may originate as a result of a combination of these and or other such same and or different entities.

The untrusted user may connect to resources within the computing resource service provider via a network and or via entities associated therewith such as servers connected to the network either directly or indirectly. The computer system client device that may request access to the computer system may include any device that is capable of connecting with a computer system via a network including at least servers laptops mobile devices such as smartphones or tablets other smart devices such as smart watches smart televisions set top boxes video game consoles and other such network enabled smart devices distributed computer systems and components thereof abstracted components such as guest computer systems or virtual machines and or other types of computing devices and or components. As with the network described herein the network may include a variety of network types. In some embodiments the network may be the same as the network .

An untrusted user may attempt to access functionality associated with the secure execution environment using the connection using the network and may also attempt to access the applications and data stored within the secure execution environment . As indicated in the example illustrated in the attempt by the untrusted user to connect to the secure execution environment may fail. In some embodiments the attempt by the untrusted user to connect to the secure execution environment may fail at connection initiation or may fail during key verification or may fail when a secure execution environment operation is attempted or may fail at other times. In some embodiments an untrusted user may have permission to perform a subset of activities or commands in connection with the secure execution environment in accordance with one or more system policies. In some embodiments an untrusted user may be restricted from all access to the secure execution environment and may also be restricted from all access to the applications and data stored within the secure execution environment .

Computer system services may attempt to access functionality associated with the secure execution environment and or may attempt to access applications and data stored therein. Computer system services are other services e.g. applications running within the computer system . In some embodiments one or more of the computer system services may be trusted as a result of having possession of an access key associated with a secure execution environment as described herein above. Such trusted computer system services may have access to the secure execution environment and or to applications and data stored within the secure execution environment .

In some embodiments one or more of the computer system services may be untrusted as a result of not having possession of an access key associated with a secure execution environment as described herein above. Such untrusted computer system services may not have access to functionality associated with the secure execution environment and or to applications and data stored within the secure execution environment or may have partial access to functionality associated with the secure execution environment or may have partial access to applications and data stored within the secure execution environment or may have a combination of these and or other access levels. For example one or more computer system services may have permission to query the secure execution environment and or may have permission to request trusted status from the secure execution environment but may not be granted any other permissions associated with the secure execution environment . In some embodiments one or more of the computer system services may be trusted computer system services and may be configured to have access to functionality associated with the secure execution environment via connection and or to applications and data operating within the secure execution environment .

One or more untrusted provider services operating within the computing resource service provider environment may attempt to access functionality associated with the secure execution environment using one or more connections . As with trusted provider services untrusted provider services may be operating on computer systems within the computing resource service provider environment. A provider service may be untrusted as a result of not having possession of an access key associated with a secure execution environment as described herein. As indicated in the example illustrated in the attempt by one of the untrusted provider services to connect to the secure execution environment may fail at for example connection initiation key verification when a secure execution environment operation is attempted or at other times. As with an untrusted user untrusted provider services may have permission to perform a subset of activities or commands in connection with the secure execution environment in accordance with one or more system policies. In some embodiments untrusted provider services may be restricted from all access to functionality associated with the secure execution environment and may also be restricted from all access to the applications and data stored within the secure execution environment .

The user may also execute one or more secure execution environment operations associated with a secure execution environment on a computer system . The computer system may be one of one or more computer systems operating within a computing resource service provider environment such as the computing resource service provider as described herein in connection with and in accordance with an embodiment. The secure execution environment may include applications and data such as the applications and data described herein in connection with and in accordance with an embodiment. The secure execution environment operations and the secure execution environment operations may include one or more secure execution environment operations for administering secure execution environments and or the applications and or data contained therein. Secure execution environment operations may include creating secure execution environments destroying secure execution environments measuring secure execution environments populating secure execution environments growing secure execution environments starting secure execution environments stopping secure execution environments describing secure execution environments updating secure execution environments generating keys for secure execution environments sending data to secure execution environments receiving data from secure execution environments starting applications within secure execution environments stopping applications within secure execution environments and or other secure execution environment operations.

For example a user may execute a secure execution environment operation to create a secure execution environment such as the secure execution environment within the virtual computer system on the host computer system . The operations to create or build a secure execution environment may include operations to allocate a secure execution environment location operations to load values into the secure execution environment operations to measure those stored values. Further operations may include operations to remove the secure execution environment when it is finished enter resume and exit the secure execution environment perform memory paging debug the secure execution environment and generate secure execution environment keys. For example a user may use a secure execution environment by first issuing API calls to create a secure execution environment. Then the user may then add memory pages to the secure execution environment which may contain data and or executable code. The user may next measure the secure execution environment and if the measurement indicates that the secure execution environment is valid the user may finalize initiation of the secure execution environment. During the lifecycle of the secure execution environment the user may start and stop the applications in the secure execution environment and perform other operations such as those described herein. When the secure execution environment is no longer needed the user may finally cause it to be removed from the system.

The user which may now be a trusted user as a result of acquiring an access key as a result of creating the secure execution environment as described herein may then install and start an application such as an agent as described herein on the secure execution environment which may in turn upload data and or other applications within the secure execution environment. The agent may be configured to decrypt uploaded data and or applications and may also be configured to validate such uploaded data and or applications as described herein. As resource needs for the secure execution environment increase or decrease the size of the secure execution environment and or the resources associated with the secure execution environment may be increased or decreased as required using one or more other secure execution environment operations. When the secure execution environment is no longer needed it may be depopulated and or destroyed as needed using one or more other secure execution environment operations. As may be contemplated the secure execution environment operations described herein are illustrative examples and other secure execution environment operations may be considered as within the scope of the present disclosure.

As described herein a secure execution environment such as secure execution environment or secure execution environment may not allow access to functionality associated with the secure execution environments by any entity except trusted entities as described herein in connection with and in accordance with an embodiment. For example entities on the virtual computer system such as virtual computer system applications virtual computer system operating system or other entities may not access applications or data stored within secure execution environment unless they are trusted by the secure execution environment . Additionally entities that have privileged access to the host computer system such as controlling domain or host operating system also may not access applications or data stored within secure execution environment unless they are trusted by the secure execution environment . Similarly entities operating on computer system such as computer system applications and entities that have privileged access to the computer system such as computer system operating system also may not access applications or data stored within secure execution environment unless they are trusted by the secure execution environment . In the example environment illustrated in a connection for performing secure execution environment operations is illustrated between a user and a secure execution environment and another connection for performing secure execution environment operations is illustrated between the user and a secure execution environment . In some embodiments a secure execution environment such as the secure execution environment may be directly connected to a secure execution environment such as the secure execution environment without an intervening user service process application and or other entity. In such embodiments the secure execution environment may be trusted by or not isolated from the secure execution environment and in such embodiments the secure execution environment may be trusted by or not isolated from the secure execution environment .

An agent may be instantiated on a computer system e.g. within a secure execution environment on the computer system to provide secure execution environment functionality. The agent may be instantiated on the computer system by a second computer system which may be configured to instantiate an agent on the computer system. The agent may be instantiated on the second computer system in response to a request by the first computer system. The agent may be code that may be verified by a computing resource service provider or may be verified by the customer or may be verified by a third party or may be verified by another entity. The agent may also be configured to provide one or more other measurements also referred to herein as cryptographic measurements of the secure execution environment to the customer that created the secure execution environment so that for example secondary verifications of the integrity of the secure execution environment may performed by the customer the computing resource service provider a third party or another entity.

In some embodiments the agent may be configured to perform one or more secure execution environment operations on the secure execution environment so that the secure execution environment may be further configured to provide desired functionality. The agent may be configured to perform the one or more operations as a result of receiving one or more external commands or may be configured to perform the one or more operations as a result of one or more commands specified by the agent or may be configured to perform the one or more operations as a result of a combination of external commands and commands specified by the agent. For example the agent may execute a secure execution environment operation to install a bootloader which may in turn be configured to locate and or instantiate the applications and or data to be installed within the secure execution environment by the bootloader.

As described herein a bootloader is an application process module or other entity configured to locate and instantiate executable code and or data within a computer system. The agent may first receive the bootloader may then decrypt the bootloader if it had been previously encrypted and may finally verify the bootloader using one or more measurements of the bootloader. In some embodiments the agent may be configured to provide measurements of the bootloader once it has been instantiated within the secure execution environment by pausing and or otherwise freezing the secure execution environment and obtaining one or more measurements from specialized instructions running on the host CPU which may in turn be verified within the secure execution environment or may be sent outside the secure execution environment in encrypted form to be stored and or validated. In some embodiments the agent may implement the bootloader functionality itself i.e. be the same application as the bootloader . As used herein and unless otherwise made clear from context the terms agent and bootloader may be used interchangeably to describe an application process module or other entity configured to locate and instantiate executable code and or data within a secure execution environment operating on a computer system. In some embodiments the agent bootloader functionality may be instantiated within the secure execution environment upon instantiation of the secure execution environment.

The applications and or data to be installed within the secure execution environment by the bootloader may include any applications and or data as may be required by the customer. In the example illustrated in the applications and data may include elements such as computer system operational elements to instantiate computer system service functionality within the secure execution environment. For example a customer may require functionality to store a collection of cryptographic keys within the secure execution environment relating to access to certain encrypted data stored within the computer system. The bootloader may instantiate an application to receive requests for new keys store keys within a file remove keys from the file and to provide encrypted copies of those cryptographic keys to authorized users. The bootloader may also instantiate a file of preloaded keys that may be stored within the secure execution environment and may only be sent outside the secure execution environment using an encryption schema that may only be decrypted by a user with proper credentials as associated with the secure execution environment. The cryptographic keys may remain safe from being intercepted by any other entity within the computer system thus ensuring the security of the certain encrypted data. The cryptographic keys may be used to secure memory writes to memory within the secure execution environment so that the memory is not readable by any entity outside of the secure execution environment. Private cryptographic keys may be protected by i.e. stored within the secure execution environment and may have corresponding public cryptographic keys that may be made available outside of the secure execution environment. Data may then be encrypted outside of the secure execution environment using the public cryptographic key and decrypted within the secure execution environment using the private cryptographic key. A bootloader may also install more complicated applications and data within the secure execution environment including entire virtual computer system instances. In some embodiments a secure execution environment may be created with a virtual computer system instance preloaded and configured to run.

Applications and or data installed in a secure execution environment may also include applications to provide access to and or to process other types of sensitive data. For example applications may be installed to emulate hardware provide network connections provide access to restricted data types provide other encryption methodologies and or other application types. Such applications may be instantiated in secure execution environments using typical installation methods as described herein or as instantiated as device drivers or as kernel modules or as virtual hardware and or other instantiation methods. Applications may be migrated from controlling domains or from a host operating system or from secured computer system domains or from combinations of these and or other locations. Applications may also be converted to secure execution environment versions by altering one or more aspects of the application. For example an payment processing application running as a web service on a computer system such as a computer system provided by a computing resource service provider may be converted to run as a secured service within a secure execution environment by first suspending the application then measuring the application then converting the application to enable access to secure execution environment functionality then encrypting the application then migrating the application to the secure execution environment and finally by decrypting and restoring the application to run within the secure execution environment. A web service application may be an application that is configured to run within a computing resource service provider environment and that is configured to provide services to one or more client applications using an interface such as a web interface of a network such as the Internet.

In some embodiments the bootloader installed by the secure execution environment operation to install a bootloader may be configured to locate and install one or more computer system operational elements. As used herein the term computer system operational elements may refer to computer system applications computer system data computer system data associated with computer system applications programs modules sets of executable instructions or combinations of these and or other elements. In some embodiments the bootloader may be a separate application from the agent . In some embodiments the bootloader may be the same application as the agent .

The agent and or the bootloader may be further configured to perform one or more secure execution environment operations to locate and obtain computer system operational elements . The computer system operational elements may be obtained from a computer system repository which may contain a plurality of such computer system operational elements. In some embodiments the computer system operational elements may be obtained as a single block of data which may specify the computer system. In some embodiments the computer system operational elements may be obtained as a plurality of blocks of data each block of data specifying one or more parts of the computer system such as data applications drivers network connections resource requirements policies and or other computer system operational elements. In some embodiments the computer system operational elements may be retrieved from the computer system repository in response to receiving one or more commands. The one or more commands may be issued by the agent the bootloader or another entity. The one or more commands may be issued as webservice commands API calls library calls or another command methodology.

Retrieving the computer system operational elements from the computer system repository may include retrieving computer system images e.g. kernel images directly or using a bootloader as described herein. The computer system operational elements may include computer system images which may include a secure execution environment or may include computer system images which may be configured to create a secure execution environment. The computer system operational elements may include specifications for processes configured to create a secure execution environment using for example a device driver and or or a kernel module. As may be contemplated the types of computer system operational elements as described herein the methods for retrieving those computer system operational elements as described herein and the locations that those computer system operational elements are retrieved from as described herein are illustrative examples and other types of computer system operational elements methods for retrieving those computer system operational elements and the locations that those computer system operational elements are retrieved from may be considered as within the scope of the present disclosure.

In some embodiments the computer system operational elements may be encrypted. In such embodiments the agent and or the bootloader may be configured to perform one or more operations to decrypt the computer system operational elements to produce the decrypted computer system operational elements . Finally the agent and or the bootloader may be configured to perform one or more operations to run one or more applications associated with the computer system . In some embodiments the bootloader may execute a command instructing the computer system to run thereby starting the one or more applications associated with the computer system .

A compute service may receive a command to create a secure execution environment . The secure execution environment may be created as described herein and if successfully created the one or more keys associated with the secure execution environment may be used to install an agent such as the agent described herein in connection with and in accordance with an embodiment. After the agent is installed the compute service may cause one or more operations to be performed within the secure execution environment to determine whether the agent is valid . In some embodiments the one or more operations may include one or more operations to provide one or more measurements of the contents of the secure execution environment. If the secure execution environment is not successfully created installed executed and validated the compute service and or the agent may in some embodiments enter an error state which may be reported to one or more users services processes and or other computer system entities. In some embodiments the validity of the secure execution environment may be measured at one or more points during the secure execution environment instantiation process illustrated in . For example the secure execution environment validity may be measured after instantiation installation of the agent installation of other applications and or at other times during instantiation.

If the agent is successfully created validated and is running the agent may then install and verify a bootloader . Computer system operational elements may then be obtained by the bootloader to instantiate applications and or data within the secure execution environment. If the bootloader is not successfully verified the agent may enter an error state which may be reported to one or more users services processes and or other computer system entities. The bootloader may then determine whether the computer system operational elements are encrypted and if so the computer system operational elements may be decrypted . Finally the bootloader may execute the computer system by for example starting one or more applications within the secure execution environment. In some embodiments the agent and or the bootloader may continue to obtain computer system operational elements and if encrypted the computer system operational elements may be decrypted before causing them to execute. This process may continue until the computer system elements are completely instantiated.

After the computer system operational elements have been verified the computer system operational elements may be installed in the secure execution environment . The installed computer system operational elements may then be verified by a verifier by for example comparing one or more measurements to one or more of the measurements obtained by the verifier to one or more measurements obtained from the secure execution environment . In some embodiments the secure execution environment may be verified as a unit. In some embodiments only the installed computer system operational elements may be verified. In some embodiments the secure execution environment and or one or more applications running thereon may be paused before verification. In some embodiments the verifier and the verifier may be the same entity.

If the credentials are verified the user may be considered a trusted user . A trusted user may have access to further secure execution environment functionality as described herein. The trusted user may then use secure execution environment functionality to request access to key services from the secure execution environment . If the access to key services is granted the trusted user may then use the key services . The key services may include access to keys associated with the secure execution environment or may include access to keys associated with applications and or data within a secure execution environment or may include access to other keys. For example key services may be configured to provide an encrypted cryptographic key to the trusted user such that the encrypted cryptographic key may only be decrypted by a trusted user. Data may then be sent from the secure execution environment in an encrypted form which may only be decrypted with the cryptographic key. Such encrypted data may be safely transported outside of the secure execution environment while still remaining secure from other entities as only a trusted user may decrypt the cryptographic key and thus only a trusted user may decrypt the encrypted data.

Measurements e.g. the encrypted measure may be evaluated within the secure execution environment or may be sent outside of the secure execution environment. A secure execution environment may be configured such that measurements are performed entirely within a secure portion of the CPU and may also be configured so that the measurements are signed by secret material provided by the CPU such as for example by microcode running on the CPU. In this way measurements may be verified as correct by users using functionality provided in association with the secure execution environment. Measurements may be verified by for example an API which may provide information usable to determine the state of a processor wherein such information may be cryptographically verified as having been validated by a trusted entity such as the processor a trusted platform module or other trusted entity. In some embodiments a measurement may be unique to the version of the microcode. In some embodiments a measurement may be based at least in part on a per processor key which may specify a certificate. The measurement and or the results of the measurements may be provided to requestors or customers as a validation certificate a key an attestation or some other such method. An example of a validation certificate is an X.509 certificate i.e. a certificate based on the X.509 standard although a validation certificate may be of any form that includes a collection of signed data that may be used for validation purposes. For example a validation certificate associated with a secure execution environment may be created based on the measurements and sent to the customer so that the customer may verify secure execution environment operations. The validation certificate may be made publicly available i.e. provided to any entity that requests it or may be made only to trusted entities. In some embodiments the certificate may be based at least in part on a common parent such as for example a certificate from a computer system a computer system environment a computer system provider and or other common parent. The results may be sent outside the secure execution environment by first encrypting the results using an encryption key generated within the secure execution environment and then by sending the one or more encrypted results to the customer or to a data store or to a database or to a service such as a webservice or to another storage location.

An agent may provide one or more measurements to validate the secure execution environment and the contents of the secure execution environment. These measurements may be based at least in part on measurements obtained from the host computer system hardware such as for example measurements obtained from the SGX instructions running on the CPU or instructions obtained from a TPM. The secure execution environment may be more accurately measured if the secure execution environment has been paused or frozen. A secure execution environment may be paused or frozen by halting the execution of applications running within the secure execution environment and or by placing those applications in a certain determined state. Pausing and or freezing applications and or placing them in a certain determined state may allow external verification that a secure execution environment has not been tampered with by for example comparing the measurements to some known values. Measurements may in some embodiments include verification and or validation that the measurement functionality was performed by a trusted verified and or validated source. For example measurements performed by Intel SGX instructions running on an Intel CPU may be verified as coming from a genuine Intel processor and may be signed by that processor as genuine with the signature being verifiable as such. Measurements coming from a TPM may include a similar verifiable signature of the measurements with an assurance that the measurements were performed by the TPM and or a process running thereon.

An agent may receive a command to obtain one or more measurements of the contents of a secure execution environment. If the command was not sent by a valid sender the agent may enter an error state which may be entered and reported to one or more users services processes and or other computer system entities. If the command was sent by a valid sender the agent may set the state of the of the secure execution environment such as for example by pausing the secure execution environment and or setting one or more application states for applications within the secure execution environment and may then obtain one or more measurements of the contents of the secure execution environment such as the measurements described herein in connection with . The state of the secure execution environment may then be restored . It may next be determined whether to sign the measure and if so the measure may be signed . In some embodiments it may also be determined whether to send the measure or the signed measure outside of the secure execution environment and if so the measure may be sent before terminating the processing of the command .

An agent may receive a command to suspend of the contents of a secure execution environment. If the command was not sent by a valid sender the agent may in some embodiments enter an error state which may be reported to one or more users services processes and or other computer system entities. If the command was sent by a valid sender the agent may first suspend execution of the contents of the secure execution environment and may then obtain one or more measurements of the contents of the secure execution environment such as the measurements described herein in connection with . The agent may then encrypt the secure execution environment contents sign the measurement and store the encrypted secure execution environment contents and measurement as described herein in connection with and in accordance with an embodiment. If the encrypted secure execution environment contents and measurement are not successfully stored the agent may in some embodiments enter an error state which may be reported to one or more users services processes and or other computer system entities. If the encrypted secure execution environment contents and measurement are successfully stored the agent may in some embodiments enter an success state which may be reported to one or more users services processes and or other computer system entities.

An agent may receive a command to restore of the contents of a suspended encrypted and stored secure execution environment. If the command was not sent by a valid sender the agent may in some embodiments enter an error state which may be reported to one or more users services processes and or other computer system entities. If the command was sent by a valid sender the agent may first attempt to locate the encrypted secure execution environment contents and the measurement which may in some embodiments be stored in an external storage location such as the external storage location described herein in connection with and in accordance with an embodiment. If the encrypted secure execution environment contents and measurement are not located the agent may in some embodiments enter an error state which may be reported to one or more users services processes and or other computer system entities.

If the encrypted secure execution environment contents and measurement are located the agent may first decrypt the secure execution environment contents may then validate the measurement and may finally try to validate that the secure execution environment contents are in the same state as when the secure execution environment contents were suspended . If the secure execution environment contents are not in the same state as when the secure execution environment contents were suspended it may be an indication that the secure execution environment contents may have been tampered with during storage. If the agent is not able to validate that the secure execution environment contents are in the same state as when the secure execution environment contents were suspended the agent may in some embodiments enter an error state which may be reported to one or more users services processes and or other computer system entities. If the agent is able to validate that the secure execution environment contents are in the same state as when the secure execution environment contents were suspended the agent may resume the secure execution environment by for example resuming one or more applications within the secure execution environment. The agent may then in some embodiments enter a success state which may be reported to one or more users services processes and or other computer system entities.

The environment which may be a computing resource service provider environment may be configured to provide various computing resource services to its customers individually or in a combination of services as a distributed computer system. The services provided by the computing resource service provider may include services such as virtual computer system services block level data storage services cryptography services on demand data storage services notification services authentication services policy management services task services and or other such services. Not all embodiments described herein include all the services described and additional services may be provided in addition to or as an alternative to services explicitly described herein.

In some embodiments the services provided by a computing resource service provider may include one or more interfaces that enable the customer to submit requests via for example appropriately configured API calls to the services. In addition each of the services may include one or more service interfaces that enable the services to access each other e.g. to enable a virtual computer system of the virtual computer system service to store data in or retrieve data from the on demand data storage service and or to access one or more block level data storage devices provided by the block level data storage service . Each of the service interfaces may also provide secured and or protected access to each other via encryption keys and or other such secured and or protected access methods thereby enabling secure and or protected access between them. Collections of services operating in concert as a distributed computer system may have a single front end interface and or multiple interfaces between the elements of the distributed computer system.

As an example a computing resource service provider may provide access to computer systems using a service such as a virtual computer system service that may be a collection of computer resources configured to instantiate VM instances on behalf of a customer. The customer may interact with the virtual computer system service to provision place and operate VM instances that are instantiated on physical computer devices hosted and operated by the computing resource service provider. The VM instances may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as compute power for the customer. Other applications for the VM instances may be to support database applications electronic commerce applications business applications and or other applications. In some embodiments access to computer systems may be provided to a customer by using a system or service that does not employ virtualization or instantiation and instead provisions computer resources on dedicated or shared computers servers and or other physical devices.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

