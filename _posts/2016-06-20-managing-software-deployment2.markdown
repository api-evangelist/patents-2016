---

title: Managing software deployment
abstract: The method includes identifying an instance of software installed. The method further includes determining a fingerprint corresponding to the instance of software installed. The method further includes determining a security risk associated with the instance of software installed. The method further includes identifying a software management policy for the instance of software based upon the fingerprint, security risk, and designated purpose of the computing device. In one embodiment, the method further includes in response to identifying the software management policy, enforcing, by one or more computer processors, the software management policy on the instance of software installed on the computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542539&OS=09542539&RS=09542539
owner: International Business Machines Corporation
number: 09542539
owner_city: Armonk
owner_country: US
publication_date: 20160620
---
The present invention relates generally to the field of software management and more particularly to evaluating software and implementing policy on a computing device that utilizes a software management service.

A software management system or a package management system is a collection of software tools that automate the process of installing upgrading configuring and removing software packages that are installed on a computer in a consistent manner. A software management system typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites.

Packages are distributions of software applications and data. Packages also contain metadata such as the software s name description of the software s purpose version number vendor checksum and a list of dependencies necessary for software to run properly. Upon installation of a package the corresponding metadata is stored in a local package database. Packages are often downloaded from a software repository which is a storage location from which the package may be retrieved and installed on a computer.

Embodiments of the present invention disclose a method computer program product a service and system for managing software on one or more computing devices. In one embodiment in accordance with the present invention the computer implemented method includes identifying an instance of software installed on a computing device. The method further includes determining a fingerprint corresponding to the instance of software installed on a computing device. The method further includes determining a security risk associated with the instance of software installed on a computing device. The method further includes identifying a software management policy for the instance of software based at least in part on the determined fingerprint the determined security risk associated with the instance of software and a designated purpose of the computing device. In one embodiment the method further includes in response to identifying the software management policy enforcing by one or more computer processors the software management policy on the instance of software installed on the computing device.

Embodiments of the present invention recognize that methods for managing the software inventory on workstations are limited in a number of ways. A software inventory can range from a singular piece of software located on a device to all software on a network. In an enterprise context where users retain privileged access to their workstation it may be convenient to define one or more standard repositories for obtaining trusted software but not enforceable because users still retain privileged access to their workstation thereby enabling them to download software not located in a standard repository. A falsely high level of confidence in packages published in the same repository may be a downside if software is deemed secure based on source location alone. When an emergency scenario occurs and the risk of installing and using an unknown version of software may be justified a binary view of suitability of software source location may not be suitable. Software with a valid checksum or signed by a reputable entity may present an unanticipated risk if the software creator or publisher is compromised. What is needed is a more flexible method for managing a secure software inventory in balance with real world requirements.

The present invention will now be described in detail with reference to the Figures. is a functional block diagram illustrating a distributed data processing environment generally designated in accordance with one embodiment of the present invention.

Distributed data processing environment includes server computer and client computers software repository server and policy testing server all interconnected over network . Any of the components of the present invention could be deployed managed serviced etc. by a service provider who offers software management.

In general network can be any combination of connections and protocols that will support communications between server computer client computers software repository server and policy testing server in accordance with embodiments of the present invention. Network can include for example a local area network LAN a wide area network WAN such as the Internet a cellular network or any combination of the preceding and can further include wired wireless and or fiber optic connections.

In example embodiments server computer may be a desktop computer a laptop computer a tablet computer a specialized computer server a smartphone a gaming system or any other computer system known in the art. In certain embodiments server computer represents a computer system utilizing clustered computers and components e.g. database server computers application server computers etc. that act as a single pool of seamless resources when accessed through network as is common in data centers and with cloud computing applications. In general server computer is representative of any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instruction and communicating with client computers software repository server and policy testing server via network . Exemplary components of server computer are described in greater detail with regard to .

In various embodiments of the present invention client computers and may be a desktop computer a laptop computer a tablet computer a specialized computer server a smartphone a gaming system or any other computer system known in the art. In certain embodiments client computers and represent a computer system utilizing clustered computers and components e.g. database server computers application server computers etc. that act as a single pool of seamless resources when accessed through network as is common in data centers and with cloud computing applications. In general client computers and are representative of any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instruction and communicating with server computer software repository server and policy testing server via network . Exemplary components of client computers and are described in greater detail with regard to .

Software repository server may be a desktop computer a laptop computer a tablet computer a specialized computer server a smartphone a gaming system or any other computer system known in the art. In certain embodiments software repository server represents a computer system utilizing clustered computers and components that act as a single pool of seamless resources when accessed through network as is common in data centers and with cloud computing applications. In general software repository server is representative of any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with client computers server computer and policy testing server via network . Exemplary components of software repository server are described in greater detail with regard to .

In various embodiments of the present invention policy testing server may be a desktop computer a laptop computer a tablet computer a specialized computer server a smartphone a gaming system or any other computer system known in the art. In certain embodiments policy testing server represents a computer system utilizing clustered computers and components e.g. database server computers application server computers etc. that act as a single pool of seamless resources when accessed through network as is common in data centers and with cloud computing applications. In general policy testing server is representative of any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with client computers software repository server and server computer via network . In another embodiment policy testing server may be representative of an environment that includes a plurality of computing devices that can be used to test new policy. In one example the policy may be to remove software and a test could determine how that would affect a workstation. Policy testing program is located on policy testing server . Policy testing program is a test program in which implementations of software inventory program can be simulated prior to deployment on a client computer. Exemplary components of policy testing server are described in greater detail with regard to .

Endpoint management service resides on server computer and facilitates communications with client computers and . Client endpoint management service is located on client computer and identifies and sends communications in response to a request to download software on client computer to endpoint management service located on server computer . In one embodiment server computer is a server computer system accessible to a plurality of users of endpoint management service e.g. client computers and . In such an embodiment user interface may be a Web based user interface accessible to users of each respective client computer via network . For example server computer receives a notification that client computer is requesting a download of software package from software repository server . Server computer can receive the notification by way of any suitable network e.g. network . In various embodiments server computer can display information to a user of server computer via user interface . In some embodiments a user of server computer can input instructions to server computer via user interface .

Inventory management policy repository can be implemented with any type of storage device for example persistent storage which is capable of storing data that can be accessed for use by client computers and policy testing server and server computer such as a database server a hard disk drive or a flash memory. In other embodiments inventory management policy repository can represent multiple storage devices within server computer .

Software inventory program resides on server computer and facilitates maintenance of inventory management policy repository as well as the distribution of information in software repository server and client computers and . Client software inventory program resides on client computer and communicates with software inventory program located on server computer . Software inventory program monitors requests sent to endpoint management service e.g. client computer attempting to download new software . In one embodiment software inventory program includes security intelligence program software package risk analysis SPRA program intrusion detection system IDS and intrusion prevention system IPS program definition program and policy program . The aforementioned programs generate the fingerprint of the software as well as the risk score which can be stored in inventory management policy repository . A risk score could also be referred to as a security risk associated with an instance of software. In another embodiment security intelligence program SPRA program and IDS and IPS program may be independent programs that communicate with software inventory program . In example embodiments definition program generates the fingerprint and risk score for software package and then stores the information in inventory management policy repository for use by policy program . Policy program determines if other client computers e.g. client computers or other client computers not shown in the environment contain software similar to software package and implements a determined policy on client computer as well as other client computers with similar software.

As depicted software inventory program is a subprogram or routine of endpoint management service . In an alternative embodiment software inventory program may be independent of endpoint management service and capable of communicating with endpoint management service and inventory management policy repository . In some embodiments software inventory program may monitor attempted downloads on multiple endpoint management services to identify additional software packages and store the additional information in inventory management policy repository .

In one embodiment security intelligence program serves as a risk advisory program. As an environment changes and evolves the specific applicability of information on a vulnerability list of security intelligence program regarding software package changes accordingly. An example of a vulnerability list would be known software packages that contain risks to a computing device. In one embodiment the vulnerability list is created by security intelligence program . Additionally SPRA program compares the vulnerability threat against the business needs of the use of software package . In one embodiment SPRA program may identify vulnerabilities in software packages. The discovery of a new vulnerability combined with information about the vulnerability modifies the risk. IDS and IPS program may indicate real time exploits of a known or unknown vulnerability and then adjust the risk level associated with software package accordingly.

Software repository program located on software repository server is a program from which client computers and can install software such as software package . In another embodiment software repository program could be a site that publishes software to be downloaded in a fashion de coupled from how it is installed. In example embodiments software package can be a word processing program a patch for a computer operating system a video game or any other software update program or code that is capable of being implemented on client computer .

Definition program receives a notification from an endpoint about an attempt to change the software inventory step . In an embodiment definition program receives a notification from client computer that a user is attempting to download software package . Changes to the software inventory may comprise attempts to download new software packages patches files etc. Changes may also comprise software from disks externals drive and may also comprise programs written on client computer .

In an embodiment a user of client computer requests to download software package from software repository server . In one embodiment client software inventory program located on client computer sends a notification to definition program . In another embodiment client software inventory program determines that a user of client computer is attempting to download software package . Client software inventory program notifies client endpoint management service . Client endpoint management service then sends a notification to endpoint management service . In one embodiment definition program utilizes the received notification which can include metadata pertaining to program origin code type or any other identifying characteristics of software package known in the art. In another embodiment the received notification provides definition program with an indication of an attempted change in the software inventory of client computer . In yet another embodiment software inventory program performs a scan of client computer for software that was not present during the last scan. The software scan can be performed at regular intervals such as weekly daily hourly or in real time. Additional on demand triggers could also be performed such as a newly discovered security risk that should be addressed immediately.

Definition program determines whether a fingerprint exists for software package which will change the software inventory of client computer decision . In one embodiment metadata associated with software package can indicate a fingerprint was generated previously by definition program . A fingerprint is an individual description of software that has been created for the specific instance of software. In another embodiment definition program determines if software package has an existing associated fingerprint stored in inventory management policy repository .

Responsive to determining that no fingerprint is associated with software package no branch decision definition program generates a fingerprint corresponding to a proposed change to the software inventory on client computer step . In an embodiment definition program queries client computer to generate the fingerprint of software package . In another embodiment definition program can download software package on server computer to generate the fingerprint. In yet another embodiment definition program queries software repository server to generate a fingerprint. In an example embodiment definition program generates the fingerprint based on a set of attributes for example using an existing algorithm such as a simple checksum expected cryptographic signature or a more complex combination of attributes that encompass the uniqueness of the software such as a hash of attributes of files in the software package stated software version and source location from where software is currently found. In an example source location for open source freeware can be multiple different sites and repositories accessed via the Internet. In various embodiments of the invention definition program can utilize a collection of all the aforementioned fingerprinting techniques when determining software fingerprints.

In response to definition program determining that a fingerprint has already been generated for software package yes branch decision or generating a fingerprint step definition program determines if a risk score is known for software package decision . In an embodiment metadata is associated with software package that indicates that a risk score has previously been generated by definition program . In another embodiment definition program determines if software package already has an associated risk score stored in inventory management policy repository .

In response to determining that no risk score is associated with software package no branch decision definition program generates a risk score for software package step . Risk rating level is a dynamic factor which in certain embodiments indicates the necessity of the software to a business the type of software package e.g. open source freeware trial software and community or enterprise versions of the same software package. In certain embodiments definition program also determines the source licensing for open source or personal distribution software the number of components within a software package any known current or past vulnerabilities associated with the components and the known current or past evidence of a vulnerability. In an embodiment the risk score may also take into account the aggregate risk score for all software deployed on a workstation. In an example a work station with a low overall risk score can download a high risk package in an emergency. Conversely if the overall risk score for the workstation is high because of other high or medium risk software packages located on the workstation the workstation cannot download the software package. In an embodiment when determining a risk score definition program identifies the security of software package . In an example definition program performs a risk evaluation utilizing security intelligence program that allocates a rating number towards a final risk score. Security intelligence program serves as a source of risk advisory information so that as environment changes over time the specific applicability of a vulnerability list corresponding to software package changes also.

In one embodiment the criticality of the risk score is normalized against the business criticality of the use of software package by SPRA program . In an example SPRA program may assign a risk score number that is used to generate the final risk score. In another example SPRA program identifies vulnerabilities in software package new or known and combines all generated characteristics to calculate a risk score. In another embodiment IDS and IPS program indicates real time exploits of a known or unknown vulnerability of a given software package and provides this as input to the risk score calculation and value associated with software package . In one embodiment definition program adds all risk scores from security intelligence program SPRA program IDS and IPS program and various other programs to generate a final risk score associated with software package . In an alternate embodiment security intelligence program SPRA program and IDS and IPS program may be independent programs that send and receive information to and from definition program located on server computer .

In response to determining if a risk score is already known yes branch decision or determining a risk score step definition program stores the risk score and fingerprint for software package in inventory management policy repository step . In one embodiment a software fingerprint or risk score is stored in inventory management policy repository by the date that the fingerprint or risk score was calculated. In another embodiment software fingerprints and risk scores are stored in inventory management policy repository by type size or likelihood of use. In yet another embodiment risk scores and fingerprints can be stored together along with other defining characteristics of software package . In an embodiment when definition program generates and stores a new fingerprint and risk score in inventory management policy repository software inventory program initiates policy program .

Policy program accesses inventory management policy repository to identify the risk score and the fingerprint of software package step . In an embodiment policy program accesses inventory management policy repository when a risk score is generated and stored in inventory management policy repository and identifies the fingerprint associated with the risk score. In another embodiment policy program identifies similar fingerprints located in inventory management policy repository when a new risk score and fingerprint is stored. In yet another embodiment policy program accesses inventory management policy repository when either a risk score or fingerprint is stored. In one embodiment policy program accesses inventory management policy repository at preset intervals to locate new fingerprints or risk scores. In another embodiment policy program accesses the inventory any time the software inventory is changed on client computer .

Policy program identifies endpoints with similar fingerprints to software package step . In one embodiment policy program queries client computers and to identify software with similar fingerprints to software package located on client computers and . In one embodiment the risk score of software package will be associated with the identified software on client computers and . In another embodiment policy program identifies fingerprints similar to software package stored in inventory management policy repository . In an example the identified fingerprints may have metadata that connects the identified fingerprints to the client computer for which the identified fingerprints were generated thereby identifying the endpoint with a similar fingerprint. In an embodiment a software inventory of client computer may include pointers to the fingerprints and risk scores for each individual package that is deployed on a given workstation. In another embodiment software inventory program can store a risk score that was generated at the time the software was deployed in inventory management policy repository which allows for a change in the risk score to be reflected in the cumulative aggregate risk score for the software packages deployed on a given workstation. In an embodiment policy program identifies similar fingerprints in inventory management policy repository . Policy program then queries client computers and to determine if software fingerprints are located on the computers similar to the identified software fingerprints from inventory management policy repository . Examples of software with similar fingerprints include but are not limited to the same program downloaded from a site other than the approved site software intended to only be deployed on an Internet facing device but is deployed on an Internet facing device software could be the same program but different major minor release software could be trial version versus licensed version etc. If no endpoints containing a similar fingerprint to software package are located policy program progresses with software package and client computer alone.

Policy program identifies the permissible actions to take for located endpoints that contain similar fingerprints to software package as well as client computer step . In an embodiment permissible actions include freedom to change the software inventory depending on the specific job of a user of a client computer software that is only applicable for a certain group or division of users or limitations based on the client computer. In one embodiment the permissible actions are based on credentials of a user and the credential of a computer. In an embodiment policy program accesses inventory management policy repository to identify permissible actions each endpoint may take according to previously provided client computer information metadata associated with fingerprints or a list of permissible actions for each endpoint under endpoint management service . In another embodiment policy program queries an endpoint e.g. client computer to determine permissible actions that may have been set by client endpoint management service . In one embodiment once permissible actions have been identified policy program may store the permissible actions in inventory management policy repository along with the risk score of software package .

Policy program determines the policy for the located endpoints with similar fingerprints to software package as well as for client computer step . In an embodiment the identified endpoints from step as well as client computer may have different permissible actions for each instance of software. In an example a first employee is allowed to have any package of software on the computer as opposed to a second employee that needs approval for software. In such a case the first employee would be able to have software with the maximum risk score where the second employee would have a threshold risk score that may prevent the second employee from having the same software on the second employee s computer. In certain embodiments the range of actions for a policy that may be determined include allowing software to run without restrictions uninstalling software because an instance with this fingerprint is suspected to contain malware scheduling uninstallation of software after a period of time because the fingerprint was unknown but comes from a location that is generally trusted uninstalling unless the software is being installed into a one time use privileged admin virtual workstation or other risk reducing containerization or updating software to version known to have an acceptable risk score. In one embodiment certain actions may be generated for a cyber security team to subsequently analyze the version of software decide on a revised action and update inventory management policy repository . In an embodiment compartmentalization of software package is determined from a variety of means such as application programming interface calls or knowing that workstations in a particular IP address range are virtual desktops. In another embodiment audit events are generated for later use by cyber teams for actions related to new software. In an embodiment a default action may also be required defining policy or being hard coded into software inventory program e.g. permit all or uninstall all . Policy program determines the policy for the endpoints as well as client computer based on the specific computers allowable actions as pertaining to the risk score of the instance of software.

Policy program enforces the determined policy from step on the endpoints with similar fingerprints to software package as well as client computer step . In an embodiment policy program sends a notification to client endpoint management service located on client computers and to enforce the policy that was determined in step on each individual client computer. In one embodiment policy program actively enforces the determined policy on the identified endpoints. In this embodiment server computer logs onto client computer and enforces policy. In another embodiment policy program stores the policy for software identified in step with instruction for client endpoint management service . In this embodiment a subsequent time an endpoint queries endpoint management service endpoint management service can send the instructions on management policy to the endpoint.

In an example embodiment software inventory program receives a notification that client computer with client endpoint management service is attempting to install software package on client computer step . In this example software inventory program determines a fingerprint and risk score if none was previously associated with the instance of software that is creating the change such as software package steps and . Further software inventory program stores these determinations in inventory management policy repository step . Software inventory program then identifies that client computers and have instances of software with similar fingerprints step . The risk score determined for software package becomes associated with the software on client computers and with the similar fingerprint. Once the instances of software with similar fingerprints have been located and assigned with the risk score of software package software inventory program identifies permissible actions for client computers and step . The permissible actions are determined based on the purpose of the client computers and employee clearance associated with the users of client computers and and the cumulative aggregate risk score of all currently deployed software packages on each client computer. Software inventory program then determines what policy will be implemented on client computers and step . This determination is made by weighing the possible actions against the risk score that was determined. The policies can range from preventing a change on any or all client computers to complete allowance by any or all client computers. Once the policy is determined an enforcement of the policy takes place on the endpoints directed by server computer step . Software inventory program sends a notification to client endpoint management service located on client computer which then implements the policy on client computer . Subsequently the policy is implemented on policy testing server to determine if there are any unforeseen issues that may arise on client computers and .

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator could offer to software management. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

Computer includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media. Software and data are stored in persistent storage for access and or execution by processor s via one or more memories of memory . With respect to client computers and software and data represents client endpoint management service and client software inventory program . With respect to server computer software and data represents endpoint management service software inventory program definition program policy program security intelligence program SPRA IDS and IPS program inventory management policy repository and UI .

In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device a read only memory ROM an erasable programmable read only memory EPROM a flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Software and data may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to computer . For example I O interface s may provide a connection to external device s such as a keyboard a keypad a touch screen and or some other suitable input device. External device s can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The present invention may be a system a method a service and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

